{"entries":[{"timestamp":1726767500997,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"\">di"],[-1,"gits</variable><variable id=\"./nL(G$0]u{nR7+5=dfp\">sockLights</variable><variable id=\"ouHu$c/%[(e^+9e2l%}}\">wheelLights</variable><variable id=\"=Zyn8:`L4~NF(E-0zy[1\">scoreCircle"],[1,"splay"],[0,"</va"]],"start1":100,"start2":100,"length1":185,"length2":13},{"diffs":[[0,"x=\"1"],[-1,"641"],[1,"589"],[0,"\" y=\"-"],[-1,"334"],[1,"283"],[0,"\"><m"]],"start1":166,"start2":166,"length1":20,"length2":20},{"diffs":[[0," x=\""],[-1,"32"],[1,"0"],[0,"\" y=\""],[-1,"53"],[1,"0"],[0,"\"><s"]],"start1":4371,"start2":4371,"length1":17,"length2":15},{"diffs":[[0,"_APV$c,CocLe\">di"],[-1,"gits"],[1,"splay"],[0,"</field><value n"]],"start1":4911,"start2":4911,"length1":36,"length2":37},{"diffs":[[0,"_APV$c,CocLe\">di"],[-1,"gits"],[1,"splay"],[0,"</field></block>"]],"start1":5281,"start2":5281,"length1":36,"length2":37},{"diffs":[[0,"ue><"],[-1,"next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"grove_tm1637_display_number\"><value name=\"display\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Bw[^MHQ!_APV$c,CocLe\">digits</field></block></value><value name=\"num\"><shadow type=\"math_number\"><field name=\"NUM\">314</field></shadow><block type=\"apds9960_readcolor\"></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"./nL(G$0]u{nR7+5=dfp\">sockLights</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P11</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"./nL(G$0]u{nR7+5=dfp\">sockLights</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Orange</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"./nL(G$0]u{nR7+5=dfp\">sockLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"ouHu$c/%[(e^+9e2l%}}\">wheelLights</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P12</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">18</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"ouHu$c/%[(e^+9e2l%}}\">wheelLights</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Green</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"ouHu$c/%[(e^+9e2l%}}\">wheelLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"=Zyn8:`L4~NF(E-0zy[1\">scoreCircle</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P13</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"=Zyn8:`L4~NF(E-0zy[1\">scoreCircle</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Red</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"=Zyn8:`L4~NF(E-0zy[1\">scoreCircle</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"notlegos_pot_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"903\" y=\"147\"><field name=\"aPin\">AnalogPin.P1</field><next><block type=\"notlegos_mp3_ports_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"dPin\">SerialPin.P16</field></block></next></block><block type=\"Connected_onGesture\" x=\"1148\" y=\"397\"><field name=\"gesture\">Connected.GestureType.Left</field><statement name=\"HANDLER\"><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">LEFT</field></shadow></value></block></statemen"],[1,"/block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"notlegos_pot_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"903\" y=\"147\"><field name=\"aPin\">AnalogPin.P1</field><next><block type=\"notlegos_mp3_ports_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"dPin\">SerialPin.P16</field></block></nex"],[0,"t></"]],"start1":5606,"start2":5606,"length1":4085,"length2":396}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n})\n"],[-1,"Connected.onGesture(Connected.GestureType.Left, function () {\n    Connected.showUserText(1, \"LEFT\")\n})\n"],[0,"Conn"]],"start1":406,"start2":406,"length1":111,"length2":8},{"diffs":[[0,")\nlet di"],[-1,"gits"],[1,"splay"],[0," = Conne"]],"start1":496,"start2":496,"length1":20,"length2":21},{"diffs":[[0,"lPin.P6\n)\ndi"],[-1,"gits"],[1,"splay"],[0,".showNumber("]],"start1":557,"start2":557,"length1":28,"length2":29},{"diffs":[[0,"m))\n"],[-1,"basic.pause(1000)\ndigits.showNumber(Connected.readColor())\nlet sockLights = Connected.create(Connected.DigitalRJPin.P11, 8, Connected.NeoPixelMode.RGB)\nsockLights.showColor(Connected.colors(Connected.NeoPixelColors.Orange))\nsockLights.show()\nlet wheelLights = Connected.create(Connected.DigitalRJPin.P12, 18, Connected.NeoPixelMode.RGB)\nwheelLights.showColor(Connected.colors(Connected.NeoPixelColors.Green))\nwheelLights.show()\nlet scoreCircle = Connected.create(Connected.DigitalRJPin.P13, 8, Connected.NeoPixelMode.RGB)\nscoreCircle.showColor(Connected.colors(Connected.NeoPixelColors.Red))\nscoreCircle.show()\n"]],"start1":687,"start2":687,"length1":615,"length2":4}]}]},{"timestamp":1726768067366,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"t"],[1,"block"],[0,"sprj\"\n}\n"]],"start1":514,"start2":514,"length1":17,"length2":21}]}]},{"timestamp":1726768269825,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"block"],[1,"t"],[0,"sprj\"\n}\n"]],"start1":514,"start2":514,"length1":21,"length2":17}]}]},{"timestamp":1726770584884,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"=\"16"],[-1,"59"],[1,"41"],[0,"\" y=\"-"],[-1,"438"],[1,"334"],[0,"\"><m"]],"start1":339,"start2":339,"length1":19,"length2":19},{"diffs":[[0," x=\""],[-1,"372"],[1,"404"],[0,"\" y=\"-1"],[-1,"76"],[1,"23"],[0,"\"><f"]],"start1":3772,"start2":3772,"length1":20,"length2":20},{"diffs":[[0,"x=\"9"],[-1,"13"],[1,"45"],[0,"\" y=\"-1"],[-1,"76"],[1,"23"],[0,"\"><f"]],"start1":4165,"start2":4165,"length1":19,"length2":19},{"diffs":[[0," x=\""],[-1,"0"],[1,"32"],[0,"\" y=\""],[-1,"0"],[1,"53"],[0,"\"><s"]],"start1":4543,"start2":4543,"length1":15,"length2":17},{"diffs":[[0," x=\""],[-1,"871"],[1,"903"],[0,"\" y=\""],[-1,"94"],[1,"147"],[0,"\"><f"]],"start1":9206,"start2":9206,"length1":18,"length2":19},{"diffs":[[0,"=\"11"],[-1,"16"],[1,"48"],[0,"\" y=\"3"],[-1,"44"],[1,"97"],[0,"\"><f"]],"start1":9455,"start2":9455,"length1":18,"length2":18}]}]},{"timestamp":1726770587188,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"x=\"1"],[-1,"716"],[1,"659"],[0,"\" y=\"-4"],[-1,"9"],[0,"3"],[1,"8"],[0,"\"><m"]],"start1":338,"start2":338,"length1":20,"length2":20},{"diffs":[[0," x=\""],[-1,"669"],[1,"372"],[0,"\" y=\"-"],[-1,"258"],[1,"176"],[0,"\"><f"]],"start1":3772,"start2":3772,"length1":20,"length2":20},{"diffs":[[0," x=\""],[-1,"115"],[1,"0"],[0,"\" y=\""],[-1,"-112"],[1,"0"],[0,"\"><s"]],"start1":4543,"start2":4543,"length1":20,"length2":15},{"diffs":[[0,"ype."],[-1,"None"],[1,"Left"],[0,"</fi"]],"start1":9508,"start2":9508,"length1":12,"length2":12}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"}\n}\n"],[-1,"Connected.onGesture(Connected.GestureType.None, function () {\n    Connected.showUserText(1, \"LEFT\")\n})\n"],[0,"inpu"]],"start1":214,"start2":214,"length1":111,"length2":8},{"diffs":[[0,"1\"))\n})\n"],[1,"Connected.onGesture(Connected.GestureType.Left, function () {\n    Connected.showUserText(1, \"LEFT\")\n})\n"],[0,"Connecte"]],"start1":402,"start2":402,"length1":16,"length2":119}]}]},{"timestamp":1726771186516,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"ble id=\""],[-1,"?Bq|*UmN*_Y7mXuMBM:)"],[1,"Bw[^MHQ!_APV$c,CocLe"],[0,"\">digits"]],"start1":72,"start2":72,"length1":36,"length2":36},{"diffs":[[0,"ble id=\""],[-1,"1C2G89y(N~klz.D03F[9"],[1,"./nL(G$0]u{nR7+5=dfp"],[0,"\">sockLi"]],"start1":125,"start2":125,"length1":36,"length2":36},{"diffs":[[0,"ble id=\""],[-1,"j{XVDWuq}+`;8xsT}OOB"],[1,"ouHu$c/%[(e^+9e2l%}}"],[0,"\">wheelL"]],"start1":182,"start2":182,"length1":36,"length2":36},{"diffs":[[0,"ble id=\""],[-1,"|]_^`Q-_z:vS8XPpMVQo"],[1,"=Zyn8:`L4~NF(E-0zy[1"],[0,"\">scoreC"]],"start1":240,"start2":240,"length1":36,"length2":36},{"diffs":[[0,"le><"],[-1,"variable id=\"9I$~}Rs3__BJf#%!|aqr\">buf</variable><"],[0,"/var"]],"start1":289,"start2":289,"length1":58,"length2":8},{"diffs":[[0,"x=\"1"],[-1,"655"],[1,"716"],[0,"\" y=\"-4"],[1,"9"],[0,"3"],[-1,"0"],[0,"\"><m"]],"start1":338,"start2":338,"length1":20,"length2":20},{"diffs":[[0,"id=\""],[-1,"8e+^m!_Vc+bD!Na*P9:n"],[1,"B2bR4oPx2GF^@6-5vg;5"],[0,"\"><a"]],"start1":390,"start2":390,"length1":28,"length2":28},{"diffs":[[0,"ce\" id=\""],[-1,"3562fyuwzxql0ldpxn3k"],[1,"155x87cpnklngzi44iuo"],[0,"\" type=\""]],"start1":434,"start2":434,"length1":36,"length2":36},{"diffs":[[0,"ng\" id=\""],[-1,"t5ibi5p93hcugmcmhrc3"],[1,"57er02c0yihnzmi26q0e"],[0,"\" type=\""]],"start1":500,"start2":500,"length1":36,"length2":36},{"diffs":[[0,"ce\" id=\""],[-1,"rqnbe0aw0q7tg4l6u487r"],[1,"6hce4c74lggrf7yq1reei"],[0,"\" type=\""]],"start1":568,"start2":568,"length1":37,"length2":37},{"diffs":[[0,"me=\""],[-1,"3562fyuwzxql0ldpxn3k"],[1,"155x87cpnklngzi44iuo"],[0,"\"><b"]],"start1":683,"start2":683,"length1":28,"length2":28},{"diffs":[[0,"me=\""],[-1,"t5ibi5p93hcugmcmhrc3"],[1,"57er02c0yihnzmi26q0e"],[0,"\"><b"]],"start1":854,"start2":854,"length1":28,"length2":28},{"diffs":[[0,"me=\""],[-1,"rqnbe0aw0q7tg4l6u487r"],[1,"6hce4c74lggrf7yq1reei"],[0,"\"><b"]],"start1":1023,"start2":1023,"length1":29,"length2":29},{"diffs":[[0," x=\""],[-1,"554"],[1,"669"],[0,"\" y=\"-"],[-1,"146"],[1,"258"],[0,"\"><f"]],"start1":3772,"start2":3772,"length1":20,"length2":20},{"diffs":[[0," x=\""],[-1,"798"],[1,"913"],[0,"\" y=\"-"],[1,"17"],[0,"6"],[-1,"4"],[0,"\"><f"]],"start1":4164,"start2":4164,"length1":19,"length2":20},{"diffs":[[0," x=\""],[1,"11"],[0,"5"],[-1,"4"],[0,"\" y=\""],[-1,"1"],[1,"-112"],[0,"\"><s"]],"start1":4543,"start2":4543,"length1":16,"length2":20},{"diffs":[[0,"AR\" id=\""],[-1,"?Bq|*UmN*_Y7mXuMBM:)"],[1,"Bw[^MHQ!_APV$c,CocLe"],[0,"\">digits"]],"start1":5072,"start2":5072,"length1":36,"length2":36},{"diffs":[[0,"AR\" id=\""],[-1,"?Bq|*UmN*_Y7mXuMBM:)"],[1,"Bw[^MHQ!_APV$c,CocLe"],[0,"\">digits"]],"start1":5441,"start2":5441,"length1":36,"length2":36},{"diffs":[[0,"lue name=\"num\"><"],[1,"shadow type=\"math_number\"><field name=\"NUM\">314</field></shadow><"],[0,"block type=\"sona"]],"start1":5504,"start2":5504,"length1":32,"length2":97},{"diffs":[[0,"id=\""],[-1,"?Bq|*UmN*_Y7mXuMBM:)"],[1,"Bw[^MHQ!_APV$c,CocLe"],[0,"\">di"]],"start1":6025,"start2":6025,"length1":28,"length2":28},{"diffs":[[0,"=\"num\"><"],[1,"shadow type=\"math_number\"><field name=\"NUM\">314</field></shadow><"],[0,"block ty"]],"start1":6092,"start2":6092,"length1":16,"length2":81},{"diffs":[[0,"AR\" id=\""],[-1,"1C2G89y(N~klz.D03F[9"],[1,"./nL(G$0]u{nR7+5=dfp"],[0,"\">sockLi"]],"start1":6261,"start2":6261,"length1":36,"length2":36},{"diffs":[[0,"AR\" id=\""],[-1,"1C2G89y(N~klz.D03F[9"],[1,"./nL(G$0]u{nR7+5=dfp"],[0,"\">sockLi"]],"start1":6745,"start2":6745,"length1":36,"length2":36},{"diffs":[[0,"id=\""],[-1,"1C2G89y(N~klz.D03F[9"],[1,"./nL(G$0]u{nR7+5=dfp"],[0,"\">so"]],"start1":7034,"start2":7034,"length1":28,"length2":28},{"diffs":[[0,"AR\" id=\""],[-1,"j{XVDWuq}+`;8xsT}OOB"],[1,"ouHu$c/%[(e^+9e2l%}}"],[0,"\">wheelL"]],"start1":7142,"start2":7142,"length1":36,"length2":36},{"diffs":[[0,"AR\" id=\""],[-1,"j{XVDWuq}+`;8xsT}OOB"],[1,"ouHu$c/%[(e^+9e2l%}}"],[0,"\">wheelL"]],"start1":7628,"start2":7628,"length1":36,"length2":36},{"diffs":[[0,"id=\""],[-1,"j{XVDWuq}+`;8xsT}OOB"],[1,"ouHu$c/%[(e^+9e2l%}}"],[0,"\">wh"]],"start1":7917,"start2":7917,"length1":28,"length2":28},{"diffs":[[0,"AR\" id=\""],[-1,"|]_^`Q-_z:vS8XPpMVQo"],[1,"=Zyn8:`L4~NF(E-0zy[1"],[0,"\">scoreC"]],"start1":8026,"start2":8026,"length1":36,"length2":36},{"diffs":[[0,"AR\" id=\""],[-1,"|]_^`Q-_z:vS8XPpMVQo"],[1,"=Zyn8:`L4~NF(E-0zy[1"],[0,"\">scoreC"]],"start1":8511,"start2":8511,"length1":36,"length2":36},{"diffs":[[0,"id=\""],[-1,"|]_^`Q-_z:vS8XPpMVQo"],[1,"=Zyn8:`L4~NF(E-0zy[1"],[0,"\">sc"]],"start1":8798,"start2":8798,"length1":28,"length2":28},{"diffs":[[0,"pe=\""],[-1,"every_interval"],[1,"notlegos_pot_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED"],[0,"\" x=\""],[-1,"1313"],[1,"871"],[0,"\" y=\""],[-1,"421\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">200</field></shadow></value><statement name=\"HANDLER\"><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let buf: Buffer = pins.createBuffer(1);\" numlines=\"1\" declaredvars=\"buf\"></mutation><next><block type=\"lists_index_set\"><value name=\"LIST\"><block type=\"variables_get\"><field name=\"VAR\" id=\"9I$~}Rs3__BJf#%!|aqr\">buf</field></block></value><value name=\"INDEX\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"pins.i2cWriteBuffer(0x73, buf,false)\" numlines=\"1\"></mutation><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"buf = pins.i2cReadBuffer(0x73, 1, false)\" numlines=\"1\"></mutation><next"],[1,"94\"><field name=\"aPin\">AnalogPin.P1</field><next><block type=\"notlegos_mp3_ports_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"dPin\">SerialPin.P16</field></block></next></block><block type=\"Connected_onGesture\" x=\"1116\" y=\"344\"><field name=\"gesture\">Connected.GestureType.None</field><statement name=\"HANDLER\""],[0,"><bl"]],"start1":9136,"start2":9136,"length1":997,"length2":422},{"diffs":[[0,"User"],[-1,"Number"],[1,"Text"],[0,"\"><v"]],"start1":9582,"start2":9582,"length1":14,"length2":12},{"diffs":[[0," max=\"8\""],[1," label=\"Line\""],[0," precisi"]],"start1":9662,"start2":9662,"length1":16,"length2":29},{"diffs":[[0,"SLIDER\">"],[-1,"2"],[1,"1"],[0,"</field>"]],"start1":9722,"start2":9722,"length1":17,"length2":17},{"diffs":[[0,"me=\""],[-1,"n\"><block type=\"lists_index_get\"><value name=\"LIST\"><block type=\"variables_get\"><field name=\"VAR\" id=\"9I$~}Rs3__BJf#%!|aqr\">buf</field></block></value><value name=\"INDEX"],[1,"text"],[0,"\"><s"]],"start1":9765,"start2":9765,"length1":177,"length2":12},{"diffs":[[0,"hadow type=\""],[-1,"math_number"],[1,"text"],[0,"\"><field nam"]],"start1":9777,"start2":9777,"length1":35,"length2":28},{"diffs":[[0,"t\"><field name=\""],[-1,"NUM\">0"],[1,"TEXT\">LEFT"],[0,"</field></shadow"]],"start1":9792,"start2":9792,"length1":38,"length2":42},{"diffs":[[0,"k></"],[-1,"value></block></next></block></next></block></next></block></next></block></"],[0,"stat"]],"start1":9849,"start2":9849,"length1":84,"length2":8}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"    }\n}\n"],[1,"Connected.onGesture(Connected.GestureType.None, function () {\n    Connected.showUserText(1, \"LEFT\")\n})\n"],[0,"input.on"]],"start1":210,"start2":210,"length1":16,"length2":119},{"diffs":[[0,"w()\n"],[-1,"loops.everyInterval(200, function () {\n    let buf: Buffer = pins.createBuffer(1);\nbuf[0] = 0\n    pins.i2cWriteBuffer(0x73, buf,false)\nbuf = pins.i2cReadBuffer(0x73, 1, false)\nConnected.showUserNumber(2, buf[0])\n})\n"]],"start1":1399,"start2":1399,"length1":219,"length2":4}]}]},{"timestamp":1726771716705,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"\"165"],[-1,"6"],[1,"5"],[0,"\" y=\"-4"],[-1,"8"],[0,"3"],[1,"0"],[0,"\"><m"]],"start1":390,"start2":390,"length1":18,"length2":18},{"diffs":[[0,"x=\"5"],[-1,"00"],[1,"54"],[0,"\" y=\"-14"],[-1,"7"],[1,"6"],[0,"\"><f"]],"start1":3823,"start2":3823,"length1":19,"length2":19},{"diffs":[[0,"x=\"7"],[-1,"44"],[1,"98"],[0,"\" y=\"-6"],[-1,"5"],[1,"4"],[0,"\"><f"]],"start1":4215,"start2":4215,"length1":18,"length2":18},{"diffs":[[0," x=\""],[-1,"0"],[1,"54"],[0,"\" y=\""],[-1,"0"],[1,"1"],[0,"\"><s"]],"start1":4592,"start2":4592,"length1":15,"length2":16},{"diffs":[[0,"x=\"1"],[-1,"259"],[1,"313"],[0,"\" y=\"42"],[-1,"0"],[1,"1"],[0,"\"><v"]],"start1":9071,"start2":9071,"length1":19,"length2":19},{"diffs":[[0,"me=\"ms\">"],[-1,"5"],[1,"2"],[0,"00</fiel"]],"start1":9150,"start2":9150,"length1":17,"length2":17},{"diffs":[[0,"ock "],[-1,"type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"lists_index_get\"><value name=\"LIST\"><block type=\"variables_get\"><field name=\"VAR\" id=\"9I$~}Rs3__BJf#%!|aqr\">buf</field></block></value><value name=\"INDEX\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></value><next><block "],[0,"type"]],"start1":10048,"start2":10048,"length1":561,"length2":8},{"diffs":[[0,"t></block></"],[-1,"next></block></"],[0,"statement></"]],"start1":10564,"start2":10564,"length1":39,"length2":24}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"w()\n"],[-1,"\n\nlet temp = 0;\n\n"],[0,"loop"]],"start1":1296,"start2":1296,"length1":25,"length2":8},{"diffs":[[0,"nterval("],[-1,"5"],[1,"2"],[0,"00, func"]],"start1":1312,"start2":1312,"length1":17,"length2":17},{"diffs":[[0,") {\n"],[-1,"\n    Connected.showUserNumber(2, buf[0])\n})\n\n\nprivate paj7620WriteReg(addr: number, cmd: number) {\n    let buf: Buffer = pins.createBuffer(2);\n    buf[0] = addr;\n    buf[1] = cmd;\n    pins.i2cWriteBuffer(0x73, buf, false);\n}\n        private paj7620ReadReg(addr: number): number {\n    let buf: Buffer = pins.createBuffer(1);\n    "],[1,"    let buf: Buffer = pins.createBuffer(1);\n"],[0,"buf["]],"start1":1335,"start2":1335,"length1":336,"length2":52},{"diffs":[[0,"] = "],[-1,"addr;"],[1,"0"],[0,"\n   "]],"start1":1388,"start2":1388,"length1":13,"length2":9},{"diffs":[[0,"73, buf,"],[-1," "],[0,"false)"],[-1,";\n    "],[1,"\n"],[0,"buf = pi"]],"start1":1420,"start2":1420,"length1":29,"length2":23},{"diffs":[[0,"lse)"],[-1,";\n    return buf[0];\n}\n        private paj7620SelectBank(bank: number) {\n    if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n    else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n}\n        private paj7620Init() {\n    this.paj7620SelectBank(0);\n    temp = this.paj7620ReadReg(0);\n    if (temp == 0x20) {\n        for (let i = 0; i < 438; i += 2) {\n            this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n        }\n    }\n    this.paj7620SelectBank(0);\n}\ninit() {\n    this.paj7620Init();\n    basic.pause(200);\n}\nread(): number {\n    let data = 0, result = 0;\n    data = this.paj7620ReadReg(0x43);\n    switch (data) {\n        case 0x01:\n            result = GestureType.Right;\n            break;\n        case 0x02:\n            result = GestureType.Left;\n            break;\n        case 0x04:\n            result = GestureType.Up;\n            break;\n        case 0x08:\n            result = GestureType.Down;\n            break;\n        case 0x10:\n            result = GestureType.Forward;\n            break;\n        case 0x20:\n            result = GestureType.Backward;\n            break;\n        case 0x40:\n            result = GestureType.Clockwise;\n            break;\n        case 0x80:\n            result = GestureType.Anticlockwise;\n            break;\n        default:\n            data = this.paj7620ReadReg(0x44);\n            if (data == 0x01)\n                result = GestureType.Wave;\n            break;\n    }\n    return result;\n}"],[1,"\nConnected.showUserNumber(2, buf[0])\n})\n"]],"start1":1471,"start2":1471,"length1":1459,"length2":44}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"t"],[1,"block"],[0,"sprj\"\n}\n"]],"start1":514,"start2":514,"length1":17,"length2":21}]}]},{"timestamp":1726772279426,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"mp = 0;\n"],[1,"\nloops.everyInterval(500, function () {\n\n    Connected.showUserNumber(2, buf[0])\n})\n\n\nprivate paj7620WriteReg(addr: number, cmd: number) {\n    "],[0,"let buf:"]],"start1":1308,"start2":1308,"length1":16,"length2":159},{"diffs":[[0,"fer(2);\n"],[1,"    "],[0,"buf[0] ="]],"start1":1491,"start2":1491,"length1":16,"length2":20},{"diffs":[[0,"] = "],[-1,"0xEF\nbuf[1] = 0\n"],[1,"addr;\n    buf[1] = cmd;\n    "],[0,"pins"]],"start1":1508,"start2":1508,"length1":24,"length2":36},{"diffs":[[0,"e);\n"],[-1,"\n\nloops.everyInterval(500, function ()"],[1,"}\n        private paj7620ReadReg(addr: number): number"],[0," {\n "]],"start1":1575,"start2":1575,"length1":46,"length2":62},{"diffs":[[0,"uf[0] = "],[-1,"0"],[1,"addr;"],[0,"\n    pin"]],"start1":1685,"start2":1685,"length1":17,"length2":21},{"diffs":[[0,"    "],[-1,"Connected.showUserNumber(3,buf[0])\n})\n\n"],[1,"return buf[0];\n}\n        private paj7620SelectBank(bank: number) {\n    if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n    else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n}\n        private paj7620Init() {\n    this.paj7620SelectBank(0);\n    temp = this.paj7620ReadReg(0);\n    if (temp == 0x20) {\n        for (let i = 0; i < 438; i += 2) {\n            this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n        }\n    }\n    this.paj7620SelectBank(0);\n}\ninit() {\n    this.paj7620Init();\n    basic.pause(200);\n}\nread(): number {\n    let data = 0, result = 0;\n    data = this.paj7620ReadReg(0x43);\n    switch (data) {\n        case 0x01:\n            result = GestureType.Right;\n            break;\n        case 0x02:\n            result = GestureType.Left;\n            break;\n        case 0x04:\n            result = GestureType.Up;\n            break;\n        case 0x08:\n            result = GestureType.Down;\n            break;\n        case 0x10:\n            result = GestureType.Forward;\n            break;\n        case 0x20:\n            result = GestureType.Backward;\n            break;\n        case 0x40:\n            result = GestureType.Clockwise;\n            break;\n        case 0x80:\n            result = GestureType.Anticlockwise;\n            break;\n        default:\n            data = this.paj7620ReadReg(0x44);\n            if (data == 0x01)\n                result = GestureType.Wave;\n            break;\n    }\n    return result;\n}"]],"start1":1788,"start2":1788,"length1":43,"length2":1453}]}]},{"timestamp":1726772868925,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"ble id=\""],[-1,"}g^Kh@tsk|1f0]fNt=Se"],[1,"?Bq|*UmN*_Y7mXuMBM:)"],[0,"\">digits"]],"start1":72,"start2":72,"length1":36,"length2":36},{"diffs":[[0,"ble id=\""],[-1,"x4t~+B8#]@461X;Q^-0c"],[1,"1C2G89y(N~klz.D03F[9"],[0,"\">sockLi"]],"start1":125,"start2":125,"length1":36,"length2":36},{"diffs":[[0,"ble id=\""],[-1,"Eg1g}PwlELMuekdWY2P8"],[1,"j{XVDWuq}+`;8xsT}OOB"],[0,"\">wheelL"]],"start1":182,"start2":182,"length1":36,"length2":36},{"diffs":[[0,"ble id=\""],[-1,"*;QQG[u[F9PMmZkEKiRJ"],[1,"|]_^`Q-_z:vS8XPpMVQo"],[0,"\">scoreC"]],"start1":240,"start2":240,"length1":36,"length2":36},{"diffs":[[0,"riable><"],[1,"variable id=\"9I$~}Rs3__BJf#%!|aqr\">buf</variable><"],[0,"/variabl"]],"start1":285,"start2":285,"length1":16,"length2":66},{"diffs":[[0,"pe=\""],[-1,"pxt-on-start"],[1,"function_definition"],[0,"\" x=\""],[-1,"50"],[1,"1656"],[0,"\" y=\""],[-1,"57\"><statement"],[1,"-483\"><mutation"],[0," name=\""],[-1,"HANDLER\"><block type=\"Connected_oledClear\"><next><block type=\"pin_set_audio_pin_enabled\"><value name=\"enabled\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"device_led_enable\"><value name=\"on\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"}g^Kh@tsk|1f0]fNt=Se\">digits</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"grove_tm1637_create\"><field name=\"cPin\">DigitalPin.P7</field><field name=\"dPin\">DigitalPin.P6</field></block></value><next><block type=\"grove_tm1637_display_number\"><value name=\"display\"><block type=\"variables_get\"><field name=\"VAR\" id=\"}g^Kh@tsk|1f0]fNt=Se\">digits</field></block></value><value name=\"num\"><block type=\"sonarbit\"><field name=\"tPin\">DigitalPin.P8</field><field name=\"ePin\">DigitalPin.P9</field><field name=\"distance_unit\">Connected.Distance_Unit_List.Distance_Unit_cm</field></block></value><next><block type=\"device_pause\""],[1,"isNearly\" functionid=\"8e+^m!_Vc+bD!Na*P9:n\"><arg name=\"reference\" id=\"3562fyuwzxql0ldpxn3k\" type=\"number\"></arg><arg name=\"reading\" id=\"t5ibi5p93hcugmcmhrc3\" type=\"number\"></arg><arg name=\"tolerance\" id=\"rqnbe0aw0q7tg4l6u487r\" type=\"number\"></arg></mutation><field name=\"function_name\">isNearly</field><value name=\"3562fyuwzxql0ldpxn3k\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reference</field></block></value><value name=\"t5ibi5p93hcugmcmhrc3\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reading</field></block></value><value name=\"rqnbe0aw0q7tg4l6u487r\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">tolerance</field></block></value><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation"],[0,"><va"]],"start1":363,"start2":363,"length1":1226,"length2":956},{"diffs":[[0,"on><value name=\""],[-1,"pause"],[1,"IF0"],[0,"\"><shadow type=\""]],"start1":1313,"start2":1313,"length1":37,"length2":35},{"diffs":[[0,"hadow type=\""],[-1,"timePicker"],[1,"logic_boolean"],[0,"\"><field nam"]],"start1":1336,"start2":1336,"length1":34,"length2":37},{"diffs":[[0,"me=\""],[-1,"ms\">1000"],[1,"BOOL\">TRUE"],[0,"</fi"]],"start1":1372,"start2":1372,"length1":16,"length2":18},{"diffs":[[0,"ow><"],[-1,"/value><next><block type=\"grove_tm1637_display_number\"><value name=\"display\"><block type=\"variables_get\"><field name=\"VAR\" id=\"}g^Kh@tsk|1f0]fNt=Se\">digits</field></block></value><value name=\"num\"><block type=\"apds9960_readcolor\"></block></value><next"],[1,"block type=\"logic_operation\"><field name=\"OP\">AND</field><value name=\"A\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow"],[0,"><bl"]],"start1":1400,"start2":1400,"length1":259,"length2":284},{"diffs":[[0,"pe=\""],[-1,"v"],[0,"ar"],[-1,"iables_set\"><field name=\"VAR\" id=\"x4t~+B8#]@461X;Q^-0c\">sockLights</field"],[1,"gument_reporter_number\"><field name=\"VALUE\">reading</field></block></value"],[0,"><va"]],"start1":1690,"start2":1690,"length1":84,"length2":84},{"diffs":[[0,"ue><value name=\""],[-1,"VALUE"],[1,"B"],[0,"\"><shadow type=\""]],"start1":1768,"start2":1768,"length1":37,"length2":33},{"diffs":[[0,"pe=\""],[-1,"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P11</field><field name=\"mode\">Connected.NeoPixelMode.RGB"],[1,"math_arithmetic\"><field name=\"OP\">MINUS"],[0,"</fi"]],"start1":1859,"start2":1859,"length1":124,"length2":47},{"diffs":[[0,"ld><value name=\""],[-1,"numleds"],[1,"A"],[0,"\"><shadow type=\""]],"start1":1907,"start2":1907,"length1":39,"length2":33},{"diffs":[[0,"ield name=\"NUM\">"],[-1,"8"],[1,"0"],[0,"</field></shadow"]],"start1":1955,"start2":1955,"length1":33,"length2":33},{"diffs":[[0,"ow><"],[-1,"/value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"x4t~+B8#]@461X;Q^-0c\">sockLights"],[1,"block type=\"argument_reporter_number\"><field name=\"VALUE\">reference"],[0,"</fi"]],"start1":1986,"start2":1986,"length1":178,"length2":75},{"diffs":[[0,"ue><value name=\""],[-1,"rgb"],[1,"B"],[0,"\"><shadow type=\""]],"start1":2078,"start2":2078,"length1":35,"length2":33},{"diffs":[[0,"pe=\""],[-1,"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Orange</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"x4t~+B8#]@461X;Q^-0c\">sockLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights</field"],[1,"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value"],[0,"><va"]],"start1":2107,"start2":2107,"length1":357,"length2":180},{"diffs":[[0,"ue><value name=\""],[-1,"VALUE"],[1,"B"],[0,"\"><shadow type=\""]],"start1":2281,"start2":2281,"length1":37,"length2":33},{"diffs":[[0,"hadow type=\""],[-1,"math_number"],[1,"logic_boolean"],[0,"\"><field nam"]],"start1":2302,"start2":2302,"length1":35,"length2":37},{"diffs":[[0,"n\"><field name=\""],[-1,"NUM\">0"],[1,"BOOL\">TRUE"],[0,"</field></shadow"]],"start1":2326,"start2":2326,"length1":38,"length2":42},{"diffs":[[0,"block type=\""],[-1,"neopixel_creat"],[1,"logic_compar"],[0,"e\"><field na"]],"start1":2370,"start2":2370,"length1":38,"length2":36},{"diffs":[[0,"me=\""],[-1,"Rjpin\">Connected.DigitalRJPin.P12</field><field name=\"mode\">Connected.NeoPixelMode.RGB"],[1,"OP\">LTE"],[0,"</fi"]],"start1":2406,"start2":2406,"length1":94,"length2":15},{"diffs":[[0,"ld><value name=\""],[-1,"numleds"],[1,"A"],[0,"\"><shadow type=\""]],"start1":2422,"start2":2422,"length1":39,"length2":33},{"diffs":[[0,"UM\">"],[-1,"18"],[1,"0"],[0,"</fi"]],"start1":2482,"start2":2482,"length1":10,"length2":9},{"diffs":[[0,"ow><"],[-1,"/value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights"],[1,"block type=\"argument_reporter_number\"><field name=\"VALUE\">reading"],[0,"</fi"]],"start1":2501,"start2":2501,"length1":179,"length2":73},{"diffs":[[0,"ue><value name=\""],[-1,"rgb"],[1,"B"],[0,"\"><shadow type=\""]],"start1":2591,"start2":2591,"length1":35,"length2":33},{"diffs":[[0,"pe=\""],[-1,"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Green</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights</field></block></value><next"],[1,"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow"],[0,"><bl"]],"start1":2620,"start2":2620,"length1":266,"length2":193},{"diffs":[[0,"pe=\""],[-1,"v"],[0,"ar"],[-1,"iables_set\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field"],[1,"gument_reporter_number\"><field name=\"VALUE\">reference</field></block></value"],[0,"><va"]],"start1":2819,"start2":2819,"length1":85,"length2":86},{"diffs":[[0,"e name=\""],[-1,"VALUE"],[1,"B"],[0,"\"><shado"]],"start1":2907,"start2":2907,"length1":21,"length2":17},{"diffs":[[0,"pe=\""],[-1,"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P13</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\""],[1,"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value></block"],[0,"><"],[1,"/"],[0,"value"],[1,"><statement"],[0," name=\""],[-1,"strip"],[1,"DO0"],[0,"\"><b"]],"start1":2990,"start2":2990,"length1":304,"length2":155},{"diffs":[[0,"pe=\""],[-1,"variables_get\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field></block></value"],[1,"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation"],[0,"><va"]],"start1":3152,"start2":3152,"length1":101,"length2":106},{"diffs":[[0,"me=\""],[-1,"rgb"],[1,"RETURN_VALUE"],[0,"\"><s"]],"start1":3264,"start2":3264,"length1":11,"length2":20},{"diffs":[[0,"pe=\""],[-1,"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Red</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle"],[1,"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">TRUE"],[0,"</fi"]],"start1":3292,"start2":3292,"length1":235,"length2":108},{"diffs":[[0,"k></"],[-1,"next></block></next"],[1,"statement><statement name=\"ELSE\""],[0,"><"],[-1,"/"],[0,"block"],[-1,"></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next"],[1," type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow"],[0,"><"],[-1,"/"],[0,"block"],[-1,"></next></block></next></block></next"],[1," type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field"],[0,"></b"]],"start1":3426,"start2":3426,"length1":207,"length2":302},{"diffs":[[0,"field></block></"],[-1,"next"],[1,"value"],[0,"></block></next>"]],"start1":3719,"start2":3719,"length1":36,"length2":37},{"diffs":[[0,"k></"],[-1,"nex"],[1,"statemen"],[0,"t></"]],"start1":3747,"start2":3747,"length1":11,"length2":16},{"diffs":[[0," x=\""],[-1,"925"],[1,"500"],[0,"\" y=\""],[-1,"20"],[1,"-147"],[0,"\"><f"]],"start1":3822,"start2":3822,"length1":18,"length2":20},{"diffs":[[0," x=\""],[-1,"1466"],[1,"744"],[0,"\" y=\""],[-1,"20"],[1,"-65"],[0,"\"><f"]],"start1":4214,"start2":4214,"length1":19,"length2":19},{"diffs":[[0,"pe=\""],[-1,"function_definition"],[1,"pxt-on-start"],[0,"\" x=\""],[-1,"1159"],[1,"0"],[0,"\" y=\""],[-1,"395\"><mutation"],[1,"0\"><statement"],[0," name=\""],[-1,"isNearly\" functionid=\"b1Q}-qv~wJN$grhC!ppp\"><arg name=\"reference\" id=\"5nona16w6rbe5o9cs7yri\" type=\"number\"></arg><arg name=\"reading\" id=\"1603v12143812bjzv2he\" type=\"number\"></arg><arg name=\"t"],[1,"HANDLER\"><block type=\"Connected_oledClear\"><next><block type=\"pin_set_audio_pin_enabled\"><value name=\"enabled\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"device_led_enable\"><value name=\"on\"><shadow type=\"logic_bo"],[0,"ole"],[-1,"r"],[0,"an"],[-1,"ce\" id=\"huqcis1hoaqr7iq5ev9lm\" type=\"number\"></arg></mutation><field name=\"function_name\">isNearly</field><value name=\"5nona16w6rbe5o9cs7yri\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reference</field></block></value><value name=\"1603v12143812bjzv2he\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reading</field></block></value><value name=\"huqcis1hoaqr7iq5ev9lm\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">tolerance</field></block></value><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation"],[1,"\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"?Bq|*UmN*_Y7mXuMBM:)\">digits</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"grove_tm1637_create\"><field name=\"cPin\">DigitalPin.P7</field><field name=\"dPin\">DigitalPin.P6</field></block></value><next><block type=\"grove_tm1637_display_number\"><value name=\"display\"><block type=\"variables_get\"><field name=\"VAR\" id=\"?Bq|*UmN*_Y7mXuMBM:)\">digits</field></block></value><value name=\"num\"><block type=\"sonarbit\"><field name=\"tPin\">DigitalPin.P8</field><field name=\"ePin\">DigitalPin.P9</field><field name=\"distance_unit\">Connected.Distance_Unit_List.Distance_Unit_cm</field></block></value><next><block type=\"device_pause\""],[0,"><va"]],"start1":4575,"start2":4575,"length1":957,"length2":1224},{"diffs":[[0,"e\"><value name=\""],[-1,"IF0"],[1,"pause"],[0,"\"><shadow type=\""]],"start1":5793,"start2":5793,"length1":35,"length2":37},{"diffs":[[0,"hadow type=\""],[-1,"logic_boolean"],[1,"timePicker"],[0,"\"><field nam"]],"start1":5818,"start2":5818,"length1":37,"length2":34},{"diffs":[[0,"field name=\""],[-1,"BOOL\">TRUE"],[1,"ms\">1000"],[0,"</field></sh"]],"start1":5843,"start2":5843,"length1":34,"length2":32},{"diffs":[[0,"ow><"],[-1,"block type=\"logic_operation\"><field name=\"OP\">AND</field><value name=\"A\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GTE"],[1,"/value><next><block type=\"grove_tm1637_display_number\"><value name=\"display\"><block type=\"variables_get\"><field name=\"VAR\" id=\"?Bq|*UmN*_Y7mXuMBM:)\">digits</field></block></value><value name=\"num\"><block type=\"apds9960_readcolor\"></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"1C2G89y(N~klz.D03F[9\">sockLights"],[0,"</fi"]],"start1":5877,"start2":5877,"length1":198,"length2":342},{"diffs":[[0,"ld><value name=\""],[-1,"A"],[1,"VALUE"],[0,"\"><shadow type=\""]],"start1":6220,"start2":6220,"length1":33,"length2":37},{"diffs":[[0,"pe=\""],[-1,"argument_reporter_number\"><field name=\"VALUE\">reading</field></block></value"],[1,"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P11</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field"],[0,"><va"]],"start1":6315,"start2":6315,"length1":84,"length2":131},{"diffs":[[0,"ld><value name=\""],[-1,"B"],[1,"numleds"],[0,"\"><shadow type=\""]],"start1":6440,"start2":6440,"length1":33,"length2":39},{"diffs":[[0,"ield name=\"NUM\">"],[-1,"0"],[1,"8"],[0,"</field></shadow"]],"start1":6494,"start2":6494,"length1":33,"length2":33},{"diffs":[[0,"ow><"],[-1,"block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field"],[1,"/value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"1C2G89y(N~klz.D03F[9\">sockLights</field></block></value"],[0,"><va"]],"start1":6525,"start2":6525,"length1":66,"length2":201},{"diffs":[[0,"ue><value name=\""],[-1,"A"],[1,"rgb"],[0,"\"><shadow type=\""]],"start1":6720,"start2":6720,"length1":33,"length2":35},{"diffs":[[0,"pe=\""],[-1,"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block></value"],[1,"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Orange</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"1C2G89y(N~klz.D03F[9\">sockLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"j{XVDWuq}+`;8xsT}OOB\">wheelLights</field"],[0,"><va"]],"start1":6751,"start2":6751,"length1":148,"length2":357},{"diffs":[[0,"ld><value name=\""],[-1,"B"],[1,"VALUE"],[0,"\"><shadow type=\""]],"start1":7102,"start2":7102,"length1":33,"length2":37},{"diffs":[[0,"pe=\""],[-1,"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value"],[1,"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P12</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field"],[0,"><va"]],"start1":7197,"start2":7197,"length1":118,"length2":131},{"diffs":[[0,"ld><value name=\""],[-1,"B"],[1,"numleds"],[0,"\"><shadow type=\""]],"start1":7322,"start2":7322,"length1":33,"length2":39},{"diffs":[[0,"hadow type=\""],[-1,"logic_boolean"],[1,"math_number"],[0,"\"><field nam"]],"start1":7349,"start2":7349,"length1":37,"length2":35},{"diffs":[[0,"field name=\""],[-1,"BOOL\">TRUE"],[1,"NUM\">18"],[0,"</field></sh"]],"start1":7375,"start2":7375,"length1":34,"length2":31},{"diffs":[[0,"ow><"],[-1,"block type=\"logic_compare\"><field name=\"OP\">LTE</field"],[1,"/value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"j{XVDWuq}+`;8xsT}OOB\">wheelLights</field></block></value"],[0,"><va"]],"start1":7408,"start2":7408,"length1":62,"length2":202},{"diffs":[[0,"ue><value name=\""],[-1,"A"],[1,"rgb"],[0,"\"><shadow type=\""]],"start1":7604,"start2":7604,"length1":33,"length2":35},{"diffs":[[0,"pe=\""],[-1,"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading</field></block></value"],[1,"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Green</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"j{XVDWuq}+`;8xsT}OOB\">wheelLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"|]_^`Q-_z:vS8XPpMVQo\">scoreCircle</field"],[0,"><va"]],"start1":7635,"start2":7635,"length1":146,"length2":357},{"diffs":[[0,"ld><value name=\""],[-1,"B"],[1,"VALUE"],[0,"\"><shadow type=\""]],"start1":7986,"start2":7986,"length1":33,"length2":37},{"diffs":[[0,"pe=\""],[-1,"math_arithmetic\"><field name=\"OP\">ADD"],[1,"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P13</field><field name=\"mode\">Connected.NeoPixelMode.RGB"],[0,"</fi"]],"start1":8081,"start2":8081,"length1":45,"length2":124},{"diffs":[[0,"ld><value name=\""],[-1,"A"],[1,"numleds"],[0,"\"><shadow type=\""]],"start1":8206,"start2":8206,"length1":33,"length2":39},{"diffs":[[0,"ield name=\"NUM\">"],[-1,"0"],[1,"8"],[0,"</field></shadow"]],"start1":8260,"start2":8260,"length1":33,"length2":33},{"diffs":[[0,"ow><"],[-1,"block type=\"argument_reporter_number\"><field name=\"VALUE\">referenc"],[1,"/value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"|]_^`Q-_z:vS8XPpMVQo\">scoreCircl"],[0,"e</f"]],"start1":8291,"start2":8291,"length1":74,"length2":178},{"diffs":[[0,"ue><value name=\""],[-1,"B"],[1,"rgb"],[0,"\"><shadow type=\""]],"start1":8487,"start2":8487,"length1":33,"length2":35},{"diffs":[[0,"pe=\""],[-1,"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value></block"],[1,"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Red</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"|]_^`Q-_z:vS8XPpMVQo\">scoreCircle</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"every_interval\" x=\"1259\" y=\"420\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow"],[0,"></v"]],"start1":8518,"start2":8518,"length1":188,"length2":662},{"diffs":[[0,"statement name=\""],[-1,"DO0"],[1,"HANDLER"],[0,"\"><block type=\"f"]],"start1":9186,"start2":9186,"length1":35,"length2":39},{"diffs":[[0,"block type=\""],[-1,"function_return"],[1,"typescript_statement"],[0,"\"><mutation "]],"start1":9212,"start2":9212,"length1":39,"length2":44},{"diffs":[[0,"ml\" "],[-1,"no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE"],[1,"line0=\"let buf: Buffer = pins.createBuffer(1);\" numlines=\"1\" declaredvars=\"buf\"></mutation><next><block type=\"lists_index_set\"><value name=\"LIST\"><block type=\"variables_get\"><field name=\"VAR\" id=\"9I$~}Rs3__BJf#%!|aqr\">buf</field></block></value><value name=\"INDEX"],[0,"\"><s"]],"start1":9289,"start2":9289,"length1":68,"length2":271},{"diffs":[[0,"ow><"],[-1,"block type=\"logic_boolean"],[1,"/value><value name=\"VALUE\"><shadow type=\"math_number"],[0,"\"><f"]],"start1":9618,"start2":9618,"length1":33,"length2":60},{"diffs":[[0,"field name=\""],[-1,"BOOL\">TRUE"],[1,"NUM\">0"],[0,"</field></bl"]],"start1":9677,"start2":9677,"length1":34,"length2":30},{"diffs":[[0,"NUM\">0</field></"],[-1,"block"],[1,"shadow"],[0,"></value></block"]],"start1":9689,"start2":9689,"length1":37,"length2":38},{"diffs":[[0,"ow></value><"],[-1,"/block></"],[1,"next><block type=\"typescript_"],[0,"statement><s"]],"start1":9709,"start2":9709,"length1":33,"length2":53},{"diffs":[[0,"ment"],[1,"\""],[0,"><"],[-1,"statement name=\"ELSE\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\""],[1,"mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"pins.i2cWriteBuffer(0x73, buf,false)\" numlines=\"1\"></mutation><next><block type=\"typescript_statement\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"buf = pins.i2cReadBuffer(0x73, 1, false)\" numlines=\"1\"></mutation><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation"],[0,"><fi"]],"start1":9755,"start2":9755,"length1":197,"length2":446},{"diffs":[[0,"on><field name=\""],[-1,"NUM\">0"],[1,"SLIDER\">1"],[0,"</field></shadow"]],"start1":10195,"start2":10195,"length1":38,"length2":41},{"diffs":[[0,"ow><"],[-1,"block type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></block></value"],[1,"/value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow"],[0,"><"],[-1,"/"],[0,"block"],[-1,"></statement></block></statement></block><block type=\"every_interval\" x=\"348\" y=\"1059\""],[1," type=\"lists_index_get\"><value name=\"LIST\"><block type=\"variables_get\"><field name=\"VAR\" id=\"9I$~}Rs3__BJf#%!|aqr\">buf</field></block></value"],[0,"><va"]],"start1":10234,"start2":10234,"length1":176,"length2":253},{"diffs":[[0,"value name=\""],[-1,"interval"],[1,"INDEX"],[0,"\"><shadow ty"]],"start1":10485,"start2":10485,"length1":32,"length2":29},{"diffs":[[0,"hadow type=\""],[-1,"longTimePick"],[1,"math_numb"],[0,"er\"><field n"]],"start1":10506,"start2":10506,"length1":36,"length2":33},{"diffs":[[0,"me=\""],[-1,"ms\">20"],[1,"NUM\">"],[0,"0</f"]],"start1":10540,"start2":10540,"length1":14,"length2":13},{"diffs":[[0,"ue><"],[-1,"statement name=\"HANDLER\""],[1,"/block></value><next"],[0,"><bl"]],"start1":10572,"start2":10572,"length1":32,"length2":28},{"diffs":[[0,"=\"1\" max=\"8\""],[-1," label=\"Line\""],[0," precision=\""]],"start1":10702,"start2":10702,"length1":37,"length2":24},{"diffs":[[0,"e name=\"n\"><"],[1,"block type=\"lists_index_get\"><value name=\"LIST\"><block type=\"variables_get\"><field name=\"VAR\" id=\"9I$~}Rs3__BJf#%!|aqr\">buf</field></block></value><value name=\"INDEX\"><"],[0,"shadow type="]],"start1":10792,"start2":10792,"length1":24,"length2":192},{"diffs":[[0,"UM\">"],[-1,"20200508"],[1,"0"],[0,"</fi"]],"start1":11012,"start2":11012,"length1":16,"length2":9},{"diffs":[[0,"ow><"],[-1,"block type=\"Connected_getGesture\""],[1,"/value></block></value></block></next></block></next></block></next></block></next"],[0,"></b"]],"start1":11031,"start2":11031,"length1":41,"length2":90},{"diffs":[[0,"/next></block></"],[-1,"value"],[1,"next"],[0,"></block></state"]],"start1":11112,"start2":11112,"length1":37,"length2":36}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,".show()\n"],[1,"\n\nlet temp = 0;\nlet buf: Buffer = pins.createBuffer(2);\nbuf[0] = 0xEF\nbuf[1] = 0\npins.i2cWriteBuffer(0x73, buf, false);\n\n\n"],[0,"loops.ev"]],"start1":1292,"start2":1292,"length1":16,"length2":138},{"diffs":[[0,"nterval("],[-1,"2"],[1,"5"],[0,"00, func"]],"start1":1434,"start2":1434,"length1":17,"length2":17},{"diffs":[[0,"    "],[-1,"Connected.showUserNumber(2, Connected.getGesture()"],[1,"let buf: Buffer = pins.createBuffer(1);\n    buf[0] = 0\n    pins.i2cWriteBuffer(0x73, buf, false);\n    buf = pins.i2cReadBuffer(0x73, 1, false);\n    Connected.showUserNumber(3,buf[0]"],[0,")\n})\n"],[1,"\n"]],"start1":1461,"start2":1461,"length1":59,"length2":191}]},{"type":"edited","filename":"planetxbasic.ts","patch":[{"diffs":[[0," }\n\n"],[-1,"    //% blockId= gesture_get_event block=\"Gesture sensor IIC port detects\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function getGesture(): number {\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        const gesture = paj7620.read();\n        return gesture\n    }\n\n\n\n\n"],[0,"    "]],"start1":17461,"start2":17461,"length1":354,"length2":8}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"block"],[1,"t"],[0,"sprj\"\n}\n"]],"start1":514,"start2":514,"length1":21,"length2":17}]}]},{"timestamp":1726773389800,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"me=\"ms\">"],[-1,"5"],[1,"2"],[0,"00</fiel"]],"start1":9100,"start2":9100,"length1":17,"length2":17}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"nterval("],[-1,"5"],[1,"2"],[0,"00, func"]],"start1":1312,"start2":1312,"length1":17,"length2":17}]}]},{"timestamp":1726773558189,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"ck><"],[-1,"block type=\"device_get_analog_pin\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"972\" y=\"1486\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogPin.P0</field></shadow></value></block><"],[0,"/xml"]],"start1":9527,"start2":9527,"length1":276,"length2":8}]}]},{"timestamp":1726774285141,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"ock "],[-1,"type=\"text_join\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1060\" y=\"1349\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">Hello</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">World</field></shadow></value></block><block "],[0,"type"]],"start1":9533,"start2":9533,"length1":391,"length2":8}]}]},{"timestamp":1726774319490,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"pe=\""],[-1,"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow"],[1,"grove_tm1637_display_number\"><value name=\"display\"><block type=\"variables_get\"><field name=\"VAR\" id=\"}g^Kh@tsk|1f0]fNt=Se\">digits</field></block></value><value name=\"num\"><block type=\"sonarbit\"><field name=\"tPin\">DigitalPin.P8</field><field name=\"ePin\">DigitalPin.P9</field><field name=\"distance_unit\">Connected.Distance_Unit_List.Distance_Unit_cm</field></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"grove_tm1637_display_number\"><value name=\"display\"><block type=\"variables_get\"><field name=\"VAR\" id=\"}g^Kh@tsk|1f0]fNt=Se\">digits</field></block></value><value name=\"num\"><block type=\"apds9960_readcolor\"></block"],[0,"></v"]],"start1":1128,"start2":1128,"length1":105,"length2":734},{"diffs":[[0,"/next></block></"],[1,"next></block></next></block></"],[0,"statement></bloc"]],"start1":4717,"start2":4717,"length1":32,"length2":62},{"diffs":[[0," x=\""],[-1,"1466"],[1,"925"],[0,"\" y="]],"start1":4814,"start2":4814,"length1":12,"length2":11},{"diffs":[[0,">Button."],[-1,"B"],[1,"A"],[0,"</field>"]],"start1":4848,"start2":4848,"length1":17,"length2":17},{"diffs":[[0,"ayFileNl"],[1,"2"],[0,"\"><value"]],"start1":5016,"start2":5016,"length1":16,"length2":17},{"diffs":[[0,"XT\">"],[-1,"2_1_1"],[1,"1_1_25_100"],[0,"</fi"]],"start1":5088,"start2":5088,"length1":13,"length2":18},{"diffs":[[0," x=\""],[-1,"903"],[1,"1466"],[0,"\" y=\""],[-1,"59"],[1,"20"],[0,"\"><f"]],"start1":5204,"start2":5204,"length1":18,"length2":19},{"diffs":[[0,"e=\"NAME\">Button."],[-1,"A"],[1,"B"],[0,"</field><stateme"]],"start1":5231,"start2":5231,"length1":33,"length2":33},{"diffs":[[0,"type=\"playFileNl"],[-1,"2"],[0,"\"><value name=\"s"]],"start1":5399,"start2":5399,"length1":33,"length2":32},{"diffs":[[0,"name=\"TEXT\">"],[-1,"1_1_25_100"],[1,"2_1_1"],[0,"</field></sh"]],"start1":5470,"start2":5470,"length1":34,"length2":29},{"diffs":[[0,"x=\"3"],[-1,"5"],[0,"4"],[1,"8"],[0,"\" y=\"10"],[1,"5"],[0,"9"],[-1,"1"],[0,"\"><v"]],"start1":9021,"start2":9021,"length1":19,"length2":19},{"diffs":[[0,"nnected_showUser"],[-1,"Text"],[1,"Number"],[0,"\"><value name=\"l"]],"start1":9177,"start2":9177,"length1":36,"length2":38},{"diffs":[[0,"SLIDER\">"],[-1,"1"],[1,"2"],[0,"</field>"]],"start1":9331,"start2":9331,"length1":17,"length2":17},{"diffs":[[0,"me=\""],[-1,"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"text_join\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text"],[1,"n\"><shadow type=\"math_number"],[0,"\"><f"]],"start1":9374,"start2":9374,"length1":277,"length2":36},{"diffs":[[0,"field name=\""],[-1,"TEXT\">World"],[1,"NUM\">20200508"],[0,"</field></sh"]],"start1":9409,"start2":9409,"length1":35,"length2":37},{"diffs":[[0,"pe=\""],[-1,"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P2</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P3</field></shadow></value></block></value></block></value><next><block type=\"Connected_showUserText\""],[1,"Connected_getGesture\"></block></value></block></statement></block><block type=\"text_join\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1060\" y=\"1349\"><mutation items=\"2\"></mutation"],[0,"><va"]],"start1":9460,"start2":9460,"length1":910,"length2":198},{"diffs":[[0,"on><value name=\""],[-1,"line"],[1,"ADD0"],[0,"\"><shadow type=\""]],"start1":9652,"start2":9652,"length1":36,"length2":36},{"diffs":[[0,"pe=\""],[-1,"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precisi"],[1,"text\" disabled-reas"],[0,"on"],[1,"s"],[0,"=\""],[-1,"0\"></mutation><field name=\"SLIDER\">2</field></shadow></value><value name=\"text\"><shadow type=\"text"],[1,"MANUALLY_DISABLED"],[0,"\"><f"]],"start1":9684,"start2":9684,"length1":176,"length2":49},{"diffs":[[0,"\"TEXT\">Hello"],[-1,",ELECFREAKS"],[0,"</field></sh"]],"start1":9743,"start2":9743,"length1":35,"length2":24},{"diffs":[[0,"ow><"],[-1,"block type=\"text_join\"><mutation items=\"2\"></mutation"],[1,"/value"],[0,"><va"]],"start1":9769,"start2":9769,"length1":61,"length2":14},{"diffs":[[0,"<value name=\"ADD"],[-1,"0"],[1,"1"],[0,"\"><shadow type=\""]],"start1":9780,"start2":9780,"length1":33,"length2":33},{"diffs":[[0,"ext\""],[-1,"><field name=\"TEXT\">hue </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field></shadow><block type=\"apds9960_readcolor\"></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">3</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">distance </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field></shadow><block type=\"sonarbit\"><field name=\"tPin\">DigitalPin.P8</field><field name=\"ePin\">DigitalPin.P9</field><field name=\"distance_unit\">Connected.Distance_Unit_List.Distance_Unit_cm</field></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precisi"],[1," disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">World</field></shadow></value></block><block type=\"device_get_analog_pin\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"972\" y=\"1486\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reas"],[0,"on"],[1,"s"],[0,"=\""],[-1,"0\"></mutation><field name=\"SLIDER\">4</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">gesture </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field></shadow><block type=\"Connected_getGesture\"></block></value></block></value></block></next></block></next></block></next></block></statement"],[1,"MANUALLY_DISABLED\"><field name=\"pin\">AnalogPin.P0</field></shadow></value"],[0,"></b"]],"start1":9814,"start2":9814,"length1":1598,"length2":362}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"6\n)\n"],[-1,"basic.pause(1000"],[1,"digits.showNumber(Connected.ultrasoundSensor(DigitalPin.P8, DigitalPin.P9, Connected.Distance_Unit_List.Distance_Unit_cm))\nbasic.pause(1000)\ndigits.showNumber(Connected.readColor()"],[0,")\nle"]],"start1":562,"start2":562,"length1":24,"length2":188},{"diffs":[[0,"User"],[-1,"Text(1, \"R\" + pins.analogReadPin(AnalogReadWritePin.P1) + \" C\" + pins.analogReadPin(AnalogReadWritePin.P2) + \" L\" + pins.analogReadPin(AnalogReadWritePin.P3))\n    Connected.showUserText(2, \"hue \" + Connected.readColor())\n    Connected.showUserText(3, \"distance \" + Connected.ultrasoundSensor(DigitalPin.P8, DigitalPin.P9, Connected.Distance_Unit_List.Distance_Unit_cm))\n    Connected.showUserText(4, \"gesture \" +"],[1,"Number(2,"],[0," Con"]],"start1":1357,"start2":1357,"length1":420,"length2":17}]}]},{"timestamp":1726774857873,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"732"],[1,"354"],[0,"\" y=\"1"],[-1,"224"],[1,"091"],[0,"\"><v"]],"start1":8361,"start2":8361,"length1":20,"length2":20}]}]},{"timestamp":1726794828075,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n})\n"],[-1,"pins.onPulsed(DigitalPin.P0, PulseValue.High, function () {\n\t\n})\n"],[0,"Conn"]],"start1":406,"start2":406,"length1":73,"length2":8}]}]},{"timestamp":1726794886706,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"eld name=\"BOOL\">"],[-1,"TRU"],[1,"FALS"],[0,"E</field></shado"]],"start1":505,"start2":505,"length1":35,"length2":36},{"diffs":[[0,"/block></value><"],[1,"next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Red</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field></block></value></block></next></block></next><"],[0,"/block></next></"]],"start1":3414,"start2":3414,"length1":32,"length2":517},{"diffs":[[0,"pe=\""],[-1,"pins_on_pulsed\" x=\"293\" y=\"1003\"><field name=\"pin\">DigitalPin.P1</field><field name=\"pulse\">PulseValue.Low</field><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"pins_pulse_duration\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1000000</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">pulse</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field></shadow><block type=\"pins_pulse_duration\"></block></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Yellow</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field></block></value></block></next></block></next></block></statement></block></statement></block><block type=\"every_interval\" x=\"1022\" y=\"992\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"Connected_showUserText\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1069\" y=\"1269"],[1,"every_interval\" x=\"732\" y=\"1224\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value><statement name=\"HANDLER\"><block type=\"Connected_showUserText"],[0,"\"><v"]],"start1":8342,"start2":8342,"length1":1951,"length2":200},{"diffs":[[0,"max\""],[-1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><mu"]],"start1":8588,"start2":8588,"length1":45,"length2":8},{"diffs":[[0,"lse\""],[-1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><mu"]],"start1":8829,"start2":8829,"length1":45,"length2":8},{"diffs":[[0,"ext\""],[-1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><fi"]],"start1":8899,"start2":8899,"length1":45,"length2":8},{"diffs":[[0,"pin\""],[-1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><va"]],"start1":9060,"start2":9060,"length1":45,"length2":8},{"diffs":[[0,"dow\""],[-1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><fi"]],"start1":9123,"start2":9123,"length1":45,"length2":8},{"diffs":[[0,"ext\""],[-1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><fi"]],"start1":9242,"start2":9242,"length1":45,"length2":8},{"diffs":[[0,"pin\""],[-1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><va"]],"start1":9399,"start2":9399,"length1":45,"length2":8},{"diffs":[[0,"dow\""],[-1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><fi"]],"start1":9462,"start2":9462,"length1":45,"length2":8},{"diffs":[[0,"ext\""],[-1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><fi"]],"start1":9581,"start2":9581,"length1":45,"length2":8},{"diffs":[[0,"pin\""],[-1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><va"]],"start1":9738,"start2":9738,"length1":45,"length2":8},{"diffs":[[0,"dow\""],[-1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><fi"]],"start1":9801,"start2":9801,"length1":45,"length2":8},{"diffs":[[0,"ext\""],[-1," disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\""],[0,"><va"]],"start1":9940,"start2":9940,"length1":60,"length2":8},{"diffs":[[0,"max\""],[-1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><mu"]],"start1":9993,"start2":9993,"length1":45,"length2":8},{"diffs":[[0,"oin\""],[-1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><mu"]],"start1":10219,"start2":10219,"length1":45,"length2":8},{"diffs":[[0,"ext\""],[-1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><fi"]],"start1":10289,"start2":10289,"length1":45,"length2":8},{"diffs":[[0,"lor\""],[-1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"></b"]],"start1":10450,"start2":10450,"length1":45,"length2":8},{"diffs":[[0,"ext\""],[-1," disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\""],[0,"><va"]],"start1":10525,"start2":10525,"length1":60,"length2":8},{"diffs":[[0,"max\""],[-1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><mu"]],"start1":10578,"start2":10578,"length1":45,"length2":8},{"diffs":[[0,"oin\""],[-1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><mu"]],"start1":10804,"start2":10804,"length1":45,"length2":8},{"diffs":[[0,"ext\""],[-1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><fi"]],"start1":10874,"start2":10874,"length1":45,"length2":8},{"diffs":[[0,"bit\""],[-1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><fi"]],"start1":11030,"start2":11030,"length1":45,"length2":8},{"diffs":[[0,"ext\""],[-1," disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\""],[0,"><va"]],"start1":11266,"start2":11266,"length1":60,"length2":8},{"diffs":[[0,"max\""],[-1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><mu"]],"start1":11319,"start2":11319,"length1":45,"length2":8},{"diffs":[[0,"oin\""],[-1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><mu"]],"start1":11545,"start2":11545,"length1":45,"length2":8},{"diffs":[[0,"ext\""],[-1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><fi"]],"start1":11615,"start2":11615,"length1":45,"length2":8},{"diffs":[[0,"ure\""],[-1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"></b"]],"start1":11782,"start2":11782,"length1":45,"length2":8},{"diffs":[[0,"block></"],[1,"statement></block></"],[0,"xml>"]],"start1":11866,"start2":11866,"length1":12,"length2":32}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n})\n"],[-1,"pins.onPulsed(DigitalPin.P1, PulseValue.Low, function () {\n    if (pins.pulseDuration() >= 1000000) {\n        Connected.showUserText(1, \"pulse\" + pins.pulseDuration())\n        scoreCircle.showColor(Connected.colors(Connected.NeoPixelColors.Yellow))\n        scoreCircle.show()\n    }\n})\n"],[0,"inpu"]],"start1":313,"start2":313,"length1":293,"length2":8},{"diffs":[[0,"\n})\n"],[-1,"let scoreCircle: Connected.Strip = null"],[1,"pins.onPulsed(DigitalPin.P0, PulseValue.High, function () {\n\t\n})"],[0,"\nCon"]],"start1":406,"start2":406,"length1":47,"length2":72},{"diffs":[[0,"Enabled("],[-1,"tru"],[1,"fals"],[0,"e)\nled.e"]],"start1":513,"start2":513,"length1":19,"length2":20},{"diffs":[[0,".show()\n"],[1,"let "],[0,"scoreCir"]],"start1":1010,"start2":1010,"length1":16,"length2":20},{"diffs":[[0,"GB)\n"],[-1,"loops.everyInterval(500, function () {\n\t"],[1,"scoreCircle.showColor(Connected.colors(Connected.NeoPixelColors.Red))\nscoreCircle.show()\nloops.everyInterval(500, function () {\n    Connected.showUserText(1, \"R\" + pins.analogReadPin(AnalogReadWritePin.P1) + \" C\" + pins.analogReadPin(AnalogReadWritePin.P2) + \" L\" + pins.analogReadPin(AnalogReadWritePin.P3))\n    Connected.showUserText(2, \"hue \" + Connected.readColor())\n    Connected.showUserText(3, \"distance \" + Connected.ultrasoundSensor(DigitalPin.P8, DigitalPin.P9, Connected.Distance_Unit_List.Distance_Unit_cm))\n    Connected.showUserText(4, \"gesture \" + Connected.getGesture())"],[0,"\n})\n"]],"start1":1108,"start2":1108,"length1":48,"length2":594}]}]},{"timestamp":1726795470129,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"x=\"2"],[-1,"4"],[0,"9"],[1,"3"],[0,"\" y=\""],[-1,"97"],[1,"100"],[0,"3\"><"]],"start1":7876,"start2":7876,"length1":17,"length2":18},{"diffs":[[0,"e=\"NUM\">"],[-1,"3"],[1,"100"],[0,"0000</fi"]],"start1":8351,"start2":8351,"length1":17,"length2":19},{"diffs":[[0,"/block></value><"],[1,"next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Yellow</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field></block></value></block></next></block></next><"],[0,"/block></stateme"]],"start1":8995,"start2":8995,"length1":32,"length2":520},{"diffs":[[0,"x=\"1"],[-1,"171"],[1,"022"],[0,"\" y=\""],[-1,"1005"],[1,"992"],[0,"\"><v"]],"start1":9575,"start2":9575,"length1":20,"length2":19},{"diffs":[[0,"ck><"],[-1,"block type=\"control_on_event\" x=\"196\" y=\"1398\"><value name=\"src\"><shadow type=\"control_event_source_id\"><field name=\"id\">EventBusSource.MICROBIT_ID_IO_P2</field></shadow></value><value name=\"value\"><shadow type=\"control_event_value_id\"><field name=\"id\">EventBusValue.MICROBIT_PIN_EVT_PULSE_LO</field></shadow></value><statement name=\"HANDLER\"><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Red</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field></block></value></block></next></block></statement></block><"],[0,"/xml"]],"start1":14141,"start2":14141,"length1":844,"length2":8}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"\n})\n"],[-1,"control.onEvent(EventBusSource.MICROBIT_ID_IO_P2, EventBusValue.MICROBIT_PIN_EVT_PULSE_LO, function () {\n    scoreCircle.showColor(Connected.colors(Connected.NeoPixelColors.Red))\n    scoreCircle.show()\n})\n"],[0,"pins"]],"start1":313,"start2":313,"length1":213,"length2":8},{"diffs":[[0,"on() >= "],[-1,"3"],[1,"100"],[0,"0000) {\n"]],"start1":400,"start2":400,"length1":17,"length2":19},{"diffs":[[0,"tion())\n"],[1,"        scoreCircle.showColor(Connected.colors(Connected.NeoPixelColors.Yellow))\n        scoreCircle.show()\n"],[0,"    }\n})"]],"start1":477,"start2":477,"length1":16,"length2":124}]}]},{"timestamp":1726796060884,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"ue><"],[-1,"next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Red</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field></block></value></block></next></block></next><"],[0,"/blo"]],"start1":3425,"start2":3425,"length1":493,"length2":8},{"diffs":[[0,"pe=\""],[-1,"every_interval"],[1,"pins_on_pulsed"],[0,"\" x=\""],[-1,"908"],[1,"249"],[0,"\" y=\"9"],[-1,"86\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">5"],[1,"73\"><field name=\"pin\">DigitalPin.P1</field><field name=\"pulse\">PulseValue.Low</field><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"pins_pulse_duration\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">300"],[0,"00</"]],"start1":7856,"start2":7856,"length1":111,"length2":509},{"diffs":[[0,"shadow></value><"],[1,"/block></value><"],[0,"statement name=\""]],"start1":8373,"start2":8373,"length1":32,"length2":48},{"diffs":[[0,"statement name=\""],[-1,"HANDLER"],[1,"DO0"],[0,"\"><block type=\"C"]],"start1":8405,"start2":8405,"length1":39,"length2":35},{"diffs":[[0,"oin\""],[-1," inline=\"false\""],[0,"><mu"]],"start1":8737,"start2":8737,"length1":23,"length2":8},{"diffs":[[0," items=\""],[-1,"6"],[1,"2"],[0,"\"></muta"]],"start1":8751,"start2":8751,"length1":17,"length2":17},{"diffs":[[0,"=\"TEXT\">"],[-1,"R"],[1,"pulse"],[0,"</field>"]],"start1":8823,"start2":8823,"length1":17,"length2":21},{"diffs":[[0,"k type=\""],[-1,"device_get_analog_pin"],[1,"pins_pulse_duration\"></block></value></block></value></block></statement></block></statement></block><block type=\"every_interval\" x=\"1171\" y=\"1005"],[0,"\"><value"]],"start1":8946,"start2":8946,"length1":37,"length2":162},{"diffs":[[0,"5\"><value name=\""],[-1,"name"],[1,"interval"],[0,"\"><shadow type=\""]],"start1":9099,"start2":9099,"length1":36,"length2":40},{"diffs":[[0,"pe=\""],[-1,"analog_read_write_pin_shadow\"><field"],[1,"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"Connected_showUserText\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1069\" y=\"1269\"><value"],[0," name=\""],[-1,"p"],[1,"l"],[0,"in"],[1,"e"],[0,"\">"],[-1,"AnalogReadWritePin.P1</field></shadow></value></block></value"],[1,"<shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"text_join\" inline=\"false\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation items=\"6\"></mutation"],[0,"><va"]],"start1":9135,"start2":9135,"length1":117,"length2":582},{"diffs":[[0,"ame=\"ADD"],[-1,"2"],[1,"0"],[0,"\"><shado"]],"start1":9722,"start2":9722,"length1":17,"length2":17},{"diffs":[[0,"adow type=\"text\""],[1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><field name=\"TE"]],"start1":9736,"start2":9736,"length1":32,"length2":69},{"diffs":[[0,"XT\">"],[-1," C"],[1,"R"],[0,"</fi"]],"start1":9805,"start2":9805,"length1":10,"length2":9},{"diffs":[[0,"ame=\"ADD"],[-1,"3"],[1,"1"],[0,"\"><shado"]],"start1":9843,"start2":9843,"length1":17,"length2":17},{"diffs":[[0,"eld name=\"TEXT\">"],[1,"World"],[0,"</field></shadow"]],"start1":9877,"start2":9877,"length1":32,"length2":37},{"diffs":[[0,"_get_analog_pin\""],[1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><value name=\"na"]],"start1":9934,"start2":9934,"length1":32,"length2":69},{"diffs":[[0,"rite_pin_shadow\""],[1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><field name=\"pi"]],"start1":10034,"start2":10034,"length1":32,"length2":69},{"diffs":[[0,"itePin.P"],[-1,"2"],[1,"1"],[0,"</field>"]],"start1":10118,"start2":10118,"length1":17,"length2":17},{"diffs":[[0,"ame=\"ADD"],[-1,"4"],[1,"2"],[0,"\"><shado"]],"start1":10176,"start2":10176,"length1":17,"length2":17},{"diffs":[[0,"adow type=\"text\""],[1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><field name=\"TE"]],"start1":10190,"start2":10190,"length1":32,"length2":69},{"diffs":[[0,"\"TEXT\"> "],[-1,"L"],[1,"C"],[0,"</field>"]],"start1":10256,"start2":10256,"length1":17,"length2":17},{"diffs":[[0,"ame=\"ADD"],[-1,"5"],[1,"3"],[0,"\"><shado"]],"start1":10298,"start2":10298,"length1":17,"length2":17},{"diffs":[[0,"log_pin\""],[1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><value "]],"start1":10392,"start2":10392,"length1":16,"length2":53},{"diffs":[[0,"_shadow\""],[1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><field "]],"start1":10492,"start2":10492,"length1":16,"length2":53},{"diffs":[[0,"itePin.P"],[-1,"3"],[1,"2"],[0,"</field>"]],"start1":10568,"start2":10568,"length1":17,"length2":17},{"diffs":[[0,"ue><"],[-1,"/block></value><next><block type=\"Connected_showUserText\"><"],[0,"valu"]],"start1":10615,"start2":10615,"length1":67,"length2":8},{"diffs":[[0,"ue><value name=\""],[-1,"line"],[1,"ADD4"],[0,"\"><shadow type=\""]],"start1":10615,"start2":10615,"length1":36,"length2":36},{"diffs":[[0,"pe=\""],[-1,"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precisi"],[1,"text\" disabled-reas"],[0,"on"],[1,"s"],[0,"=\""],[-1,"0\"></mutation"],[1,"MANUALLY_DISABLED\""],[0,"><fi"]],"start1":10647,"start2":10647,"length1":91,"length2":50},{"diffs":[[0,"me=\""],[-1,"SLIDER\">2"],[1,"TEXT\"> L"],[0,"</fi"]],"start1":10703,"start2":10703,"length1":17,"length2":16},{"diffs":[[0,"ue><value name=\""],[-1,"text"],[1,"ADD5"],[0,"\"><shadow type=\""]],"start1":10737,"start2":10737,"length1":36,"length2":36},{"diffs":[[0,"=\"TEXT\">"],[-1,"Hello,ELECFREAKS"],[0,"</field>"]],"start1":10790,"start2":10790,"length1":32,"length2":16},{"diffs":[[0,"pe=\""],[-1,"text_join\"><mutation items=\"2\"></mutation"],[1,"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><va"]],"start1":10824,"start2":10824,"length1":49,"length2":67},{"diffs":[[0,"D\"><value name=\""],[-1,"ADD0"],[1,"name"],[0,"\"><shadow type=\""]],"start1":10885,"start2":10885,"length1":36,"length2":36},{"diffs":[[0,"pe=\""],[-1,"text\"><field name=\"TEXT\">hue </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field></shadow><block type=\"apds9960_readcolor\""],[1,"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P3</field></shadow></value"],[0,"></b"]],"start1":10917,"start2":10917,"length1":174,"length2":138},{"diffs":[[0,"ed_showUserText\""],[1," disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\""],[0,"><value name=\"li"]],"start1":11110,"start2":11110,"length1":32,"length2":84},{"diffs":[[0,"h_number_minmax\""],[1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><mutation min=\""]],"start1":11215,"start2":11215,"length1":32,"length2":69},{"diffs":[[0,"SLIDER\">"],[-1,"3"],[1,"2"],[0,"</field>"]],"start1":11346,"start2":11346,"length1":17,"length2":17},{"diffs":[[0,"type=\"text_join\""],[1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><mutation items"]],"start1":11478,"start2":11478,"length1":32,"length2":69},{"diffs":[[0,"adow type=\"text\""],[1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><field name=\"TE"]],"start1":11585,"start2":11585,"length1":32,"length2":69},{"diffs":[[0,"=\"TEXT\">"],[-1,"distanc"],[1,"hu"],[0,"e </fiel"]],"start1":11650,"start2":11650,"length1":23,"length2":18},{"diffs":[[0,"pe=\""],[-1,"sonarbit\"><field name=\"tPin\">DigitalPin.P8</field><field name=\"ePin\">DigitalPin.P9</field><field name=\"distance_unit\">Connected.Distance_Unit_List.Distance_Unit_cm</field"],[1,"apds9960_readcolor\" disabled-reasons=\"MANUALLY_DISABLED\""],[0,"></b"]],"start1":11776,"start2":11776,"length1":178,"length2":64},{"diffs":[[0,"ed_showUserText\""],[1," disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\""],[0,"><value name=\"li"]],"start1":11895,"start2":11895,"length1":32,"length2":84},{"diffs":[[0,"h_number_minmax\""],[1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><mutation min=\""]],"start1":12000,"start2":12000,"length1":32,"length2":69},{"diffs":[[0,"SLIDER\">"],[-1,"4"],[1,"3"],[0,"</field>"]],"start1":12131,"start2":12131,"length1":17,"length2":17},{"diffs":[[0,"type=\"text_join\""],[1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><mutation items"]],"start1":12263,"start2":12263,"length1":32,"length2":69},{"diffs":[[0,"adow type=\"text\""],[1," disabled-reasons=\"MANUALLY_DISABLED\""],[0,"><field name=\"TE"]],"start1":12370,"start2":12370,"length1":32,"length2":69},{"diffs":[[0,"XT\">"],[-1,"gestur"],[1,"distanc"],[0,"e </"]],"start1":12439,"start2":12439,"length1":14,"length2":15},{"diffs":[[0,"pe=\""],[-1,"Connected_getGesture\"></block></value></block></value></block></next></block></next></block></next></block></statement></block><block type=\"pins_on_pulsed\" x=\"181\" y=\"1301\""],[1,"sonarbit\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"tPin\">DigitalPin.P8</field"],[0,"><fi"]],"start1":12566,"start2":12566,"length1":180,"length2":94},{"diffs":[[0,"ld><field name=\""],[-1,"p"],[1,"eP"],[0,"in\">DigitalPin.P"]],"start1":12654,"start2":12654,"length1":33,"length2":34},{"diffs":[[0,"talPin.P"],[-1,"16"],[1,"9"],[0,"</field>"]],"start1":12680,"start2":12680,"length1":18,"length2":17},{"diffs":[[0,"me=\""],[-1,"pulse\">PulseValue.High</field></block"],[1,"distance_unit\">Connected.Distance_Unit_List.Distance_Unit_cm</field></block></value></block></value><next"],[0,"><bl"]],"start1":12706,"start2":12706,"length1":45,"length2":113},{"diffs":[[0,"LED\""],[-1," x=\"290\" y=\"1502\""],[0,"><va"]],"start1":12900,"start2":12900,"length1":25,"length2":8},{"diffs":[[0,"d name=\"SLIDER\">"],[-1,"1"],[1,"4"],[0,"</field></shadow"]],"start1":13064,"start2":13064,"length1":33,"length2":33},{"diffs":[[0,"XT\">"],[-1,"left"],[1,"gesture "],[0,"</fi"]],"start1":13380,"start2":13380,"length1":12,"length2":16},{"diffs":[[0,"k type=\""],[-1,"pins_pulse_duration"],[1,"Connected_getGesture"],[0,"\" disabl"]],"start1":13502,"start2":13502,"length1":35,"length2":36},{"diffs":[[0,"ck><"],[-1,"block type=\"controls_if\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED"],[1,"/next></block></next></block></next></block><block type=\"control_on_event"],[0,"\" x=\""],[-1,"417"],[1,"196"],[0,"\" y=\"1"],[-1,"614"],[1,"398"],[0,"\"><v"]],"start1":13606,"start2":13606,"length1":100,"length2":98},{"diffs":[[0,"8\"><value name=\""],[-1,"IF0"],[1,"src"],[0,"\"><shadow type=\""]],"start1":13699,"start2":13699,"length1":35,"length2":35},{"diffs":[[0,"pe=\""],[-1,"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">GTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"pins_pulse_duration\" disabled-reasons=\"MANUALLY_DISABLED\""],[1,"control_event_source_id\"><field name=\"id\">EventBusSource.MICROBIT_ID_IO_P2</field></shadow></value><value name=\"value\"><shadow type=\"control_event_value_id\"><field name=\"id\">EventBusValue.MICROBIT_PIN_EVT_PULSE_LO</field></shadow></value><statement name=\"HANDLER\"><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field"],[0,"></b"]],"start1":13730,"start2":13730,"length1":305,"length2":421},{"diffs":[[0,"ue><value name=\""],[-1,"B"],[1,"rgb"],[0,"\"><shadow type=\""]],"start1":14161,"start2":14161,"length1":33,"length2":35},{"diffs":[[0,"pe=\""],[-1,"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">30000"],[1,"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Red</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle"],[0,"</fi"]],"start1":14192,"start2":14192,"length1":81,"length2":235},{"diffs":[[0,"Circle</field></"],[-1,"shadow"],[1,"block"],[0,"></value></block"]],"start1":14417,"start2":14417,"length1":38,"length2":37},{"diffs":[[0,"value></block></"],[-1,"value"],[1,"next></block></statement"],[0,"></block></xml>"]],"start1":14441,"start2":14441,"length1":36,"length2":55}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"pins.onPulsed(DigitalPin.P16, PulseValue.High, function () {\n\t\n})\n"],[0,"func"]],"start1":0,"start2":0,"length1":70,"length2":4},{"diffs":[[0,"0\"))\n})\n"],[1,"control.onEvent(EventBusSource.MICROBIT_ID_IO_P2, EventBusValue.MICROBIT_PIN_EVT_PULSE_LO, function () {\n    scoreCircle.showColor(Connected.colors(Connected.NeoPixelColors.Red))\n    scoreCircle.show()\n})\npins.onPulsed(DigitalPin.P1, PulseValue.Low, function () {\n    if (pins.pulseDuration() >= 30000) {\n        Connected.showUserText(1, \"pulse\" + pins.pulseDuration())\n    }\n})\n"],[0,"input.on"]],"start1":309,"start2":309,"length1":16,"length2":396},{"diffs":[[0,"1\"))\n})\n"],[1,"let scoreCircle: Connected.Strip = null\n"],[0,"Connecte"]],"start1":782,"start2":782,"length1":16,"length2":56},{"diffs":[[0,".show()\n"],[-1,"let "],[0,"scoreCir"]],"start1":1364,"start2":1364,"length1":20,"length2":16},{"diffs":[[0,"GB)\n"],[-1,"scoreCircle.showColor(Connected.colors(Connected.NeoPixelColors.Red))\nscoreCircle.show()\nloops.everyInterval(500, function () {\n    Connected.showUserText(1, \"R\" + pins.analogReadPin(AnalogReadWritePin.P1) + \" C\" + pins.analogReadPin(AnalogReadWritePin.P2) + \" L\" + pins.analogReadPin(AnalogReadWritePin.P3))\n    Connected.showUserText(2, \"hue \" + Connected.readColor())\n    Connected.showUserText(3, \"distance \" + Connected.ultrasoundSensor(DigitalPin.P8, DigitalPin.P9, Connected.Distance_Unit_List.Distance_Unit_cm))\n    Connected.showUserText(4, \"gesture \" + Connected.getGesture())"],[1,"loops.everyInterval(500, function () {\n\t"],[0,"\n})\n"]],"start1":1458,"start2":1458,"length1":594,"length2":48}]}]},{"timestamp":1726796631050,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"x=\"1"],[-1,"47"],[1,"81"],[0,"\" y=\"13"],[-1,"36"],[1,"01"],[0,"\"><f"]],"start1":11919,"start2":11919,"length1":19,"length2":19},{"diffs":[[0,"ld><"],[-1,"statement name=\"HANDLER\""],[1,"/block"],[0,"><bl"]],"start1":12016,"start2":12016,"length1":32,"length2":14},{"diffs":[[0,"k type=\""],[-1,"controls_if"],[1,"Connected_showUserText\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"290\" y=\"1502"],[0,"\"><value"]],"start1":12032,"start2":12032,"length1":27,"length2":107},{"diffs":[[0,"2\"><value name=\""],[-1,"IF0"],[1,"line"],[0,"\"><shadow type=\""]],"start1":12130,"start2":12130,"length1":35,"length2":36},{"diffs":[[0,"pe=\""],[-1,"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GTE</field"],[1,"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value"],[0,"><va"]],"start1":12162,"start2":12162,"length1":118,"length2":175},{"diffs":[[0,"ue><value name=\""],[-1,"A"],[1,"text"],[0,"\"><shadow type=\""]],"start1":12331,"start2":12331,"length1":33,"length2":36},{"diffs":[[0,"hadow type=\""],[-1,"math_number"],[1,"text"],[0,"\"><field nam"]],"start1":12355,"start2":12355,"length1":35,"length2":28},{"diffs":[[0,"t\"><field name=\""],[-1,"NUM\">0"],[1,"TEXT\">Hello,ELECFREAKS"],[0,"</field></shadow"]],"start1":12370,"start2":12370,"length1":38,"length2":54},{"diffs":[[0,"pe=\""],[-1,"pins_pulse_duration\"></block></value"],[1,"text_join\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation items=\"2\"></mutation"],[0,"><va"]],"start1":12434,"start2":12434,"length1":44,"length2":86},{"diffs":[[0,"on><value name=\""],[-1,"B"],[1,"ADD0"],[0,"\"><shadow type=\""]],"start1":12514,"start2":12514,"length1":33,"length2":36},{"diffs":[[0,"hadow type=\""],[-1,"math_number"],[1,"text\" disabled-reasons=\"MANUALLY_DISABLED"],[0,"\"><field nam"]],"start1":12538,"start2":12538,"length1":35,"length2":65},{"diffs":[[0,"me=\""],[-1,"NUM\">30000"],[1,"TEXT\">left"],[0,"</fi"]],"start1":12602,"start2":12602,"length1":18,"length2":18},{"diffs":[[0,"ue><"],[-1,"/block></value><statement name=\"DO0\"><block type=\"Connected_showUserText\"><value name=\"line\""],[1,"value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field"],[0,"><"],[1,"/"],[0,"shadow"],[-1," type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precisi"],[1,"><block type=\"pins_pulse_duration\" disabled-reas"],[0,"on"],[1,"s"],[0,"=\""],[-1,"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value"],[1,"MANUALLY_DISABLED\"></block></value></block></value></block><block type=\"controls_if\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"417\" y=\"1614\""],[0,"><va"]],"start1":12638,"start2":12638,"length1":245,"length2":292},{"diffs":[[0,"4\"><value name=\""],[-1,"text"],[1,"IF0"],[0,"\"><shadow type=\""]],"start1":12924,"start2":12924,"length1":36,"length2":35},{"diffs":[[0,"\"><shadow type=\""],[-1,"text"],[1,"logic_boolean"],[0,"\"><field name=\"T"]],"start1":12943,"start2":12943,"length1":36,"length2":45},{"diffs":[[0,"d name=\""],[-1,"TEXT\">Hello,ELECFREAKS"],[1,"BOOL\">TRUE"],[0,"</field>"]],"start1":12979,"start2":12979,"length1":38,"length2":26},{"diffs":[[0,"pe=\""],[-1,"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">left</field></shadow></value"],[1,"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">GTE</field"],[0,"><va"]],"start1":13023,"start2":13023,"length1":136,"length2":87},{"diffs":[[0,"d><value name=\"A"],[-1,"DD1"],[0,"\"><shadow type=\""]],"start1":13105,"start2":13105,"length1":35,"length2":32},{"diffs":[[0,"\"><shadow type=\""],[-1,"text"],[1,"math_number"],[0,"\"><field name=\"T"]],"start1":13121,"start2":13121,"length1":36,"length2":43},{"diffs":[[0,"field name=\""],[-1,"TEXT\">World"],[1,"NUM\">0"],[0,"</field></sh"]],"start1":13151,"start2":13151,"length1":35,"length2":30},{"diffs":[[0,"ion\""],[-1,"></block></value></block></value></block></statement"],[1," disabled-reasons=\"MANUALLY_DISABLED\"></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">30000</field></shadow></value"],[0,"></b"]],"start1":13215,"start2":13215,"length1":60,"length2":189},{"diffs":[[0,"e></block></"],[-1,"statement"],[1,"value"],[0,"></block></x"]],"start1":13399,"start2":13399,"length1":33,"length2":29}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,") {\n"],[-1,"    if (pins.pulseDuration() >= 30000) {\n        Connected.showUserText(1, \"left\" + pins.pulseDuration())\n    }"],[1,"\t"],[0,"\n})\n"]],"start1":57,"start2":57,"length1":119,"length2":9}]}]},{"timestamp":1726796691551,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[1,"5"],[0,"0\" y=\""],[-1,"0"],[1,"57"],[0,"\"><s"]],"start1":330,"start2":330,"length1":15,"length2":17},{"diffs":[[0,"=\"14"],[-1,"1"],[1,"6"],[0,"6\" y=\""],[-1,"-37"],[1,"20"],[0,"\"><f"]],"start1":4156,"start2":4156,"length1":18,"length2":17},{"diffs":[[0," x=\""],[-1,"85"],[1,"90"],[0,"3\" y=\""],[-1,"2"],[1,"59"],[0,"\"><f"]],"start1":4539,"start2":4539,"length1":17,"length2":18},{"diffs":[[0,"=\"11"],[-1,"66"],[1,"59"],[0,"\" y=\""],[-1,"28"],[1,"39"],[0,"5\"><"]],"start1":4931,"start2":4931,"length1":17,"length2":17},{"diffs":[[0," x=\""],[-1,"85"],[1,"90"],[0,"8\" y=\"9"],[-1,"29"],[1,"86"],[0,"\"><v"]],"start1":8360,"start2":8360,"length1":19,"length2":19},{"diffs":[[0," x=\""],[-1,"9"],[1,"14"],[0,"7\" y=\"1"],[-1,"279"],[1,"336"],[0,"\"><f"]],"start1":11918,"start2":11918,"length1":19,"length2":20}]}]},{"timestamp":1726797506449,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"pins.onPulsed(DigitalPin.P16, PulseValue.High, function () {\n    if (pins.pulseDuration() >= 30000) {\n        Connected.showUserText(1, \"left\" + pins.pulseDuration())\n    }\n})\n"],[0,"function isNearl"]],"start1":0,"start2":0,"length1":16,"length2":192}]}]},{"timestamp":1726797516174,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,".NeoPixelColors."],[-1,"Blu"],[1,"Orang"],[0,"e</field></shado"]],"start1":1909,"start2":1909,"length1":35,"length2":37},{"diffs":[[0,".NeoPixelColors."],[-1,"Blue"],[1,"Green"],[0,"</field></shadow"]],"start1":2793,"start2":2793,"length1":36,"length2":37},{"diffs":[[0,"ors."],[-1,"Blue"],[1,"Red"],[0,"</fi"]],"start1":3688,"start2":3688,"length1":12,"length2":11},{"diffs":[[0," x=\""],[-1,"124"],[1,"858"],[0,"\" y=\""],[-1,"1063"],[1,"929"],[0,"\"><v"]],"start1":8358,"start2":8358,"length1":20,"length2":19},{"diffs":[[0,"/block><"],[1,"block type=\"pins_on_pulsed\" x=\"97\" y=\"1279\"><field name=\"pin\">DigitalPin.P16</field><field name=\"pulse\">PulseValue.High</field><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"pins_pulse_duration\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">30000</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">left</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field></shadow><block type=\"pins_pulse_duration\"></block></value></block></value></block></statement></block></statement></block><"],[0,"/xml>"]],"start1":11881,"start2":11881,"length1":13,"length2":1222}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"PixelColors."],[-1,"Blu"],[1,"Orang"],[0,"e))\nsockLigh"]],"start1":727,"start2":727,"length1":27,"length2":29},{"diffs":[[0,"lColors."],[-1,"Blue"],[1,"Green"],[0,"))\nwheel"]],"start1":917,"start2":917,"length1":20,"length2":21},{"diffs":[[0,"ors."],[-1,"Blue"],[1,"Red"],[0,"))\ns"]],"start1":1106,"start2":1106,"length1":12,"length2":11}]}]},{"timestamp":1726797557273,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"x=\"1"],[-1,"220"],[1,"166"],[0,"\" y=\"2"],[-1,"34"],[1,"85"],[0,"\"><m"]],"start1":4926,"start2":4926,"length1":19,"length2":19}]}]},{"timestamp":1726852401540,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"x=\"1"],[-1,"3"],[1,"24"],[0,"\" y=\""],[-1,"980"],[1,"1063"],[0,"\"><v"]],"start1":8357,"start2":8357,"length1":17,"length2":19}]}]},{"timestamp":1726852410355,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"993"],[1,"1416"],[0,"\" y=\"-"],[1,"3"],[0,"7\"><"]],"start1":4150,"start2":4150,"length1":17,"length2":19},{"diffs":[[0,">Button."],[-1,"A"],[1,"B"],[0,"</field>"]],"start1":4186,"start2":4186,"length1":17,"length2":17},{"diffs":[[0,"ayFileNl"],[-1,"2"],[0,"\"><value"]],"start1":4354,"start2":4354,"length1":17,"length2":16},{"diffs":[[0,"XT\">"],[-1,"1_1_25_100"],[1,"2_1_1"],[0,"</fi"]],"start1":4425,"start2":4425,"length1":18,"length2":13},{"diffs":[[0," x=\""],[-1,"1520"],[1,"853"],[0,"\" y=\""],[-1,"-20"],[1,"2"],[0,"\"><f"]],"start1":4536,"start2":4536,"length1":20,"length2":17},{"diffs":[[0,"e=\"NAME\">Button."],[-1,"B"],[1,"A"],[0,"</field><stateme"]],"start1":4561,"start2":4561,"length1":33,"length2":33},{"diffs":[[0,"type=\"playFileNl"],[1,"2"],[0,"\"><value name=\"s"]],"start1":4729,"start2":4729,"length1":32,"length2":33},{"diffs":[[0,"eld name=\"TEXT\">"],[-1,"2_1_1"],[1,"1_1_25_100"],[0,"</field></shadow"]],"start1":4797,"start2":4797,"length1":37,"length2":42},{"diffs":[[0," x=\""],[-1,"957"],[1,"1220"],[0,"\" y=\"2"],[-1,"22"],[1,"34"],[0,"\"><m"]],"start1":4925,"start2":4925,"length1":19,"length2":20}]}]},{"timestamp":1726852415600,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"67"],[1,"1"],[0,"3\" y=\""],[-1,"776"],[1,"980"],[0,"\"><v"]],"start1":8356,"start2":8356,"length1":19,"length2":18}]}]},{"timestamp":1726864909980,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"t"],[1,"block"],[0,"sprj\"\n}\n"]],"start1":514,"start2":514,"length1":17,"length2":21}]}]},{"timestamp":1726864942563,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"    "],[-1,"enum mp3type{\n        music,\n        voice,\n        sfx\n    }\n\n    //% blockId=nl_mp3_ini"],[1,"//% blockId=notlegos_mp3_ports_se"],[0,"t\n  "]],"start1":26099,"start2":26099,"length1":97,"length2":41},{"diffs":[[0,"ck=\""],[-1,"MP3 for %type"],[1,"Connect MP3"],[0," bit"]],"start1":26187,"start2":26187,"length1":21,"length2":19},{"diffs":[[0,"at pin %"],[-1,"s"],[1,"d"],[0,"Pin\"\n   "]],"start1":26207,"start2":26207,"length1":17,"length2":17},{"diffs":[[0,"rts("],[-1,"type:mp3type, "],[0,"sPin"]],"start1":26287,"start2":26287,"length1":22,"length2":8}]}]},{"timestamp":1726865407448,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"\n    }\n\n"],[1,"    enum mp3type{\n        music,\n        voice,\n        sfx\n    }"],[0,"\n"],[-1,""],[0,"\n    //%"]],"start1":26091,"start2":26091,"length1":17,"length2":82},{"diffs":[[0,"ck=\""],[-1,"Ready MP3"],[1,"MP3 for %type "],[0,"bit at "],[1,"pin "],[0,"%sPin"],[-1," for %type"],[0,"\"\n  "]],"start1":26243,"start2":26243,"length1":39,"length2":38},{"diffs":[[0,"if ("],[-1,"type == mp3type.music"],[1,"mp3bits == 0"],[0,"){\n "]],"start1":26396,"start2":26396,"length1":29,"length2":20},{"diffs":[[0,"}\n}\n"],[-1,"enum mp3type {\n    music,\n    voice,\n    sfx\n}"]],"start1":37278,"start2":37278,"length1":50,"length2":4}]}]},{"timestamp":1726865935264,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"te]\n"],[-1,"    var mp3musicPin = null\n    var mp3music = false\n    \n\n"],[0,"\n   "]],"start1":849,"start2":849,"length1":66,"length2":8},{"diffs":[[0," }\n\n"],[-1,"//////////////////////////////////////////////////////////"],[0,"\n\n  "]],"start1":26095,"start2":26095,"length1":66,"length2":8},{"diffs":[[0," mp3"],[-1,"musicP"],[1,"Ap"],[0,"in ="]],"start1":26371,"start2":26371,"length1":14,"length2":10},{"diffs":[[0," mp3"],[-1,"music = true"],[1,"bits = 1"],[0,"\n   "]],"start1":26398,"start2":26398,"length1":20,"length2":16},{"diffs":[[0,"if ("],[-1,"type == mp3type.voice){\n            mp3voicePin = sPin\n            mp3voice = true\n        } else if (type == mp3type.sfx"],[1,"mp3bits == 1"],[0,"){\n "]],"start1":26426,"start2":26426,"length1":129,"length2":20},{"diffs":[[0," mp3"],[-1,"sfxP"],[1,"Bp"],[0,"in ="]],"start1":26456,"start2":26456,"length1":12,"length2":10},{"diffs":[[0," mp3"],[-1,"sfx = true\n        }\n        sendMP3volumeQuick(sPin)\n    }\n\n    function sendMP3volumeQuick(sPin: SerialPin): void {\n        let theVolume = 5\n        // if (sPin == mp3Apin) {\n        //     theVolume = Math.round(potRead() * mp3Avolume)\n        // } else if (sPin == mp3Bpin) "],[1,"bits = 2\n        } else if (mp3bits == 2)"],[0,"{\n  "]],"start1":26483,"start2":26483,"length1":287,"length2":49},{"diffs":[[0,"    "],[-1,"//"],[0,"    "],[-1," theVolume = Math.round(potRead() * mp3Bvolume)\n        // } else if (sPin == mp3Cpin) {\n        //     theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        // }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n\n\n\n"],[1,"mp3Cpin = sPin\n            mp3bits = 3\n        }\n    }"],[0,"\n\n  "]],"start1":26534,"start2":26534,"length1":467,"length2":66}]}]},{"timestamp":1726866533359,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"d_Byte]\n    "],[-1,"let"],[1,"var"],[0," mp3musicPin"]],"start1":845,"start2":845,"length1":27,"length2":27},{"diffs":[[0," = null\n    "],[-1,"let"],[1,"var"],[0," mp3music = "]],"start1":872,"start2":872,"length1":27,"length2":27},{"diffs":[[0,"    "],[-1,"let mp3voicePin = null\n    let mp3voice = false\n    let mp3sfxPin = null\n    let mp3sfx = false"],[1,"\n"],[0,"\n\n  "]],"start1":905,"start2":905,"length1":103,"length2":9},{"diffs":[[0,"  }\n"],[-1,"    //% blockId=nl_mp3_music\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %genre music\"\n    //% dPin.fieldEditor=\"gridpicker\"\n    export function mp3musicPlay(genre:musicGenre): void{\n        \n    }"],[1,"\n"],[0,"\n\n\n\n"]],"start1":27461,"start2":27461,"length1":219,"length2":9},{"diffs":[[0,"fx\n}"],[-1,"\nenum musicGenre {\n    intro,\n    tutorial,\n    awaiting,\n    level,\n    won,\n    lost\n}"]],"start1":38143,"start2":38143,"length1":92,"length2":4}]}]},{"timestamp":1726866911023,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"    "],[-1,"export function mp3musicPlay(genre:musicGenre): void{\n\n    }\n\n    //% blockId=nl_mp3_say\n    //% subcateg"],[1,"//% dPin.fieldEdit"],[0,"or"],[-1,"y"],[0,"=\""],[-1,"MP3\" group=\"MP3\"\n    //% block=\"Say %saying as player\"\n    export function mp3sayPlay(saying: playerSaying"],[1,"gridpicker\"\n    export function mp3musicPlay(genre:musicGenre"],[0,"): void"],[-1," "],[0,"{\n"],[1,"        "],[0,"\n   "]],"start1":27660,"start2":27660,"length1":234,"length2":108},{"diffs":[[0,"   }\n\n\n\n"],[1,"\n\n"],[0,"    //% "]],"start1":27766,"start2":27766,"length1":16,"length2":18},{"diffs":[[0,"st\n}"],[-1,"\nexport playerSaying{\n    ready,\n    yay,\n    intro,\n    nay,\n    ouch,\n    success,\n    failure,\n    won,\n    lost,\n    hurry\n}\nexport sfxType{\n    name,\n    \n}"]],"start1":38535,"start2":38535,"length1":165,"length2":4}]}]},{"timestamp":1726867507421,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"    "],[-1,"correct,\n    incorrect,\n    ghost,\n    fire,\n    explosion,\n    splash,\n    spark,\n    slash,\n    retry,\n    gameover\n}\nexport voiceSay{\n    name,\n    retry,\n    gameover,\n    welcome,\n    howto,"],[0,"\n}"]],"start1":38818,"start2":38818,"length1":201,"length2":6}]}]},{"timestamp":1726867896646,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"ic,\n    "],[-1,"player"],[1,"voice"],[0,",\n    sf"]],"start1":38551,"start2":38551,"length1":22,"length2":21}]}]},{"timestamp":1726869428176,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"\n    sfx"],[-1,"voice"],[0,"\n}\nenum "]],"start1":38566,"start2":38566,"length1":21,"length2":16}]}]},{"timestamp":1726869430693,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"um\n\n"],[-1,"\n    export enum mp3type {\n        music,\n        player,\n        sfxvoice\n    }\n    export enum musicGenre {\n        intro,\n        tutorial,\n        awaiting,\n        level,\n        won,\n        lost\n    }\n    export enum playerSaying {\n        ready,\n        yay,\n        intro,\n        nay,\n        ouch,\n        success,\n        failure,\n        won,\n        lost,\n        hurry\n    }\n    export enum sfxType {\n        correct,\n        incorrect,\n        ghost,\n        fire,\n        explosion,\n        splash,\n        spark,\n        slash\n    }\n    export enum voiceSay {\n        name,\n        retry,\n        complete,\n        gameover,\n        welcome,\n        howto\n    }\n\n\n\n\n\n"],[0,"    "]],"start1":36567,"start2":36567,"length1":693,"length2":8},{"diffs":[[0,"    }\n}\n"],[1,"enum mp3type {\n    music,\n    player,\n    sfxvoice\n}\nenum musicGenre {\n    intro,\n    tutorial,\n    awaiting,\n    level,\n    won,\n    lost\n}\nexport playerSaying{\n    ready,\n    yay,\n    intro,\n    nay,\n    ouch,\n    success,\n    failure,\n    won,\n    lost,\n    hurry\n}\nexport sfxType{\n    name,\n    correct,\n    incorrect,\n    ghost,\n    fire,\n    explosion,\n    splash,\n    spark,\n    slash,\n    retry,\n    gameover\n}\nexport voiceSay{\n    name,\n    retry,\n    gameover,\n    welcome,\n    howto,\n}"]],"start1":38521,"start2":38521,"length1":8,"length2":504}]}]},{"timestamp":1726869802649,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"    "],[-1,"begin,\n        retry,\n        next"],[1,"retry"],[0,",\n  "]],"start1":37167,"start2":37167,"length1":42,"length2":13}]}]},{"timestamp":1726870329091,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"slash\n    }\n"],[-1,"\n"],[0,"    export e"]],"start1":37110,"start2":37110,"length1":25,"length2":24},{"diffs":[[0,"voiceSay"],[-1,"ing"],[0," {\n     "]],"start1":37138,"start2":37138,"length1":19,"length2":16},{"diffs":[[0,"    "],[-1,"intro,\n        howto1,\n        howto2,\n        howto3,\n        howto4,\n        howto5,\n        howto6,\n        howto7,\n        howto8,\n        howto9\n    }\n\n    export enum magicianSaysSide {\n        left,\n        right\n    }\n\n    export enum magicianDifficulty {\n        easy,\n        medium,\n        hard\n    }\n\n    export enum spotName {\n        A,\n        medium,\n        hard\n    }\n"],[1,"howto\n    }"],[0,"\n\n\n\n"]],"start1":37264,"start2":37264,"length1":395,"length2":19}]}]},{"timestamp":1726870931526,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"        "],[-1,"B"],[1,"medium"],[0,",\n      "]],"start1":37624,"start2":37624,"length1":17,"length2":22}]}]},{"timestamp":1726870933524,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"mp3type."],[-1,"player"],[1,"voice"],[0,"){\n     "]],"start1":26656,"start2":26656,"length1":22,"length2":21},{"diffs":[[0,"type.sfx"],[-1,"voice"],[0,"){\n     "]],"start1":26761,"start2":26761,"length1":21,"length2":16},{"diffs":[[0,"}\n\n\n"],[-1,"    //% blockId=nl_mp3_voice\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %voice as voice\"\n    export function mp3voicePlay(voice: voiceSaying): void {\n\n    }\n\n    //% blockId=nl_mp3_voice\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Magician says on the %side difficulty %difficulty\"\n    export function mp3magician(side:magicianSaysSide, difficulty:magicianDifficulty): void {\n\n    }\n\n    //% blockId=nl_mp3_voice\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %type sound effect\"\n    export function mp3sfxPlay(voice: voiceSaying): void {\n\n    }\n\n"],[0,"\n   "]],"start1":27895,"start2":27895,"length1":589,"length2":8},{"diffs":[[0,"    "],[-1,"C,\n        D,\n        E,\n        F,\n        G,\n        H,\n        I"],[1,"hard"],[0,"\n   "]],"start1":37639,"start2":37639,"length1":75,"length2":12}]}]},{"timestamp":1726871533209,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"=\"Play %"],[-1,"sfx"],[1,"type"],[0," sound e"]],"start1":28392,"start2":28392,"length1":19,"length2":20},{"diffs":[[0,"lay("],[-1,"sfx: sfxType"],[1,"voice: voiceSaying"],[0,"): v"]],"start1":28446,"start2":28446,"length1":20,"length2":26},{"diffs":[[0,"e\n    }\n"],[-1,"    \n"],[0,"    expo"]],"start1":37231,"start2":37231,"length1":21,"length2":16},{"diffs":[[0,"     lost\n    }\n"],[-1,"\n"],[0,"    export enum "]],"start1":37350,"start2":37350,"length1":33,"length2":32},{"diffs":[[0,"hurry\n    }\n"],[-1,"\n"],[0,"    export e"]],"start1":37536,"start2":37536,"length1":25,"length2":24},{"diffs":[[0," }\n\n"],[-1,"    export enum playerChar {\n        mario,\n        luigi,\n        peach,\n        daisy,\n        toad,\n        wario\n    }\n"],[0,"\n\n\n\n"]],"start1":38301,"start2":38301,"length1":131,"length2":8}]}]},{"timestamp":1726872058791,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0," mp3"],[-1,"player = false\n    let mp3sfx"],[1,"voice"],[0,"Pin "]],"start1":912,"start2":912,"length1":37,"length2":13},{"diffs":[[0," let mp3"],[-1,"sfx"],[1,"voice"],[0," = false"]],"start1":935,"start2":935,"length1":19,"length2":21},{"diffs":[[0," mp3"],[-1,"musicVol = 0\n    let mp3playerPin = null\n    let mp3playerVol = 0\n    let mp3sfxVol = 0"],[1,"sfxPin = null\n    let mp3sfx = false"],[0,"\n\n  "]],"start1":964,"start2":964,"length1":95,"length2":44},{"diffs":[[0,"rue\n"],[-1,"            mp3musicVol = 60\n"],[0,"    "]],"start1":26625,"start2":26625,"length1":37,"length2":8},{"diffs":[[0,"     mp3"],[-1,"player"],[1,"voice"],[0,"Pin = sP"]],"start1":26680,"start2":26680,"length1":22,"length2":21},{"diffs":[[0," mp3"],[-1,"player"],[1,"voice"],[0," = true\n"],[-1,"            mp3playerVol = 100\n"],[0,"    "]],"start1":26715,"start2":26715,"length1":53,"length2":21},{"diffs":[[0,"rue\n"],[-1,"            mp3sfxVol = 80\n"],[0,"    "]],"start1":26829,"start2":26829,"length1":35,"length2":8},{"diffs":[[0,"meQuick("],[-1,"type"],[1,"sPin"],[0,")\n    }\n"]],"start1":26862,"start2":26862,"length1":20,"length2":20},{"diffs":[[0,"ick("],[-1,"bit:mp3type): void {\n        if ()\n"],[1,"sPin: SerialPin): void {"],[0,"\n   "]],"start1":26911,"start2":26911,"length1":43,"length2":32},{"diffs":[[0,")\n    }\n"],[-1,"\n\n\n"],[0,"    //% "]],"start1":27557,"start2":27557,"length1":19,"length2":16},{"diffs":[[0,"voice\n    }\n"],[1,"    "],[0,"\n    export "]],"start1":37220,"start2":37220,"length1":24,"length2":28}]}]},{"timestamp":1726872658508,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"cPin"],[-1,":SerialPin"],[1," = null"],[0,"\n   "]],"start1":868,"start2":868,"length1":18,"length2":15},{"diffs":[[0,"if ("],[-1,"bit == mp3type.music){\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        }"],[1,")"],[0,"\n\n  "]],"start1":27106,"start2":27106,"length1":122,"length2":9},{"diffs":[[0,"olume = "],[-1,"1"],[0,"5\n      "]],"start1":27129,"start2":27129,"length1":17,"length2":16},{"diffs":[[0,"   // }\n"],[1,"        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n"],[0,"        "]],"start1":27464,"start2":27464,"length1":16,"length2":87},{"diffs":[[0,"d{\n\n"],[-1,"            serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            CMD = 15\n            para1 = parseInt(fileNum)\n            para2 = parseInt(volumeNum)\n            para1 = parseInt(\"1\")\n            para2 = parseInt(\"1\")\n            dataArr[3] = CMD\n            dataArr[5] = para1\n            dataArr[6] = para2\n            mp3_checkSum()\n            mp3_sendDataFast()\n        }\n\n\n\n\n"],[0,"    "]],"start1":27897,"start2":27897,"length1":413,"length2":8}]}]},{"timestamp":1726873258378,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"ble id=\""],[-1,"gX}3[UJe6C9wl9p+Uoj="],[1,"}g^Kh@tsk|1f0]fNt=Se"],[0,"\">digits"]],"start1":72,"start2":72,"length1":36,"length2":36},{"diffs":[[0,"ble id=\""],[-1,"vSl89nNM7#y}HO_i4w8g"],[1,"x4t~+B8#]@461X;Q^-0c"],[0,"\">sockLi"]],"start1":125,"start2":125,"length1":36,"length2":36},{"diffs":[[0,"ble id=\""],[-1,"kx-+|q2cYu;$^R?pYwdZ"],[1,"Eg1g}PwlELMuekdWY2P8"],[0,"\">wheelL"]],"start1":182,"start2":182,"length1":36,"length2":36},{"diffs":[[0,"ble id=\""],[-1,"zVo^^v6=8Jgq7FyFiNOV"],[1,"*;QQG[u[F9PMmZkEKiRJ"],[0,"\">scoreC"]],"start1":240,"start2":240,"length1":36,"length2":36},{"diffs":[[0," x=\""],[-1,"34"],[1,"0"],[0,"\" y=\""],[-1,"52"],[1,"0"],[0,"\"><s"]],"start1":330,"start2":330,"length1":17,"length2":15},{"diffs":[[0,"id=\""],[-1,"gX}3[UJe6C9wl9p+Uoj="],[1,"}g^Kh@tsk|1f0]fNt=Se"],[0,"\">di"]],"start1":857,"start2":857,"length1":28,"length2":28},{"diffs":[[0,"AR\" id=\""],[-1,"vSl89nNM7#y}HO_i4w8g"],[1,"x4t~+B8#]@461X;Q^-0c"],[0,"\">sockLi"]],"start1":1283,"start2":1283,"length1":36,"length2":36},{"diffs":[[0,"AR\" id=\""],[-1,"vSl89nNM7#y}HO_i4w8g"],[1,"x4t~+B8#]@461X;Q^-0c"],[0,"\">sockLi"]],"start1":1767,"start2":1767,"length1":36,"length2":36},{"diffs":[[0,"id=\""],[-1,"vSl89nNM7#y}HO_i4w8g"],[1,"x4t~+B8#]@461X;Q^-0c"],[0,"\">so"]],"start1":2054,"start2":2054,"length1":28,"length2":28},{"diffs":[[0,"AR\" id=\""],[-1,"kx-+|q2cYu;$^R?pYwdZ"],[1,"Eg1g}PwlELMuekdWY2P8"],[0,"\">wheelL"]],"start1":2162,"start2":2162,"length1":36,"length2":36},{"diffs":[[0,"AR\" id=\""],[-1,"kx-+|q2cYu;$^R?pYwdZ"],[1,"Eg1g}PwlELMuekdWY2P8"],[0,"\">wheelL"]],"start1":2648,"start2":2648,"length1":36,"length2":36},{"diffs":[[0,"id=\""],[-1,"kx-+|q2cYu;$^R?pYwdZ"],[1,"Eg1g}PwlELMuekdWY2P8"],[0,"\">wh"]],"start1":2936,"start2":2936,"length1":28,"length2":28},{"diffs":[[0,"AR\" id=\""],[-1,"zVo^^v6=8Jgq7FyFiNOV"],[1,"*;QQG[u[F9PMmZkEKiRJ"],[0,"\">scoreC"]],"start1":3045,"start2":3045,"length1":36,"length2":36},{"diffs":[[0,"AR\" id=\""],[-1,"zVo^^v6=8Jgq7FyFiNOV"],[1,"*;QQG[u[F9PMmZkEKiRJ"],[0,"\">scoreC"]],"start1":3530,"start2":3530,"length1":36,"length2":36},{"diffs":[[0,"id=\""],[-1,"zVo^^v6=8Jgq7FyFiNOV"],[1,"*;QQG[u[F9PMmZkEKiRJ"],[0,"\">sc"]],"start1":3818,"start2":3818,"length1":28,"length2":28},{"diffs":[[0,"ue><"],[-1,"next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow><block type=\"playFileNl2\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">1_1_25_100</field></shadow></value></block></value></block></next><"],[0,"/blo"]],"start1":3876,"start2":3876,"length1":281,"length2":8},{"diffs":[[0,"x=\"9"],[-1,"25"],[1,"93"],[0,"\" y=\""],[-1,"20"],[1,"-7"],[0,"\"><f"]],"start1":4151,"start2":4151,"length1":17,"length2":17},{"diffs":[[0,"x=\"1"],[-1,"466"],[1,"520"],[0,"\" y=\""],[1,"-"],[0,"20\">"]],"start1":4541,"start2":4541,"length1":16,"length2":17},{"diffs":[[0,"pe=\""],[-1,"every_interval"],[1,"function_definition"],[0,"\" x=\""],[-1,"1949"],[1,"957"],[0,"\" y=\"2"],[-1,"0\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value><statement name=\"HANDLER\"><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0"],[1,"22\"><mutation name=\"isNearly\" functionid=\"b1Q}-qv~wJN$grhC!ppp\"><arg name=\"reference\" id=\"5nona16w6rbe5o9cs7yri\" type=\"number\"></arg><arg name=\"reading\" id=\"1603v12143812bjzv2he\" type=\"number\"></arg><arg name=\"tolerance\" id=\"huqcis1hoaqr7iq5ev9lm\" type=\"number\"></arg></mutation><field name=\"function_name\">isNearly</field><value name=\"5nona16w6rbe5o9cs7yri\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reference</field></block></value><value name=\"1603v12143812bjzv2he\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true"],[0,"\"></"]],"start1":4902,"start2":4902,"length1":292,"length2":641},{"diffs":[[0,"me=\""],[-1,"SLIDER\">1"],[1,"VALUE\">reading"],[0,"</fi"]],"start1":5561,"start2":5561,"length1":17,"length2":22},{"diffs":[[0,"eading</field></"],[-1,"shadow"],[1,"block"],[0,"></value><value "]],"start1":5573,"start2":5573,"length1":38,"length2":37},{"diffs":[[0,"me=\""],[-1,"text\"><block type=\"text_join\" inline=\"false"],[1,"huqcis1hoaqr7iq5ev9lm\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">tolerance</field></block></value><statement name=\"STACK\"><block type=\"controls_if"],[0,"\"><m"]],"start1":5612,"start2":5612,"length1":51,"length2":215},{"diffs":[[0,"ion "],[-1,"items=\"6"],[1,"else=\"1"],[0,"\"></"]],"start1":5831,"start2":5831,"length1":16,"length2":15},{"diffs":[[0,"on><value name=\""],[-1,"ADD"],[1,"IF"],[0,"0\"><shadow type="]],"start1":5852,"start2":5852,"length1":35,"length2":34},{"diffs":[[0,"\"><shadow type=\""],[-1,"text"],[1,"logic_boolean"],[0,"\"><field name=\"T"]],"start1":5871,"start2":5871,"length1":36,"length2":45},{"diffs":[[0,"me=\""],[-1,"TEXT\">R"],[1,"BOOL\">TRUE"],[0,"</fi"]],"start1":5911,"start2":5911,"length1":15,"length2":18},{"diffs":[[0,"field></shadow><"],[-1,"/value"],[1,"block type=\"logic_operation\"><field name=\"OP\">AND</field"],[0,"><value name=\"AD"]],"start1":5927,"start2":5927,"length1":38,"length2":88},{"diffs":[[0,"d><value name=\"A"],[-1,"DD1"],[0,"\"><shadow type=\""]],"start1":5998,"start2":5998,"length1":35,"length2":32},{"diffs":[[0,"\"><shadow type=\""],[-1,"text"],[1,"logic_boolean"],[0,"\"><field name=\"T"]],"start1":6014,"start2":6014,"length1":36,"length2":45},{"diffs":[[0,"n\"><field name=\""],[-1,"TEXT\">"],[1,"BOOL\">TRUE"],[0,"</field></shadow"]],"start1":6042,"start2":6042,"length1":38,"length2":42},{"diffs":[[0,"k type=\""],[-1,"device_get_analog_pin\""],[1,"logic_compare\"><field name=\"OP\">GTE</field"],[0,"><value "]],"start1":6090,"start2":6090,"length1":38,"length2":58},{"diffs":[[0,"ld><value name=\""],[-1,"name"],[1,"A"],[0,"\"><shadow type=\""]],"start1":6138,"start2":6138,"length1":36,"length2":33},{"diffs":[[0,"pe=\""],[-1,"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text"],[1,"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number"],[0,"\"><f"]],"start1":6167,"start2":6167,"length1":155,"length2":94},{"diffs":[[0,"me=\""],[-1,"TEXT\"> C"],[1,"VALUE\">reading"],[0,"</fi"]],"start1":6268,"start2":6268,"length1":16,"length2":22},{"diffs":[[0,"eading</field></"],[-1,"shadow"],[1,"block"],[0,"></value><value "]],"start1":6280,"start2":6280,"length1":38,"length2":37},{"diffs":[[0,"me=\""],[-1,"ADD3"],[1,"B"],[0,"\"><s"]],"start1":6319,"start2":6319,"length1":12,"length2":9},{"diffs":[[0,"\"><shadow type=\""],[-1,"text"],[1,"math_number"],[0,"\"><field name=\"T"]],"start1":6324,"start2":6324,"length1":36,"length2":43},{"diffs":[[0,"r\"><field name=\""],[-1,"TEXT"],[1,"NUM"],[0,"\">"],[1,"0"],[0,"</field></shadow"]],"start1":6350,"start2":6350,"length1":38,"length2":38},{"diffs":[[0,"k type=\""],[-1,"device_get_analog_pin\""],[1,"math_arithmetic\"><field name=\"OP\">MINUS</field"],[0,"><value "]],"start1":6394,"start2":6394,"length1":38,"length2":62},{"diffs":[[0,"ld><value name=\""],[-1,"name"],[1,"A"],[0,"\"><shadow type=\""]],"start1":6446,"start2":6446,"length1":36,"length2":33},{"diffs":[[0,"pe=\""],[-1,"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P2</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L"],[1,"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reference"],[0,"</fi"]],"start1":6475,"start2":6475,"length1":178,"length2":125},{"diffs":[[0,"erence</field></"],[-1,"shadow"],[1,"block"],[0,"></value><value "]],"start1":6590,"start2":6590,"length1":38,"length2":37},{"diffs":[[0,"me=\""],[-1,"ADD5"],[1,"B"],[0,"\"><s"]],"start1":6629,"start2":6629,"length1":12,"length2":9},{"diffs":[[0,"\"><shadow type=\""],[-1,"text"],[1,"math_number"],[0,"\"><field name=\"T"]],"start1":6634,"start2":6634,"length1":36,"length2":43},{"diffs":[[0,"r\"><field name=\""],[-1,"TEXT"],[1,"NUM"],[0,"\">"],[1,"0"],[0,"</field></shadow"]],"start1":6660,"start2":6660,"length1":38,"length2":38},{"diffs":[[0,"pe=\""],[-1,"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P3"],[1,"argument_reporter_number\"><field name=\"VALUE\">tolerance"],[0,"</fi"]],"start1":6708,"start2":6708,"length1":133,"length2":63},{"diffs":[[0,"erance</field></"],[-1,"shadow"],[1,"block"],[0,"></value></block"]],"start1":6761,"start2":6761,"length1":38,"length2":37},{"diffs":[[0,"ue><"],[-1,"next><block type=\"Connected_showUserText\""],[1,"value name=\"B\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LTE</field"],[0,"><va"]],"start1":6820,"start2":6820,"length1":49,"length2":147},{"diffs":[[0,"ld><value name=\""],[-1,"line"],[1,"A"],[0,"\"><shadow type=\""]],"start1":6961,"start2":6961,"length1":36,"length2":33},{"diffs":[[0,"mber"],[-1,"_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation><field name=\"SLIDER\">2"],[1,"\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading"],[0,"</fi"]],"start1":7001,"start2":7001,"length1":90,"length2":112},{"diffs":[[0,"eading</field></"],[-1,"shadow"],[1,"block"],[0,"></value><value "]],"start1":7103,"start2":7103,"length1":38,"length2":37},{"diffs":[[0,"me=\""],[-1,"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation"],[1,"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field"],[0,"><va"]],"start1":7142,"start2":7142,"length1":68,"length2":131},{"diffs":[[0,"d><value name=\"A"],[-1,"DD0"],[0,"\"><shadow type=\""]],"start1":7268,"start2":7268,"length1":35,"length2":32},{"diffs":[[0,"\"><shadow type=\""],[-1,"text"],[1,"math_number"],[0,"\"><field name=\"T"]],"start1":7284,"start2":7284,"length1":36,"length2":43},{"diffs":[[0,"me=\""],[-1,"TEXT\">hue "],[1,"NUM\">0"],[0,"</fi"]],"start1":7322,"start2":7322,"length1":18,"length2":14},{"diffs":[[0,"field></shadow><"],[1,"block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block><"],[0,"/value><value na"]],"start1":7334,"start2":7334,"length1":32,"length2":116},{"diffs":[[0,"ue><value name=\""],[-1,"ADD1"],[1,"B"],[0,"\"><shadow type=\""]],"start1":7438,"start2":7438,"length1":36,"length2":33},{"diffs":[[0,"\"><shadow type=\""],[-1,"text"],[1,"math_number"],[0,"\"><field name=\"T"]],"start1":7455,"start2":7455,"length1":36,"length2":43},{"diffs":[[0,"r\"><field name=\""],[-1,"TEXT"],[1,"NUM"],[0,"\">"],[1,"0"],[0,"</field></shadow"]],"start1":7481,"start2":7481,"length1":38,"length2":38},{"diffs":[[0,"e=\"a"],[-1,"pds9960_readcolor\"></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation"],[1,"rgument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value></block></value><statement name=\"DO0\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\""],[0,"><fi"]],"start1":7530,"start2":7530,"length1":205,"length2":385},{"diffs":[[0,"me=\""],[-1,"SLIDER\">3"],[1,"BOOL\">TRUE"],[0,"</fi"]],"start1":7921,"start2":7921,"length1":17,"length2":18},{"diffs":[[0,"\">TRUE</field></"],[-1,"shadow"],[1,"block"],[0,"></value><value "]],"start1":7929,"start2":7929,"length1":38,"length2":37},{"diffs":[[0,"/value><"],[-1,"value"],[1,"/block></statement><statement"],[0," name=\""],[-1,"text"],[1,"ELSE"],[0,"\"><block"]],"start1":7952,"start2":7952,"length1":32,"length2":56},{"diffs":[[0,"pe=\""],[-1,"text_join\"><mutation items=\"2"],[1,"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false"],[0,"\"></"]],"start1":8011,"start2":8011,"length1":37,"length2":94},{"diffs":[[0,"on><value name=\""],[-1,"ADD0"],[1,"RETURN_VALUE"],[0,"\"><shadow type=\""]],"start1":8111,"start2":8111,"length1":36,"length2":44},{"diffs":[[0,"\"><shadow type=\""],[-1,"text"],[1,"math_number"],[0,"\"><field name=\"T"]],"start1":8139,"start2":8139,"length1":36,"length2":43},{"diffs":[[0,"me=\""],[-1,"TEXT\">distance "],[1,"NUM\">0"],[0,"</fi"]],"start1":8177,"start2":8177,"length1":23,"length2":14},{"diffs":[[0,"ow><"],[-1,"/value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"sonarbit\"><field name=\"tPin\">DigitalPin.P8</field><field name=\"ePin\">DigitalPin.P9</field><field name=\"distance_unit\">Connected.Distance_Unit_List.Distance_Unit_cm"],[1,"block type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></block></value></block></statement></block></statement></block><block type=\"every_interval\" x=\"673\" y=\"776\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500"],[0,"</fi"]],"start1":8201,"start2":8201,"length1":266,"length2":249},{"diffs":[[0,"s\">500</field></"],[-1,"block"],[1,"shadow"],[0,"></value></block"]],"start1":8440,"start2":8440,"length1":37,"length2":38},{"diffs":[[0,"/value><"],[-1,"/block></value><next"],[1,"statement name=\"HANDLER\""],[0,"><block "]],"start1":8464,"start2":8464,"length1":36,"length2":40},{"diffs":[[0," max=\"8\""],[1," label=\"Line\""],[0," precisi"]],"start1":8604,"start2":8604,"length1":16,"length2":29},{"diffs":[[0,"SLIDER\">"],[-1,"4"],[1,"1"],[0,"</field>"]],"start1":8664,"start2":8664,"length1":17,"length2":17},{"diffs":[[0,"\"text\"><"],[1,"shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><"],[0,"block ty"]],"start1":8710,"start2":8710,"length1":16,"length2":88},{"diffs":[[0,"xt_join\""],[1," inline=\"false\""],[0,"><mutati"]],"start1":8804,"start2":8804,"length1":16,"length2":31},{"diffs":[[0," items=\""],[-1,"2"],[1,"6"],[0,"\"></muta"]],"start1":8837,"start2":8837,"length1":17,"length2":17},{"diffs":[[0,"XT\">"],[-1,"gesture "],[1,"R"],[0,"</fi"]],"start1":8913,"start2":8913,"length1":16,"length2":9},{"diffs":[[0,"=\"TEXT\">"],[1,"World"],[0,"</field>"]],"start1":8993,"start2":8993,"length1":16,"length2":21},{"diffs":[[0,"pe=\""],[-1,"Connected_getGesture\"></block></value></block"],[1,"device_get_analog_pin\""],[0,"><"],[-1,"/"],[0,"value"],[-1,"></block></next></block></next></block></next></block></statement></block><block type=\"nl_mp3_init\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"833\" y=\"972"],[1," name=\"name\"><shadow type=\"analog_read_write_pin_shadow"],[0,"\"><f"]],"start1":9032,"start2":9032,"length1":227,"length2":92},{"diffs":[[0,"me=\""],[-1,"sP"],[1,"p"],[0,"in\">"],[-1,"notLegos.mp3type.music</field><field name=\"type\">Serial"],[1,"AnalogReadWrite"],[0,"Pin.P1"],[-1,"4"],[0,"</fi"]],"start1":9131,"start2":9131,"length1":76,"length2":34},{"diffs":[[0,"ld><"],[-1,"next><block type=\"nl_mp3_music\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"genre\">notLegos.musicGenre.intro</field></block></next></block><block type=\"function_definition\" x=\"26\" y=\"1241\"><mutation name=\"isNearly\" functionid=\"F!?G,}0W~mK0q6yxa@)+\"><arg name=\"reference\" id=\"askt0gw7ps42l4j5s8lq\" type=\"number\"></arg><arg name=\"reading\" id=\"pvzp6d6plvrvf0vwcgka\" type=\"number\"></arg><arg name=\"tolerance\" id=\"ai8znl3rpzvjckud4rk3\" type=\"number\"></arg></mutation><field name=\"function_name\">isNearly</field><value name=\"askt0gw7ps42l4j5s8lq\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reference</field></block></value><value name=\"pvzp6d6plvrvf0vwcgka\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reading</field></block></value><value name=\"ai8znl3rpzvjckud4rk3\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">tolerance"],[1,"/shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P2</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L"],[0,"</fi"]],"start1":9166,"start2":9166,"length1":1022,"length2":439},{"diffs":[[0,"XT\"> L</field></"],[-1,"block"],[1,"shadow"],[0,"></value><statem"]],"start1":9595,"start2":9595,"length1":37,"length2":38},{"diffs":[[0,"ue><"],[-1,"statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><"],[0,"valu"]],"start1":9623,"start2":9623,"length1":88,"length2":8},{"diffs":[[0,"ue><value name=\""],[-1,"IF0"],[1,"ADD5"],[0,"\"><shadow type=\""]],"start1":9623,"start2":9623,"length1":35,"length2":36},{"diffs":[[0,"hadow type=\""],[-1,"logic_boolean"],[1,"text"],[0,"\"><field nam"]],"start1":9647,"start2":9647,"length1":37,"length2":28},{"diffs":[[0,"field name=\""],[-1,"BOOL\">TRUE"],[1,"TEXT\">"],[0,"</field></sh"]],"start1":9666,"start2":9666,"length1":34,"length2":30},{"diffs":[[0,"pe=\""],[-1,"logic_operation\"><field name=\"OP\">AND</field"],[1,"device_get_analog_pin\""],[0,"><va"]],"start1":9710,"start2":9710,"length1":52,"length2":30},{"diffs":[[0,"n\"><value name=\""],[-1,"A"],[1,"name"],[0,"\"><shadow type=\""]],"start1":9734,"start2":9734,"length1":33,"length2":36},{"diffs":[[0,"pe=\""],[-1,"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GTE</field"],[1,"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P3</field></shadow></value></block></value></block></value><next><block type=\"Connected_showUserText\""],[0,"><va"]],"start1":9766,"start2":9766,"length1":118,"length2":176},{"diffs":[[0,"t\"><value name=\""],[-1,"A"],[1,"line"],[0,"\"><shadow type=\""]],"start1":9936,"start2":9936,"length1":33,"length2":36},{"diffs":[[0,"mber"],[-1,"\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading"],[1,"_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">2"],[0,"</fi"]],"start1":9979,"start2":9979,"length1":112,"length2":103},{"diffs":[[0,"DER\">2</field></"],[-1,"block"],[1,"shadow"],[0,"></value><value "]],"start1":10072,"start2":10072,"length1":37,"length2":38},{"diffs":[[0,"ue><value name=\""],[-1,"B"],[1,"text"],[0,"\"><shadow type=\""]],"start1":10100,"start2":10100,"length1":33,"length2":36},{"diffs":[[0,"hadow type=\""],[-1,"math_number"],[1,"text"],[0,"\"><field nam"]],"start1":10124,"start2":10124,"length1":35,"length2":28},{"diffs":[[0,"t\"><field name=\""],[-1,"NUM\">0"],[1,"TEXT\">Hello,ELECFREAKS"],[0,"</field></shadow"]],"start1":10139,"start2":10139,"length1":38,"length2":54},{"diffs":[[0,"pe=\""],[-1,"math_arithmetic\"><field name=\"OP\">MINUS</field"],[1,"text_join\"><mutation items=\"2\"></mutation"],[0,"><va"]],"start1":10203,"start2":10203,"length1":54,"length2":49},{"diffs":[[0,"n><value name=\"A"],[1,"DD0"],[0,"\"><shadow type=\""]],"start1":10247,"start2":10247,"length1":32,"length2":35},{"diffs":[[0,"hadow type=\""],[-1,"math_number"],[1,"text"],[0,"\"><field nam"]],"start1":10270,"start2":10270,"length1":35,"length2":28},{"diffs":[[0,"t\"><field name=\""],[-1,"NUM\">0"],[1,"TEXT\">hue "],[0,"</field></shadow"]],"start1":10285,"start2":10285,"length1":38,"length2":42},{"diffs":[[0,"ow><"],[-1,"block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block><"],[0,"/val"]],"start1":10325,"start2":10325,"length1":92,"length2":8},{"diffs":[[0,"ue><value name=\""],[-1,"B"],[1,"ADD1"],[0,"\"><shadow type=\""]],"start1":10333,"start2":10333,"length1":33,"length2":36},{"diffs":[[0,"hadow type=\""],[-1,"math_number"],[1,"text"],[0,"\"><field nam"]],"start1":10357,"start2":10357,"length1":35,"length2":28},{"diffs":[[0,"t\"><field name=\""],[-1,"NUM\">0"],[1,"TEXT\">World"],[0,"</field></shadow"]],"start1":10372,"start2":10372,"length1":38,"length2":43},{"diffs":[[0,"e=\"a"],[-1,"rgument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LTE</field"],[1,"pds9960_readcolor\"></block></value></block></value><next><block type=\"Connected_showUserText\""],[0,"><va"]],"start1":10426,"start2":10426,"length1":258,"length2":101},{"diffs":[[0,"t\"><value name=\""],[-1,"A"],[1,"line"],[0,"\"><shadow type=\""]],"start1":10521,"start2":10521,"length1":33,"length2":36},{"diffs":[[0,"mber"],[-1,"\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading"],[1,"_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">3"],[0,"</fi"]],"start1":10564,"start2":10564,"length1":112,"length2":103},{"diffs":[[0,"DER\">3</field></"],[-1,"block"],[1,"shadow"],[0,"></value><value "]],"start1":10657,"start2":10657,"length1":37,"length2":38},{"diffs":[[0,"ue><value name=\""],[-1,"B"],[1,"text"],[0,"\"><shadow type=\""]],"start1":10685,"start2":10685,"length1":33,"length2":36},{"diffs":[[0,"hadow type=\""],[-1,"math_number"],[1,"text"],[0,"\"><field nam"]],"start1":10709,"start2":10709,"length1":35,"length2":28},{"diffs":[[0,"t\"><field name=\""],[-1,"NUM\">0"],[1,"TEXT\">Hello,ELECFREAKS"],[0,"</field></shadow"]],"start1":10724,"start2":10724,"length1":38,"length2":54},{"diffs":[[0,"pe=\""],[-1,"math_arithmetic\"><field name=\"OP\">ADD</field"],[1,"text_join\"><mutation items=\"2\"></mutation"],[0,"><va"]],"start1":10788,"start2":10788,"length1":52,"length2":49},{"diffs":[[0,"n><value name=\"A"],[1,"DD0"],[0,"\"><shadow type=\""]],"start1":10832,"start2":10832,"length1":32,"length2":35},{"diffs":[[0,"hadow type=\""],[-1,"math_number"],[1,"text"],[0,"\"><field nam"]],"start1":10855,"start2":10855,"length1":35,"length2":28},{"diffs":[[0,"me=\""],[-1,"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">refere"],[1,"TEXT\">dista"],[0,"nce"],[1," "],[0,"</fi"]],"start1":10882,"start2":10882,"length1":99,"length2":23},{"diffs":[[0,"tance </field></"],[-1,"block"],[1,"shadow"],[0,"></value><value "]],"start1":10895,"start2":10895,"length1":37,"length2":38},{"diffs":[[0,"ue><value name=\""],[-1,"B"],[1,"ADD1"],[0,"\"><shadow type=\""]],"start1":10923,"start2":10923,"length1":33,"length2":36},{"diffs":[[0,"hadow type=\""],[-1,"math_number"],[1,"text"],[0,"\"><field nam"]],"start1":10947,"start2":10947,"length1":35,"length2":28},{"diffs":[[0,"t\"><field name=\""],[-1,"NUM\">0"],[1,"TEXT\">World"],[0,"</field></shadow"]],"start1":10962,"start2":10962,"length1":38,"length2":43},{"diffs":[[0,"pe=\""],[-1,"argument_reporter_number\"><field name=\"VALUE\">tolerance"],[1,"sonarbit\"><field name=\"tPin\">DigitalPin.P8</field><field name=\"ePin\">DigitalPin.P9</field><field name=\"distance_unit\">Connected.Distance_Unit_List.Distance_Unit_cm"],[0,"</fi"]],"start1":11015,"start2":11015,"length1":63,"length2":171},{"diffs":[[0,"ue><"],[-1,"/block></value"],[1,"next"],[0,"><"],[-1,"/"],[0,"block"],[1," type=\"Connected_showUserText\""],[0,"><"],[-1,"/"],[0,"value"],[-1,"><statement name=\"DO0\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE"],[1," name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">4</field></shadow></value><value name=\"text"],[0,"\"><s"]],"start1":11219,"start2":11219,"length1":198,"length2":231},{"diffs":[[0,"hadow type=\""],[-1,"math_number"],[1,"text"],[0,"\"><field nam"]],"start1":11450,"start2":11450,"length1":35,"length2":28},{"diffs":[[0,"t\"><field name=\""],[-1,"NUM\">0"],[1,"TEXT\">Hello,ELECFREAKS"],[0,"</field></shadow"]],"start1":11465,"start2":11465,"length1":38,"length2":54},{"diffs":[[0,"pe=\""],[-1,"logic_boolean\"><field name=\"BOOL\">TRUE</field></block></value></block></statement><statement name=\"ELSE\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation"],[1,"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">gesture </field></shadow></value"],[0,"><va"]],"start1":11529,"start2":11529,"length1":224,"length2":140},{"diffs":[[0,"value name=\""],[-1,"RETURN_VALUE"],[1,"ADD1"],[0,"\"><shadow ty"]],"start1":11667,"start2":11667,"length1":36,"length2":28},{"diffs":[[0,"hadow type=\""],[-1,"math_number"],[1,"text"],[0,"\"><field nam"]],"start1":11687,"start2":11687,"length1":35,"length2":28},{"diffs":[[0,"t\"><field name=\""],[-1,"NUM\">0"],[1,"TEXT\">World"],[0,"</field></shadow"]],"start1":11702,"start2":11702,"length1":38,"length2":43},{"diffs":[[0,"pe=\""],[-1,"logic_boolean\"><field name=\"BOOL\">FALSE</field></block></value></block></statemen"],[1,"Connected_getGesture\"></block></value></block></value></block></next></block></next></block></nex"],[0,"t></"]],"start1":11755,"start2":11755,"length1":89,"length2":105}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"w()\n"],[-1,"basic.pause(notLegos.playFile2(\"1_1_25_100\"))\n"],[0,"loop"]],"start1":1129,"start2":1129,"length1":54,"length2":8}]},{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"icGenre): void{\n"],[1,"\n    "],[0,"        serial.r"]],"start1":27930,"start2":27930,"length1":32,"length2":37},{"diffs":[[0,"al.redirect("],[-1,"mp3music"],[1,"s"],[0,"Pin, SerialP"]],"start1":27963,"start2":27963,"length1":32,"length2":25},{"diffs":[[0,"00)\n        "],[1,"    "],[0,"CMD = "],[-1,"3\n"],[1,"15\n            para1 = parseInt(fileNum)\n            para2 = parseInt(volumeNum)\n    "],[0,"        para"]],"start1":28018,"start2":28018,"length1":32,"length2":119},{"diffs":[[0,"ra1 = parseInt(\""],[-1,"0"],[1,"1"],[0,"\")\n"],[1,"    "],[0,"        para2 = "]],"start1":28135,"start2":28135,"length1":36,"length2":40},{"diffs":[[0,"nt(\"1\")\n        "],[1," "],[1,"   "],[0,"dataArr[3] = CMD"]],"start1":28181,"start2":28181,"length1":32,"length2":36},{"diffs":[[0,"ataArr[3] = CMD\n"],[1,"    "],[0,"        dataArr["]],"start1":28202,"start2":28202,"length1":32,"length2":36},{"diffs":[[0,"= para1\n        "],[1," "],[1,"   "],[0,"dataArr[6] = par"]],"start1":28241,"start2":28241,"length1":32,"length2":36},{"diffs":[[0,"= para2\n        "],[1,"    "],[0,"mp3_checkSum()\n "]],"start1":28272,"start2":28272,"length1":32,"length2":36},{"diffs":[[0,"ckSum()\n        "],[1," "],[1,"   "],[0,"mp3_sendDataFast"]],"start1":28299,"start2":28299,"length1":32,"length2":36},{"diffs":[[0,"_sendDataFast()\n"],[1,"    "],[0,"    }\n\n\n\n\n    \n\n"]],"start1":28322,"start2":28322,"length1":32,"length2":36},{"diffs":[[0,"\n\n\n\n    "],[1,"}"],[0,"\n\n    //"]],"start1":28348,"start2":28348,"length1":16,"length2":17}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"block"],[1,"t"],[0,"sprj\"\n}\n"]],"start1":514,"start2":514,"length1":21,"length2":17}]}]},{"timestamp":1726873942827,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"0"],[1,"34"],[0,"\" y=\""],[-1,"0"],[1,"52"],[0,"\"><s"]],"start1":330,"start2":330,"length1":15,"length2":17},{"diffs":[[0," x=\""],[-1,"891"],[1,"925"],[0,"\" y=\""],[-1,"-3"],[0,"2"],[1,"0"],[0,"\"><f"]],"start1":4425,"start2":4425,"length1":19,"length2":18},{"diffs":[[0,"=\"14"],[-1,"32"],[1,"66"],[0,"\" y=\""],[-1,"-3"],[0,"2"],[1,"0"],[0,"\"><f"]],"start1":4817,"start2":4817,"length1":18,"length2":17},{"diffs":[[0,"=\"19"],[-1,"15"],[1,"49"],[0,"\" y=\""],[-1,"-3"],[0,"2"],[1,"0"],[0,"\"><v"]],"start1":5197,"start2":5197,"length1":18,"length2":17},{"diffs":[[0," x=\""],[-1,"799"],[1,"833"],[0,"\" y=\"9"],[1,"7"],[0,"2"],[-1,"0"],[0,"\"><f"]],"start1":8442,"start2":8442,"length1":19,"length2":19},{"diffs":[[0," x=\""],[-1,"44"],[1,"26"],[0,"\" y=\"1"],[-1,"133"],[1,"241"],[0,"\"><m"]],"start1":8742,"start2":8742,"length1":19,"length2":19}]}]},{"timestamp":1726873944272,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"ock "],[-1,"type=\"device_button_event\" x=\"891\" y=\"-32\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl2\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">1_1_25_100</field></shadow></value></block></value></block></statement></block><block type=\"device_button_event\" x=\"1432\" y=\"-32\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">2_1_1</field></shadow></value></block></value></block></statement></block><block "],[0,"type"]],"start1":307,"start2":307,"length1":785,"length2":8},{"diffs":[[0," x=\""],[-1,"36"],[1,"0"],[0,"\" y=\""],[-1,"52"],[1,"0"],[0,"\"><s"]],"start1":330,"start2":330,"length1":17,"length2":15},{"diffs":[[0,"pe=\""],[-1,"nl_mp3_init\"><field name=\"sPin\">notLegos.mp3type.music</field><field name=\"type\">SerialPin.P16"],[1,"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100"],[0,"</fi"]],"start1":3894,"start2":3894,"length1":102,"length2":88},{"diffs":[[0,"ms\">100</field><"],[-1,"next"],[1,"/shadow"],[0,"><block type=\"nl"]],"start1":3971,"start2":3971,"length1":36,"length2":39},{"diffs":[[0,"pe=\""],[-1,"nl_mp3_music\"><field name=\"genre\">notLegos.musicGenre.intro</field"],[1,"playFileNl2\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">1_1_25_100</field></shadow></value></block></value></block></next"],[0,"></b"]],"start1":4004,"start2":4004,"length1":74,"length2":151},{"diffs":[[0,"block></"],[-1,"next></block></next"],[1,"statement></block><block type=\"device_button_event\" x=\"891\" y=\"-32\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl2\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">1_1_25_100</field></shadow></value></block></value></block></statement></block><block type=\"device_button_event\" x=\"1432\" y=\"-32\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">2_1_1</field></shadow></value></block></value"],[0,"></block"]],"start1":4364,"start2":4364,"length1":35,"length2":782},{"diffs":[[0,"k type=\""],[-1,"device_pause"],[1,"nl_mp3_init"],[0,"\" disabl"]],"start1":8371,"start2":8371,"length1":28,"length2":27},{"diffs":[[0," x=\""],[1,"7"],[0,"9"],[-1,"2"],[0,"9\" y=\""],[-1,"816\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow><block type=\"playFileNl2\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"soundString\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">1_1_25_100</field></shadow></value></block></value></block><block type=\"MP3execute\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"566\" y=\"940\"><field name=\"myType\">Connected.playType.Play</field></block><block type=\"MP3setPort\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1493\" y=\"982\"><field name=\"Rjpin\">Connected.DigitalRJ"],[1,"920\"><field name=\"sPin\">notLegos.mp3type.music</field><field name=\"type\">Serial"],[0,"Pin.P1"],[-1,"6"],[1,"4"],[0,"</fi"]],"start1":8443,"start2":8443,"length1":621,"length2":102},{"diffs":[[0,"pe=\""],[-1,"setTracking"],[1,"nl_mp3_music"],[0,"\" di"]],"start1":8564,"start2":8564,"length1":19,"length2":20},{"diffs":[[0,"D\"><"],[-1,"mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"tracking\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value><value name=\"myAns\"><shadow type=\"toggleYesNo\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"yes\">false</field></shadow></value"],[1,"field name=\"genre\">notLegos.musicGenre.intro</field"],[0,"></b"]],"start1":8631,"start2":8631,"length1":360,"length2":59}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"w()\n"],[-1,"notLegos.mp3setPorts(notLegos.mp3type.music, SerialPin.P16)\nnotLegos.mp3musicPlay(notLegos.musicGenre.intro"],[1,"basic.pause(notLegos.playFile2(\"1_1_25_100\")"],[0,")\nlo"]],"start1":1129,"start2":1129,"length1":115,"length2":52}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"t"],[1,"block"],[0,"sprj\"\n}\n"]],"start1":514,"start2":514,"length1":17,"length2":21}]}]},{"timestamp":1726874464922,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"x=\"8"],[-1,"55"],[1,"91"],[0,"\" y=\"-"],[-1,"84"],[1,"32"],[0,"\"><f"]],"start1":338,"start2":338,"length1":18,"length2":18},{"diffs":[[0,"x=\"1"],[-1,"396"],[1,"432"],[0,"\" y=\"-"],[-1,"84"],[1,"32"],[0,"\"><f"]],"start1":729,"start2":729,"length1":19,"length2":19},{"diffs":[[0,"pe=\""],[-1,"every_interval"],[1,"pxt-on-start"],[0,"\" x=\""],[-1,"1879"],[1,"36"],[0,"\" y=\""],[-1,"-84\"><value name=\"interval"],[1,"52\"><statement name=\"HANDLER\"><block type=\"Connected_oledClear\"><next><block type=\"pin_set_audio_pin_enabled\"><value name=\"enabled"],[0,"\"><s"]],"start1":1090,"start2":1090,"length1":62,"length2":162},{"diffs":[[0,"=\"lo"],[-1,"ngTimePicker"],[1,"gic_boolean"],[0,"\"><f"]],"start1":1262,"start2":1262,"length1":20,"length2":19},{"diffs":[[0,"me=\""],[-1,"ms\">500"],[1,"BOOL\">TRUE"],[0,"</fi"]],"start1":1288,"start2":1288,"length1":15,"length2":18},{"diffs":[[0,"ue><"],[-1,"statement name=\"HANDLER\"><block type=\"Connected_showUserText"],[1,"next><block type=\"device_led_enable"],[0,"\"><v"]],"start1":1324,"start2":1324,"length1":68,"length2":43},{"diffs":[[0,"e\"><value name=\""],[-1,"line"],[1,"on"],[0,"\"><shadow type=\""]],"start1":1362,"start2":1362,"length1":36,"length2":34},{"diffs":[[0,"pe=\""],[-1,"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation"],[1,"logic_boolean\""],[0,"><fi"]],"start1":1392,"start2":1392,"length1":78,"length2":22},{"diffs":[[0,"me=\""],[-1,"SLIDER\">1"],[1,"BOOL\">FALSE"],[0,"</fi"]],"start1":1420,"start2":1420,"length1":17,"length2":19},{"diffs":[[0,"/value><"],[-1,"value name=\"t"],[1,"n"],[0,"ext"],[-1,"\""],[0,"><block "]],"start1":1453,"start2":1453,"length1":33,"length2":20},{"diffs":[[0,"pe=\""],[-1,"text_join\" inline=\"false\"><mutation items=\"6\"></mutation"],[1,"device_pause\""],[0,"><va"]],"start1":1475,"start2":1475,"length1":64,"length2":21},{"diffs":[[0,"e\"><value name=\""],[-1,"ADD0"],[1,"pause"],[0,"\"><shadow type=\""]],"start1":1490,"start2":1490,"length1":36,"length2":37},{"diffs":[[0,"><shadow type=\"t"],[-1,"ext"],[1,"imePicker"],[0,"\"><field name=\"T"]],"start1":1512,"start2":1512,"length1":35,"length2":41},{"diffs":[[0,"me=\""],[-1,"TEXT\">R"],[1,"ms\">100"],[0,"</fi"]],"start1":1548,"start2":1548,"length1":15,"length2":15},{"diffs":[[0,"shadow></value><"],[1,"next><block type=\"variables_set\"><field name=\"VAR\" id=\"gX}3[UJe6C9wl9p+Uoj=\">digits</field><"],[0,"value name=\"ADD1"]],"start1":1569,"start2":1569,"length1":32,"length2":124},{"diffs":[[0,"ld><value name=\""],[-1,"ADD1"],[1,"VALUE"],[0,"\"><shadow type=\""]],"start1":1673,"start2":1673,"length1":36,"length2":37},{"diffs":[[0,"\"><shadow type=\""],[-1,"text"],[1,"math_number"],[0,"\"><field name=\"T"]],"start1":1694,"start2":1694,"length1":36,"length2":43},{"diffs":[[0,"r\"><field name=\""],[-1,"TEXT"],[1,"NUM"],[0,"\">"],[1,"0"],[0,"</field></shadow"]],"start1":1720,"start2":1720,"length1":38,"length2":38},{"diffs":[[0,"pe=\""],[-1,"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\""],[1,"grove_tm1637_create\"><field name=\"cPin\">DigitalPin.P7</field"],[0,"><fi"]],"start1":1768,"start2":1768,"length1":93,"length2":68},{"diffs":[[0,"me=\""],[-1,"p"],[1,"dP"],[0,"in\">"],[-1,"AnalogReadWrite"],[1,"Digital"],[0,"Pin.P"],[-1,"1"],[1,"6"],[0,"</fi"]],"start1":1842,"start2":1842,"length1":34,"length2":27},{"diffs":[[0,"Pin.P6</field></"],[-1,"shadow"],[1,"block"],[0,"></value></block"]],"start1":1859,"start2":1859,"length1":38,"length2":37},{"diffs":[[0,"ck></value><"],[-1,"/block></value"],[1,"next><block type=\"device_pause\""],[0,"><value name"]],"start1":1878,"start2":1878,"length1":38,"length2":55},{"diffs":[[0,"me=\""],[-1,"ADD2"],[1,"pause"],[0,"\"><s"]],"start1":1931,"start2":1931,"length1":12,"length2":13},{"diffs":[[0,"><shadow type=\"t"],[-1,"ext"],[1,"imePicker"],[0,"\"><field name=\"T"]],"start1":1941,"start2":1941,"length1":35,"length2":41},{"diffs":[[0,"me=\""],[-1,"TEXT\"> C"],[1,"ms\">1000"],[0,"</fi"]],"start1":1977,"start2":1977,"length1":16,"length2":16},{"diffs":[[0,"shadow></value><"],[1,"next><block type=\"variables_set\"><field name=\"VAR\" id=\"vSl89nNM7#y}HO_i4w8g\">sockLights</field><"],[0,"value name=\"ADD3"]],"start1":1999,"start2":1999,"length1":32,"length2":128},{"diffs":[[0,"me=\""],[-1,"ADD3"],[1,"VALUE"],[0,"\"><s"]],"start1":2119,"start2":2119,"length1":12,"length2":13},{"diffs":[[0,"\"><shadow type=\""],[-1,"text"],[1,"math_number"],[0,"\"><field name=\"T"]],"start1":2128,"start2":2128,"length1":36,"length2":43},{"diffs":[[0,"r\"><field name=\""],[-1,"TEXT"],[1,"NUM"],[0,"\">"],[1,"0"],[0,"</field></shadow"]],"start1":2154,"start2":2154,"length1":38,"length2":38},{"diffs":[[0,"k type=\""],[-1,"device_get_analog_pin\""],[1,"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P11</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field"],[0,"><value "]],"start1":2198,"start2":2198,"length1":38,"length2":139},{"diffs":[[0,"d><value name=\"n"],[-1,"ame"],[1,"umleds"],[0,"\"><shadow type=\""]],"start1":2328,"start2":2328,"length1":35,"length2":38},{"diffs":[[0,"pe=\""],[-1,"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P2</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L"],[1,"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"vSl89nNM7#y}HO_i4w8g\">sockLights"],[0,"</fi"]],"start1":2362,"start2":2362,"length1":178,"length2":228},{"diffs":[[0,"Lights</field></"],[-1,"shadow"],[1,"block"],[0,"></value><value "]],"start1":2580,"start2":2580,"length1":38,"length2":37},{"diffs":[[0,"me=\""],[-1,"ADD5"],[1,"rgb"],[0,"\"><s"]],"start1":2619,"start2":2619,"length1":12,"length2":11},{"diffs":[[0,"pe=\""],[-1,"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P3</field></shadow></value></block></value></block></value><next><block type=\"Connected_showUserText\""],[1,"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"vSl89nNM7#y}HO_i4w8g\">sockLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"kx-+|q2cYu;$^R?pYwdZ\">wheelLights</field"],[0,"><va"]],"start1":2638,"start2":2638,"length1":287,"length2":355},{"diffs":[[0,"ld><value name=\""],[-1,"line"],[1,"VALUE"],[0,"\"><shadow type=\""]],"start1":2987,"start2":2987,"length1":36,"length2":37},{"diffs":[[0,"mber"],[-1,"_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation"],[1,"\""],[0,"><fi"]],"start1":3031,"start2":3031,"length1":67,"length2":9},{"diffs":[[0,"me=\""],[-1,"SLIDER\">2"],[1,"NUM\">0"],[0,"</fi"]],"start1":3046,"start2":3046,"length1":17,"length2":14},{"diffs":[[0,"ow><"],[-1,"/value><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">hue </field></shadow></value"],[1,"block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P12</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field"],[0,"><va"]],"start1":3070,"start2":3070,"length1":175,"length2":143},{"diffs":[[0,"ld><value name=\""],[-1,"ADD1"],[1,"numleds"],[0,"\"><shadow type=\""]],"start1":3207,"start2":3207,"length1":36,"length2":39},{"diffs":[[0,"\"><shadow type=\""],[-1,"text"],[1,"math_number"],[0,"\"><field name=\"T"]],"start1":3230,"start2":3230,"length1":36,"length2":43},{"diffs":[[0,"r\"><field name=\""],[-1,"TEXT\">"],[1,"NUM\">18"],[0,"</field></shadow"]],"start1":3256,"start2":3256,"length1":38,"length2":39},{"diffs":[[0,"ow><"],[-1,"block type=\"apds9960_readcolor\"></block><"],[0,"/val"]],"start1":3293,"start2":3293,"length1":49,"length2":8},{"diffs":[[0,"pe=\""],[-1,"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation><field name=\"SLIDER\">3</field></shadow></value"],[1,"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"kx-+|q2cYu;$^R?pYwdZ\">wheelLights</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\""],[0,"><va"]],"start1":3335,"start2":3335,"length1":182,"length2":317},{"diffs":[[0,"w\"><value name=\""],[-1,"text"],[1,"strip"],[0,"\"><block type=\"t"]],"start1":3646,"start2":3646,"length1":36,"length2":37},{"diffs":[[0,"pe=\""],[-1,"text_join\"><mutation items=\"2\"></mutation"],[1,"variables_get\"><field name=\"VAR\" id=\"kx-+|q2cYu;$^R?pYwdZ\">wheelLights</field></block"],[0,"><"],[1,"/"],[0,"value"],[-1," name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">distance </field></shadow></value"],[1,"><next><block type=\"variables_set\"><field name=\"VAR\" id=\"zVo^^v6=8Jgq7FyFiNOV\">scoreCircle</field"],[0,"><va"]],"start1":3678,"start2":3678,"length1":141,"length2":198},{"diffs":[[0,"ld><value name=\""],[-1,"ADD1"],[1,"VALUE"],[0,"\"><shadow type=\""]],"start1":3870,"start2":3870,"length1":36,"length2":37},{"diffs":[[0,"\"><shadow type=\""],[-1,"text"],[1,"math_number"],[0,"\"><field name=\"T"]],"start1":3891,"start2":3891,"length1":36,"length2":43},{"diffs":[[0,"r\"><field name=\""],[-1,"TEXT"],[1,"NUM"],[0,"\">"],[1,"0"],[0,"</field></shadow"]],"start1":3917,"start2":3917,"length1":38,"length2":38},{"diffs":[[0,"pe=\""],[-1,"sonarbit"],[1,"neopixel_create"],[0,"\"><f"]],"start1":3965,"start2":3965,"length1":16,"length2":23},{"diffs":[[0,"me=\""],[-1,"tP"],[1,"Rjp"],[0,"in\">"],[1,"Connected."],[0,"Digital"],[1,"RJ"],[0,"Pin.P"],[-1,"8"],[1,"13"],[0,"</fi"]],"start1":3995,"start2":3995,"length1":27,"length2":41},{"diffs":[[0,"me=\""],[-1,"ePin\">DigitalPin.P9"],[1,"mode\">Connected.NeoPixelMode.RGB"],[0,"</fi"]],"start1":4049,"start2":4049,"length1":27,"length2":40},{"diffs":[[0,"ld><"],[-1,"field"],[1,"value"],[0," name=\""],[-1,"distance_unit\">Connected.Distance_Unit_List.Distance_Unit_cm"],[1,"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8"],[0,"</fi"]],"start1":4090,"start2":4090,"length1":80,"length2":75},{"diffs":[[0,"NUM\">8</field></"],[-1,"block"],[1,"shadow"],[0,"></value></block"]],"start1":4155,"start2":4155,"length1":37,"length2":38},{"diffs":[[0,"pe=\""],[-1,"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation><field name=\"SLIDER\">4"],[1,"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"zVo^^v6=8Jgq7FyFiNOV\">scoreCircle</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue"],[0,"</fi"]],"start1":4217,"start2":4217,"length1":158,"length2":259},{"diffs":[[0,"ue><"],[-1,"value name=\"t"],[1,"n"],[0,"ext"],[-1,"\""],[0,"><bl"]],"start1":4494,"start2":4494,"length1":25,"length2":12},{"diffs":[[0,"pe=\""],[-1,"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">gesture "],[1,"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"zVo^^v6=8Jgq7FyFiNOV\">scoreCircle"],[0,"</fi"]],"start1":4512,"start2":4512,"length1":116,"length2":126},{"diffs":[[0,"Circle</field></"],[-1,"shadow"],[1,"block"],[0,"></value><value "]],"start1":4628,"start2":4628,"length1":38,"length2":37},{"diffs":[[0,"ue><"],[-1,"value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">"],[1,"next><block type=\"nl_mp3_init\"><field name=\"sPin\">notLegos.mp3type.music</field><field name=\"type\">SerialPin.P16"],[0,"</fi"]],"start1":4655,"start2":4655,"length1":65,"length2":120},{"diffs":[[0,"Pin.P16</field><"],[-1,"/shadow"],[1,"next"],[0,"><block type=\"Co"]],"start1":4764,"start2":4764,"length1":39,"length2":36},{"diffs":[[0,"pe=\""],[-1,"Connected_getGesture\""],[1,"nl_mp3_music\"><field name=\"genre\">notLegos.musicGenre.intro</field"],[0,"></b"]],"start1":4794,"start2":4794,"length1":29,"length2":74},{"diffs":[[0,"field></block></"],[-1,"value"],[1,"next"],[0,"></block></value"]],"start1":4859,"start2":4859,"length1":37,"length2":36},{"diffs":[[0,"/next></block></"],[-1,"value"],[1,"next></block></next"],[0,"></block></next>"]],"start1":4874,"start2":4874,"length1":37,"length2":51},{"diffs":[[0,"t></block></"],[-1,"statemen"],[1,"nex"],[0,"t></block><b"]],"start1":4953,"start2":4953,"length1":32,"length2":27},{"diffs":[[0,"ck><"],[-1,"block type=\"pxt-on-start\" x=\"34\" y=\"54\"><statement name=\"HANDLER\""],[1,"/next></block></next></block></next></block></next></block></next"],[0,"><"],[1,"/"],[0,"block"],[-1," type=\"Connected_oledClear\""],[1,"></next></block></next></block></next></block"],[0,"><"],[1,"/"],[0,"next><"],[-1,"block type=\"pin_set_audio_pin_enabled"],[1,"/block></statement></block><block type=\"every_interval\" x=\"1915\" y=\"-32"],[0,"\"><v"]],"start1":4975,"start2":4975,"length1":152,"length2":206},{"diffs":[[0,"2\"><value name=\""],[-1,"enabled"],[1,"interval"],[0,"\"><shadow type=\""]],"start1":5176,"start2":5176,"length1":39,"length2":40},{"diffs":[[0,"dow type=\"lo"],[-1,"gic_boolean"],[1,"ngTimePicker"],[0,"\"><field nam"]],"start1":5206,"start2":5206,"length1":35,"length2":36},{"diffs":[[0,"field name=\""],[-1,"BOOL\">TRUE"],[1,"ms\">500"],[0,"</field></sh"]],"start1":5233,"start2":5233,"length1":34,"length2":31},{"diffs":[[0,"ue><"],[-1,"next><block type=\"device_led_enable"],[1,"statement name=\"HANDLER\"><block type=\"Connected_showUserText"],[0,"\"><v"]],"start1":5274,"start2":5274,"length1":43,"length2":68},{"diffs":[[0,"t\"><value name=\""],[-1,"on"],[1,"line"],[0,"\"><shadow type=\""]],"start1":5337,"start2":5337,"length1":34,"length2":36},{"diffs":[[0,"hadow type=\""],[-1,"logic_boolean\""],[1,"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation"],[0,"><field name"]],"start1":5361,"start2":5361,"length1":38,"length2":94},{"diffs":[[0,"field name=\""],[-1,"BOOL\">FALSE"],[1,"SLIDER\">1"],[0,"</field></sh"]],"start1":5445,"start2":5445,"length1":35,"length2":33},{"diffs":[[0,"shadow></value><"],[-1,"n"],[1,"value name=\"t"],[0,"ext"],[1,"\""],[0,"><block type=\"de"]],"start1":5476,"start2":5476,"length1":36,"length2":49},{"diffs":[[0,"block type=\""],[-1,"device_pause\""],[1,"text_join\" inline=\"false\"><mutation items=\"6\"></mutation"],[0,"><value name"]],"start1":5511,"start2":5511,"length1":37,"length2":80},{"diffs":[[0,"on><value name=\""],[-1,"pause"],[1,"ADD0"],[0,"\"><shadow type=\""]],"start1":5577,"start2":5577,"length1":37,"length2":36},{"diffs":[[0,"adow type=\"t"],[-1,"imePicker"],[1,"ext"],[0,"\"><field nam"]],"start1":5602,"start2":5602,"length1":33,"length2":27},{"diffs":[[0,"t\"><field name=\""],[-1,"ms\">100"],[1,"TEXT\">R"],[0,"</field></shadow"]],"start1":5616,"start2":5616,"length1":39,"length2":39},{"diffs":[[0,"ue><"],[-1,"next><block type=\"variables_set\"><field name=\"VAR\" id=\"gX}3[UJe6C9wl9p+Uoj=\">digits</field><"],[0,"valu"]],"start1":5661,"start2":5661,"length1":100,"length2":8},{"diffs":[[0,"ue><value name=\""],[-1,"VALUE"],[1,"ADD1"],[0,"\"><shadow type=\""]],"start1":5661,"start2":5661,"length1":37,"length2":36},{"diffs":[[0,"hadow type=\""],[-1,"math_number"],[1,"text"],[0,"\"><field nam"]],"start1":5685,"start2":5685,"length1":35,"length2":28},{"diffs":[[0,"t\"><field name=\""],[-1,"NUM"],[1,"TEXT"],[0,"\">"],[-1,"0"],[0,"</field></shadow"]],"start1":5700,"start2":5700,"length1":38,"length2":38},{"diffs":[[0,"pe=\""],[-1,"grove_tm1637_create\"><field name=\"cPin\">DigitalPin.P7</field"],[1,"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\""],[0,"><fi"]],"start1":5748,"start2":5748,"length1":68,"length2":93},{"diffs":[[0,"d name=\""],[-1,"dP"],[1,"p"],[0,"in\">"],[-1,"Digital"],[1,"AnalogReadWrite"],[0,"Pin.P"],[-1,"6"],[1,"1"],[0,"</field>"]],"start1":5843,"start2":5843,"length1":35,"length2":42},{"diffs":[[0,"Pin.P1</field></"],[-1,"block"],[1,"shadow"],[0,"></value><next><"]],"start1":5871,"start2":5871,"length1":37,"length2":38},{"diffs":[[0,"ue><"],[-1,"next><block type=\"device_pause\""],[1,"/block></value"],[0,"><va"]],"start1":5899,"start2":5899,"length1":39,"length2":22},{"diffs":[[0,"ue><value name=\""],[-1,"pause"],[1,"ADD2"],[0,"\"><shadow type=\""]],"start1":5915,"start2":5915,"length1":37,"length2":36},{"diffs":[[0,"adow type=\"t"],[-1,"imePicker"],[1,"ext"],[0,"\"><field nam"]],"start1":5940,"start2":5940,"length1":33,"length2":27},{"diffs":[[0,"field name=\""],[-1,"ms\">1000"],[1,"TEXT\"> C"],[0,"</field></sh"]],"start1":5958,"start2":5958,"length1":32,"length2":32},{"diffs":[[0,"ue><"],[-1,"next><block type=\"variables_set\"><field name=\"VAR\" id=\"vSl89nNM7#y}HO_i4w8g\">sockLights</field><"],[0,"valu"]],"start1":6000,"start2":6000,"length1":104,"length2":8},{"diffs":[[0,"ue><value name=\""],[-1,"VALUE"],[1,"ADD3"],[0,"\"><shadow type=\""]],"start1":6000,"start2":6000,"length1":37,"length2":36},{"diffs":[[0,"hadow type=\""],[-1,"math_number"],[1,"text"],[0,"\"><field nam"]],"start1":6024,"start2":6024,"length1":35,"length2":28},{"diffs":[[0,"t\"><field name=\""],[-1,"NUM"],[1,"TEXT"],[0,"\">"],[-1,"0"],[0,"</field></shadow"]],"start1":6039,"start2":6039,"length1":38,"length2":38},{"diffs":[[0,"pe=\""],[-1,"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P11</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field"],[1,"device_get_analog_pin\""],[0,"><va"]],"start1":6087,"start2":6087,"length1":131,"length2":30},{"diffs":[[0,"\"><value name=\"n"],[-1,"umleds"],[1,"ame"],[0,"\"><shadow type=\""]],"start1":6112,"start2":6112,"length1":38,"length2":35},{"diffs":[[0,"pe=\""],[-1,"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"vSl89nNM7#y}HO_i4w8g\">sockLights"],[1,"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P2</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L"],[0,"</fi"]],"start1":6143,"start2":6143,"length1":228,"length2":178},{"diffs":[[0,"XT\"> L</field></"],[-1,"block"],[1,"shadow"],[0,"></value><value "]],"start1":6311,"start2":6311,"length1":37,"length2":38},{"diffs":[[0,"ue><value name=\""],[-1,"rgb"],[1,"ADD5"],[0,"\"><shadow type=\""]],"start1":6339,"start2":6339,"length1":35,"length2":36},{"diffs":[[0,"pe=\""],[-1,"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"vSl89nNM7#y}HO_i4w8g\">sockLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"kx-+|q2cYu;$^R?pYwdZ\">wheelLights</field"],[1,"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P3</field></shadow></value></block></value></block></value><next><block type=\"Connected_showUserText\""],[0,"><va"]],"start1":6371,"start2":6371,"length1":355,"length2":287},{"diffs":[[0,"t\"><value name=\""],[-1,"VALUE"],[1,"line"],[0,"\"><shadow type=\""]],"start1":6652,"start2":6652,"length1":37,"length2":36},{"diffs":[[0,"ype=\"math_number"],[-1,"\""],[1,"_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation"],[0,"><field name=\"NU"]],"start1":6683,"start2":6683,"length1":33,"length2":91},{"diffs":[[0,"on><field name=\""],[-1,"NUM\">0"],[1,"SLIDER\">2"],[0,"</field></shadow"]],"start1":6756,"start2":6756,"length1":38,"length2":41},{"diffs":[[0,"ow><"],[-1,"block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P12</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field"],[1,"/value><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">hue </field></shadow></value"],[0,"><va"]],"start1":6795,"start2":6795,"length1":143,"length2":175},{"diffs":[[0,"ue><value name=\""],[-1,"numleds"],[1,"ADD1"],[0,"\"><shadow type=\""]],"start1":6964,"start2":6964,"length1":39,"length2":36},{"diffs":[[0,"hadow type=\""],[-1,"math_number"],[1,"text"],[0,"\"><field nam"]],"start1":6988,"start2":6988,"length1":35,"length2":28},{"diffs":[[0,"t\"><field name=\""],[-1,"NUM\">18"],[1,"TEXT\">"],[0,"</field></shadow"]],"start1":7003,"start2":7003,"length1":39,"length2":38},{"diffs":[[0,"field></shadow><"],[1,"block type=\"apds9960_readcolor\"></block><"],[0,"/value></block><"]],"start1":7027,"start2":7027,"length1":32,"length2":73},{"diffs":[[0,"pe=\""],[-1,"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"kx-+|q2cYu;$^R?pYwdZ\">wheelLights</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\""],[1,"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation><field name=\"SLIDER\">3</field></shadow></value"],[0,"><va"]],"start1":7122,"start2":7122,"length1":317,"length2":182},{"diffs":[[0,"ue><value name=\""],[-1,"strip"],[1,"text"],[0,"\"><block type=\"v"]],"start1":7298,"start2":7298,"length1":37,"length2":36},{"diffs":[[0,"pe=\""],[-1,"variables_get\"><field name=\"VAR\" id=\"kx-+|q2cYu;$^R?pYwdZ\">wheelLights</field></block"],[1,"text_join\"><mutation items=\"2\"></mutation"],[0,"><"],[-1,"/"],[0,"value"],[-1,"><next><block type=\"variables_set\"><field name=\"VAR\" id=\"zVo^^v6=8Jgq7FyFiNOV\">scoreCircle</field"],[1," name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">distance </field></shadow></value"],[0,"><va"]],"start1":7329,"start2":7329,"length1":198,"length2":141},{"diffs":[[0,"ue><value name=\""],[-1,"VALUE"],[1,"ADD1"],[0,"\"><shadow type=\""]],"start1":7464,"start2":7464,"length1":37,"length2":36},{"diffs":[[0,"hadow type=\""],[-1,"math_number"],[1,"text"],[0,"\"><field nam"]],"start1":7488,"start2":7488,"length1":35,"length2":28},{"diffs":[[0,"t\"><field name=\""],[-1,"NUM"],[1,"TEXT"],[0,"\">"],[-1,"0"],[0,"</field></shadow"]],"start1":7503,"start2":7503,"length1":38,"length2":38},{"diffs":[[0,"block type=\""],[-1,"neopixel_create"],[1,"sonarbit"],[0,"\"><field nam"]],"start1":7543,"start2":7543,"length1":39,"length2":32},{"diffs":[[0,"me=\""],[-1,"Rjp"],[1,"tP"],[0,"in\">"],[-1,"Connected."],[0,"Digital"],[-1,"RJ"],[0,"Pin.P"],[-1,"13"],[1,"8"],[0,"</fi"]],"start1":7574,"start2":7574,"length1":41,"length2":27},{"diffs":[[0,"me=\""],[-1,"mode\">Connected.NeoPixelMode.RGB"],[1,"ePin\">DigitalPin.P9"],[0,"</fi"]],"start1":7614,"start2":7614,"length1":40,"length2":27},{"diffs":[[0,"ld><"],[-1,"value"],[1,"field"],[0," name=\""],[-1,"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8"],[1,"distance_unit\">Connected.Distance_Unit_List.Distance_Unit_cm"],[0,"</fi"]],"start1":7642,"start2":7642,"length1":75,"length2":80},{"diffs":[[0,"nit_cm</field></"],[-1,"shadow"],[1,"block"],[0,"></value></block"]],"start1":7712,"start2":7712,"length1":38,"length2":37},{"diffs":[[0,"pe=\""],[-1,"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"zVo^^v6=8Jgq7FyFiNOV\">scoreCircle</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue"],[1,"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation><field name=\"SLIDER\">4"],[0,"</fi"]],"start1":7773,"start2":7773,"length1":259,"length2":158},{"diffs":[[0,"shadow></value><"],[-1,"n"],[1,"value name=\"t"],[0,"ext"],[1,"\""],[0,"><block type=\"ne"]],"start1":7937,"start2":7937,"length1":36,"length2":49},{"diffs":[[0,"pe=\""],[-1,"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"zVo^^v6=8Jgq7FyFiNOV\">scoreCircle"],[1,"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">gesture "],[0,"</fi"]],"start1":7980,"start2":7980,"length1":126,"length2":116},{"diffs":[[0,"sture </field></"],[-1,"block"],[1,"shadow"],[0,"></value><next><"]],"start1":8086,"start2":8086,"length1":37,"length2":38},{"diffs":[[0,"ue><"],[-1,"next><block type=\"nl_testfast\"></block></next></block></next"],[1,"value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow"],[0,"><"],[-1,"/"],[0,"block"],[-1,"></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next"],[1," type=\"Connected_getGesture\"></block></value></block></value"],[0,"></b"]],"start1":8114,"start2":8114,"length1":218,"length2":148},{"diffs":[[0," x=\""],[-1,"893"],[1,"929"],[0,"\" y=\""],[-1,"764"],[1,"816"],[0,"\"><v"]],"start1":8410,"start2":8410,"length1":19,"length2":19},{"diffs":[[0,"ock "],[-1,"type=\"nl_mp3_init\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"340\" y=\"828\"><field name=\"sPin\">notLegos.mp3type.music</field><field name=\"type\">SerialPin.P16</field><next><block type=\"nl_mp3_music\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"genre\">notLegos.musicGenre.intro</field></block></next></block><block "],[0,"type"]],"start1":8737,"start2":8737,"length1":352,"length2":8},{"diffs":[[0,"x=\"5"],[-1,"30"],[1,"66"],[0,"\" y=\""],[-1,"888"],[1,"940"],[0,"\"><f"]],"start1":8811,"start2":8811,"length1":18,"length2":18},{"diffs":[[0,"=\"14"],[-1,"57"],[1,"93"],[0,"\" y=\"9"],[-1,"30"],[1,"82"],[0,"\"><f"]],"start1":8965,"start2":8965,"length1":18,"length2":18},{"diffs":[[0," x=\""],[-1,"60"],[1,"44"],[0,"\" y=\"1"],[-1,"026"],[1,"133"],[0,"\"><m"]],"start1":9529,"start2":9529,"length1":19,"length2":19}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"gos."],[-1,"sendMP3testFast("],[1,"mp3setPorts(notLegos.mp3type.music, SerialPin.P16)\nnotLegos.mp3musicPlay(notLegos.musicGenre.intro"],[0,")\nlo"]],"start1":1138,"start2":1138,"length1":24,"length2":106}]},{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"        "],[-1,"//"],[0,"sendMP3f"]],"start1":22363,"start2":22363,"length1":18,"length2":16},{"diffs":[[0,"  }\n"],[-1,"\n"],[0,"    "],[-1,"    //% blockId=\"nl_testfast\" \n    //% block=\"TEST PLAY FAST\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3testFast("],[1,"function sendMP3file(fileNum: string, volumeNum: string, sPin: SerialPin"],[0,"): v"]],"start1":22455,"start2":22455,"length1":147,"length2":84},{"diffs":[[0,"al.redirect("],[-1,"SerialPin.P16"],[1,"sPin"],[0,", SerialPin."]],"start1":22557,"start2":22557,"length1":37,"length2":28},{"diffs":[[0,"        CMD = 3\n"],[1,"        para1 = parseInt(fileNum)\n        para2 = parseInt(volumeNum)\n"],[0,"        para1 = "]],"start1":22616,"start2":22616,"length1":32,"length2":102},{"diffs":[[0,"Int("],[-1,"\"001\""],[1,"fileNum"],[0,")\n  "]],"start1":22753,"start2":22753,"length1":13,"length2":15},{"diffs":[[0,"edirect("],[-1,"SerialPin.P16"],[1,"mp3musicPin"],[0,", Serial"]],"start1":27962,"start2":27962,"length1":29,"length2":27}]}]},{"timestamp":1726874981597,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"x=\"8"],[-1,"21"],[1,"55"],[0,"\" y=\"-"],[-1,"13"],[0,"8"],[1,"4"],[0,"\"><f"]],"start1":338,"start2":338,"length1":19,"length2":18},{"diffs":[[0,"=\"13"],[1,"9"],[0,"6"],[-1,"2"],[0,"\" y=\"-"],[-1,"13"],[0,"8"],[1,"4"],[0,"\"><f"]],"start1":730,"start2":730,"length1":19,"length2":18},{"diffs":[[0,"=\"18"],[-1,"45"],[1,"79"],[0,"\" y=\"-"],[-1,"13"],[0,"8"],[1,"4"],[0,"\"><v"]],"start1":1111,"start2":1111,"length1":19,"length2":18},{"diffs":[[0," x=\""],[-1,"0"],[1,"34"],[0,"\" y=\""],[-1,"0"],[1,"54"],[0,"\"><s"]],"start1":4306,"start2":4306,"length1":15,"length2":17},{"diffs":[[0,"ock "],[-1,"type=\"nl_mp3_init\"><field name=\"type\">notLegos.mp3type.music</field><field name=\"sPin\">SerialPin.P16</field><next><block "],[0,"type"]],"start1":7866,"start2":7866,"length1":129,"length2":8},{"diffs":[[0,"t></block></"],[-1,"next></block></"],[0,"statement></"]],"start1":8112,"start2":8112,"length1":39,"length2":24},{"diffs":[[0,"x=\"8"],[-1,"5"],[0,"9"],[1,"3"],[0,"\" y=\"7"],[-1,"10"],[1,"64"],[0,"\"><v"]],"start1":8221,"start2":8221,"length1":18,"length2":18},{"diffs":[[0,"pe=\""],[-1,"MP3setPort"],[1,"nl_mp3_init\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"340\" y=\"828\"><field name=\"sPin\">notLegos.mp3type.music</field><field name=\"type\">SerialPin.P16</field><next><block type=\"nl_mp3_music\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"genre\">notLegos.musicGenre.intro</field></block></next></block><block type=\"MP3execute"],[0,"\" di"]],"start1":8553,"start2":8553,"length1":18,"length2":362},{"diffs":[[0," x=\""],[-1,"1423"],[1,"530"],[0,"\" y=\"8"],[-1,"76"],[1,"88\"><field name=\"myType\">Connected.playType.Play</field></block><block type=\"MP3setPort\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1457\" y=\"930"],[0,"\"><f"]],"start1":8964,"start2":8964,"length1":20,"length2":173},{"diffs":[[0,"ock "],[-1,"type=\"MP3execute\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"614\" y=\"950\"><field name=\"myType\">Connected.playType.Play</field></block><block type=\"nl_mp3_music\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"701\" y=\"1123\"><field name=\"genre\">notLegos.musicGenre.intro</field></block><block "],[0,"type"]],"start1":9653,"start2":9653,"length1":318,"length2":8},{"diffs":[[0," x=\""],[-1,"48"],[1,"60"],[0,"\" y=\"1"],[-1,"242"],[1,"026"],[0,"\"><m"]],"start1":9683,"start2":9683,"length1":19,"length2":19}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"w()\n"],[-1,"notLegos.mp3setPorts(notLegos.mp3type.music, SerialPin.P16)\n"],[0,"notL"]],"start1":1129,"start2":1129,"length1":68,"length2":8}]},{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"1000\n    }\n\n"],[1,"        //% blockId=\"nl_testfast\" \n    //% block=\"TEST PLAY FAST\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3testFast(): void {\n        serial.redirect(SerialPin.P16, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 3\n        para1 = parseInt(\"0\")\n        para2 = parseInt(\"001\")\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }"],[0,"\n\n    //% bl"]],"start1":22450,"start2":22450,"length1":24,"length2":464},{"diffs":[[0," MP3bit "],[1,"at %sPin "],[0,"for %typ"]],"start1":26475,"start2":26475,"length1":16,"length2":25},{"diffs":[[0,"or %type"],[-1," at %sPin"],[0,"\"\n    //"]],"start1":26493,"start2":26493,"length1":25,"length2":16},{"diffs":[[0,"  }\n        "],[-1,"//"],[0,"sendMP3volum"]],"start1":27006,"start2":27006,"length1":26,"length2":24},{"diffs":[[0,"}\n\n\n"],[-1,"    //% blockId=\"nl_testfast\" \n    //% block=\"TEST PLAY FAST\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3testFast(): void {\n        serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 3\n        para1 = parseInt(\"0\")\n        para2 = parseInt(\"001\")\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n\n    "],[0,"\n   "]],"start1":27784,"start2":27784,"length1":450,"length2":8}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"block"],[1,"t"],[0,"sprj\"\n}\n"]],"start1":514,"start2":514,"length1":21,"length2":17}]}]},{"timestamp":1726875575938,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"788"],[1,"821"],[0,"\" y=\"-1"],[-1,"95"],[1,"38"],[0,"\"><f"]],"start1":337,"start2":337,"length1":20,"length2":20},{"diffs":[[0,"=\"13"],[1,"6"],[0,"2"],[-1,"9"],[0,"\" y=\"-1"],[-1,"95"],[1,"38"],[0,"\"><f"]],"start1":731,"start2":731,"length1":19,"length2":19},{"diffs":[[0,"=\"18"],[-1,"12"],[1,"45"],[0,"\" y=\"-1"],[-1,"95"],[1,"38"],[0,"\"><v"]],"start1":1113,"start2":1113,"length1":19,"length2":19},{"diffs":[[0,"alPin.P1"],[-1,"5"],[1,"6"],[0,"</field>"]],"start1":7962,"start2":7962,"length1":17,"length2":17},{"diffs":[[0,"pe=\""],[-1,"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"nl_mp3_music\"><field name=\"genre\">notLegos.musicGenre.intro</field"],[1,"nl_testfast\""],[0,"></b"]],"start1":7994,"start2":7994,"length1":198,"length2":20},{"diffs":[[0,"t></block></"],[-1,"next></block></"],[0,"statement></"]],"start1":8249,"start2":8249,"length1":39,"length2":24},{"diffs":[[0,"x=\"8"],[-1,"26"],[1,"59"],[0,"\" y=\""],[-1,"653"],[1,"710"],[0,"\"><v"]],"start1":8358,"start2":8358,"length1":18,"length2":18},{"diffs":[[0,"x=\"1"],[-1,"390"],[1,"423"],[0,"\" y=\"8"],[-1,"19"],[1,"76"],[0,"\"><f"]],"start1":8758,"start2":8758,"length1":19,"length2":19},{"diffs":[[0," x=\""],[-1,"581"],[1,"614"],[0,"\" y=\""],[-1,"893"],[1,"950"],[0,"\"><f"]],"start1":9366,"start2":9366,"length1":19,"length2":19},{"diffs":[[0,"ype=\"nl_"],[-1,"testfast"],[1,"mp3_music"],[0,"\" disabl"]],"start1":9451,"start2":9451,"length1":24,"length2":25},{"diffs":[[0," x=\""],[-1,"43"],[1,"70"],[0,"1\" y=\""],[-1,"957\""],[1,"1123\"><field name=\"genre\">notLegos.musicGenre.intro</field"],[0,"></b"]],"start1":9521,"start2":9521,"length1":20,"length2":74},{"diffs":[[0," x=\""],[-1,"169"],[1,"48"],[0,"\" y=\"1"],[-1,"031"],[1,"242"],[0,"\"><m"]],"start1":9633,"start2":9633,"length1":20,"length2":19}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"n.P1"],[-1,"5)\nbasic.pause(100)\nnotLegos.mp3musicPlay(notLegos.musicGenre.intro"],[1,"6)\nnotLegos.sendMP3testFast("],[0,")\nlo"]],"start1":1186,"start2":1186,"length1":75,"length2":36}]},{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"      }\n        "],[1,"//"],[0,"sendMP3volumeQui"]],"start1":26562,"start2":26562,"length1":32,"length2":34},{"diffs":[[0,"k(type)\n"],[-1,""],[0,"    }\n\n "]],"start1":26597,"start2":26597,"length1":16,"length2":16},{"diffs":[[0,"lume = 1"],[-1,"0"],[1,"5"],[0,"\n       "]],"start1":26810,"start2":26810,"length1":17,"length2":17},{"diffs":[[0," block=\""],[1,"TEST PLAY FAST"],[0,"\"\n    //"]],"start1":27388,"start2":27388,"length1":16,"length2":30},{"diffs":[[0,"ast("],[-1,"track: number"],[0,"): v"]],"start1":27480,"start2":27480,"length1":21,"length2":8},{"diffs":[[0,"al.redirect("],[-1,"mp3musicPin"],[1,"SerialPin.P16"],[0,", SerialPin."]],"start1":27964,"start2":27964,"length1":35,"length2":37}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"t"],[1,"block"],[0,"sprj\"\n}\n"]],"start1":514,"start2":514,"length1":17,"length2":21}]}]},{"timestamp":1726876224176,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"ck=\""],[-1,"Execute "],[0,"\"\n  "]],"start1":27390,"start2":27390,"length1":16,"length2":8}]}]},{"timestamp":1726876232552,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"39"],[1,"0"],[0,"\" y=\""],[-1,"51"],[1,"0"],[0,"\"><s"]],"start1":4309,"start2":4309,"length1":17,"length2":15},{"diffs":[[0,"\"nl_"],[-1,"testfast"],[1,"mp3_music"],[0,"\"><f"]],"start1":8121,"start2":8121,"length1":16,"length2":17},{"diffs":[[0,"d name=\""],[-1,"bit"],[1,"genre"],[0,"\">notLeg"]],"start1":8141,"start2":8141,"length1":19,"length2":21},{"diffs":[[0,"os.m"],[-1,"p3type.music</field><value name=\"track\"><block type=\"math_number\"><field name=\"NUM\">2</field></block></value"],[1,"usicGenre.intro</field"],[0,"></b"]],"start1":8162,"start2":8162,"length1":116,"length2":30},{"diffs":[[0,"ype=\"nl_"],[-1,"mp3_music"],[1,"testfast"],[0,"\" disabl"]],"start1":9644,"start2":9644,"length1":25,"length2":24},{"diffs":[[0," x=\""],[-1,"1"],[0,"4"],[1,"3"],[0,"1\" y=\""],[-1,"1080\"><field name=\"genre\">notLegos.musicGenre.intro</field"],[1,"957\""],[0,"></b"]],"start1":9713,"start2":9713,"length1":74,"length2":20},{"diffs":[[0," x=\""],[-1,"35"],[1,"16"],[0,"9\" y=\"1"],[-1,"373"],[1,"031"],[0,"\"><m"]],"start1":9771,"start2":9771,"length1":20,"length2":20}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"gos."],[-1,"sendMP3testFast(2, notLegos.mp3type.music"],[1,"mp3musicPlay(notLegos.musicGenre.intro"],[0,")\nlo"]],"start1":1215,"start2":1215,"length1":49,"length2":46}]},{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"ute "],[-1,"track %track on %bit"],[0,"\"\n  "]],"start1":27398,"start2":27398,"length1":28,"length2":8},{"diffs":[[0,"mber"],[-1,", bit:mp3type): void {\n        if (bit == mp3type.music) {\n    "],[1,"): void {\n"],[0,"    "]],"start1":27485,"start2":27485,"length1":71,"length2":18},{"diffs":[[0,"    "],[-1,"}\n        CMD = 3"],[1,"CMD = 3\n        para1 = parseInt(\"0\")\n        para2 = parseInt(\"001\")"],[0,"\n   "]],"start1":27581,"start2":27581,"length1":25,"length2":77},{"diffs":[[0,"rr[5] = "],[-1,"0"],[1,"para1"],[0,"\n       "]],"start1":27693,"start2":27693,"length1":17,"length2":21},{"diffs":[[0,"rr[6] = "],[-1,"track"],[1,"para2"],[0,"\n       "]],"start1":27720,"start2":27720,"length1":21,"length2":21}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"block"],[1,"t"],[0,"sprj\"\n}\n"]],"start1":514,"start2":514,"length1":21,"length2":17}]}]},{"timestamp":1726876656220,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"e=\"NUM\">"],[-1,"3"],[1,"2"],[0,"</field>"]],"start1":8241,"start2":8241,"length1":17,"length2":17}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"estFast("],[-1,"3"],[1,"2"],[0,", notLeg"]],"start1":1227,"start2":1227,"length1":17,"length2":17}]}]},{"timestamp":1726877493389,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"estFast("],[-1,"1"],[1,"3"],[0,", notLeg"]],"start1":1227,"start2":1227,"length1":17,"length2":17}]}]},{"timestamp":1726877528043,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"e=\"NUM\">"],[-1,"9"],[1,"3"],[0,"</field>"]],"start1":8241,"start2":8241,"length1":17,"length2":17}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"estFast("],[-1,"9"],[1,"1"],[0,", notLeg"]],"start1":1227,"start2":1227,"length1":17,"length2":17}]}]},{"timestamp":1726877702661,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"estFast("],[-1,"1"],[1,"9"],[0,", notLeg"]],"start1":1227,"start2":1227,"length1":17,"length2":17}]}]},{"timestamp":1726878540880,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"ield name=\"NUM\">"],[-1,"1"],[1,"9"],[0,"</field></block>"]],"start1":8233,"start2":8233,"length1":33,"length2":33}]}]},{"timestamp":1726879445602,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"estFast("],[-1,"2"],[1,"1"],[0,", notLeg"]],"start1":1227,"start2":1227,"length1":17,"length2":17}]}]},{"timestamp":1726880094900,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"e=\"NUM\">"],[-1,"2"],[1,"1"],[0,"</field>"]],"start1":8241,"start2":8241,"length1":17,"length2":17}]}]},{"timestamp":1726880262234,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"x=\"7"],[-1,"49"],[1,"88"],[0,"\" y=\"-"],[-1,"246"],[1,"195"],[0,"\"><f"]],"start1":338,"start2":338,"length1":19,"length2":19},{"diffs":[[0,"x=\"1"],[1,"3"],[0,"29"],[-1,"0"],[0,"\" y=\"-"],[-1,"246"],[1,"195"],[0,"\"><f"]],"start1":730,"start2":730,"length1":20,"length2":20},{"diffs":[[0,"x=\"1"],[-1,"773"],[1,"812"],[0,"\" y=\"-"],[-1,"246"],[1,"195"],[0,"\"><v"]],"start1":1112,"start2":1112,"length1":20,"length2":20},{"diffs":[[0," x=\""],[-1,"0"],[1,"39"],[0,"\" y=\""],[-1,"0"],[1,"51"],[0,"\"><s"]],"start1":4309,"start2":4309,"length1":15,"length2":17},{"diffs":[[0,"e=\"NUM\">"],[-1,"4"],[1,"2"],[0,"</field>"]],"start1":8241,"start2":8241,"length1":17,"length2":17},{"diffs":[[0," x=\""],[-1,"787"],[1,"826"],[0,"\" y=\"6"],[-1,"02"],[1,"53"],[0,"\"><v"]],"start1":8635,"start2":8635,"length1":19,"length2":19},{"diffs":[[0,"=\"13"],[-1,"51"],[1,"90"],[0,"\" y=\""],[-1,"768"],[1,"819"],[0,"\"><f"]],"start1":9037,"start2":9037,"length1":18,"length2":18},{"diffs":[[0,"x=\"5"],[-1,"42"],[1,"81"],[0,"\" y=\"8"],[-1,"42"],[1,"93"],[0,"\"><f"]],"start1":9645,"start2":9645,"length1":18,"length2":18},{"diffs":[[0,"x=\"1"],[-1,"02"],[1,"41"],[0,"\" y=\"10"],[-1,"29"],[1,"80"],[0,"\"><f"]],"start1":9800,"start2":9800,"length1":19,"length2":19},{"diffs":[[0,"x=\"3"],[-1,"71"],[1,"59"],[0,"\" y=\"1"],[-1,"2"],[1,"3"],[0,"73\">"]],"start1":9912,"start2":9912,"length1":17,"length2":17}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"estFast("],[-1,"4"],[1,"2"],[0,", notLeg"]],"start1":1227,"start2":1227,"length1":17,"length2":17}]},{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"  }\n"],[-1,"    //% blockId=\"playFileFolderNl\" \n    //% block=\"Play folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n"],[0,"    "]],"start1":21534,"start2":21534,"length1":142,"length2":8},{"diffs":[[0,"dMP3play"],[-1,"Folder"],[0,"(folderN"]],"start1":21554,"start2":21554,"length1":22,"length2":16},{"diffs":[[0,") {\n            "],[-1,"//"],[0,"sendMP3play(fold"]],"start1":29461,"start2":29461,"length1":34,"length2":32},{"diffs":[[0,"leNum, mp3Apin)\n"],[1,""],[0,"        }\n      "]],"start1":29502,"start2":29502,"length1":32,"length2":32},{"diffs":[[0,"e(sPin)\n        "],[-1,"//"],[0,"sendMP3play(theF"]],"start1":30601,"start2":30601,"length1":34,"length2":32},{"diffs":[[0,"se(20)\n\n        "],[-1,"//"],[0,"sendMP3play(theF"]],"start1":31778,"start2":31778,"length1":34,"length2":32},{"diffs":[[0,"p3Apin)\n        "],[-1,"//"],[0,"sendMP3play(theF"]],"start1":31827,"start2":31827,"length1":34,"length2":32},{"diffs":[[0,"in)\n        "],[-1,"//"],[0,"sendMP3play("]],"start1":32538,"start2":32538,"length1":26,"length2":24},{"diffs":[[0,"00 + 20\n    }\n\n\n"],[1,"    //% blockId=\"nl_playBackground\" \n    //% block=\"Play in background:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playBackground(soundString: string): void {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n        mp3Cvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        sPin = mp3Cpin\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n    }\n\n\n"],[0,"    //% blockId="]],"start1":32629,"start2":32629,"length1":32,"length2":661}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"t"],[1,"block"],[0,"sprj\"\n}\n"]],"start1":514,"start2":514,"length1":17,"length2":21}]}]},{"timestamp":1726880861827,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"38"],[1,"0"],[0,"\" y=\""],[-1,"56"],[1,"0"],[0,"\"><s"]],"start1":4309,"start2":4309,"length1":17,"length2":15},{"diffs":[[0,"\"nl_"],[-1,"playfilefolder"],[1,"testfast"],[0,"\"><f"]],"start1":8121,"start2":8121,"length1":22,"length2":16},{"diffs":[[0,"me=\""],[-1,"sPin\">SerialPin.P15</field><value name=\"folderNum\"><shadow type=\"text\"><field name=\"TEXT\">001</field></shadow></value><value name=\"fileNum\"><shadow type=\"text"],[1,"bit\">notLegos.mp3type.music</field><value name=\"track\"><block type=\"math_number"],[0,"\"><f"]],"start1":8144,"start2":8144,"length1":166,"length2":87},{"diffs":[[0,"me=\""],[-1,"TEXT\">005"],[1,"NUM\">4"],[0,"</fi"]],"start1":8238,"start2":8238,"length1":17,"length2":14},{"diffs":[[0,"NUM\">4</field></"],[-1,"shadow"],[1,"block"],[0,"></value></block"]],"start1":8242,"start2":8242,"length1":38,"length2":37},{"diffs":[[0,"ock "],[-1,"type=\"nl_testfast\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"879\" y=\"987\"><field name=\"bit\">notLegos.mp3type.music</field><value name=\"track\"><block type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">4</field></block></value></block><block "],[0,"type"]],"start1":9722,"start2":9722,"length1":284,"length2":8},{"diffs":[[0," x=\""],[-1,"634"],[1,"102"],[0,"\" y=\"1"],[-1,"118"],[1,"029"],[0,"\"><f"]],"start1":9797,"start2":9797,"length1":20,"length2":20},{"diffs":[[0," x=\""],[-1,"424"],[1,"371"],[0,"\" y=\"12"],[-1,"20"],[1,"73"],[0,"\"><m"]],"start1":9909,"start2":9909,"length1":20,"length2":20}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"dMP3"],[-1,"fileFolder(\"001\", \"005\", SerialPin.P15"],[1,"testFast(4, notLegos.mp3type.music"],[0,")\nlo"]],"start1":1222,"start2":1222,"length1":46,"length2":42}]},{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"Id=\""],[-1,"nl_"],[0,"play"],[-1,"filef"],[1,"FileF"],[0,"older"],[1,"Nl"],[0,"\" \n "]],"start1":21551,"start2":21551,"length1":25,"length2":24},{"diffs":[[0,"group=\"MP3\"\n    "],[-1,"export "],[0,"function sendMP3"]],"start1":21660,"start2":21660,"length1":39,"length2":32},{"diffs":[[0," sendMP3"],[-1,"file"],[1,"play"],[0,"Folder(f"]],"start1":21684,"start2":21684,"length1":20,"length2":20},{"diffs":[[0,"    }\n\n\n"],[1,"    //% blockId=MP3execute2 block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n"],[0,"  \n    /"]],"start1":24211,"start2":24211,"length1":16,"length2":465},{"diffs":[[0,"=nl_mp3_"],[-1,"magician"],[1,"voice"],[0,"\n    //%"]],"start1":28773,"start2":28773,"length1":24,"length2":21},{"diffs":[[0,"=nl_mp3_"],[-1,"sfx"],[1,"voice"],[0,"\n    //%"]],"start1":29008,"start2":29008,"length1":19,"length2":21},{"diffs":[[0,"kId="],[-1,"nl_volume_refresh\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume\"\n    export function updateVolume(): void {\n        if (mp3bits > 0) {\n            sendMP3volumeFast(mp3Apin)\n        }\n        if (mp3bits > 1) {\n            sendMP3volumeFast(mp3Bpin)\n        }\n        if (mp3bits > 2) {\n            sendMP3volumeFast(mp3Cpin)\n        }"],[1,"\"playFolderFile\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playFolderFile(folderNum: string, fileNum: string): void {\n    \n        if (mp3bits > 0) {\n            sendMP3volume(mp3Apin)\n        }\n        if (mp3bits > 1) {\n           // sendMP3volume(mp3Bpin)\n        }\n        if (mp3bits >0) {\n            //sendMP3play(folderNum, fileNum, mp3Apin)\n        }\n        if (mp3bits > 1) {\n          //  sendMP3play(folderNum, fileNum, mp3Bpin)\n        }\n    }\n\n    //% blockId=\"playsFor\" \n    //% block=\"Play length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsFor(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        if (mp3bits == 1) {\n            sPin = mp3Apin\n            mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        } else {\n            if (lastMP3bit == \"A\") {\n                    sPin = mp3Bpin\n                    mp3Bvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n                    lastMP3bit = \"B\"\n            } else {\n                sPin = mp3Apin\n                mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n            lastMP3bit = \"A\"\n            }\n        }\n        let theLength = stringParts[3]\n        sendMP3volume(sPin)\n        //sendMP3play(theFolder, theFile, sPin)\n        return parseFloat(theLength) * 1000 + 20\n    }\n\n    //% blockId=nl_volume_refresh\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume\"\n    export function updateVolume(): void {\n        if (mp3bits > 0) {\n            sendMP3volumeFast(mp3Apin)\n        }\n        if (mp3bits > 1) {\n            sendMP3volumeFast(mp3Bpin)\n        }\n        if (mp3bits > 2) {\n            sendMP3volumeFast(mp3Cpin)\n        }\n    }\n\n\n    //% blockId=\"nl_playsForTwo\" \n    //% block=\"Dual play length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsForTwo(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n\n        mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        mp3Bvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n\n        sendMP3volumeFast(mp3Apin)\n        sendMP3volumeFast(mp3Bpin)\n        \n        basic.pause(20)\n\n        //sendMP3play(theFolder, theFile, mp3Apin)\n        //sendMP3play(theFolder, theFile, mp3Bpin)\n        \n        return parseFloat(theLength) * 1000 + 20"],[0,"\n   "]],"start1":29173,"start2":29173,"length1":364,"length2":2920}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"block"],[1,"t"],[0,"sprj\"\n}\n"]],"start1":514,"start2":514,"length1":21,"length2":17}]}]},{"timestamp":1726881404758,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"x=\"7"],[-1,"11"],[1,"49"],[0,"\" y=\"-"],[-1,"302"],[1,"246"],[0,"\"><f"]],"start1":338,"start2":338,"length1":19,"length2":19},{"diffs":[[0,"=\"12"],[-1,"52"],[1,"90"],[0,"\" y=\"-"],[-1,"302"],[1,"246"],[0,"\"><f"]],"start1":731,"start2":731,"length1":19,"length2":19},{"diffs":[[0,"=\"17"],[1,"7"],[0,"3"],[-1,"5"],[0,"\" y=\"-"],[-1,"302"],[1,"246"],[0,"\"><v"]],"start1":1113,"start2":1113,"length1":19,"length2":19},{"diffs":[[0," x=\""],[-1,"0"],[1,"38"],[0,"\" y=\""],[-1,"0"],[1,"56"],[0,"\"><s"]],"start1":4309,"start2":4309,"length1":15,"length2":17},{"diffs":[[0,"x=\"7"],[-1,"49"],[1,"87"],[0,"\" y=\""],[-1,"546"],[1,"602"],[0,"\"><v"]],"start1":8725,"start2":8725,"length1":18,"length2":18},{"diffs":[[0,"=\"13"],[1,"5"],[0,"1"],[-1,"3"],[0,"\" y=\"7"],[-1,"12"],[1,"68"],[0,"\"><f"]],"start1":9126,"start2":9126,"length1":18,"length2":18},{"diffs":[[0,"x=\"5"],[-1,"0"],[0,"4"],[1,"2"],[0,"\" y=\""],[-1,"786"],[1,"842"],[0,"\"><f"]],"start1":9734,"start2":9734,"length1":18,"length2":18},{"diffs":[[0,"x=\"8"],[-1,"41"],[1,"79"],[0,"\" y=\"9"],[-1,"31"],[1,"87"],[0,"\"><f"]],"start1":9888,"start2":9888,"length1":18,"length2":18},{"diffs":[[0," x=\""],[-1,"596"],[1,"634"],[0,"\" y=\"1"],[-1,"062"],[1,"118"],[0,"\"><f"]],"start1":10164,"start2":10164,"length1":20,"length2":20},{"diffs":[[0,"x=\"4"],[-1,"36"],[1,"24"],[0,"\" y=\"1"],[-1,"109"],[1,"220"],[0,"\"><m"]],"start1":10277,"start2":10277,"length1":19,"length2":19}]}]},{"timestamp":1726951966107,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"egos"],[-1,"Master"],[1,"Ext"],[0,"\",\n "]],"start1":19,"start2":19,"length1":14,"length2":11}]}]},{"timestamp":1726951977445,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"ent\""],[-1," id=\"YEtRWM}~Gs]nF#Csuo|8\""],[0," x=\""]],"start1":333,"start2":333,"length1":34,"length2":8},{"diffs":[[0,"use\""],[-1," id=\"u1/2C4N*yA8u]sAZ%F3U\""],[0,"><va"]],"start1":438,"start2":438,"length1":34,"length2":8},{"diffs":[[0,"ker\""],[-1," id=\"j5Dkqg]NRB:u-08.d3ws\""],[0,"><fi"]],"start1":484,"start2":484,"length1":34,"length2":8},{"diffs":[[0,"Nl2\""],[-1," id=\"URTcM+4fu(COAGm)sJ|M\""],[0,"><va"]],"start1":547,"start2":547,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"{$!xf@1D$tv7z!g1,rZ3\""],[0,"><fi"]],"start1":593,"start2":593,"length1":34,"length2":8},{"diffs":[[0,"ent\""],[-1," id=\"1%@.;F_W^IpF`su9xA!:\""],[0," x=\""]],"start1":725,"start2":725,"length1":34,"length2":8},{"diffs":[[0,"use\""],[-1," id=\",,)/.a}NMUrF6scxe;#J\""],[0,"><va"]],"start1":831,"start2":831,"length1":34,"length2":8},{"diffs":[[0,"ker\""],[-1," id=\"~2pk,Dl)#=s2A`/*~jnG\""],[0,"><fi"]],"start1":877,"start2":877,"length1":34,"length2":8},{"diffs":[[0,"eNl\""],[-1," id=\"qClRZYc%KT55W)-n^9*b\""],[0,"><va"]],"start1":939,"start2":939,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"/3-B%$dX}+-n2(TEhFkD\""],[0,"><fi"]],"start1":985,"start2":985,"length1":34,"length2":8},{"diffs":[[0,"val\""],[-1," id=\"73}!b:wqqSZ=H5I,%E{_\""],[0," x=\""]],"start1":1107,"start2":1107,"length1":34,"length2":8},{"diffs":[[0,"ker\""],[-1," id=\"z+xEYB5Wh_?0dGa+y,i]\""],[0,"><fi"]],"start1":1178,"start2":1178,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"w3hSt%rva-cTr)m,q0fy\""],[0,"><va"]],"start1":1286,"start2":1286,"length1":34,"length2":8},{"diffs":[[0,"max\""],[-1," id=\"WM~mP%=kpx5^SnTP1B4(\""],[0,"><mu"]],"start1":1339,"start2":1339,"length1":34,"length2":8},{"diffs":[[0,"oin\""],[-1," id=\")[RsQ`Tn6_j2*57in8ii\""],[0," inl"]],"start1":1480,"start2":1480,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"t#$DUL*pYHlZMzr?2mUM\""],[0,"><fi"]],"start1":1565,"start2":1565,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"y1dVc/0:iY/p%Q6E=Rga\""],[0,"><fi"]],"start1":1649,"start2":1649,"length1":34,"length2":8},{"diffs":[[0,"pin\""],[-1," id=\"t`eZSEOi4|pAouBLCM9H\""],[0,"><va"]],"start1":1721,"start2":1721,"length1":34,"length2":8},{"diffs":[[0,"dow\""],[-1," id=\"5#T3X5K8Cl~b3;98whku\""],[0,"><fi"]],"start1":1784,"start2":1784,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"ext]LX6{XhenD#wzUqTs\""],[0,"><fi"]],"start1":1903,"start2":1903,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"?~3bUOWg5)h2,:lbp:Fh\""],[0,"><fi"]],"start1":1988,"start2":1988,"length1":34,"length2":8},{"diffs":[[0,"pin\""],[-1," id=\"V$kppfM0H?;wIW0jQFS9\""],[0,"><va"]],"start1":2060,"start2":2060,"length1":34,"length2":8},{"diffs":[[0,"dow\""],[-1," id=\"uV;U-D[G53,9t/B$,Rs3\""],[0,"><fi"]],"start1":2123,"start2":2123,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"13l@IGM|A%5|hc9L?JdO\""],[0,"><fi"]],"start1":2242,"start2":2242,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"mfxrxP?c3ucz3ggggnHq\""],[0,"><fi"]],"start1":2327,"start2":2327,"length1":34,"length2":8},{"diffs":[[0,"pin\""],[-1," id=\"zMwpP9u/#JU/PmpzQ|yj\""],[0,"><va"]],"start1":2399,"start2":2399,"length1":34,"length2":8},{"diffs":[[0,"dow\""],[-1," id=\"ugHA/LM7WMZcaNEuj]6;\""],[0,"><fi"]],"start1":2462,"start2":2462,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\")lWb@OZBVz9NgSm;7/=h\""],[0,"><va"]],"start1":2601,"start2":2601,"length1":34,"length2":8},{"diffs":[[0,"max\""],[-1," id=\"k/A%H?7-WVg+ba~wLLWe\""],[0,"><mu"]],"start1":2654,"start2":2654,"length1":34,"length2":8},{"diffs":[[0,"oin\""],[-1," id=\"/eDA9x74sHthjBU!wmH@\""],[0,"><mu"]],"start1":2795,"start2":2795,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"E8rr1K[2Hxv`n|9_R,*r\""],[0,"><fi"]],"start1":2865,"start2":2865,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"*vCx4fuI`gSbDJI6stAT\""],[0,"><fi"]],"start1":2952,"start2":2952,"length1":34,"length2":8},{"diffs":[[0,"lor\""],[-1," id=\"uX?_qxE-lK,@H7QS#L`S\""],[0,"></b"]],"start1":3021,"start2":3021,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"qxgeAbA-S!TL~Mr;pb!G\""],[0,"><va"]],"start1":3096,"start2":3096,"length1":34,"length2":8},{"diffs":[[0,"max\""],[-1," id=\"CG605zDPMJtB%4,G,_Wx\""],[0,"><mu"]],"start1":3149,"start2":3149,"length1":34,"length2":8},{"diffs":[[0,"oin\""],[-1," id=\";*Uak/wmjK)Ab!-Qg496\""],[0,"><mu"]],"start1":3290,"start2":3290,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"Q)AA3Dqk:urAKvl-@#0a\""],[0,"><fi"]],"start1":3360,"start2":3360,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"n+~#^%Yy+?7cjHTHOU_?\""],[0,"><fi"]],"start1":3452,"start2":3452,"length1":34,"length2":8},{"diffs":[[0,"bit\""],[-1," id=\"`9!e)t7rU:DWCv[9lIc!\""],[0,"><fi"]],"start1":3511,"start2":3511,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"[eR8iHT=EZK=fi{7nsPP\""],[0,"><va"]],"start1":3747,"start2":3747,"length1":34,"length2":8},{"diffs":[[0,"max\""],[-1," id=\"jKbgM/vqUR(|V,o~mIcS\""],[0,"><mu"]],"start1":3800,"start2":3800,"length1":34,"length2":8},{"diffs":[[0,"oin\""],[-1," id=\")+n%}nazjFt:GuR_e6?f\""],[0,"><mu"]],"start1":3941,"start2":3941,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"APIL~U3-cNA/?CS6wmnI\""],[0,"><fi"]],"start1":4011,"start2":4011,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"A4j-Mrkt?i!URGF#Ad6K\""],[0,"><fi"]],"start1":4102,"start2":4102,"length1":34,"length2":8},{"diffs":[[0,"ure\""],[-1," id=\"x7,$fKDZ`hnxbcr[D0:d\""],[0,"></b"]],"start1":4173,"start2":4173,"length1":34,"length2":8},{"diffs":[[0,"art\""],[-1," id=\"^3FJZ*mU-z.m1mW/$`H6\""],[0," x=\""]],"start1":4305,"start2":4305,"length1":34,"length2":8},{"diffs":[[0,"ear\""],[-1," id=\"Y^6E:VCfQBvKT7V5/9tL\""],[0,"><ne"]],"start1":4377,"start2":4377,"length1":34,"length2":8},{"diffs":[[0,"led\""],[-1," id=\"~|``oJz6u_*EimiJ4;`*\""],[0,"><va"]],"start1":4423,"start2":4423,"length1":34,"length2":8},{"diffs":[[0,"ean\""],[-1," id=\"!1tP[|=X)|TRMnTyu|#D\""],[0,"><fi"]],"start1":4474,"start2":4474,"length1":34,"length2":8},{"diffs":[[0,"ble\""],[-1," id=\"2Ji(c,/U~!{nn`JqE,Ak\""],[0,"><va"]],"start1":4560,"start2":4560,"length1":34,"length2":8},{"diffs":[[0,"ean\""],[-1," id=\"I9YDa#%ruhMb#`~hx,8l\""],[0,"><fi"]],"start1":4606,"start2":4606,"length1":34,"length2":8},{"diffs":[[0,"use\""],[-1," id=\"lh@v:BMr]XypvBrxl=4l\""],[0,"><va"]],"start1":4688,"start2":4688,"length1":34,"length2":8},{"diffs":[[0,"ker\""],[-1," id=\"V.m2M/NbquL/)S;F!Dqh\""],[0,"><fi"]],"start1":4734,"start2":4734,"length1":34,"length2":8},{"diffs":[[0,"set\""],[-1," id=\"GMaA^onE?:a{yyKma=2A\""],[0,"><fi"]],"start1":4813,"start2":4813,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"Tw:$JL6X2SZ4GuL(VJtf\""],[0,"><fi"]],"start1":4918,"start2":4918,"length1":34,"length2":8},{"diffs":[[0,"ate\""],[-1," id=\"h!qGxKp.*}WU(~ERGP)8\""],[0,"><fi"]],"start1":4988,"start2":4988,"length1":34,"length2":8},{"diffs":[[0,"use\""],[-1," id=\"WG{3J:l+icjuX(fzaa,?\""],[0,"><va"]],"start1":5117,"start2":5117,"length1":34,"length2":8},{"diffs":[[0,"ker\""],[-1," id=\"nRU,VhpeYBw9:ro^.X^(\""],[0,"><fi"]],"start1":5163,"start2":5163,"length1":34,"length2":8},{"diffs":[[0,"set\""],[-1," id=\":cR^4.c=Pe@+Y?t.Jg4*\""],[0,"><fi"]],"start1":5243,"start2":5243,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"A/k,fbdArL/qV}*WOb-E\""],[0,"><fi"]],"start1":5352,"start2":5352,"length1":34,"length2":8},{"diffs":[[0,"ate\""],[-1," id=\"oD0wJl[3b59kZ)gG]|,I\""],[0,"><fi"]],"start1":5418,"start2":5418,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\";E.J/_666/y`!rsA#4:n\""],[0,"><fi"]],"start1":5574,"start2":5574,"length1":34,"length2":8},{"diffs":[[0,"lor\""],[-1," id=\"*~jT]yNq+2(lXKBJjHZ}\""],[0,"><va"]],"start1":5679,"start2":5679,"length1":34,"length2":8},{"diffs":[[0,"get\""],[-1," id=\"ugXg|MCrU;3o@YzcEnY3\""],[0,"><fi"]],"start1":5727,"start2":5727,"length1":34,"length2":8},{"diffs":[[0,"ors\""],[-1," id=\"M}Q,eZP;Q1bl)s16=VV;\""],[0,"><fi"]],"start1":5854,"start2":5854,"length1":34,"length2":8},{"diffs":[[0,"how\""],[-1," id=\"GnwR3|:K[+Td4=7)WY_@\""],[0,"><va"]],"start1":5962,"start2":5962,"length1":34,"length2":8},{"diffs":[[0,"get\""],[-1," id=\"[}wcO!Qlj8lp0(0;uE1?\""],[0,"><fi"]],"start1":6010,"start2":6010,"length1":34,"length2":8},{"diffs":[[0,"set\""],[-1," id=\"cq)*ub4prt8,@_t9^4cp\""],[0,"><fi"]],"start1":6122,"start2":6122,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"9};df:gE[0^5h4mR99{C\""],[0,"><fi"]],"start1":6232,"start2":6232,"length1":34,"length2":8},{"diffs":[[0,"ate\""],[-1," id=\":HDO5$l3%fG,orFybaUy\""],[0,"><fi"]],"start1":6298,"start2":6298,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"]TrTkudW.s)g]x~hKu_R\""],[0,"><fi"]],"start1":6454,"start2":6454,"length1":34,"length2":8},{"diffs":[[0,"lor\""],[-1," id=\"Tf+T.;/2LwL@[tDgbLJ0\""],[0,"><va"]],"start1":6560,"start2":6560,"length1":34,"length2":8},{"diffs":[[0,"get\""],[-1," id=\"TC?D-[plr$Tb4}6d!8(5\""],[0,"><fi"]],"start1":6608,"start2":6608,"length1":34,"length2":8},{"diffs":[[0,"ors\""],[-1," id=\"}!/(~f]80-NMjV_eMzYa\""],[0,"><fi"]],"start1":6736,"start2":6736,"length1":34,"length2":8},{"diffs":[[0,"how\""],[-1," id=\"]^=|pYq[`Kn=0EH!w7Jo\""],[0,"><va"]],"start1":6844,"start2":6844,"length1":34,"length2":8},{"diffs":[[0,"get\""],[-1," id=\"gO.7T(AL(*}Zoh0K%J@)\""],[0,"><fi"]],"start1":6892,"start2":6892,"length1":34,"length2":8},{"diffs":[[0,"set\""],[-1," id=\"[f1-S3hek0(`@KmmG594\""],[0,"><fi"]],"start1":7005,"start2":7005,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"8,JQn}7pin.*}.5CC}~T\""],[0,"><fi"]],"start1":7115,"start2":7115,"length1":34,"length2":8},{"diffs":[[0,"ate\""],[-1," id=\"1rZ]r#N}k_9v2EHxb[V7\""],[0,"><fi"]],"start1":7181,"start2":7181,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"}4oK!8c:dZ2DG#(CjSXg\""],[0,"><fi"]],"start1":7337,"start2":7337,"length1":34,"length2":8},{"diffs":[[0,"lor\""],[-1," id=\"vV!QEOvig)UOxq=J*]Gg\""],[0,"><va"]],"start1":7442,"start2":7442,"length1":34,"length2":8},{"diffs":[[0,"get\""],[-1," id=\"ziLc(UBhin#UJiFon}05\""],[0,"><fi"]],"start1":7490,"start2":7490,"length1":34,"length2":8},{"diffs":[[0,"ors\""],[-1," id=\"|~I/[$u#!,D!V^5?4(0H\""],[0,"><fi"]],"start1":7618,"start2":7618,"length1":34,"length2":8},{"diffs":[[0,"how\""],[-1," id=\"*(n3Ol/VUuoWRtW=d!Ys\""],[0,"><va"]],"start1":7726,"start2":7726,"length1":34,"length2":8},{"diffs":[[0,"get\""],[-1," id=\"/)C:x=F^H5|hZ2}W%=)A\""],[0,"><fi"]],"start1":7774,"start2":7774,"length1":34,"length2":8},{"diffs":[[0,"nit\""],[-1," id=\")EX0eLd#LM8mOmiIIrrQ\""],[0,"><fi"]],"start1":7885,"start2":7885,"length1":34,"length2":8},{"diffs":[[0,"use\""],[-1," id=\":v;TIxE6uY`1:oz[uou7\""],[0,"><va"]],"start1":8007,"start2":8007,"length1":34,"length2":8},{"diffs":[[0,"ker\""],[-1," id=\"58~P!_=eP3C5oJ/)$_6%\""],[0,"><fi"]],"start1":8053,"start2":8053,"length1":34,"length2":8},{"diffs":[[0,"der\""],[-1," id=\"5Y5eVpO@}XLJbkGgsC#r\""],[0,"><fi"]],"start1":8136,"start2":8136,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"tkrNqGQ.(FT.]q}k~2,)\""],[0,"><fi"]],"start1":8220,"start2":8220,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"@}[_V}^}dO}0PeWLsHIi\""],[0,"><fi"]],"start1":8309,"start2":8309,"length1":34,"length2":8},{"diffs":[[0,"use\""],[-1," id=\"U;Nib!78=;k0xB[9lb0B\""],[0," dis"]],"start1":8666,"start2":8666,"length1":34,"length2":8},{"diffs":[[0,"ker\""],[-1," id=\"Uo`u]8~SmaMY-U7G!Z$k\""],[0,"><fi"]],"start1":8780,"start2":8780,"length1":34,"length2":8},{"diffs":[[0,"Nl2\""],[-1," id=\"lq$1J@YQMV/S*kN(Xw`Y\""],[0," dis"]],"start1":8843,"start2":8843,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"CS!%JJ:pmqQG#|*s9l[4\""],[0," dis"]],"start1":8926,"start2":8926,"length1":34,"length2":8},{"diffs":[[0,"ort\""],[-1," id=\"xi/7rrJo4:@FP6+JiC*-\""],[0," dis"]],"start1":9066,"start2":9066,"length1":34,"length2":8},{"diffs":[[0,"ing\""],[-1," id=\"IA6oyFwP68U*j|2m!rQk\""],[0," dis"]],"start1":9221,"start2":9221,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"]:a`RaVtrOyU8g-^i!M|\""],[0," dis"]],"start1":9414,"start2":9414,"length1":34,"length2":8},{"diffs":[[0,"sNo\""],[-1," id=\";N]+%eNW[?KEl/6:/5#Q\""],[0," dis"]],"start1":9542,"start2":9542,"length1":34,"length2":8},{"diffs":[[0,"ute\""],[-1," id=\"Q`j97-^4.t;CfDmUd3KJ\""],[0," dis"]],"start1":9675,"start2":9675,"length1":34,"length2":8},{"diffs":[[0,"ast\""],[-1," id=\"i`ed6%*C2PkO,QQArX{]\""],[0," dis"]],"start1":9829,"start2":9829,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"_Tgyt7#Mn72y:T?4O|^V\""],[0," dis"]],"start1":9991,"start2":9991,"length1":34,"length2":8},{"diffs":[[0,"sic\""],[-1," id=\"PpZXyX*6#nn0D9542ID7\""],[0," dis"]],"start1":10106,"start2":10106,"length1":34,"length2":8},{"diffs":[[0,"ion\""],[-1," id=\"-N]5ZqYhbhV`tan6vaAW\""],[0," x=\""]],"start1":10270,"start2":10270,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"0cB;,t18e6k?K[P4JpTa\""],[0,"><mu"]],"start1":10678,"start2":10678,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"^[yiBh[jB`X?SjT`IVId\""],[0,"><mu"]],"start1":10849,"start2":10849,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\":1^I2|#x?0epb[Ljf;bC\""],[0,"><mu"]],"start1":11018,"start2":11018,"length1":34,"length2":8},{"diffs":[[0,"_if\""],[-1," id=\"#4aFixI]N;(:gA[6t$L#\""],[0,"><mu"]],"start1":11165,"start2":11165,"length1":34,"length2":8},{"diffs":[[0,"ean\""],[-1," id=\"!Cn7C+#]4}h`*Gk;4h]y\""],[0,"><fi"]],"start1":11242,"start2":11242,"length1":34,"length2":8},{"diffs":[[0,"ion\""],[-1," id=\"pn](ac!fT#{/RZ@=O!-1\""],[0,"><fi"]],"start1":11312,"start2":11312,"length1":34,"length2":8},{"diffs":[[0,"ean\""],[-1," id=\"CE?GW0yXCzLB%6?}qA:U\""],[0,"><fi"]],"start1":11385,"start2":11385,"length1":34,"length2":8},{"diffs":[[0,"are\""],[-1," id=\"H-`Rh%nEqwtyCFrWOJV7\""],[0,"><fi"]],"start1":11453,"start2":11453,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"qvWrybf]@29E^j?USAsy\""],[0,"><fi"]],"start1":11524,"start2":11524,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"j3%~qBY52,/N7I5]9dWo\""],[0,"><fi"]],"start1":11599,"start2":11599,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"z;t`yUH8O=Cv7K%BM|_U\""],[0,"><fi"]],"start1":11693,"start2":11693,"length1":34,"length2":8},{"diffs":[[0,"tic\""],[-1," id=\"vB,?t@[O3=HqPXf3VqRO\""],[0,"><fi"]],"start1":11759,"start2":11759,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"yz=_i~,3*UxeS2PNG^fR\""],[0,"><fi"]],"start1":11832,"start2":11832,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"!kB7h5I~hUWL*oO/b-(!\""],[0,"><fi"]],"start1":11907,"start2":11907,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"syOB76^402-||xP3Rtuy\""],[0,"><fi"]],"start1":12003,"start2":12003,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"WFTMT6_CwA0qV)BPYuVH\""],[0,"><fi"]],"start1":12078,"start2":12078,"length1":34,"length2":8},{"diffs":[[0,"ean\""],[-1," id=\"!l$c~]_Qj/?azha=FTzB\""],[0,"><fi"]],"start1":12208,"start2":12208,"length1":34,"length2":8},{"diffs":[[0,"are\""],[-1," id=\"}v6zw/)#sB`JV]+ck]tO\""],[0,"><fi"]],"start1":12276,"start2":12276,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"o1_2!m=Y@dp;G~`_+W+~\""],[0,"><fi"]],"start1":12347,"start2":12347,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"{_rzL]:,v)g{HuA:){.*\""],[0,"><fi"]],"start1":12422,"start2":12422,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"SIfQbb`T{Fq=%1Cettqq\""],[0,"><fi"]],"start1":12516,"start2":12516,"length1":34,"length2":8},{"diffs":[[0,"tic\""],[-1," id=\"]pTu;B7M6UEY=z1kx+oV\""],[0,"><fi"]],"start1":12582,"start2":12582,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"%u{MBibhx,)pRIh~P[Kl\""],[0,"><fi"]],"start1":12653,"start2":12653,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"zHU5F/gY=4p2ry#*kAl(\""],[0,"><fi"]],"start1":12728,"start2":12728,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"Bb?iN^Zt7v)q;JXF]f%)\""],[0,"><fi"]],"start1":12824,"start2":12824,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"bWtNX-.F6I}9vXW*gWhL\""],[0,"><fi"]],"start1":12899,"start2":12899,"length1":34,"length2":8},{"diffs":[[0,"urn\""],[-1," id=\"!zM_C2}7gB5Wor^?EvFI\""],[0,"><mu"]],"start1":13052,"start2":13052,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"1h*FuCmt|Oo~$;*.9`DM\""],[0,"><fi"]],"start1":13188,"start2":13188,"length1":34,"length2":8},{"diffs":[[0,"ean\""],[-1," id=\"X/EJ3]s1]@B:{Bq#PPtF\""],[0,"><fi"]],"start1":13252,"start2":13252,"length1":34,"length2":8},{"diffs":[[0,"urn\""],[-1," id=\"Brmx|6~B%lGJ:Gig6G7T\""],[0,"><mu"]],"start1":13372,"start2":13372,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"B8Y7:DtlUO!FUIXa_Zbl\""],[0,"><fi"]],"start1":13508,"start2":13508,"length1":34,"length2":8},{"diffs":[[0,"ean\""],[-1," id=\"06UeDy[WEEp!k)*NO)^b\""],[0,"><fi"]],"start1":13572,"start2":13572,"length1":34,"length2":8}]}]}],"snapshots":[{"timestamp":1726767500996,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"Bw[^MHQ!_APV$c,CocLe\">display</variable></variables><block type=\"function_definition\" x=\"1589\" y=\"-283\"><mutation name=\"isNearly\" functionid=\"B2bR4oPx2GF^@6-5vg;5\"><arg name=\"reference\" id=\"155x87cpnklngzi44iuo\" type=\"number\"></arg><arg name=\"reading\" id=\"57er02c0yihnzmi26q0e\" type=\"number\"></arg><arg name=\"tolerance\" id=\"6hce4c74lggrf7yq1reei\" type=\"number\"></arg></mutation><field name=\"function_name\">isNearly</field><value name=\"155x87cpnklngzi44iuo\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reference</field></block></value><value name=\"57er02c0yihnzmi26q0e\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reading</field></block></value><value name=\"6hce4c74lggrf7yq1reei\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">tolerance</field></block></value><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_operation\"><field name=\"OP\">AND</field><value name=\"A\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value></block></value><statement name=\"DO0\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></block></value></block></statement><statement name=\"ELSE\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></block></value></block></statement></block></statement></block><block type=\"device_button_event\" x=\"404\" y=\"-123\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl2\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">1_1_25_100</field></shadow></value></block></value></block></statement></block><block type=\"device_button_event\" x=\"945\" y=\"-123\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">2_1_1</field></shadow></value></block></value></block></statement></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"Connected_oledClear\"><next><block type=\"pin_set_audio_pin_enabled\"><value name=\"enabled\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"device_led_enable\"><value name=\"on\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"Bw[^MHQ!_APV$c,CocLe\">display</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"grove_tm1637_create\"><field name=\"cPin\">DigitalPin.P7</field><field name=\"dPin\">DigitalPin.P6</field></block></value><next><block type=\"grove_tm1637_display_number\"><value name=\"display\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Bw[^MHQ!_APV$c,CocLe\">display</field></block></value><value name=\"num\"><shadow type=\"math_number\"><field name=\"NUM\">314</field></shadow><block type=\"sonarbit\"><field name=\"tPin\">DigitalPin.P8</field><field name=\"ePin\">DigitalPin.P9</field><field name=\"distance_unit\">Connected.Distance_Unit_List.Distance_Unit_cm</field></block></value></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"notlegos_pot_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"903\" y=\"147\"><field name=\"aPin\">AnalogPin.P1</field><next><block type=\"notlegos_mp3_ports_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"dPin\">SerialPin.P16</field></block></next></block></xml>","main.ts":"","README.md":"\n> Open this page at [https://notlegos.github.io/castleresay/](https://notlegos.github.io/castleresay/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/castleresay** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/castleresay** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/soundbank/](https://notlegos.github.io/soundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/soundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/soundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/resoundbank/](https://notlegos.github.io/resoundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/resoundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/resoundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosext/](https://notlegos.github.io/notlegosext/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosext** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosext** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","displaySendBuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n","display.ts":"\n/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#EA5532 icon=\"\\uf110\" block=\"Connected\" blockId=\"PlanetX_Connected\" \n//% groups='[\"LED\", \"Digital\", \"Analog\", \"IIC Port\", \"OLED\", \"7-Seg 4-Dig LED Nixietube\"]'\nnamespace Connected {\n    ////////////////////////////////TM 1637/////////////////\n    let TM1637_CMD1 = 0x40;\n    let TM1637_CMD2 = 0xC0;\n    let TM1637_CMD3 = 0x80;\n    let _SEGMENTS = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];\n    /////////////////////OLED///////////////////////////////\n    let firstoledinit = true\n    const basicFont: string[] = [\n        \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", // \" \"\n        \"\\x00\\x00\\x5F\\x00\\x00\\x00\\x00\\x00\", // \"!\"\n        \"\\x00\\x00\\x07\\x00\\x07\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x14\\x7F\\x14\\x7F\\x14\\x00\\x00\", // \"#\"\n        \"\\x00\\x24\\x2A\\x7F\\x2A\\x12\\x00\\x00\", // \"$\"\n        \"\\x00\\x23\\x13\\x08\\x64\\x62\\x00\\x00\", // \"%\"\n        \"\\x00\\x36\\x49\\x55\\x22\\x50\\x00\\x00\", // \"&\"\n        \"\\x00\\x00\\x05\\x03\\x00\\x00\\x00\\x00\", // \"'\"\n        \"\\x00\\x1C\\x22\\x41\\x00\\x00\\x00\\x00\", // \"(\"\n        \"\\x00\\x41\\x22\\x1C\\x00\\x00\\x00\\x00\", // \")\"\n        \"\\x00\\x08\\x2A\\x1C\\x2A\\x08\\x00\\x00\", // \"*\"\n        \"\\x00\\x08\\x08\\x3E\\x08\\x08\\x00\\x00\", // \"+\"\n        \"\\x00\\xA0\\x60\\x00\\x00\\x00\\x00\\x00\", // \",\"\n        \"\\x00\\x08\\x08\\x08\\x08\\x08\\x00\\x00\", // \"-\"\n        \"\\x00\\x60\\x60\\x00\\x00\\x00\\x00\\x00\", // \".\"\n        \"\\x00\\x20\\x10\\x08\\x04\\x02\\x00\\x00\", // \"/\"\n        \"\\x00\\x3E\\x51\\x49\\x45\\x3E\\x00\\x00\", // \"0\"\n        \"\\x00\\x00\\x42\\x7F\\x40\\x00\\x00\\x00\", // \"1\"\n        \"\\x00\\x62\\x51\\x49\\x49\\x46\\x00\\x00\", // \"2\"\n        \"\\x00\\x22\\x41\\x49\\x49\\x36\\x00\\x00\", // \"3\"\n        \"\\x00\\x18\\x14\\x12\\x7F\\x10\\x00\\x00\", // \"4\"\n        \"\\x00\\x27\\x45\\x45\\x45\\x39\\x00\\x00\", // \"5\"\n        \"\\x00\\x3C\\x4A\\x49\\x49\\x30\\x00\\x00\", // \"6\"\n        \"\\x00\\x01\\x71\\x09\\x05\\x03\\x00\\x00\", // \"7\"\n        \"\\x00\\x36\\x49\\x49\\x49\\x36\\x00\\x00\", // \"8\"\n        \"\\x00\\x06\\x49\\x49\\x29\\x1E\\x00\\x00\", // \"9\"\n        \"\\x00\\x00\\x36\\x36\\x00\\x00\\x00\\x00\", // \":\"\n        \"\\x00\\x00\\xAC\\x6C\\x00\\x00\\x00\\x00\", // \";\"\n        \"\\x00\\x08\\x14\\x22\\x41\\x00\\x00\\x00\", // \"<\"\n        \"\\x00\\x14\\x14\\x14\\x14\\x14\\x00\\x00\", // \"=\"\n        \"\\x00\\x41\\x22\\x14\\x08\\x00\\x00\\x00\", // \">\"\n        \"\\x00\\x02\\x01\\x51\\x09\\x06\\x00\\x00\", // \"?\"\n        \"\\x00\\x32\\x49\\x79\\x41\\x3E\\x00\\x00\", // \"@\"\n        \"\\x00\\x7E\\x09\\x09\\x09\\x7E\\x00\\x00\", // \"A\"\n        \"\\x00\\x7F\\x49\\x49\\x49\\x36\\x00\\x00\", // \"B\"\n        \"\\x00\\x3E\\x41\\x41\\x41\\x22\\x00\\x00\", // \"C\"\n        \"\\x00\\x7F\\x41\\x41\\x22\\x1C\\x00\\x00\", // \"D\"\n        \"\\x00\\x7F\\x49\\x49\\x49\\x41\\x00\\x00\", // \"E\"\n        \"\\x00\\x7F\\x09\\x09\\x09\\x01\\x00\\x00\", // \"F\"\n        \"\\x00\\x3E\\x41\\x41\\x51\\x72\\x00\\x00\", // \"G\"\n        \"\\x00\\x7F\\x08\\x08\\x08\\x7F\\x00\\x00\", // \"H\"\n        \"\\x00\\x41\\x7F\\x41\\x00\\x00\\x00\\x00\", // \"I\"\n        \"\\x00\\x20\\x40\\x41\\x3F\\x01\\x00\\x00\", // \"J\"\n        \"\\x00\\x7F\\x08\\x14\\x22\\x41\\x00\\x00\", // \"K\"\n        \"\\x00\\x7F\\x40\\x40\\x40\\x40\\x00\\x00\", // \"L\"\n        \"\\x00\\x7F\\x02\\x0C\\x02\\x7F\\x00\\x00\", // \"M\"\n        \"\\x00\\x7F\\x04\\x08\\x10\\x7F\\x00\\x00\", // \"N\"\n        \"\\x00\\x3E\\x41\\x41\\x41\\x3E\\x00\\x00\", // \"O\"\n        \"\\x00\\x7F\\x09\\x09\\x09\\x06\\x00\\x00\", // \"P\"\n        \"\\x00\\x3E\\x41\\x51\\x21\\x5E\\x00\\x00\", // \"Q\"\n        \"\\x00\\x7F\\x09\\x19\\x29\\x46\\x00\\x00\", // \"R\"\n        \"\\x00\\x26\\x49\\x49\\x49\\x32\\x00\\x00\", // \"S\"\n        \"\\x00\\x01\\x01\\x7F\\x01\\x01\\x00\\x00\", // \"T\"\n        \"\\x00\\x3F\\x40\\x40\\x40\\x3F\\x00\\x00\", // \"U\"\n        \"\\x00\\x1F\\x20\\x40\\x20\\x1F\\x00\\x00\", // \"V\"\n        \"\\x00\\x3F\\x40\\x38\\x40\\x3F\\x00\\x00\", // \"W\"\n        \"\\x00\\x63\\x14\\x08\\x14\\x63\\x00\\x00\", // \"X\"\n        \"\\x00\\x03\\x04\\x78\\x04\\x03\\x00\\x00\", // \"Y\"\n        \"\\x00\\x61\\x51\\x49\\x45\\x43\\x00\\x00\", // \"Z\"\n        \"\\x00\\x7F\\x41\\x41\\x00\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x02\\x04\\x08\\x10\\x20\\x00\\x00\", // \"\\\"\n        \"\\x00\\x41\\x41\\x7F\\x00\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x04\\x02\\x01\\x02\\x04\\x00\\x00\", // \"^\"\n        \"\\x00\\x80\\x80\\x80\\x80\\x80\\x00\\x00\", // \"_\"\n        \"\\x00\\x01\\x02\\x04\\x00\\x00\\x00\\x00\", // \"`\"\n        \"\\x00\\x20\\x54\\x54\\x54\\x78\\x00\\x00\", // \"a\"\n        \"\\x00\\x7F\\x48\\x44\\x44\\x38\\x00\\x00\", // \"b\"\n        \"\\x00\\x38\\x44\\x44\\x28\\x00\\x00\\x00\", // \"c\"\n        \"\\x00\\x38\\x44\\x44\\x48\\x7F\\x00\\x00\", // \"d\"\n        \"\\x00\\x38\\x54\\x54\\x54\\x18\\x00\\x00\", // \"e\"\n        \"\\x00\\x08\\x7E\\x09\\x02\\x00\\x00\\x00\", // \"f\"\n        \"\\x00\\x18\\xA4\\xA4\\xA4\\x7C\\x00\\x00\", // \"g\"\n        \"\\x00\\x7F\\x08\\x04\\x04\\x78\\x00\\x00\", // \"h\"\n        \"\\x00\\x00\\x7D\\x00\\x00\\x00\\x00\\x00\", // \"i\"\n        \"\\x00\\x80\\x84\\x7D\\x00\\x00\\x00\\x00\", // \"j\"\n        \"\\x00\\x7F\\x10\\x28\\x44\\x00\\x00\\x00\", // \"k\"\n        \"\\x00\\x41\\x7F\\x40\\x00\\x00\\x00\\x00\", // \"l\"\n        \"\\x00\\x7C\\x04\\x18\\x04\\x78\\x00\\x00\", // \"m\"\n        \"\\x00\\x7C\\x08\\x04\\x7C\\x00\\x00\\x00\", // \"n\"\n        \"\\x00\\x38\\x44\\x44\\x38\\x00\\x00\\x00\", // \"o\"\n        \"\\x00\\xFC\\x24\\x24\\x18\\x00\\x00\\x00\", // \"p\"\n        \"\\x00\\x18\\x24\\x24\\xFC\\x00\\x00\\x00\", // \"q\"\n        \"\\x00\\x00\\x7C\\x08\\x04\\x00\\x00\\x00\", // \"r\"\n        \"\\x00\\x48\\x54\\x54\\x24\\x00\\x00\\x00\", // \"s\"\n        \"\\x00\\x04\\x7F\\x44\\x00\\x00\\x00\\x00\", // \"t\"\n        \"\\x00\\x3C\\x40\\x40\\x7C\\x00\\x00\\x00\", // \"u\"\n        \"\\x00\\x1C\\x20\\x40\\x20\\x1C\\x00\\x00\", // \"v\"\n        \"\\x00\\x3C\\x40\\x30\\x40\\x3C\\x00\\x00\", // \"w\"\n        \"\\x00\\x44\\x28\\x10\\x28\\x44\\x00\\x00\", // \"x\"\n        \"\\x00\\x1C\\xA0\\xA0\\x7C\\x00\\x00\\x00\", // \"y\"\n        \"\\x00\\x44\\x64\\x54\\x4C\\x44\\x00\\x00\", // \"z\"\n        \"\\x00\\x08\\x36\\x41\\x00\\x00\\x00\\x00\", // \"{\"\n        \"\\x00\\x00\\x7F\\x00\\x00\\x00\\x00\\x00\", // \"|\"\n        \"\\x00\\x41\\x36\\x08\\x00\\x00\\x00\\x00\", // \"}\"\n        \"\\x00\\x02\\x01\\x01\\x02\\x01\\x00\\x00\"  // \"~\"\n    ];\n    function oledcmd(c: number) {\n        pins.i2cWriteNumber(0x3c, c, NumberFormat.UInt16BE);\n    }\n    function writeData(n: number) {\n        let b = n;\n        if (n < 0) { n = 0 }\n        if (n > 255) { n = 255 }\n        pins.i2cWriteNumber(0x3c, 0x4000 + b, NumberFormat.UInt16BE);\n    }\n    function writeCustomChar(c: string) {\n        for (let i = 0; i < 8; i++) {\n            writeData(c.charCodeAt(i));\n        }\n    }\n    function setText(row: number, column: number) {\n        let r = row;\n        let c = column;\n        if (row < 0) { r = 0 }\n        if (column < 0) { c = 0 }\n        if (row > 7) { r = 7 }\n        if (column > 15) { c = 15 }\n        oledcmd(0xB0 + r);            //set page address\n        oledcmd(0x00 + (8 * c & 0x0F));  //set column lower address\n        oledcmd(0x10 + ((8 * c >> 4) & 0x0F));   //set column higher address\n    }\n    function putChar(c: string) {\n        let c1 = c.charCodeAt(0);\n        writeCustomChar(basicFont[c1 - 32]);\n    }\n    function oledinit(): void {\n        oledcmd(0xAE);  // Set display OFF\n        oledcmd(0xD5);  // Set Display Clock Divide Ratio / OSC Frequency 0xD4\n        oledcmd(0x80);  // Display Clock Divide Ratio / OSC Frequency \n        oledcmd(0xA8);  // Set Multiplex Ratio\n        oledcmd(0x3F);  // Multiplex Ratio for 128x64 (64-1)\n        oledcmd(0xD3);  // Set Display Offset\n        oledcmd(0x00);  // Display Offset\n        oledcmd(0x40);  // Set Display Start Line\n        oledcmd(0x8D);  // Set Charge Pump\n        oledcmd(0x14);  // Charge Pump (0x10 External, 0x14 Internal DC/DC)\n        oledcmd(0xA1);  // Set Segment Re-Map\n        oledcmd(0xC8);  // Set Com Output Scan Direction\n        oledcmd(0xDA);  // Set COM Hardware Configuration\n        oledcmd(0x12);  // COM Hardware Configuration\n        oledcmd(0x81);  // Set Contrast\n        oledcmd(0xCF);  // Contrast\n        oledcmd(0xD9);  // Set Pre-Charge Period\n        oledcmd(0xF1);  // Set Pre-Charge Period (0x22 External, 0xF1 Internal)\n        oledcmd(0xDB);  // Set VCOMH Deselect Level\n        oledcmd(0x40);  // VCOMH Deselect Level\n        oledcmd(0xA4);  // Set all pixels OFF\n        oledcmd(0xA6);  // Set display not inverted\n        oledcmd(0xAF);  // Set display On\n        oledClear();\n    }\n\n    ///////////////////////////////enum\n\n\n    export enum NeoPixelColors {\n        //% block=red\n        Red = 0xFF0000,\n        //% block=orange\n        Orange = 0xFFA500,\n        //% block=yellow\n        Yellow = 0xFFFF00,\n        //% block=green\n        Green = 0x00FF00,\n        //% block=blue\n        Blue = 0x0000FF,\n        //% block=indigo\n        Indigo = 0x4b0082,\n        //% block=violet\n        Violet = 0x8a2be2,\n        //% block=purple\n        Purple = 0xFF00FF,\n        //% block=white\n        White = 0xFFFFFF,\n        //% block=black\n        Black = 0x000000\n    }\n\n    /**\n     * Different modes for RGB or RGB+W NeoPixel strips\n     */\n    export enum NeoPixelMode {\n        //% block=\"RGB (GRB format)\"\n        RGB = 0,\n        //% block=\"RGB+W\"\n        RGBW = 1,\n        //% block=\"RGB (RGB format)\"\n        RGB_RGB = 2\n    }\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n    /////////////////////////////User_function//////////////////\n\n    //% line.min=1 line.max=8 line.defl=1\n    //% text.defl=\"Hello,ELECFREAKS\"\n    //% block=\"OLED show line %line|text %text\"\n    //% subcategory=Display group=\"OLED\" color=#00B1ED\n    export function showUserText(line: number, text: string) {\n        if (firstoledinit) {\n            oledinit()\n            firstoledinit = false\n        }\n        if (text.length > 16) {\n            text = text.substr(0, 16)\n        }\n        line = line - 1\n        setText(line, 0);\n        for (let c of text) {\n            putChar(c);\n        }\n\n        for (let i = text.length; i < 16; i++) {\n            setText(line, i);\n            putChar(\" \");\n        }\n    }\n    //% line.min=1 line.max=8 line.defl=2 \n    //% n.defl=20200508\n    //% block=\"OLED show line %line|number %n\"\n    //% subcategory=Display group=\"OLED\" color=#00B1ED\n    export function showUserNumber(line: number, n: number) {\n        if (firstoledinit) {\n            oledinit()\n            firstoledinit = false\n        }\n        showUserText(line, \"\" + n)\n    }\n    //% block=\"clear display\" color=#00B1ED\n    //% subcategory=Display group=\"OLED\"\n    export function oledClear() {\n        //oledcmd(DISPLAY_OFF);   //display off\n        for (let j = 0; j < 8; j++) {\n            setText(j, 0);\n            {\n                for (let i = 0; i < 16; i++)  //clear all columns\n                {\n                    putChar(' ');\n                }\n            }\n        }\n        //oledcmd(DISPLAY_ON);    //display on\n        setText(0, 0);\n    }\n    /**\n   * Create a new driver Grove - 4-Digit Display\n   * @param clkPin value of clk pin number\n   * @param dataPin value of data pin number\n   */\n    //% blockId=grove_tm1637_create block=\"connect 4-Digit cPin %cPin dPin %dPin\"\n    //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" blockSetVariable=display color=#EA5532\n    export function tm1637Create(cPin: DigitalPin, dPin: DigitalPin, intensity: number = 7, count: number = 4): TM1637LEDs {\n        let display = new TM1637LEDs();\n        display.clk = cPin\n        display.dio = dPin\n        if ((count < 1) || (count > 5)) count = 4;\n        display.count = count;\n        display.brightness = intensity;\n        display.init();\n        return display;\n    }\n    export class TM1637LEDs {\n        buf: Buffer;\n        clk: DigitalPin;\n        dio: DigitalPin;\n        _ON: number;\n        brightness: number;\n        count: number;  // number of LEDs\n        /**\n         * initial TM1637\n         */\n        init(): void {\n            pins.digitalWritePin(this.clk, 0);\n            pins.digitalWritePin(this.dio, 0);\n            this._ON = 8;\n            this.buf = pins.createBuffer(this.count);\n            this.clear();\n        }\n        /**\n         * Start \n         */\n        _start() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        /**\n         * Stop\n         */\n        _stop() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.dio, 1);\n        }\n        /**\n         * send command1\n         */\n        _write_data_cmd() {\n            this._start();\n            this._write_byte(TM1637_CMD1);\n            this._stop();\n        }\n        /**\n         * send command3\n         */\n        _write_dsp_ctrl() {\n            this._start();\n            this._write_byte(TM1637_CMD3 | this._ON | this.brightness);\n            this._stop();\n        }\n        /**\n         * send a byte to 2-wire interface\n         */\n        _write_byte(b: number) {\n            for (let i = 0; i < 8; i++) {\n                pins.digitalWritePin(this.dio, (b >> i) & 1);\n                pins.digitalWritePin(this.clk, 1);\n                pins.digitalWritePin(this.clk, 0);\n            }\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _intensity(val: number = 7) {\n            this._ON = 8;\n            this.brightness = val - 1;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n        /**\n         * set data to TM1637, with given bit\n         */\n        _dat(bit: number, dat: number) {\n            this._write_data_cmd();\n            this._start();\n            this._write_byte(TM1637_CMD2 | (bit % this.count))\n            this._write_byte(dat);\n            this._stop();\n            this._write_dsp_ctrl();\n        }\n        /**\n         * Show a single number from 0 to 9 at a specified digit of Grove - 4-Digit Display\n         * @param dispData value of number\n         * @param bitAddr value of bit number\n         */\n        //% blockId=grove_tm1637_display_bit block=\"%display|show single number|%num|at digit|%bit\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        //% bit.defl=1 bit.min=0 bit.max=9\n        showbit(num: number = 5, bit: number = 0) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            this.buf[bit % this.count] = _SEGMENTS[num % 16]\n            this._dat(bit, _SEGMENTS[num % 16])\n        }\n        /**\n         * Show a 4 digits number on display\n         * @param dispData value of number\n         */\n        //% blockId=grove_tm1637_display_number block=\"%display|show number|%num\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        showNumber(num: number) {\n            if (num < 0) {\n                num = -num\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n                this._dat(0, 0x40) // '-'\n            }\n            else {\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n            }\n        }\n        /**\n         * show or hide dot point. \n         * @param bit is the position, eg: 1\n         * @param show is show/hide dp, eg: true\n         */\n        //% blockId=\"TM1637_showDP\" block=\"%display|DotPoint at %bit|show $show\"\n        //% show.shadow=\"toggleOnOff\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        showDP(bit: number = 1, show: boolean = true) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            bit = bit % this.count\n            if (show) this._dat(bit, this.buf[bit] | 0x80)\n            else this._dat(bit, this.buf[bit] & 0x7F)\n        }\n        /**\n         * clear LED. \n         */\n        //% blockId=\"TM1637_clear\" block=\"clear display %display\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        clear() {\n            for (let i = 0; i < this.count; i++) {\n                this._dat(i, 0)\n                this.buf[i] = 0\n            }\n        }\n    }\n    //% shim=sendBufferAsm\n    function sendBuffer(buf: Buffer, pin: DigitalPin) {\n    }\n    export class Strip {\n        buf: Buffer;\n        pin: DigitalPin;\n        // TODO: encode as bytes instead of 32bit\n        brightness: number;\n        start: number; // start offset in LED strip\n        _length: number; // number of LEDs\n        _mode: NeoPixelMode;\n        _matrixWidth: number; // number of leds in a matrix - if any\n\n        /**\n         * Shows all LEDs to a given color (range 0-255 for r, g, b).\n         * @param rgb RGB color of the LED\n         */\n        //% blockId=\"neopixel_set_strip_color\" block=\"%strip|show color %rgb=neopixel_colors\"\n        //% weight=85 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        showColor(rgb: number) {\n            rgb = rgb >> 0;\n            this.setAllRGB(rgb);\n            this.show();\n        }\n\n        /**\n         * Shows a rainbow pattern on all LEDs.\n         * @param startHue the start hue value for the rainbow, eg: 1\n         * @param endHue the end hue value for the rainbow, eg: 360\n         */\n        //% blockId=\"neopixel_set_strip_rainbow\" block=\"%strip|show rainbow from %startHue|to %endHue\"\n        //% weight=85 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        showRainbow(startHue: number = 1, endHue: number = 360) {\n            if (this._length <= 0) return;\n\n            startHue = startHue >> 0;\n            endHue = endHue >> 0;\n            const saturation = 100;\n            const luminance = 50;\n            const steps = this._length;\n            const direction = HueInterpolationDirection.Clockwise;\n\n            //hue\n            const h1 = startHue;\n            const h2 = endHue;\n            const hDistCW = ((h2 + 360) - h1) % 360;\n            const hStepCW = Math.idiv((hDistCW * 100), steps);\n            const hDistCCW = ((h1 + 360) - h2) % 360;\n            const hStepCCW = Math.idiv(-(hDistCCW * 100), steps);\n            let hStep: number;\n            if (direction === HueInterpolationDirection.Clockwise) {\n                hStep = hStepCW;\n            } else if (direction === HueInterpolationDirection.CounterClockwise) {\n                hStep = hStepCCW;\n            } else {\n                hStep = hDistCW < hDistCCW ? hStepCW : hStepCCW;\n            }\n            const h1_100 = h1 * 100; //we multiply by 100 so we keep more accurate results while doing interpolation\n\n            //sat\n            const s1 = saturation;\n            const s2 = saturation;\n            const sDist = s2 - s1;\n            const sStep = Math.idiv(sDist, steps);\n            const s1_100 = s1 * 100;\n\n            //lum\n            const l1 = luminance;\n            const l2 = luminance;\n            const lDist = l2 - l1;\n            const lStep = Math.idiv(lDist, steps);\n            const l1_100 = l1 * 100\n\n            //interpolate\n            if (steps === 1) {\n                this.setPixelColor(0, hsl(h1 + hStep, s1 + sStep, l1 + lStep))\n            } else {\n                this.setPixelColor(0, hsl(startHue, saturation, luminance));\n                for (let i = 1; i < steps - 1; i++) {\n                    const h = Math.idiv((h1_100 + i * hStep), 100) + 360;\n                    const s = Math.idiv((s1_100 + i * sStep), 100);\n                    const l = Math.idiv((l1_100 + i * lStep), 100);\n                    this.setPixelColor(i, hsl(h, s, l));\n                }\n                this.setPixelColor(steps - 1, hsl(endHue, saturation, luminance));\n            }\n            this.show();\n        }\n\n        /**\n         * Set LED to a given color (range 0-255 for r, g, b).\n         * You need to call ``show`` to make the changes visible.\n         * @param pixeloffset position of the NeoPixel in the strip\n         * @param rgb RGB color of the LED\n         */\n        //% blockId=\"neopixel_set_pixel_color\" block=\"%strip|set pixel color at %pixeloffset|to %rgb=neopixel_colors\"\n        //% weight=80 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setPixelColor(pixeloffset: number, rgb: number): void {\n            this.setPixelRGB(pixeloffset >> 0, rgb >> 0);\n        }\n\n        /**\n         * Send all the changes to the strip.\n         */\n        //% blockId=\"neopixel_show\" block=\"%strip|show\" \n        //% weight=79\n        //% parts=\"neopixel\" subcategory=Neopixel\n        show() {\n            sendBuffer(this.buf, this.pin);\n        }\n\n        /**\n         * Turn off all LEDs.\n         * You need to call ``show`` to make the changes visible.\n         */\n        //% blockId=\"neopixel_clear\" block=\"%strip|clear\"\n        //% weight=76 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        clear(): void {\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.fill(0, this.start * stride, this._length * stride);\n        }\n\n        /**\n         * Set the brightness of the strip. This flag only applies to future operation.\n         * @param brightness a measure of LED brightness in 0-255. eg: 255\n         */\n        //% blockId=\"neopixel_set_brightness\" block=\"%strip|set brightness %brightness\" \n        //% weight=59 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setBrightness(brightness: number): void {\n            this.brightness = brightness & 0xff;\n        }\n        /**\n         * Gets the number of pixels declared on the strip\n         */\n        //% blockId=\"neopixel_length\" block=\"%strip|length\" blockGap=8\n        //% subcategory=\"Neopixel\"\n        //% weight=60 advanced=true\n        length() {\n            return this._length;\n        }\n        /**\n         * Create a range of LEDs.\n         * @param start offset in the LED strip to start the range\n         * @param length number of LEDs in the range. eg: 4\n         */\n        //% weight=89 color=#EA5532\n        //% blockId=\"neopixel_range\" block=\"%strip|range from %start|with %length|leds\"\n        //% parts=\"neopixel\"\n        //% blockSetVariable=range subcategory=Neopixel\n        range(start: number, length: number): Strip {\n            start = start >> 0;\n            length = length >> 0;\n            let strip = new Strip();\n            strip.buf = this.buf;\n            strip.pin = this.pin;\n            strip.brightness = this.brightness;\n            strip.start = this.start + Math.clamp(0, this._length - 1, start);\n            strip._length = Math.clamp(0, this._length - (strip.start - this.start), length);\n            strip._matrixWidth = 0;\n            strip._mode = this._mode;\n            return strip;\n        }\n\n        /**\n         * Shift LEDs forward and clear with zeros.\n         * You need to call ``show`` to make the changes visible.\n         * @param offset number of pixels to shift forward, eg: 1\n         */\n        //% blockId=\"neopixel_shift\" block=\"%strip|shift pixels by %offset\" \n        //% weight=40 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        shift(offset: number = 1): void {\n            offset = offset >> 0;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.shift(-offset * stride, this.start * stride, this._length * stride)\n        }\n\n        /**\n         * Rotate LEDs forward.\n         * You need to call ``show`` to make the changes visible.\n         * @param offset number of pixels to rotate forward, eg: 1\n         */\n        //% blockId=\"neopixel_rotate\" block=\"%strip|rotate pixels by %offset\" \n        //% weight=39 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        rotate(offset: number = 1): void {\n            offset = offset >> 0;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.rotate(-offset * stride, this.start * stride, this._length * stride)\n        }\n\n        /**\n         * Set the pin where the neopixel is connected, defaults to P0.\n         */\n        //% weight=10 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setPin(pin: DigitalPin): void {\n            this.pin = pin;\n            pins.digitalWritePin(this.pin, 0);\n            // don't yield to avoid races on initialization\n        }\n\n        private setBufferRGB(offset: number, red: number, green: number, blue: number): void {\n            if (this._mode === NeoPixelMode.RGB_RGB) {\n                this.buf[offset + 0] = red;\n                this.buf[offset + 1] = green;\n            } else {\n                this.buf[offset + 0] = green;\n                this.buf[offset + 1] = red;\n            }\n            this.buf[offset + 2] = blue;\n        }\n\n        private setAllRGB(rgb: number) {\n            let red = unpackR(rgb);\n            let green = unpackG(rgb);\n            let blue = unpackB(rgb);\n\n            const br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            const end = this.start + this._length;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            for (let i = this.start; i < end; ++i) {\n                this.setBufferRGB(i * stride, red, green, blue)\n            }\n        }\n        private setPixelRGB(pixeloffset: number, rgb: number): void {\n            if (pixeloffset < 0\n                || pixeloffset >= this._length)\n                return;\n\n            let stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            pixeloffset = (pixeloffset + this.start) * stride;\n\n            let red = unpackR(rgb);\n            let green = unpackG(rgb);\n            let blue = unpackB(rgb);\n\n            let br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            this.setBufferRGB(pixeloffset, red, green, blue)\n        }\n\n    }\n\n    /**\n     * Create a new NeoPixel driver for `numleds` LEDs.\n     * @param pin the pin where the neopixel is connected.\n     * @param numleds number of leds in the strip, eg: 24,30,60,64\n     */\n    //% blockId=\"neopixel_create\" block=\"NeoPixel at pin %Rjpin|with %numleds|leds as %mode\"\n    //% weight=90 color=#EA5532\n    //% parts=\"neopixel\"\n    //% trackArgs=0,2\n    //% blockSetVariable=strip subcategory=Neopixel\n    export function create(Rjpin: DigitalRJPin, numleds: number, mode: NeoPixelMode): Strip {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        let strip = new Strip();\n        let stride = mode === NeoPixelMode.RGBW ? 4 : 3;\n        strip.buf = pins.createBuffer(numleds * stride);\n        strip.start = 0;\n        strip._length = numleds;\n        strip._mode = mode;\n        strip._matrixWidth = 0;\n        strip.setBrightness(50)\n        strip.setPin(pin)\n        return strip;\n    }\n\n    /**\n     * Converts red, green, blue channels into a RGB color\n     * @param red value of the red channel between 0 and 255. eg: 255\n     * @param green value of the green channel between 0 and 255. eg: 255\n     * @param blue value of the blue channel between 0 and 255. eg: 255\n     */\n    //% weight=1 subcategory=Neopixel color=#EA5532\n    //% blockId=\"neopixel_rgb\" block=\"red %red|green %green|blue %blue\"\n    export function rgb(red: number, green: number, blue: number): number {\n        return packRGB(red, green, blue);\n    }\n\n    /**\n     * Gets the RGB value of a known color\n    */\n    //% weight=2 subcategory=Neopixel color=#EA5532\n    //% blockId=\"neopixel_colors\" block=\"%color\"\n    export function colors(color: NeoPixelColors): number {\n        return color;\n    }\n\n    function packRGB(a: number, b: number, c: number): number {\n        return ((a & 0xFF) << 16) | ((b & 0xFF) << 8) | (c & 0xFF);\n    }\n    function unpackR(rgb: number): number {\n        let r = (rgb >> 16) & 0xFF;\n        return r;\n    }\n    function unpackG(rgb: number): number {\n        let g = (rgb >> 8) & 0xFF;\n        return g;\n    }\n    function unpackB(rgb: number): number {\n        let b = (rgb) & 0xFF;\n        return b;\n    }\n\n    /**\n     * Converts a hue saturation luminosity value into a RGB color\n     * @param h hue from 0 to 360\n     * @param s saturation from 0 to 99\n     * @param l luminosity from 0 to 99\n     */\n    //% blockId=neopixelHSL block=\"hue %h|saturation %s|luminosity %l\" subcategory=Neopixel color=#EA5532\n    export function hsl(h: number, s: number, l: number): number {\n        h = Math.round(h);\n        s = Math.round(s);\n        l = Math.round(l);\n\n        h = h % 360;\n        s = Math.clamp(0, 99, s);\n        l = Math.clamp(0, 99, l);\n        let c = Math.idiv((((100 - Math.abs(2 * l - 100)) * s) << 8), 10000); //chroma, [0,255]\n        let h1 = Math.idiv(h, 60);//[0,6]\n        let h2 = Math.idiv((h - h1 * 60) * 256, 60);//[0,255]\n        let temp = Math.abs((((h1 % 2) << 8) + h2) - 256);\n        let x = (c * (256 - (temp))) >> 8;//[0,255], second largest component of this color\n        let r$:\n            number;\n        let g$:\n            number;\n        let b$:\n            number;\n        if (h1 == 0) {\n            r$ = c;\n            g$ = x;\n            b$ = 0;\n        }\n        else if (h1 == 1) {\n            r$ = x;\n            g$ = c;\n            b$ = 0;\n        }\n        else if (h1 == 2) {\n            r$ = 0;\n            g$ = c;\n            b$ = x;\n        }\n        else if (h1 == 3) {\n            r$ = 0;\n            g$ = x;\n            b$ = c;\n        }\n        else if (h1 == 4) {\n            r$ = x;\n            g$ = 0;\n            b$ = c;\n        }\n        else if (h1 == 5) {\n            r$ = c;\n            g$ = 0;\n            b$ = x;\n        }\n        let m = Math.idiv((Math.idiv((l * 2 << 8), 100) - c), 2);\n        let r = r$ + m;\n        let g = g$ + m;\n        let b = b$ + m;\n        return packRGB(r, g, b);\n    }\n\n    export enum HueInterpolationDirection {\n        Clockwise,\n        CounterClockwise,\n        Shortest\n    }\n}\n","planetxbasic.ts":"/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#00B1ED  icon=\"\\uf005\" block=\"Connected\" blockId=\"PlanetX_Connected\"\n//% groups='[\"Digital\", \"Analog\", \"IIC Port\"]'\nnamespace Connected {\n    \n    ////////////////////////paj7620//////////////////////\n    let gesture_first_init = true\n    const initRegisterArray: number[] = [\n        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17,\n        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F,\n        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14,\n        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27,\n        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01,\n        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00,\n        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20,\n        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37,\n        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A,\n        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F,\n        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30,\n        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19,\n        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04,\n        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00,\n        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00,\n        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F,\n        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07,\n        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01,\n        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F,\n        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01,\n        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40,\n        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E,\n        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00,\n        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08,\n        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00,\n        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01,\n        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01,\n        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01\n    ];\n    \n    /////////////////////////color/////////////////////////\n    const APDS9960_ADDR = 0x39\n    const APDS9960_ENABLE = 0x80\n    const APDS9960_ATIME = 0x81\n    const APDS9960_CONTROL = 0x8F\n    const APDS9960_STATUS = 0x93\n    const APDS9960_CDATAL = 0x94\n    const APDS9960_CDATAH = 0x95\n    const APDS9960_RDATAL = 0x96\n    const APDS9960_RDATAH = 0x97\n    const APDS9960_GDATAL = 0x98\n    const APDS9960_GDATAH = 0x99\n    const APDS9960_BDATAL = 0x9A\n    const APDS9960_BDATAH = 0x9B\n    const APDS9960_GCONF4 = 0xAB\n    const APDS9960_AICLEAR = 0xE7\n    let color_first_init = false\n\n    function i2cwrite_color(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n    function i2cread_color(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n    function rgb2hsl(color_r: number, color_g: number, color_b: number): number {\n        let Hue = 0\n        let R = color_r * 100 / 255;\n        let G = color_g * 100 / 255;\n        let B = color_b * 100 / 255;\n        let maxVal = Math.max(R, Math.max(G, B))\n        let minVal = Math.min(R, Math.min(G, B))\n        let Delta = maxVal - minVal;\n\n        if (Delta < 0) {\n            Hue = 0;\n        }\n        else if (maxVal == R && G >= B) {\n            Hue = (60 * ((G - B) * 100 / Delta)) / 100;\n        }\n        else if (maxVal == R && G < B) {\n            Hue = (60 * ((G - B) * 100 / Delta) + 360 * 100) / 100;\n        }\n        else if (maxVal == G) {\n            Hue = (60 * ((B - R) * 100 / Delta) + 120 * 100) / 100;\n        }\n        else if (maxVal == B) {\n            Hue = (60 * ((R - G) * 100 / Delta) + 240 * 100) / 100;\n        }\n        return Hue\n    }\n    function initModule(): void {\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ATIME, 252)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_CONTROL, 0x03)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_GCONF4, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_AICLEAR, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x01)\n        color_first_init = true\n    }\n    function colorMode(): void {\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_ENABLE) | 0x2;\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, tmp);\n    }\n\n    ///////////////////////////////////////////////////////MP3\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    /*\n    * Play status selection button list\n    */\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(100)\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,        \n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum Distance_Unit_List {\n        //% block=\"cm\" \n        Distance_Unit_cm,\n\n        //% block=\"foot\"\n        Distance_Unit_foot,\n    }\n    export enum ButtonStateList {\n        //% block=\"C\"\n        C,\n        //% block=\"D\"\n        D,\n        //% block=\"C+D\"\n        CD\n    }\n    export enum GestureType {\n        //% block=\"None\"\n        None = 0,\n        //% block=\"Right\"\n        Right = 1,\n        //% block=\"Left\"\n        Left = 2,\n        //% block=\"Up\"\n        Up = 3,\n        //% block=\"Down\"\n        Down = 4,\n        //% block=\"Forward\"\n        Forward = 5,\n        //% block=\"Backward\"\n        Backward = 6,\n        //% block=\"Clockwise\"\n        Clockwise = 7,\n        //% block=\"Anticlockwise\"\n        Anticlockwise = 8,\n        //% block=\"Wave\"\n        Wave = 9\n    }\n    export enum ColorList {\n        //% block=\"Red\"\n        red,\n        //% block=\"Green\"\n        green,\n        //% block=\"Blue\"\n        blue,\n        //% block=\"Cyan\"\n        cyan,\n        //% block=\"Magenta\"\n        magenta,\n        //% block=\"Yellow\"\n        yellow,\n        //% block=\"White\"\n        white\n    }\n\n    ///////////////////////////////////blocks/////////////////////////////\n\n    //% blockId=\"readwaterLevel\" block=\"Water level sensor %Rjpin value(0~100)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function waterLevel(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let voltage = 0, waterlevel = 0;\n        voltage = pins.map(\n            pins.analogReadPin(pin),\n            50,\n            600,\n            0,\n            100\n        );\n        if (voltage < 0) {\n            voltage = 0\n        }\n        waterlevel = voltage;\n        return Math.round(waterlevel)\n    }\n\n    let distance_last = 0\n\n    //% blockId=sonarbit block=\"Ultrasonic sensor pinT %tPin pinE %ePin distance %distance_unit\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% distance_unit.fieldEditor=\"gridpicker\"\n    //% distance_unit.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function ultrasoundSensor(tPin: DigitalPin, ePin: DigitalPin, distance_unit: Distance_Unit_List): number {\n        let pinT = tPin\n        let pinE = ePin\n        pins.setPull(pinT, PinPullMode.PullNone)\n        pins.digitalWritePin(pinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(pinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(pinT, 0)\n\n        // read pulse\n        let d = pins.pulseIn(pinE, PulseValue.High, 25000)\n        let version = control.hardwareVersion()\n        let distance = d * 34 / 2 / 1000\n        if (version == \"1\") {\n            distance = distance * 3 / 2\n        }\n\n        if (distance > 430) {\n            distance = 0\n        }\n\n        if (distance == 0) {\n            distance = distance_last\n            distance_last = 0\n        }\n        else {\n            distance_last = distance\n        }\n\n        switch (distance_unit) {\n            case Distance_Unit_List.Distance_Unit_cm:\n                return Math.floor(distance)  //cm\n                break\n            case Distance_Unit_List.Distance_Unit_foot:\n                return Math.floor(distance / 30.48)   //foot\n                break\n            default:\n                return 0\n        }\n    }\n\n    export class PAJ7620 {\n        private paj7620WriteReg(addr: number, cmd: number) {\n            let buf: Buffer = pins.createBuffer(2);\n            buf[0] = addr;\n            buf[1] = cmd;\n            pins.i2cWriteBuffer(0x73, buf, false);\n        }\n        private paj7620ReadReg(addr: number): number {\n            let buf: Buffer = pins.createBuffer(1);\n            buf[0] = addr;\n            pins.i2cWriteBuffer(0x73, buf, false);\n            buf = pins.i2cReadBuffer(0x73, 1, false);\n            return buf[0];\n        }\n        private paj7620SelectBank(bank: number) {\n            if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n        }\n        private paj7620Init() {\n            let temp = 0;\n            this.paj7620SelectBank(0);\n            temp = this.paj7620ReadReg(0);\n            if (temp == 0x20) {\n                for (let i = 0; i < 438; i += 2) {\n                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n                }\n            }\n            this.paj7620SelectBank(0);\n        }\n        init() {\n            this.paj7620Init();\n            basic.pause(200);\n        }\n        read(): number {\n            let data = 0, result = 0;\n            data = this.paj7620ReadReg(0x43);\n            switch (data) {\n                case 0x01:\n                    result = GestureType.Right;\n                    break;\n                case 0x02:\n                    result = GestureType.Left;\n                    break;\n                case 0x04:\n                    result = GestureType.Up;\n                    break;\n                case 0x08:\n                    result = GestureType.Down;\n                    break;\n                case 0x10:\n                    result = GestureType.Forward;\n                    break;\n                case 0x20:\n                    result = GestureType.Backward;\n                    break;\n                case 0x40:\n                    result = GestureType.Clockwise;\n                    break;\n                case 0x80:\n                    result = GestureType.Anticlockwise;\n                    break;\n                default:\n                    data = this.paj7620ReadReg(0x44);\n                    if (data == 0x01)\n                        result = GestureType.Wave;\n                    break;\n            }\n            return result;\n        }\n    }\n    const gestureEventId = 3100;\n    let lastGesture = GestureType.None;\n    let paj7620 = new PAJ7620();\n    //% blockId= gesture_create_event block=\"Gesture sensor IIC port is %gesture\"\n    //% gesture.fieldEditor=\"gridpicker\" gesture.fieldOptions.columns=3\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function onGesture(gesture: GestureType, handler: () => void) {\n        control.onEvent(gestureEventId, gesture, handler);\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        control.inBackground(() => {\n            while (true) {\n                const gesture = paj7620.read();\n                if (gesture != lastGesture) {\n                    lastGesture = gesture;\n                    control.raiseEvent(gestureEventId, lastGesture);\n                }\n                basic.pause(200);\n            }\n        })\n    }\n\n    //% blockId=apds9960_readcolor block=\"Color sensor IIC port color HUE(0~360)\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readColor(): number {\n        if (color_first_init == false) {\n            initModule()\n            colorMode()\n        }\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        while (!tmp) {\n            basic.pause(5);\n            tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        }\n        let c = i2cread_color(APDS9960_ADDR, APDS9960_CDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_CDATAH) * 256;\n        let r = i2cread_color(APDS9960_ADDR, APDS9960_RDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_RDATAH) * 256;\n        let g = i2cread_color(APDS9960_ADDR, APDS9960_GDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_GDATAH) * 256;\n        let b = i2cread_color(APDS9960_ADDR, APDS9960_BDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_BDATAH) * 256;\n        // map to rgb based on clear channel\n        let avg = c / 3;\n        r = r * 255 / avg;\n        g = g * 255 / avg;\n        b = b * 255 / avg;\n        //let hue = rgb2hue(r, g, b);\n        let hue = rgb2hsl(r, g, b)\n        return hue\n    }\n    //% block=\"Color sensor IIC port detects %color\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% color.fieldEditor=\"gridpicker\" color.fieldOptions.columns=3\n    export function checkColor(color: ColorList): boolean {\n        let hue = readColor()\n        switch (color) {\n            case ColorList.red:\n                if (hue > 330 || hue < 20) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.green:\n                if (hue > 120 && 180 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.blue:\n                if (hue > 210 && 270 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.cyan:\n                if (hue > 190 && 210 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.magenta:\n                if (hue > 260 && 330 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.yellow:\n                if (hue > 30 && 120 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.white:\n                if (hue >= 180 && 190 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n        }\n    }\n\n    //% blockId=\"potentiometer\" block=\"Trimpot %Rjpin analog value\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Input color=#E2C438 group=\"Analog\"\n    export function trimpot(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        return pins.analogReadPin(pin)\n    }\n    //% blockId=buttonab block=\"Button %Rjpin %button is pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonCD(Rjpin: DigitalRJPin, button: ButtonStateList): boolean {\n        let pinC = DigitalPin.P1\n        let pinD = DigitalPin.P2\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pinC = DigitalPin.P1\n                pinD = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pinC = DigitalPin.P2\n                pinD = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pinC = DigitalPin.P13\n                pinD = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pinC = DigitalPin.P15\n                pinD = DigitalPin.P16\n                break;\n            case DigitalRJPin.P3:\n                pinC = DigitalPin.P3\n                pinD = DigitalPin.P4\n                break;\n        }\n        pins.setPull(pinC, PinPullMode.PullUp)\n        pins.setPull(pinD, PinPullMode.PullUp)\n        if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 0 && button == ButtonStateList.CD) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinC) == 0 && pins.digitalReadPin(pinD) == 1 && button == ButtonStateList.C) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 1 && button == ButtonStateList.D) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    export enum ButtonState {\n        //% block=\"on\"\n        on = 1,\n        //% block=\"off\"\n        off = 2\n    }\n\n    const buttonEventSource = 5000\n    const buttonEventValue = {\n        CD_pressed: ButtonState.on,\n        CD_unpressed: ButtonState.off\n    }\n\n    //% block=\"on button %Rjpin %button pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=4\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonEvent(Rjpin: DigitalRJPin, button: ButtonStateList, handler: () => void) {\n        let ButtonPin_C = DigitalPin.P1\n        let ButtonPin_D = DigitalPin.P2\n        let pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P0\n        let pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                ButtonPin_C = DigitalPin.P1\n                ButtonPin_D = DigitalPin.P8\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P1\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P8\n                break;\n            case DigitalRJPin.J2:\n                ButtonPin_C = DigitalPin.P2\n                ButtonPin_D = DigitalPin.P12\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P2\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P12\n                break;\n            case DigitalRJPin.J3:\n                ButtonPin_C = DigitalPin.P13\n                ButtonPin_D = DigitalPin.P14\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P13\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P14\n                break;\n            case DigitalRJPin.J4:\n                ButtonPin_C = DigitalPin.P15\n                ButtonPin_D = DigitalPin.P16\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P15\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P16\n                break;\n            case DigitalRJPin.P3:\n                ButtonPin_C = DigitalPin.P3\n                ButtonPin_D = DigitalPin.P4\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P3\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P4\n                break;\n        }\n        if (button == ButtonStateList.C) {\n            pins.setPull(ButtonPin_C, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_C, PinEventType.Edge)\n            control.onEvent(pinEventSource_C, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.D) {\n            pins.setPull(ButtonPin_D, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_D, PinEventType.Edge)\n            control.onEvent(pinEventSource_D, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.CD) {\n            loops.everyInterval(50, function () {\n                if (pins.digitalReadPin(ButtonPin_C) == 0 && pins.digitalReadPin(ButtonPin_D) == 0) {\n                    control.raiseEvent(buttonEventSource, buttonEventValue.CD_pressed)\n                }\n            })\n            control.onEvent(buttonEventSource, buttonEventValue.CD_pressed, handler)\n        }\n    }\n\n    //% blockId=fans block=\"Motor fan %Rjpin toggle to $fanstate || speed %speed \\\\%\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% fanstate.shadow=\"toggleOnOff\"\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    //% speed.min=0 speed.max=100\n    //% expandableArgumentMode=\"toggle\"\n    export function motorFan(Rjpin: DigitalRJPin, fanstate: boolean, speed: number = 100): void {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.J3:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.J4:\n                pin = AnalogPin.P15\n                break;\n        }\n        if (fanstate) {\n            pins.analogSetPeriod(pin, 100)\n            pins.analogWritePin(pin, Math.map(speed, 0, 100, 0, 1023))\n        }\n        else {\n            pins.analogWritePin(pin, 0)\n            speed = 0\n        }\n    }\n\n\n    //% blockId=\"setLoopFolder\" block=\"loop play all the MP3s in the folder:$folderNum\"\n    //% folderNum.defl=\"01\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setLoopFolder(folderNum: string): void {\n        CMD = 0x17\n        para1 = 0\n        para2 = parseInt(folderNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    //% blockId=\"folderPlay\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum || repeatList: $myAns\"\n    //% folderNum.defl=\"01\" fileNum.defl=\"001\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function folderPlay(folderNum: string, fileNum: string, myAns: boolean = false): void {\n        CMD = 0x0F\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        if (myAns)\n            execute(0x19)\n    }\n\n    //% blockId=\"playFolderFilePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFilePort(folderNum: string, fileNum: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFolderFileVolumePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum with volume:$theVolume usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" theVolume.defl=\"10\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFileVolumePort(folderNum: string, fileNum: string, theVolume: string, Rjpin: DigitalRJPin): void {\n        \n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        \n        let volume = parseInt(theVolume)\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(200)\n\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"volumePort\" \n    //% block=\"set MP3 volume:$theVolume usingPin:$Rjpin\"\n    //% theVolume.defl=\"10\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function volumePort(theVolume: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        let volume = parseInt(theVolume)\n        if (volume > 30) {\n            volume = 30\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(300)\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n\n\n    //% blockId=\"setTracking\" \n    //% block=\"play the mp3 in order of:%tracking || repeatList: $myAns\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% tracking.defl=1\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setTracking(tracking: number, myAns: boolean = false): void {\n        CMD = 0x03\n        para1 = 0x00\n        para2 = tracking\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        execute(0x0D)\n        if (myAns)\n            execute(0x19)\n    }\n    //% blockId=MP3execute block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=\"setVolume\" block=\"Set volume(0~25):%volume\"\n    //% volume.min=0 volume.max=25\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setVolume(volume: number): void {\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 0x06\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=MP3setPort block=\"Set the MP3 port to %Rjpin\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function MP3SetPort(Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        setVolume(25)\n    }\n}","notlegos.ts":"// NotLegos Blocks\n\n//% block=\"Not LEGOs\" color=#0031AF weight=1000 icon=\"\\uf3a5\"\n//% groups=['MP3\",'Display', 'Laser', 'others']\nnamespace notLegos {\n\n    // Variables for MP3 and Volume Pot\n    let isPot = false\n    let potPin = AnalogPin.P0\n    let mp3bits = 0\n    let mp3Apin = SerialPin.P0\n    let mp3Bpin = SerialPin.P0\n    let mp3Cpin = SerialPin.P0\n    let mp3Avolume = 1\n    let mp3Bvolume = 1\n    let mp3Cvolume = 1\n    let relativeCvolume = 1\n    let lastMP3bit = \"\"\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n\n    // String Arrays for Full Player Sound Sets and Shuffled Playlists Thereof\n    let PlayerAwaitingMusic: string[] = []\n    let PlayerFailure: string[] = []\n    let PlayerHurry: string[] = []\n    let PlayerIntro: string[] = []\n    let PlayerIntroMusic: string[] = []\n    let PlayerLevelMusic: string[] = []\n    let PlayerLost: string[] = []\n    let PlayerLostMusic: string[] = []\n    let PlayerName: string[] = []\n    let PlayerNay: string[] = []\n    let PlayerOuch: string[] = []\n    let PlayerReady: string[] = []\n    let PlayerSuccess: string[] = []\n    let PlayerTutorialMusic: string[] = []\n    let PlayerWon: string[] = []\n    let PlayerWonMusic: string[] = []\n    let PlayerYay: string[] = []\n    let PlaylistAwaitingMusic: string[] = []\n    let PlaylistCorrect: string[] = []\n    let PlaylistExplosion: string[] = []\n    let PlaylistFailure: string[] = []\n    let PlaylistFire: string[] = []\n    let PlaylistGhost: string[] = []\n    let PlaylistHurry: string[] = []\n    let PlaylistIncorrect: string[] = []\n    let PlaylistIntro: string[] = []\n    let PlaylistLost: string[] = []\n    let PlaylistName: string[] = []\n    let PlaylistNay: string[] = []\n    let PlaylistOuch: string[] = []\n    let PlaylistReady: string[] = []\n    let PlaylistSlash: string[] = []\n    let PlaylistSpark: string[] = []\n    let PlaylistSplash: string[] = []\n    let PlaylistSuccess: string[] = []\n    let PlaylistWon: string[] = []\n    let PlaylistYay: string[] = []\n\n    // Sound Strings - Global\n    let VoiceTracks = \"10_1_90_1.75|10_2_90_3.65|10_3_50_11.5|10_4_90_0|10_5_90_0|10_6_90_4.65|10_7_90_7.15|10_8_90_4.8|10_9_90_3.75|10_10_90_5.05|10_11_90_0|10_12_90_0|10_13_90_3|10_14_90_3|10_15_90_3|10_16_90_4|10_17_90_0|10_18_90_3|10_19_90_3|10_20_90_4|10_21_90_2|10_22_90_0|10_23_90_2|10_24_90_2|10_25_90_6|10_26_90_6|10_27_90_6|10_28_90_6|10_29_90_6|10_30_90_6|10_31_90_6|10_32_90_6|10_33_90_8|10_34_90_9|10_35_90_6|10_36_90_6|10_37_90_6|10_38_90_6|10_39_90_6|10_40_90_6\".split(\"|\")\n    let CorrectSFX = \"7_1_100_4|7_2_100_8|7_3_100_8|7_4_100_6|7_5_100_10|7_6_100_8|7_7_100_6|7_8_100_4|7_9_100_17|7_10_100_9|7_11_100_4|7_12_100_8|7_13_100_12|7_14_100_7|7_15_100_10|7_16_100_9|7_17_100_10|7_18_100_9|7_19_100_8|7_20_100_4|7_21_100_7|7_22_100_26|7_23_100_5|7_24_100_4|7_25_100_10|7_26_100_7|7_27_100_7|7_28_100_6|7_29_100_7|7_30_100_7|7_31_100_12|7_32_100_4|7_33_100_6|7_34_100_6|7_35_100_6|7_36_100_6|7_37_100_5|7_38_100_3|7_39_100_6|7_40_100_6|7_41_100_6|7_42_100_8|7_43_100_6|7_44_100_8|7_45_100_6|7_46_100_5|7_47_100_5|7_48_100_12|7_49_100_3|7_50_100_7|7_51_100_8|7_52_100_11|7_53_100_6|7_54_100_2|7_55_100_5|7_56_100_7|7_57_100_8|7_58_100_7|7_59_100_6|7_60_100_7|7_61_100_6|7_62_100_8|7_63_100_5|7_64_100_5|7_65_100_7|7_66_100_9|7_67_100_6|7_68_100_6|7_69_100_7|7_70_100_10|7_71_100_7|7_72_100_5|7_73_100_6|7_74_100_8|7_75_100_3|7_76_100_3|7_77_100_6|7_78_100_7|7_79_100_4|7_80_100_6|7_81_100_2|7_82_100_3|7_83_100_3|7_84_100_1|7_85_100_3|7_86_100_6|7_87_100_7|7_88_100_5|7_89_100_3|7_90_100_5|7_91_100_3|7_92_100_3|7_93_100_2|7_94_100_3|7_95_100_3|7_96_100_1|7_99_100_1|7_100_100_1|7_101_100_1|7_102_100_1|7_103_100_1|7_104_100_3|7_105_100_1|7_106_100_1|7_107_100_4|7_108_100_4|7_109_100_1|7_110_100_1|7_111_100_1|7_112_100_1|7_113_100_1|7_114_100_2|7_115_100_1|7_116_100_1|7_117_100_1|7_118_100_1\".split(\"|\")\n    let IncorrectSFX = \"8_1_100_6|8_2_100_5|8_3_100_3|8_4_100_5|8_5_100_7|8_6_100_6|8_7_100_4|8_8_100_1|8_9_100_3|8_10_100_4|8_11_100_3|8_12_100_3|8_13_100_6|8_14_100_3|8_15_100_1|8_16_100_1|8_17_100_1|8_18_100_1|8_19_100_0|8_20_100_0|8_21_100_5|8_22_100_4|8_23_100_3|8_24_100_7\".split(\"|\")\n    let AllSFX = \"9_1_100_4.754|9_2_100_4.336|9_3_100_5.172|9_4_100_4.806|9_5_100_4.754|9_6_100_1.536|9_7_100_2.136|9_8_100_1.896|9_9_100_2.592|9_10_100_0.936|9_11_100_1.008|9_12_100_0.312|9_13_100_1.44|9_14_100_1.8|9_15_100_1.992|9_16_100_1.104|9_17_100_1.08|9_18_100_0.912|9_19_100_0.528|9_20_100_0.72|9_21_100_0.672|9_22_100_0.696|9_23_100_0.6|9_24_100_0.576|9_25_100_1.44|9_26_100_1.8|9_27_100_1.464|9_28_100_0.432|9_29_100_0.312|9_30_100_2.112|9_31_100_0.648|9_32_100_0.384|9_33_100_2.352|9_34_100_1.8|9_35_100_1.608|9_36_100_0.648|9_37_100_0.768|9_38_100_0.552|9_39_100_0.48|9_40_100_1.032|9_41_100_0.456|9_42_100_0.384|9_43_100_0.552|9_44_100_0.432|9_45_100_0.216|9_46_100_0.624|9_47_100_1.248|9_48_100_1.104|9_49_100_1.248|9_50_100_0.648|9_51_100_0.456|9_53_100_5.256|9_54_100_2.328|9_55_100_4.992|9_56_100_1.776|9_57_100_2.28|9_58_100_0.504|9_59_100_0.984|9_60_100_0.984|9_61_100_0.504|9_62_100_1.632|9_63_100_0.288|9_64_100_0.192|9_65_100_0.168|9_66_100_0.288|9_67_100_0.288|9_68_100_0.312|9_69_100_0.72|9_70_100_0.672|9_71_100_0.648|9_72_100_0.648|9_73_100_1.632|9_74_100_1.416|9_75_100_1.248|9_76_100_0.48|9_77_100_0.36|9_78_100_0.216|9_79_100_0.576|9_80_100_0.731|9_81_100_1.128|9_82_100_2.184|9_83_100_0.744|9_84_100_0.6|9_85_100_1.152|9_86_100_1.68|9_87_100_1.32|9_88_100_0.528|9_89_100_0.36|9_90_100_0.792|9_91_100_2.496|9_92_100_1.8|9_93_100_1.8|9_94_100_0.744|9_95_100_1.776|9_96_100_5.544|9_97_100_0.432|9_98_100_2.064|9_99_100_0.744|9_100_100_0.696|9_101_100_1.776|9_102_100_0.12|9_103_100_0.168|9_104_100_0.96|9_105_100_0.96|9_106_100_2.04|9_107_100_3.984|9_108_100_1.608|9_109_100_3.528|9_110_100_0.456|9_111_100_0.696|9_112_100_1.632|9_113_100_2.232\".split(\"|\")\n    let GhostSFX = \"9_1_100_4.754|9_2_100_4.336|9_3_100_5.172|9_4_100_4.806\".split(\"|\")\n    let FireSFX = \"9_6_100_1.536|9_15_100_1.992|9_53_100_5.256|9_106_100_2.04\".split(\"|\")\n    let ExplosionSFX = \"9_77_100_0.36|9_101_100_1.776|9_109_100_3.528\".split(\"|\")\n    let SplashSFX = \"9_33_100_2.352|9_34_100_1.8\".split(\"|\")\n    let SparkSFX = \"9_5_100_4.754|9_51_100_0.456|9_85_100_1.152|9_86_100_1.68|9_111_100_0.696|9_112_100_1.632\".split(\"|\")\n    let SlashSFX = \"9_10_100_0.936|9_25_100_1.44|9_28_100_0.432|9_32_100_0.384|9_50_100_0.648|9_59_100_0.984|9_63_100_0.288|9_64_100_0.192|9_65_100_0.168|9_66_100_0.288|9_67_100_0.288|9_68_100_0.312|9_69_100_0.72|9_75_100_1.248|9_76_100_0.48|9_77_100_0.36|9_78_100_0.216|9_89_100_0.36\".split(\"|\")\n    \n    // Music Strings - Super Mario Brothers\n    let SMBIntroMusic = \"1_1_75_2.808|1_2_75_3.912|1_3_75_7.81|1_4_75_4.992|1_5_75_3.918|1_6_75_12.382|1_7_75_3.204|1_8_75_6.648|1_9_75_6.168|1_10_75_7.464|1_11_75_9.36|1_12_75_9.038|1_13_75_10.605|1_14_75_3.492|1_15_75_9.613|1_16_75_3.48|1_17_75_5.58|1_18_75_5.041|1_19_75_6.336|1_20_75_5.424|1_21_75_7.2|1_22_75_5.424|1_23_75_3.317|1_24_75_7.262|1_25_75_5.59|1_26_75_5.52|1_27_75_10.776|1_28_75_4.944|1_29_75_5.496|1_30_75_4.032|1_31_75_6.264|1_32_75_3.918|1_33_75_4.44|1_34_75_10.152|1_35_75_8.097|1_36_75_7.706|1_37_75_3.317|1_38_75_6.87|1_39_75_4.466|1_40_75_5.877|1_41_75_3.432|1_42_75_7.392|1_43_75_6.768|1_44_75_2.616|1_45_75_6.269|1_46_75_1.188|1_47_75_2.088|1_48_75_2.124|1_49_75_8.228|1_50_75_15.647|1_51_75_9.064|1_52_75_10.152|1_53_75_13.008|1_54_75_14.16|1_55_75_14.236|1_56_75_15.792|1_57_75_7.392|1_58_75_4.368|1_59_75_9.384|1_60_75_7.653|1_61_75_8.76|1_62_75_8.952|1_63_75_12.024|1_64_75_4.284|1_65_75_6.048|1_66_75_9.072|1_67_75_4.68|1_68_75_6.138|1_69_75_5.208|1_70_75_9.576|1_71_75_8.045|1_72_75_8.045|1_73_75_5.407|1_74_75_3.186\".split(\"|\")\n    let SMBTutorialMusic = \"2_1_65_36|2_2_65_40|2_3_65_41|2_4_65_46|2_5_65_50|2_6_65_51|2_7_65_59|2_8_65_63|2_9_65_64|2_10_65_65|2_11_65_66|2_12_65_67|2_13_65_68|2_14_65_69|2_15_65_76|2_16_65_80|2_17_65_84|2_18_65_90|2_19_65_92|2_20_65_100|2_21_65_103|2_22_65_105|2_23_65_112|2_24_65_113|2_25_65_123|2_26_65_138|2_27_65_142|2_28_65_144|2_29_65_156|2_30_65_158|2_31_65_120|2_32_65_120|2_33_65_120|2_34_65_120|2_35_65_120|2_36_65_120\".split(\"|\")\n    let SMBAwaitingMusic = \"3_1_100_64|3_2_100_211|3_3_100_185|3_4_100_185|3_5_100_182|3_6_100_114|3_7_100_181|3_8_100_103|3_9_100_303|3_10_100_21|3_11_100_235|3_12_100_121|3_13_100_203|3_14_100_119|3_15_100_206|3_16_100_146|3_17_100_237|3_18_100_210|3_19_100_160\".split(\"|\")\n    let SMBLevelMusic = \"4_1_100_128|4_3_100_142|4_5_100_111|4_6_100_141|4_9_100_126|4_11_100_132|4_15_100_119|4_16_100_146|4_18_100_120|4_20_100_143|4_22_100_142|4_23_100_112|4_24_100_138|4_25_100_139|4_26_100_111|4_27_100_116|4_28_100_129|4_31_100_98|4_32_100_146|4_33_100_177|4_34_100_82|4_36_100_160|4_38_100_180|4_39_100_211|4_41_100_134|4_42_100_183|4_43_100_124|4_44_100_261|4_45_100_91|4_46_100_138|4_49_100_207|4_50_100_41|4_51_100_180|4_52_100_202|4_53_100_194|4_56_100_209|4_57_100_195|4_58_100_180|4_60_100_198|4_61_100_180|4_63_100_78|4_66_100_139|4_67_100_224|4_68_100_180|4_73_100_180|4_76_100_180|4_77_100_196|4_78_100_113|4_82_100_180|4_83_100_123|4_84_100_180|4_86_100_126|4_93_100_121|4_97_100_59|4_98_100_180|4_99_100_180|4_100_100_118|4_101_100_156|4_102_100_180|4_103_100_70|4_104_100_216|4_105_100_140|4_106_100_180|4_107_100_147|4_108_100_147|4_109_100_180|4_110_100_158|4_111_100_180|4_112_100_80|4_113_100_152|4_114_100_127|4_116_100_122|4_118_100_106|4_123_100_143|4_124_100_36|4_125_100_164|4_127_100_282|4_128_100_311|4_129_100_123|4_130_100_187|4_131_100_62|4_132_100_180|4_133_100_130|4_134_100_112|4_135_100_105|4_139_100_126|4_141_100_176|4_142_100_135|4_143_100_126|4_144_100_144|4_145_100_140|4_146_100_133|4_149_100_167|4_150_100_120|4_151_100_180|4_155_100_226|4_157_100_164|4_158_100_144|4_159_100_104|4_161_100_180|4_162_100_87|4_163_100_126|4_164_100_118|4_165_100_194|4_166_100_135|4_167_100_50|4_168_100_109|4_169_100_180|4_170_100_133|4_171_100_180|4_172_100_91|4_173_100_138|4_176_100_120|4_177_100_81|4_178_100_150|4_179_100_153|4_180_100_104|4_181_100_112\".split(\"|\")\n    let SMBWonMusic = \"5_1_100_4|5_2_100_17|5_3_100_29|5_4_100_172|5_5_100_13|5_6_100_248|5_7_100_11|5_8_100_445|5_9_100_241|5_10_100_244|5_11_100_20|5_12_100_7|5_13_100_28|5_14_100_74|5_15_100_15|5_16_100_74|5_17_100_17|5_18_100_17|5_19_100_15|5_20_100_38|5_21_100_42|5_22_100_67|5_23_100_8|5_24_100_8|5_25_100_13|5_26_100_17|5_27_100_5|5_28_100_122|5_29_100_226|5_30_100_79\".split(\"|\")\n    let SMBLostMusic = \"6_1_100_87|6_2_100_31|6_3_100_196|6_4_100_65|6_5_100_4|6_6_100_23|6_7_100_65|6_8_100_62|6_9_100_78|6_10_100_6|6_11_100_162\".split(\"|\")\n    \n    // Player Strings - Mario\n    let MarioSoundString = \"A_21_1_100_1.5|A_21_2_100_1|I_21_3_100_3.3|A_21_4_100_1.9|A_21_5_100_2.1|I_21_6_100_1.8|I_21_7_100_1.8|R_21_8_100_0.6|R_21_9_100_1.3|R_21_10_100_1.1|R_21_11_100_0.6|R_21_12_100_0.8|R_21_13_100_1.6|R_21_14_100_1.3|R_21_15_100_1.2|R_21_16_100_1.1|R_21_17_100_1.3|R_21_18_100_1|Y_21_19_100_0.2|Y_21_20_100_0.2|Y_21_21_100_0.3|Y_21_22_100_0.5|Y_21_23_100_0.6|Y_21_24_100_0.6|Y_21_25_100_0.6|Y_21_26_100_0.6|Y_21_27_100_0.6|Y_21_28_100_0.6|Y_21_29_100_0.7|Y_21_30_100_0.7|Y_21_31_100_0.7|Y_21_32_100_0.7|Y_21_33_100_0.7|Y_21_34_100_0.8|Y_21_35_100_0.8|Y_21_36_100_0.8|Y_21_37_100_0.8|Y_21_38_100_0.8|Y_21_39_100_0.8|Y_21_40_100_0.9|Y_21_41_100_0.9|Y_21_42_100_0.9|Y_21_43_100_0.9|Y_21_44_100_0.9|Y_21_45_100_0.9|Y_21_46_100_0.9|Y_21_47_100_1|Y_21_48_100_1|Y_21_49_100_1|Y_21_50_100_1|Y_21_51_100_1.1|Y_21_52_100_1.1|Y_21_53_100_1.1|Y_21_54_100_1.2|Y_21_55_100_1.2|Y_21_56_100_1.2|Y_21_57_100_1.2|Y_21_58_100_1.3|Y_21_59_100_1.3|Y_21_60_100_1.3|Y_21_61_100_1.4|Y_21_62_100_1.4|S_21_63_100_1|S_21_64_100_1.6|S_21_65_100_1.7|S_21_66_100_1.7|S_21_67_100_1.9|S_21_68_100_2.1|S_21_69_100_2.2|S_21_70_100_2.4|S_21_71_100_2.4|S_21_72_100_2.5|W_21_73_100_1.8|W_21_74_100_2|W_21_75_100_2.2|W_21_76_100_2.6|W_21_77_100_2.9|O_21_78_100_0.6|O_21_79_100_0.4|O_21_80_100_0.4|O_21_81_100_1.1|O_21_82_100_1.5|O_21_83_100_0.8|O_21_84_100_0.7|O_21_85_100_0.8|O_21_86_100_0.9|O_21_87_100_1.3|O_21_88_100_0.5|O_21_89_100_1|O_21_90_100_1|O_21_91_100_0.4|O_21_92_100_0.5|O_21_93_100_0.9|O_21_94_100_0.4|O_21_95_100_0.4|N_21_96_100_1|N_21_97_100_1.1|N_21_98_100_1|N_21_99_100_0.6|N_21_100_100_0.9|N_21_101_100_1.4|N_21_102_100_1.7|N_21_103_100_1.3|N_21_104_100_0.6|N_21_105_100_1.4|N_21_106_100_0.8|N_21_107_100_1.1|N_21_108_100_1.1|N_21_109_100_0.8|N_21_110_100_1.7|N_21_111_100_2.4|I_21_112_100_0.8|I_21_113_100_0.9|F_21_114_100_1.1|F_21_115_100_2.5|F_21_116_100_2.5|F_21_117_100_1.4|L_21_118_100_3.4|L_21_119_100_3.5|L_21_120_100_4.4|L_21_121_100_1.5|H_21_122_100_44.4\"\n\n    // BLOCK - Set the Player's Sounds\n    //% blockId=nl_player_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% weight=101\n    //% block=\"Set player to $player\"\n    export function setSounds(player: string): void {\n        let theSound = \"\"\n        let thisLetter = \"\"\n        let series = \"\"\n        let soundStrings: string[] = []\n        if (player == \"Mario\") {\n            soundStrings = MarioSoundString.split(\"|\")\n            series = \"SMB\"\n        }\n        if (series == \"SMB\") {\n            PlayerIntroMusic = SMBIntroMusic\n            PlayerTutorialMusic = SMBTutorialMusic\n            PlayerAwaitingMusic = SMBAwaitingMusic\n            PlayerLevelMusic = SMBLevelMusic\n            PlayerWonMusic = SMBWonMusic\n            PlayerLostMusic = SMBLostMusic\n        }\n        for (let sString of soundStrings) {\n            thisLetter = sString.charAt(0)\n            theSound = sString.substr(2, sString.length - 2)\n            if (thisLetter == \"A\") {\n                PlayerName.push(theSound)\n            } else if (thisLetter == \"R\") {\n                PlayerReady.push(theSound)\n            } else if (thisLetter == \"Y\") {\n                PlayerYay.push(theSound)\n            } else if (thisLetter == \"I\") {\n                PlayerIntro.push(theSound)\n            } else if (thisLetter == \"N\") {\n                PlayerNay.push(theSound)\n            } else if (thisLetter == \"O\") {\n                PlayerOuch.push(theSound)\n            } else if (thisLetter == \"S\") {\n                PlayerSuccess.push(theSound)\n            } else if (thisLetter == \"F\") {\n                PlayerFailure.push(theSound)\n            } else if (thisLetter == \"W\") {\n                PlayerWon.push(theSound)\n            } else if (thisLetter == \"L\") {\n                PlayerLost.push(theSound)\n            } else if (thisLetter == \"H\") {\n                PlayerHurry.push(theSound)\n            }\n        }\n    }    \n    \n    // Internal Function - Take a Sound from a Playlist After Filling it from a Soundbank if it's Empty\n    function takeReplenish(Playlist: any[], Soundbank: any[]) {\n        let returnSound = \"\"\n        returnSound = \"\"\n        if (Playlist.length == 0) {\n            for (let index = 0; index <= Soundbank.length - 1; index++) {\n                if (index == 0) {\n                    Playlist.push(Soundbank[index])\n                } else if (index >= 1) {\n                    Playlist.insertAt(randint(0, index), Soundbank[index])\n                }\n            }\n        }\n        returnSound = Playlist.shift()\n        return returnSound\n    }\n\n    // BLOCK - Fetch a Sound of a Type from a Category\n    //% blockId=nl_get_soundstring\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% weight=101\n    //% block=\"Get $Category sound $Type\"\n    export function getSoundString(Category: string, Type: string): string {\n        let returnString = \"\"\n        if (Category == \"Voice\") {\n            returnString = VoiceTracks[parseFloat(Type)]\n        } else if (Category == \"Player\") {\n            if (Type == \"Name\") {\n                returnString = takeReplenish(PlaylistName, PlayerName)\n            } else if (Type == \"Intro\") {\n                returnString = takeReplenish(PlaylistIntro, PlayerIntro)\n            } else if (Type == \"Ready\") {\n                returnString = takeReplenish(PlaylistReady, PlayerReady)\n            } else if (Type == \"Yay\") {\n                returnString = takeReplenish(PlaylistYay, PlayerYay)\n            } else if (Type == \"Success\") {\n                returnString = takeReplenish(PlaylistSuccess, PlayerSuccess)\n            } else if (Type == \"Nay\") {\n                returnString = takeReplenish(PlaylistNay, PlayerNay)\n            } else if (Type == \"Failure\") {\n                returnString = takeReplenish(PlaylistFailure, PlayerFailure)\n            } else if (Type == \"Won\") {\n                returnString = takeReplenish(PlaylistWon, PlayerWon)\n            } else if (Type == \"Lost\") {\n                returnString = takeReplenish(PlaylistLost, PlayerLost)\n            } else if (Type == \"Hurry\") {\n                returnString = takeReplenish(PlaylistHurry, PlayerHurry)\n            }\n        } else if (Category == \"SFX\") {\n            if (Type == \"Correct\") {\n                returnString = takeReplenish(PlaylistCorrect, CorrectSFX)\n            } else if (Type == \"Incorrect\") {\n                returnString = takeReplenish(PlaylistIncorrect, IncorrectSFX)\n            } else if (Type == \"Ghost\") {\n                returnString = takeReplenish(PlaylistGhost, GhostSFX)\n            } else if (Type == \"Fire\") {\n                returnString = takeReplenish(PlaylistFire, FireSFX)\n            } else if (Type == \"Explosion\") {\n                returnString = takeReplenish(PlaylistExplosion, ExplosionSFX)\n            } else if (Type == \"Splash\") {\n                returnString = takeReplenish(PlaylistSplash, SplashSFX)\n            } else if (Type == \"Spark\") {\n                returnString = takeReplenish(PlaylistSpark, SparkSFX)\n            } else if (Type == \"Slash\") {\n                returnString = takeReplenish(PlaylistSlash, SlashSFX)\n            }\n        } else if (Category == \"Music\") {\n            if (Type == \"Intro\") {\n                let PlaylistIntroMusic: number[] = []\n                returnString = takeReplenish(PlaylistIntroMusic, PlayerIntroMusic)\n            } else if (Type == \"Tutorial\") {\n                let PlaylistTutorialMusic: number[] = []\n                returnString = takeReplenish(PlaylistTutorialMusic, PlayerTutorialMusic)\n            } else if (Type == \"Awaiting\") {\n                returnString = takeReplenish(PlaylistAwaitingMusic, PlayerAwaitingMusic)\n            } else if (Type == \"Level\") {\n                let PlaylistLevelMusic: number[] = []\n                returnString = takeReplenish(PlaylistLevelMusic, PlayerLevelMusic)\n            } else if (Type == \"Won\") {\n                let PlaylistWonMusic: number[] = []\n                returnString = takeReplenish(PlaylistWonMusic, PlayerWonMusic)\n            } else if (Type == \"Lost\") {\n                let PlaylistLostMusic: number[] = []\n                returnString = takeReplenish(PlaylistLostMusic, PlayerLostMusic)\n            }\n        }\n        return returnString\n    }\n\n\n    ///////////////////////////////////////////////////////MP3\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(20) // Was 100; problematic at 10\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n    function sendMP3volume(sPin: SerialPin): void {\n        let theVolume = 5\n        if (sPin == mp3Apin) {\n            theVolume = Math.round(potRead() * mp3Avolume)\n        } else if (sPin == mp3Bpin) {\n            theVolume = Math.round(potRead() * mp3Bvolume)\n        } else if (sPin == mp3Cpin) {\n            theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    function sendMP3volumeFast(sPin: SerialPin): void {\n        let theVolume = 5\n        if (sPin == mp3Apin) {\n            theVolume = Math.round(potRead() * mp3Avolume)\n        } else if (sPin == mp3Bpin) {\n            theVolume = Math.round(potRead() * mp3Bvolume)\n        } else if (sPin == mp3Cpin) {\n            theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    function sendMP3play(folderNum: string, fileNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    //% blockId=\"playFileNl\" \n    //% block=\"Play length of file:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n\n    export function playFile(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P16\n        stringParts = soundString.split(\"_\")\n        let theFile = stringParts[0]\n        let theVolume = stringParts[1]\n        let theLength = stringParts[2]\n        sendMP3file(theFile, theVolume, sPin)\n        return parseFloat(theLength) * 1000\n    }\n    function sendMP3file(fileNum: string, volumeNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 3\n        para1 = parseInt(fileNum)\n        para2 = parseInt(volumeNum)\n        para1 = parseInt(\"0\")\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFileNl2\" \n    //% block=\"Play2 length of file:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n\n    export function playFile2(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P16\n        stringParts = soundString.split(\"_\")\n        let theFile = stringParts[0]\n        let theVolume = stringParts[1]\n        let theLength = stringParts[2]\n        sendMP3file2(theFile, theVolume, sPin)\n        return parseFloat(theLength) * 1000\n    }\n    function sendMP3file2(fileNum: string, volumeNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 15\n        para1 = parseInt(fileNum)\n        para2 = parseInt(volumeNum)\n        para1 = parseInt(\"1\")\n        para2 = parseInt(\"1\")\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=nl_backgroundVolume\n    //% block=\"Set background volume to:%relativeVolume\"\n    //% subcategory=\"MP3\" group=\"MP3\"\n    export function sendBackgroundVolume(relativeVolume: number): void {\n        relativeCvolume = relativeVolume/100\n\n        let sPin = mp3Cpin\n        let theVolume = Math.round(potRead() * mp3Cvolume * relativeVolume / 100)\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=MP3execute2 block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n  \n    //% blockId=notlegos_pot_read\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Trimpot analog value\"\n    export function potRead() {\n        if(isPot){\n            return Math.round(pins.map(pins.analogReadPin(potPin), 0, 1023, 0, 30))\n        } else{\n            return 5\n        }\n    }\n\n    //% blockId=notlegos_relCread\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return background volume\"\n    export function getBackgroundVolume() {\n\n            return relativeCvolume\n\n    }\n    //% blockId=notlegos_mp3Avolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3A volume\"\n    export function getMP3AVolume() {\n        return potRead() * mp3Avolume\n    }\n    //% blockId=notlegos_mp3Bvolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3B volume\"\n    export function getMP3BVolume() {\n        return potRead() * mp3Bvolume\n    }\n      //% blockId=notlegos_mp3Cvolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3C volume\"\n    export function getMP3CVolume() {\n        return potRead() * mp3Cvolume * relativeCvolume\n    }\n\n    //% blockId=notlegos_pot_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Connect Volume Control Pot at pin %aPin\"\n    //% aPin.fieldEditor=\"gridpicker\"\n    export function potSet(aPin: AnalogPin): void{\n        potPin = aPin\n        isPot = true\n    }\n\n    //% blockId=notlegos_mp3_ports_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Connect MP3 bit at pin %dPin\"\n    //% dPin.fieldEditor=\"gridpicker\"\n    export function mp3setPorts(sPin: SerialPin): void {\n        if (mp3bits == 0){\n            mp3Apin = sPin\n            mp3bits = 1\n        } else if (mp3bits == 1){\n            mp3Bpin = sPin\n            mp3bits = 2\n        } else if (mp3bits == 2){\n            mp3Cpin = sPin\n            mp3bits = 3\n        }\n    }\n\n    //% blockId=\"playFolderFile\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playFolderFile(folderNum: string, fileNum: string): void {\n    \n        if (mp3bits > 0) {\n            sendMP3volume(mp3Apin)\n        }\n        if (mp3bits > 1) {\n           // sendMP3volume(mp3Bpin)\n        }\n        if (mp3bits >0) {\n            sendMP3play(folderNum, fileNum, mp3Apin)\n        }\n        if (mp3bits > 1) {\n          //  sendMP3play(folderNum, fileNum, mp3Bpin)\n        }\n    }\n\n    //% blockId=\"playsFor\" \n    //% block=\"Play length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsFor(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        if (mp3bits == 1) {\n            sPin = mp3Apin\n            mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        } else {\n            if (lastMP3bit == \"A\") {\n                    sPin = mp3Bpin\n                    mp3Bvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n                    lastMP3bit = \"B\"\n            } else {\n                sPin = mp3Apin\n                mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n            lastMP3bit = \"A\"\n            }\n        }\n        let theLength = stringParts[3]\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n        return parseFloat(theLength) * 1000 + 20\n    }\n\n    //% blockId=nl_volume_refresh\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume\"\n    export function updateVolume(): void {\n        if (mp3bits > 0) {\n            sendMP3volumeFast(mp3Apin)\n        }\n        if (mp3bits > 1) {\n            sendMP3volumeFast(mp3Bpin)\n        }\n        if (mp3bits > 2) {\n            sendMP3volumeFast(mp3Cpin)\n        }\n    }\n\n\n    //% blockId=\"nl_playsForTwo\" \n    //% block=\"Dual play length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsForTwo(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n\n        mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        mp3Bvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n\n        sendMP3volumeFast(mp3Apin)\n        sendMP3volumeFast(mp3Bpin)\n        \n        basic.pause(20)\n\n        sendMP3play(theFolder, theFile, mp3Apin)\n        sendMP3play(theFolder, theFile, mp3Bpin)\n        \n        return parseFloat(theLength) * 1000 + 20\n    }\n\n\n    //% blockId=\"nl_playsForBackground\" \n    //% block=\"Play in background length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsForBackground(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n        mp3Cvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        sPin = mp3Cpin\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n        return parseFloat(theLength) * 1000 + 20\n    }\n\n\n    //% blockId=\"nl_playBackground\" \n    //% block=\"Play in background:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playBackground(soundString: string): void {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n        mp3Cvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        sPin = mp3Cpin\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n    }\n\n\n    //% blockId=\"nl_backgroundStop\" \n    //% block=\"Stop background sound\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function stopBackgroundSound(): void {\n        serial.redirect(mp3Cpin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 0x16\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    // Nezha - Functions for Pins and Ports\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_Serial(Rjpin: DigitalRJPin): any {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = SerialPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = SerialPin.P2\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.P12:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = SerialPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = SerialPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n\n    // Enum - To Support MP3\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n\n    // Enum - Nezha and Pins\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum mbPin {\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1 (Analog J1)\"\n        P1,\n        //% block=\"P2 (Analog J2)\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8 (J1)\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12 (J2)\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14 (J3)\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16 (J4)\"\n        P16,\n    }\n}\n","pxt.json":"{\n    \"name\": \"NotLegosExt\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"displaySendBuffer.asm\",\n        \"display.ts\",\n        \"planetxbasic.ts\",\n        \"notlegos.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"7.0.42\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n","test.ts":""}},{"timestamp":1726774285141,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"}g^Kh@tsk|1f0]fNt=Se\">digits</variable><variable id=\"x4t~+B8#]@461X;Q^-0c\">sockLights</variable><variable id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights</variable><variable id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</variable></variables><block type=\"pxt-on-start\" x=\"50\" y=\"57\"><statement name=\"HANDLER\"><block type=\"Connected_oledClear\"><next><block type=\"pin_set_audio_pin_enabled\"><value name=\"enabled\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"device_led_enable\"><value name=\"on\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"}g^Kh@tsk|1f0]fNt=Se\">digits</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"grove_tm1637_create\"><field name=\"cPin\">DigitalPin.P7</field><field name=\"dPin\">DigitalPin.P6</field></block></value><next><block type=\"grove_tm1637_display_number\"><value name=\"display\"><block type=\"variables_get\"><field name=\"VAR\" id=\"}g^Kh@tsk|1f0]fNt=Se\">digits</field></block></value><value name=\"num\"><block type=\"sonarbit\"><field name=\"tPin\">DigitalPin.P8</field><field name=\"ePin\">DigitalPin.P9</field><field name=\"distance_unit\">Connected.Distance_Unit_List.Distance_Unit_cm</field></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"grove_tm1637_display_number\"><value name=\"display\"><block type=\"variables_get\"><field name=\"VAR\" id=\"}g^Kh@tsk|1f0]fNt=Se\">digits</field></block></value><value name=\"num\"><block type=\"apds9960_readcolor\"></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"x4t~+B8#]@461X;Q^-0c\">sockLights</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P11</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"x4t~+B8#]@461X;Q^-0c\">sockLights</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Orange</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"x4t~+B8#]@461X;Q^-0c\">sockLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P12</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">18</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Green</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P13</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Red</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"925\" y=\"20\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl2\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">1_1_25_100</field></shadow></value></block></value></block></statement></block><block type=\"device_button_event\" x=\"1466\" y=\"20\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">2_1_1</field></shadow></value></block></value></block></statement></block><block type=\"function_definition\" x=\"1159\" y=\"395\"><mutation name=\"isNearly\" functionid=\"b1Q}-qv~wJN$grhC!ppp\"><arg name=\"reference\" id=\"5nona16w6rbe5o9cs7yri\" type=\"number\"></arg><arg name=\"reading\" id=\"1603v12143812bjzv2he\" type=\"number\"></arg><arg name=\"tolerance\" id=\"huqcis1hoaqr7iq5ev9lm\" type=\"number\"></arg></mutation><field name=\"function_name\">isNearly</field><value name=\"5nona16w6rbe5o9cs7yri\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reference</field></block></value><value name=\"1603v12143812bjzv2he\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reading</field></block></value><value name=\"huqcis1hoaqr7iq5ev9lm\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">tolerance</field></block></value><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_operation\"><field name=\"OP\">AND</field><value name=\"A\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value></block></value><statement name=\"DO0\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></block></value></block></statement><statement name=\"ELSE\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></block></value></block></statement></block></statement></block><block type=\"every_interval\" x=\"348\" y=\"1059\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value><statement name=\"HANDLER\"><block type=\"Connected_showUserNumber\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">2</field></shadow></value><value name=\"n\"><shadow type=\"math_number\"><field name=\"NUM\">20200508</field></shadow><block type=\"Connected_getGesture\"></block></value></block></statement></block></xml>","main.ts":"","README.md":"\n> Open this page at [https://notlegos.github.io/castleresay/](https://notlegos.github.io/castleresay/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/castleresay** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/castleresay** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/soundbank/](https://notlegos.github.io/soundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/soundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/soundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/resoundbank/](https://notlegos.github.io/resoundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/resoundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/resoundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosext/](https://notlegos.github.io/notlegosext/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosext** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosext** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","displaySendBuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n","display.ts":"\n/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#EA5532 icon=\"\\uf110\" block=\"Connected\" blockId=\"PlanetX_Connected\" \n//% groups='[\"LED\", \"Digital\", \"Analog\", \"IIC Port\", \"OLED\", \"7-Seg 4-Dig LED Nixietube\"]'\nnamespace Connected {\n    ////////////////////////////////TM 1637/////////////////\n    let TM1637_CMD1 = 0x40;\n    let TM1637_CMD2 = 0xC0;\n    let TM1637_CMD3 = 0x80;\n    let _SEGMENTS = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];\n    /////////////////////OLED///////////////////////////////\n    let firstoledinit = true\n    const basicFont: string[] = [\n        \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", // \" \"\n        \"\\x00\\x00\\x5F\\x00\\x00\\x00\\x00\\x00\", // \"!\"\n        \"\\x00\\x00\\x07\\x00\\x07\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x14\\x7F\\x14\\x7F\\x14\\x00\\x00\", // \"#\"\n        \"\\x00\\x24\\x2A\\x7F\\x2A\\x12\\x00\\x00\", // \"$\"\n        \"\\x00\\x23\\x13\\x08\\x64\\x62\\x00\\x00\", // \"%\"\n        \"\\x00\\x36\\x49\\x55\\x22\\x50\\x00\\x00\", // \"&\"\n        \"\\x00\\x00\\x05\\x03\\x00\\x00\\x00\\x00\", // \"'\"\n        \"\\x00\\x1C\\x22\\x41\\x00\\x00\\x00\\x00\", // \"(\"\n        \"\\x00\\x41\\x22\\x1C\\x00\\x00\\x00\\x00\", // \")\"\n        \"\\x00\\x08\\x2A\\x1C\\x2A\\x08\\x00\\x00\", // \"*\"\n        \"\\x00\\x08\\x08\\x3E\\x08\\x08\\x00\\x00\", // \"+\"\n        \"\\x00\\xA0\\x60\\x00\\x00\\x00\\x00\\x00\", // \",\"\n        \"\\x00\\x08\\x08\\x08\\x08\\x08\\x00\\x00\", // \"-\"\n        \"\\x00\\x60\\x60\\x00\\x00\\x00\\x00\\x00\", // \".\"\n        \"\\x00\\x20\\x10\\x08\\x04\\x02\\x00\\x00\", // \"/\"\n        \"\\x00\\x3E\\x51\\x49\\x45\\x3E\\x00\\x00\", // \"0\"\n        \"\\x00\\x00\\x42\\x7F\\x40\\x00\\x00\\x00\", // \"1\"\n        \"\\x00\\x62\\x51\\x49\\x49\\x46\\x00\\x00\", // \"2\"\n        \"\\x00\\x22\\x41\\x49\\x49\\x36\\x00\\x00\", // \"3\"\n        \"\\x00\\x18\\x14\\x12\\x7F\\x10\\x00\\x00\", // \"4\"\n        \"\\x00\\x27\\x45\\x45\\x45\\x39\\x00\\x00\", // \"5\"\n        \"\\x00\\x3C\\x4A\\x49\\x49\\x30\\x00\\x00\", // \"6\"\n        \"\\x00\\x01\\x71\\x09\\x05\\x03\\x00\\x00\", // \"7\"\n        \"\\x00\\x36\\x49\\x49\\x49\\x36\\x00\\x00\", // \"8\"\n        \"\\x00\\x06\\x49\\x49\\x29\\x1E\\x00\\x00\", // \"9\"\n        \"\\x00\\x00\\x36\\x36\\x00\\x00\\x00\\x00\", // \":\"\n        \"\\x00\\x00\\xAC\\x6C\\x00\\x00\\x00\\x00\", // \";\"\n        \"\\x00\\x08\\x14\\x22\\x41\\x00\\x00\\x00\", // \"<\"\n        \"\\x00\\x14\\x14\\x14\\x14\\x14\\x00\\x00\", // \"=\"\n        \"\\x00\\x41\\x22\\x14\\x08\\x00\\x00\\x00\", // \">\"\n        \"\\x00\\x02\\x01\\x51\\x09\\x06\\x00\\x00\", // \"?\"\n        \"\\x00\\x32\\x49\\x79\\x41\\x3E\\x00\\x00\", // \"@\"\n        \"\\x00\\x7E\\x09\\x09\\x09\\x7E\\x00\\x00\", // \"A\"\n        \"\\x00\\x7F\\x49\\x49\\x49\\x36\\x00\\x00\", // \"B\"\n        \"\\x00\\x3E\\x41\\x41\\x41\\x22\\x00\\x00\", // \"C\"\n        \"\\x00\\x7F\\x41\\x41\\x22\\x1C\\x00\\x00\", // \"D\"\n        \"\\x00\\x7F\\x49\\x49\\x49\\x41\\x00\\x00\", // \"E\"\n        \"\\x00\\x7F\\x09\\x09\\x09\\x01\\x00\\x00\", // \"F\"\n        \"\\x00\\x3E\\x41\\x41\\x51\\x72\\x00\\x00\", // \"G\"\n        \"\\x00\\x7F\\x08\\x08\\x08\\x7F\\x00\\x00\", // \"H\"\n        \"\\x00\\x41\\x7F\\x41\\x00\\x00\\x00\\x00\", // \"I\"\n        \"\\x00\\x20\\x40\\x41\\x3F\\x01\\x00\\x00\", // \"J\"\n        \"\\x00\\x7F\\x08\\x14\\x22\\x41\\x00\\x00\", // \"K\"\n        \"\\x00\\x7F\\x40\\x40\\x40\\x40\\x00\\x00\", // \"L\"\n        \"\\x00\\x7F\\x02\\x0C\\x02\\x7F\\x00\\x00\", // \"M\"\n        \"\\x00\\x7F\\x04\\x08\\x10\\x7F\\x00\\x00\", // \"N\"\n        \"\\x00\\x3E\\x41\\x41\\x41\\x3E\\x00\\x00\", // \"O\"\n        \"\\x00\\x7F\\x09\\x09\\x09\\x06\\x00\\x00\", // \"P\"\n        \"\\x00\\x3E\\x41\\x51\\x21\\x5E\\x00\\x00\", // \"Q\"\n        \"\\x00\\x7F\\x09\\x19\\x29\\x46\\x00\\x00\", // \"R\"\n        \"\\x00\\x26\\x49\\x49\\x49\\x32\\x00\\x00\", // \"S\"\n        \"\\x00\\x01\\x01\\x7F\\x01\\x01\\x00\\x00\", // \"T\"\n        \"\\x00\\x3F\\x40\\x40\\x40\\x3F\\x00\\x00\", // \"U\"\n        \"\\x00\\x1F\\x20\\x40\\x20\\x1F\\x00\\x00\", // \"V\"\n        \"\\x00\\x3F\\x40\\x38\\x40\\x3F\\x00\\x00\", // \"W\"\n        \"\\x00\\x63\\x14\\x08\\x14\\x63\\x00\\x00\", // \"X\"\n        \"\\x00\\x03\\x04\\x78\\x04\\x03\\x00\\x00\", // \"Y\"\n        \"\\x00\\x61\\x51\\x49\\x45\\x43\\x00\\x00\", // \"Z\"\n        \"\\x00\\x7F\\x41\\x41\\x00\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x02\\x04\\x08\\x10\\x20\\x00\\x00\", // \"\\\"\n        \"\\x00\\x41\\x41\\x7F\\x00\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x04\\x02\\x01\\x02\\x04\\x00\\x00\", // \"^\"\n        \"\\x00\\x80\\x80\\x80\\x80\\x80\\x00\\x00\", // \"_\"\n        \"\\x00\\x01\\x02\\x04\\x00\\x00\\x00\\x00\", // \"`\"\n        \"\\x00\\x20\\x54\\x54\\x54\\x78\\x00\\x00\", // \"a\"\n        \"\\x00\\x7F\\x48\\x44\\x44\\x38\\x00\\x00\", // \"b\"\n        \"\\x00\\x38\\x44\\x44\\x28\\x00\\x00\\x00\", // \"c\"\n        \"\\x00\\x38\\x44\\x44\\x48\\x7F\\x00\\x00\", // \"d\"\n        \"\\x00\\x38\\x54\\x54\\x54\\x18\\x00\\x00\", // \"e\"\n        \"\\x00\\x08\\x7E\\x09\\x02\\x00\\x00\\x00\", // \"f\"\n        \"\\x00\\x18\\xA4\\xA4\\xA4\\x7C\\x00\\x00\", // \"g\"\n        \"\\x00\\x7F\\x08\\x04\\x04\\x78\\x00\\x00\", // \"h\"\n        \"\\x00\\x00\\x7D\\x00\\x00\\x00\\x00\\x00\", // \"i\"\n        \"\\x00\\x80\\x84\\x7D\\x00\\x00\\x00\\x00\", // \"j\"\n        \"\\x00\\x7F\\x10\\x28\\x44\\x00\\x00\\x00\", // \"k\"\n        \"\\x00\\x41\\x7F\\x40\\x00\\x00\\x00\\x00\", // \"l\"\n        \"\\x00\\x7C\\x04\\x18\\x04\\x78\\x00\\x00\", // \"m\"\n        \"\\x00\\x7C\\x08\\x04\\x7C\\x00\\x00\\x00\", // \"n\"\n        \"\\x00\\x38\\x44\\x44\\x38\\x00\\x00\\x00\", // \"o\"\n        \"\\x00\\xFC\\x24\\x24\\x18\\x00\\x00\\x00\", // \"p\"\n        \"\\x00\\x18\\x24\\x24\\xFC\\x00\\x00\\x00\", // \"q\"\n        \"\\x00\\x00\\x7C\\x08\\x04\\x00\\x00\\x00\", // \"r\"\n        \"\\x00\\x48\\x54\\x54\\x24\\x00\\x00\\x00\", // \"s\"\n        \"\\x00\\x04\\x7F\\x44\\x00\\x00\\x00\\x00\", // \"t\"\n        \"\\x00\\x3C\\x40\\x40\\x7C\\x00\\x00\\x00\", // \"u\"\n        \"\\x00\\x1C\\x20\\x40\\x20\\x1C\\x00\\x00\", // \"v\"\n        \"\\x00\\x3C\\x40\\x30\\x40\\x3C\\x00\\x00\", // \"w\"\n        \"\\x00\\x44\\x28\\x10\\x28\\x44\\x00\\x00\", // \"x\"\n        \"\\x00\\x1C\\xA0\\xA0\\x7C\\x00\\x00\\x00\", // \"y\"\n        \"\\x00\\x44\\x64\\x54\\x4C\\x44\\x00\\x00\", // \"z\"\n        \"\\x00\\x08\\x36\\x41\\x00\\x00\\x00\\x00\", // \"{\"\n        \"\\x00\\x00\\x7F\\x00\\x00\\x00\\x00\\x00\", // \"|\"\n        \"\\x00\\x41\\x36\\x08\\x00\\x00\\x00\\x00\", // \"}\"\n        \"\\x00\\x02\\x01\\x01\\x02\\x01\\x00\\x00\"  // \"~\"\n    ];\n    function oledcmd(c: number) {\n        pins.i2cWriteNumber(0x3c, c, NumberFormat.UInt16BE);\n    }\n    function writeData(n: number) {\n        let b = n;\n        if (n < 0) { n = 0 }\n        if (n > 255) { n = 255 }\n        pins.i2cWriteNumber(0x3c, 0x4000 + b, NumberFormat.UInt16BE);\n    }\n    function writeCustomChar(c: string) {\n        for (let i = 0; i < 8; i++) {\n            writeData(c.charCodeAt(i));\n        }\n    }\n    function setText(row: number, column: number) {\n        let r = row;\n        let c = column;\n        if (row < 0) { r = 0 }\n        if (column < 0) { c = 0 }\n        if (row > 7) { r = 7 }\n        if (column > 15) { c = 15 }\n        oledcmd(0xB0 + r);            //set page address\n        oledcmd(0x00 + (8 * c & 0x0F));  //set column lower address\n        oledcmd(0x10 + ((8 * c >> 4) & 0x0F));   //set column higher address\n    }\n    function putChar(c: string) {\n        let c1 = c.charCodeAt(0);\n        writeCustomChar(basicFont[c1 - 32]);\n    }\n    function oledinit(): void {\n        oledcmd(0xAE);  // Set display OFF\n        oledcmd(0xD5);  // Set Display Clock Divide Ratio / OSC Frequency 0xD4\n        oledcmd(0x80);  // Display Clock Divide Ratio / OSC Frequency \n        oledcmd(0xA8);  // Set Multiplex Ratio\n        oledcmd(0x3F);  // Multiplex Ratio for 128x64 (64-1)\n        oledcmd(0xD3);  // Set Display Offset\n        oledcmd(0x00);  // Display Offset\n        oledcmd(0x40);  // Set Display Start Line\n        oledcmd(0x8D);  // Set Charge Pump\n        oledcmd(0x14);  // Charge Pump (0x10 External, 0x14 Internal DC/DC)\n        oledcmd(0xA1);  // Set Segment Re-Map\n        oledcmd(0xC8);  // Set Com Output Scan Direction\n        oledcmd(0xDA);  // Set COM Hardware Configuration\n        oledcmd(0x12);  // COM Hardware Configuration\n        oledcmd(0x81);  // Set Contrast\n        oledcmd(0xCF);  // Contrast\n        oledcmd(0xD9);  // Set Pre-Charge Period\n        oledcmd(0xF1);  // Set Pre-Charge Period (0x22 External, 0xF1 Internal)\n        oledcmd(0xDB);  // Set VCOMH Deselect Level\n        oledcmd(0x40);  // VCOMH Deselect Level\n        oledcmd(0xA4);  // Set all pixels OFF\n        oledcmd(0xA6);  // Set display not inverted\n        oledcmd(0xAF);  // Set display On\n        oledClear();\n    }\n\n    ///////////////////////////////enum\n\n\n    export enum NeoPixelColors {\n        //% block=red\n        Red = 0xFF0000,\n        //% block=orange\n        Orange = 0xFFA500,\n        //% block=yellow\n        Yellow = 0xFFFF00,\n        //% block=green\n        Green = 0x00FF00,\n        //% block=blue\n        Blue = 0x0000FF,\n        //% block=indigo\n        Indigo = 0x4b0082,\n        //% block=violet\n        Violet = 0x8a2be2,\n        //% block=purple\n        Purple = 0xFF00FF,\n        //% block=white\n        White = 0xFFFFFF,\n        //% block=black\n        Black = 0x000000\n    }\n\n    /**\n     * Different modes for RGB or RGB+W NeoPixel strips\n     */\n    export enum NeoPixelMode {\n        //% block=\"RGB (GRB format)\"\n        RGB = 0,\n        //% block=\"RGB+W\"\n        RGBW = 1,\n        //% block=\"RGB (RGB format)\"\n        RGB_RGB = 2\n    }\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n    /////////////////////////////User_function//////////////////\n\n    //% line.min=1 line.max=8 line.defl=1\n    //% text.defl=\"Hello,ELECFREAKS\"\n    //% block=\"OLED show line %line|text %text\"\n    //% subcategory=Display group=\"OLED\" color=#00B1ED\n    export function showUserText(line: number, text: string) {\n        if (firstoledinit) {\n            oledinit()\n            firstoledinit = false\n        }\n        if (text.length > 16) {\n            text = text.substr(0, 16)\n        }\n        line = line - 1\n        setText(line, 0);\n        for (let c of text) {\n            putChar(c);\n        }\n\n        for (let i = text.length; i < 16; i++) {\n            setText(line, i);\n            putChar(\" \");\n        }\n    }\n    //% line.min=1 line.max=8 line.defl=2 \n    //% n.defl=20200508\n    //% block=\"OLED show line %line|number %n\"\n    //% subcategory=Display group=\"OLED\" color=#00B1ED\n    export function showUserNumber(line: number, n: number) {\n        if (firstoledinit) {\n            oledinit()\n            firstoledinit = false\n        }\n        showUserText(line, \"\" + n)\n    }\n    //% block=\"clear display\" color=#00B1ED\n    //% subcategory=Display group=\"OLED\"\n    export function oledClear() {\n        //oledcmd(DISPLAY_OFF);   //display off\n        for (let j = 0; j < 8; j++) {\n            setText(j, 0);\n            {\n                for (let i = 0; i < 16; i++)  //clear all columns\n                {\n                    putChar(' ');\n                }\n            }\n        }\n        //oledcmd(DISPLAY_ON);    //display on\n        setText(0, 0);\n    }\n    /**\n   * Create a new driver Grove - 4-Digit Display\n   * @param clkPin value of clk pin number\n   * @param dataPin value of data pin number\n   */\n    //% blockId=grove_tm1637_create block=\"connect 4-Digit cPin %cPin dPin %dPin\"\n    //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" blockSetVariable=display color=#EA5532\n    export function tm1637Create(cPin: DigitalPin, dPin: DigitalPin, intensity: number = 7, count: number = 4): TM1637LEDs {\n        let display = new TM1637LEDs();\n        display.clk = cPin\n        display.dio = dPin\n        if ((count < 1) || (count > 5)) count = 4;\n        display.count = count;\n        display.brightness = intensity;\n        display.init();\n        return display;\n    }\n    export class TM1637LEDs {\n        buf: Buffer;\n        clk: DigitalPin;\n        dio: DigitalPin;\n        _ON: number;\n        brightness: number;\n        count: number;  // number of LEDs\n        /**\n         * initial TM1637\n         */\n        init(): void {\n            pins.digitalWritePin(this.clk, 0);\n            pins.digitalWritePin(this.dio, 0);\n            this._ON = 8;\n            this.buf = pins.createBuffer(this.count);\n            this.clear();\n        }\n        /**\n         * Start \n         */\n        _start() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        /**\n         * Stop\n         */\n        _stop() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.dio, 1);\n        }\n        /**\n         * send command1\n         */\n        _write_data_cmd() {\n            this._start();\n            this._write_byte(TM1637_CMD1);\n            this._stop();\n        }\n        /**\n         * send command3\n         */\n        _write_dsp_ctrl() {\n            this._start();\n            this._write_byte(TM1637_CMD3 | this._ON | this.brightness);\n            this._stop();\n        }\n        /**\n         * send a byte to 2-wire interface\n         */\n        _write_byte(b: number) {\n            for (let i = 0; i < 8; i++) {\n                pins.digitalWritePin(this.dio, (b >> i) & 1);\n                pins.digitalWritePin(this.clk, 1);\n                pins.digitalWritePin(this.clk, 0);\n            }\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _intensity(val: number = 7) {\n            this._ON = 8;\n            this.brightness = val - 1;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n        /**\n         * set data to TM1637, with given bit\n         */\n        _dat(bit: number, dat: number) {\n            this._write_data_cmd();\n            this._start();\n            this._write_byte(TM1637_CMD2 | (bit % this.count))\n            this._write_byte(dat);\n            this._stop();\n            this._write_dsp_ctrl();\n        }\n        /**\n         * Show a single number from 0 to 9 at a specified digit of Grove - 4-Digit Display\n         * @param dispData value of number\n         * @param bitAddr value of bit number\n         */\n        //% blockId=grove_tm1637_display_bit block=\"%display|show single number|%num|at digit|%bit\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        //% bit.defl=1 bit.min=0 bit.max=9\n        showbit(num: number = 5, bit: number = 0) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            this.buf[bit % this.count] = _SEGMENTS[num % 16]\n            this._dat(bit, _SEGMENTS[num % 16])\n        }\n        /**\n         * Show a 4 digits number on display\n         * @param dispData value of number\n         */\n        //% blockId=grove_tm1637_display_number block=\"%display|show number|%num\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        showNumber(num: number) {\n            if (num < 0) {\n                num = -num\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n                this._dat(0, 0x40) // '-'\n            }\n            else {\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n            }\n        }\n        /**\n         * show or hide dot point. \n         * @param bit is the position, eg: 1\n         * @param show is show/hide dp, eg: true\n         */\n        //% blockId=\"TM1637_showDP\" block=\"%display|DotPoint at %bit|show $show\"\n        //% show.shadow=\"toggleOnOff\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        showDP(bit: number = 1, show: boolean = true) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            bit = bit % this.count\n            if (show) this._dat(bit, this.buf[bit] | 0x80)\n            else this._dat(bit, this.buf[bit] & 0x7F)\n        }\n        /**\n         * clear LED. \n         */\n        //% blockId=\"TM1637_clear\" block=\"clear display %display\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        clear() {\n            for (let i = 0; i < this.count; i++) {\n                this._dat(i, 0)\n                this.buf[i] = 0\n            }\n        }\n    }\n    //% shim=sendBufferAsm\n    function sendBuffer(buf: Buffer, pin: DigitalPin) {\n    }\n    export class Strip {\n        buf: Buffer;\n        pin: DigitalPin;\n        // TODO: encode as bytes instead of 32bit\n        brightness: number;\n        start: number; // start offset in LED strip\n        _length: number; // number of LEDs\n        _mode: NeoPixelMode;\n        _matrixWidth: number; // number of leds in a matrix - if any\n\n        /**\n         * Shows all LEDs to a given color (range 0-255 for r, g, b).\n         * @param rgb RGB color of the LED\n         */\n        //% blockId=\"neopixel_set_strip_color\" block=\"%strip|show color %rgb=neopixel_colors\"\n        //% weight=85 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        showColor(rgb: number) {\n            rgb = rgb >> 0;\n            this.setAllRGB(rgb);\n            this.show();\n        }\n\n        /**\n         * Shows a rainbow pattern on all LEDs.\n         * @param startHue the start hue value for the rainbow, eg: 1\n         * @param endHue the end hue value for the rainbow, eg: 360\n         */\n        //% blockId=\"neopixel_set_strip_rainbow\" block=\"%strip|show rainbow from %startHue|to %endHue\"\n        //% weight=85 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        showRainbow(startHue: number = 1, endHue: number = 360) {\n            if (this._length <= 0) return;\n\n            startHue = startHue >> 0;\n            endHue = endHue >> 0;\n            const saturation = 100;\n            const luminance = 50;\n            const steps = this._length;\n            const direction = HueInterpolationDirection.Clockwise;\n\n            //hue\n            const h1 = startHue;\n            const h2 = endHue;\n            const hDistCW = ((h2 + 360) - h1) % 360;\n            const hStepCW = Math.idiv((hDistCW * 100), steps);\n            const hDistCCW = ((h1 + 360) - h2) % 360;\n            const hStepCCW = Math.idiv(-(hDistCCW * 100), steps);\n            let hStep: number;\n            if (direction === HueInterpolationDirection.Clockwise) {\n                hStep = hStepCW;\n            } else if (direction === HueInterpolationDirection.CounterClockwise) {\n                hStep = hStepCCW;\n            } else {\n                hStep = hDistCW < hDistCCW ? hStepCW : hStepCCW;\n            }\n            const h1_100 = h1 * 100; //we multiply by 100 so we keep more accurate results while doing interpolation\n\n            //sat\n            const s1 = saturation;\n            const s2 = saturation;\n            const sDist = s2 - s1;\n            const sStep = Math.idiv(sDist, steps);\n            const s1_100 = s1 * 100;\n\n            //lum\n            const l1 = luminance;\n            const l2 = luminance;\n            const lDist = l2 - l1;\n            const lStep = Math.idiv(lDist, steps);\n            const l1_100 = l1 * 100\n\n            //interpolate\n            if (steps === 1) {\n                this.setPixelColor(0, hsl(h1 + hStep, s1 + sStep, l1 + lStep))\n            } else {\n                this.setPixelColor(0, hsl(startHue, saturation, luminance));\n                for (let i = 1; i < steps - 1; i++) {\n                    const h = Math.idiv((h1_100 + i * hStep), 100) + 360;\n                    const s = Math.idiv((s1_100 + i * sStep), 100);\n                    const l = Math.idiv((l1_100 + i * lStep), 100);\n                    this.setPixelColor(i, hsl(h, s, l));\n                }\n                this.setPixelColor(steps - 1, hsl(endHue, saturation, luminance));\n            }\n            this.show();\n        }\n\n        /**\n         * Set LED to a given color (range 0-255 for r, g, b).\n         * You need to call ``show`` to make the changes visible.\n         * @param pixeloffset position of the NeoPixel in the strip\n         * @param rgb RGB color of the LED\n         */\n        //% blockId=\"neopixel_set_pixel_color\" block=\"%strip|set pixel color at %pixeloffset|to %rgb=neopixel_colors\"\n        //% weight=80 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setPixelColor(pixeloffset: number, rgb: number): void {\n            this.setPixelRGB(pixeloffset >> 0, rgb >> 0);\n        }\n\n        /**\n         * Send all the changes to the strip.\n         */\n        //% blockId=\"neopixel_show\" block=\"%strip|show\" \n        //% weight=79\n        //% parts=\"neopixel\" subcategory=Neopixel\n        show() {\n            sendBuffer(this.buf, this.pin);\n        }\n\n        /**\n         * Turn off all LEDs.\n         * You need to call ``show`` to make the changes visible.\n         */\n        //% blockId=\"neopixel_clear\" block=\"%strip|clear\"\n        //% weight=76 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        clear(): void {\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.fill(0, this.start * stride, this._length * stride);\n        }\n\n        /**\n         * Set the brightness of the strip. This flag only applies to future operation.\n         * @param brightness a measure of LED brightness in 0-255. eg: 255\n         */\n        //% blockId=\"neopixel_set_brightness\" block=\"%strip|set brightness %brightness\" \n        //% weight=59 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setBrightness(brightness: number): void {\n            this.brightness = brightness & 0xff;\n        }\n        /**\n         * Gets the number of pixels declared on the strip\n         */\n        //% blockId=\"neopixel_length\" block=\"%strip|length\" blockGap=8\n        //% subcategory=\"Neopixel\"\n        //% weight=60 advanced=true\n        length() {\n            return this._length;\n        }\n        /**\n         * Create a range of LEDs.\n         * @param start offset in the LED strip to start the range\n         * @param length number of LEDs in the range. eg: 4\n         */\n        //% weight=89 color=#EA5532\n        //% blockId=\"neopixel_range\" block=\"%strip|range from %start|with %length|leds\"\n        //% parts=\"neopixel\"\n        //% blockSetVariable=range subcategory=Neopixel\n        range(start: number, length: number): Strip {\n            start = start >> 0;\n            length = length >> 0;\n            let strip = new Strip();\n            strip.buf = this.buf;\n            strip.pin = this.pin;\n            strip.brightness = this.brightness;\n            strip.start = this.start + Math.clamp(0, this._length - 1, start);\n            strip._length = Math.clamp(0, this._length - (strip.start - this.start), length);\n            strip._matrixWidth = 0;\n            strip._mode = this._mode;\n            return strip;\n        }\n\n        /**\n         * Shift LEDs forward and clear with zeros.\n         * You need to call ``show`` to make the changes visible.\n         * @param offset number of pixels to shift forward, eg: 1\n         */\n        //% blockId=\"neopixel_shift\" block=\"%strip|shift pixels by %offset\" \n        //% weight=40 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        shift(offset: number = 1): void {\n            offset = offset >> 0;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.shift(-offset * stride, this.start * stride, this._length * stride)\n        }\n\n        /**\n         * Rotate LEDs forward.\n         * You need to call ``show`` to make the changes visible.\n         * @param offset number of pixels to rotate forward, eg: 1\n         */\n        //% blockId=\"neopixel_rotate\" block=\"%strip|rotate pixels by %offset\" \n        //% weight=39 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        rotate(offset: number = 1): void {\n            offset = offset >> 0;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.rotate(-offset * stride, this.start * stride, this._length * stride)\n        }\n\n        /**\n         * Set the pin where the neopixel is connected, defaults to P0.\n         */\n        //% weight=10 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setPin(pin: DigitalPin): void {\n            this.pin = pin;\n            pins.digitalWritePin(this.pin, 0);\n            // don't yield to avoid races on initialization\n        }\n\n        private setBufferRGB(offset: number, red: number, green: number, blue: number): void {\n            if (this._mode === NeoPixelMode.RGB_RGB) {\n                this.buf[offset + 0] = red;\n                this.buf[offset + 1] = green;\n            } else {\n                this.buf[offset + 0] = green;\n                this.buf[offset + 1] = red;\n            }\n            this.buf[offset + 2] = blue;\n        }\n\n        private setAllRGB(rgb: number) {\n            let red = unpackR(rgb);\n            let green = unpackG(rgb);\n            let blue = unpackB(rgb);\n\n            const br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            const end = this.start + this._length;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            for (let i = this.start; i < end; ++i) {\n                this.setBufferRGB(i * stride, red, green, blue)\n            }\n        }\n        private setPixelRGB(pixeloffset: number, rgb: number): void {\n            if (pixeloffset < 0\n                || pixeloffset >= this._length)\n                return;\n\n            let stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            pixeloffset = (pixeloffset + this.start) * stride;\n\n            let red = unpackR(rgb);\n            let green = unpackG(rgb);\n            let blue = unpackB(rgb);\n\n            let br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            this.setBufferRGB(pixeloffset, red, green, blue)\n        }\n\n    }\n\n    /**\n     * Create a new NeoPixel driver for `numleds` LEDs.\n     * @param pin the pin where the neopixel is connected.\n     * @param numleds number of leds in the strip, eg: 24,30,60,64\n     */\n    //% blockId=\"neopixel_create\" block=\"NeoPixel at pin %Rjpin|with %numleds|leds as %mode\"\n    //% weight=90 color=#EA5532\n    //% parts=\"neopixel\"\n    //% trackArgs=0,2\n    //% blockSetVariable=strip subcategory=Neopixel\n    export function create(Rjpin: DigitalRJPin, numleds: number, mode: NeoPixelMode): Strip {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        let strip = new Strip();\n        let stride = mode === NeoPixelMode.RGBW ? 4 : 3;\n        strip.buf = pins.createBuffer(numleds * stride);\n        strip.start = 0;\n        strip._length = numleds;\n        strip._mode = mode;\n        strip._matrixWidth = 0;\n        strip.setBrightness(50)\n        strip.setPin(pin)\n        return strip;\n    }\n\n    /**\n     * Converts red, green, blue channels into a RGB color\n     * @param red value of the red channel between 0 and 255. eg: 255\n     * @param green value of the green channel between 0 and 255. eg: 255\n     * @param blue value of the blue channel between 0 and 255. eg: 255\n     */\n    //% weight=1 subcategory=Neopixel color=#EA5532\n    //% blockId=\"neopixel_rgb\" block=\"red %red|green %green|blue %blue\"\n    export function rgb(red: number, green: number, blue: number): number {\n        return packRGB(red, green, blue);\n    }\n\n    /**\n     * Gets the RGB value of a known color\n    */\n    //% weight=2 subcategory=Neopixel color=#EA5532\n    //% blockId=\"neopixel_colors\" block=\"%color\"\n    export function colors(color: NeoPixelColors): number {\n        return color;\n    }\n\n    function packRGB(a: number, b: number, c: number): number {\n        return ((a & 0xFF) << 16) | ((b & 0xFF) << 8) | (c & 0xFF);\n    }\n    function unpackR(rgb: number): number {\n        let r = (rgb >> 16) & 0xFF;\n        return r;\n    }\n    function unpackG(rgb: number): number {\n        let g = (rgb >> 8) & 0xFF;\n        return g;\n    }\n    function unpackB(rgb: number): number {\n        let b = (rgb) & 0xFF;\n        return b;\n    }\n\n    /**\n     * Converts a hue saturation luminosity value into a RGB color\n     * @param h hue from 0 to 360\n     * @param s saturation from 0 to 99\n     * @param l luminosity from 0 to 99\n     */\n    //% blockId=neopixelHSL block=\"hue %h|saturation %s|luminosity %l\" subcategory=Neopixel color=#EA5532\n    export function hsl(h: number, s: number, l: number): number {\n        h = Math.round(h);\n        s = Math.round(s);\n        l = Math.round(l);\n\n        h = h % 360;\n        s = Math.clamp(0, 99, s);\n        l = Math.clamp(0, 99, l);\n        let c = Math.idiv((((100 - Math.abs(2 * l - 100)) * s) << 8), 10000); //chroma, [0,255]\n        let h1 = Math.idiv(h, 60);//[0,6]\n        let h2 = Math.idiv((h - h1 * 60) * 256, 60);//[0,255]\n        let temp = Math.abs((((h1 % 2) << 8) + h2) - 256);\n        let x = (c * (256 - (temp))) >> 8;//[0,255], second largest component of this color\n        let r$:\n            number;\n        let g$:\n            number;\n        let b$:\n            number;\n        if (h1 == 0) {\n            r$ = c;\n            g$ = x;\n            b$ = 0;\n        }\n        else if (h1 == 1) {\n            r$ = x;\n            g$ = c;\n            b$ = 0;\n        }\n        else if (h1 == 2) {\n            r$ = 0;\n            g$ = c;\n            b$ = x;\n        }\n        else if (h1 == 3) {\n            r$ = 0;\n            g$ = x;\n            b$ = c;\n        }\n        else if (h1 == 4) {\n            r$ = x;\n            g$ = 0;\n            b$ = c;\n        }\n        else if (h1 == 5) {\n            r$ = c;\n            g$ = 0;\n            b$ = x;\n        }\n        let m = Math.idiv((Math.idiv((l * 2 << 8), 100) - c), 2);\n        let r = r$ + m;\n        let g = g$ + m;\n        let b = b$ + m;\n        return packRGB(r, g, b);\n    }\n\n    export enum HueInterpolationDirection {\n        Clockwise,\n        CounterClockwise,\n        Shortest\n    }\n}\n","planetxbasic.ts":"/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#00B1ED  icon=\"\\uf005\" block=\"Connected\" blockId=\"PlanetX_Connected\"\n//% groups='[\"Digital\", \"Analog\", \"IIC Port\"]'\nnamespace Connected {\n    \n    ////////////////////////paj7620//////////////////////\n    let gesture_first_init = true\n    const initRegisterArray: number[] = [\n        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17,\n        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F,\n        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14,\n        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27,\n        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01,\n        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00,\n        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20,\n        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37,\n        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A,\n        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F,\n        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30,\n        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19,\n        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04,\n        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00,\n        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00,\n        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F,\n        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07,\n        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01,\n        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F,\n        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01,\n        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40,\n        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E,\n        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00,\n        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08,\n        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00,\n        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01,\n        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01,\n        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01\n    ];\n    \n    /////////////////////////color/////////////////////////\n    const APDS9960_ADDR = 0x39\n    const APDS9960_ENABLE = 0x80\n    const APDS9960_ATIME = 0x81\n    const APDS9960_CONTROL = 0x8F\n    const APDS9960_STATUS = 0x93\n    const APDS9960_CDATAL = 0x94\n    const APDS9960_CDATAH = 0x95\n    const APDS9960_RDATAL = 0x96\n    const APDS9960_RDATAH = 0x97\n    const APDS9960_GDATAL = 0x98\n    const APDS9960_GDATAH = 0x99\n    const APDS9960_BDATAL = 0x9A\n    const APDS9960_BDATAH = 0x9B\n    const APDS9960_GCONF4 = 0xAB\n    const APDS9960_AICLEAR = 0xE7\n    let color_first_init = false\n\n    function i2cwrite_color(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n    function i2cread_color(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n    function rgb2hsl(color_r: number, color_g: number, color_b: number): number {\n        let Hue = 0\n        let R = color_r * 100 / 255;\n        let G = color_g * 100 / 255;\n        let B = color_b * 100 / 255;\n        let maxVal = Math.max(R, Math.max(G, B))\n        let minVal = Math.min(R, Math.min(G, B))\n        let Delta = maxVal - minVal;\n\n        if (Delta < 0) {\n            Hue = 0;\n        }\n        else if (maxVal == R && G >= B) {\n            Hue = (60 * ((G - B) * 100 / Delta)) / 100;\n        }\n        else if (maxVal == R && G < B) {\n            Hue = (60 * ((G - B) * 100 / Delta) + 360 * 100) / 100;\n        }\n        else if (maxVal == G) {\n            Hue = (60 * ((B - R) * 100 / Delta) + 120 * 100) / 100;\n        }\n        else if (maxVal == B) {\n            Hue = (60 * ((R - G) * 100 / Delta) + 240 * 100) / 100;\n        }\n        return Hue\n    }\n    function initModule(): void {\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ATIME, 252)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_CONTROL, 0x03)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_GCONF4, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_AICLEAR, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x01)\n        color_first_init = true\n    }\n    function colorMode(): void {\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_ENABLE) | 0x2;\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, tmp);\n    }\n\n    ///////////////////////////////////////////////////////MP3\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    /*\n    * Play status selection button list\n    */\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(100)\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,        \n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum Distance_Unit_List {\n        //% block=\"cm\" \n        Distance_Unit_cm,\n\n        //% block=\"foot\"\n        Distance_Unit_foot,\n    }\n    export enum ButtonStateList {\n        //% block=\"C\"\n        C,\n        //% block=\"D\"\n        D,\n        //% block=\"C+D\"\n        CD\n    }\n    export enum GestureType {\n        //% block=\"None\"\n        None = 0,\n        //% block=\"Right\"\n        Right = 1,\n        //% block=\"Left\"\n        Left = 2,\n        //% block=\"Up\"\n        Up = 3,\n        //% block=\"Down\"\n        Down = 4,\n        //% block=\"Forward\"\n        Forward = 5,\n        //% block=\"Backward\"\n        Backward = 6,\n        //% block=\"Clockwise\"\n        Clockwise = 7,\n        //% block=\"Anticlockwise\"\n        Anticlockwise = 8,\n        //% block=\"Wave\"\n        Wave = 9\n    }\n    export enum ColorList {\n        //% block=\"Red\"\n        red,\n        //% block=\"Green\"\n        green,\n        //% block=\"Blue\"\n        blue,\n        //% block=\"Cyan\"\n        cyan,\n        //% block=\"Magenta\"\n        magenta,\n        //% block=\"Yellow\"\n        yellow,\n        //% block=\"White\"\n        white\n    }\n\n    ///////////////////////////////////blocks/////////////////////////////\n\n    //% blockId=\"readwaterLevel\" block=\"Water level sensor %Rjpin value(0~100)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function waterLevel(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let voltage = 0, waterlevel = 0;\n        voltage = pins.map(\n            pins.analogReadPin(pin),\n            50,\n            600,\n            0,\n            100\n        );\n        if (voltage < 0) {\n            voltage = 0\n        }\n        waterlevel = voltage;\n        return Math.round(waterlevel)\n    }\n\n    let distance_last = 0\n\n    //% blockId=sonarbit block=\"Ultrasonic sensor pinT %tPin pinE %ePin distance %distance_unit\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% distance_unit.fieldEditor=\"gridpicker\"\n    //% distance_unit.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function ultrasoundSensor(tPin: DigitalPin, ePin: DigitalPin, distance_unit: Distance_Unit_List): number {\n        let pinT = tPin\n        let pinE = ePin\n        pins.setPull(pinT, PinPullMode.PullNone)\n        pins.digitalWritePin(pinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(pinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(pinT, 0)\n\n        // read pulse\n        let d = pins.pulseIn(pinE, PulseValue.High, 25000)\n        let version = control.hardwareVersion()\n        let distance = d * 34 / 2 / 1000\n        if (version == \"1\") {\n            distance = distance * 3 / 2\n        }\n\n        if (distance > 430) {\n            distance = 0\n        }\n\n        if (distance == 0) {\n            distance = distance_last\n            distance_last = 0\n        }\n        else {\n            distance_last = distance\n        }\n\n        switch (distance_unit) {\n            case Distance_Unit_List.Distance_Unit_cm:\n                return Math.floor(distance)  //cm\n                break\n            case Distance_Unit_List.Distance_Unit_foot:\n                return Math.floor(distance / 30.48)   //foot\n                break\n            default:\n                return 0\n        }\n    }\n\n    export class PAJ7620 {\n        private paj7620WriteReg(addr: number, cmd: number) {\n            let buf: Buffer = pins.createBuffer(2);\n            buf[0] = addr;\n            buf[1] = cmd;\n            pins.i2cWriteBuffer(0x73, buf, false);\n        }\n        private paj7620ReadReg(addr: number): number {\n            let buf: Buffer = pins.createBuffer(1);\n            buf[0] = addr;\n            pins.i2cWriteBuffer(0x73, buf, false);\n            buf = pins.i2cReadBuffer(0x73, 1, false);\n            return buf[0];\n        }\n        private paj7620SelectBank(bank: number) {\n            if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n        }\n        private paj7620Init() {\n            let temp = 0;\n            this.paj7620SelectBank(0);\n            temp = this.paj7620ReadReg(0);\n            if (temp == 0x20) {\n                for (let i = 0; i < 438; i += 2) {\n                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n                }\n            }\n            this.paj7620SelectBank(0);\n        }\n        init() {\n            this.paj7620Init();\n            basic.pause(200);\n        }\n        read(): number {\n            let data = 0, result = 0;\n            data = this.paj7620ReadReg(0x43);\n            switch (data) {\n                case 0x01:\n                    result = GestureType.Right;\n                    break;\n                case 0x02:\n                    result = GestureType.Left;\n                    break;\n                case 0x04:\n                    result = GestureType.Up;\n                    break;\n                case 0x08:\n                    result = GestureType.Down;\n                    break;\n                case 0x10:\n                    result = GestureType.Forward;\n                    break;\n                case 0x20:\n                    result = GestureType.Backward;\n                    break;\n                case 0x40:\n                    result = GestureType.Clockwise;\n                    break;\n                case 0x80:\n                    result = GestureType.Anticlockwise;\n                    break;\n                default:\n                    data = this.paj7620ReadReg(0x44);\n                    if (data == 0x01)\n                        result = GestureType.Wave;\n                    break;\n            }\n            return result;\n        }\n    }\n    const gestureEventId = 3100;\n    let lastGesture = GestureType.None;\n    let paj7620 = new PAJ7620();\n    //% blockId= gesture_create_event block=\"Gesture sensor IIC port is %gesture\"\n    //% gesture.fieldEditor=\"gridpicker\" gesture.fieldOptions.columns=3\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function onGesture(gesture: GestureType, handler: () => void) {\n        control.onEvent(gestureEventId, gesture, handler);\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        control.inBackground(() => {\n            while (true) {\n                const gesture = paj7620.read();\n                if (gesture != lastGesture) {\n                    lastGesture = gesture;\n                    control.raiseEvent(gestureEventId, lastGesture);\n                }\n                basic.pause(200);\n            }\n        })\n    }\n\n    //% blockId= gesture_get_event block=\"Gesture sensor IIC port detects\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function getGesture(): number {\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        const gesture = paj7620.read();\n        return gesture\n    }\n\n\n\n\n    //% blockId=apds9960_readcolor block=\"Color sensor IIC port color HUE(0~360)\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readColor(): number {\n        if (color_first_init == false) {\n            initModule()\n            colorMode()\n        }\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        while (!tmp) {\n            basic.pause(5);\n            tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        }\n        let c = i2cread_color(APDS9960_ADDR, APDS9960_CDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_CDATAH) * 256;\n        let r = i2cread_color(APDS9960_ADDR, APDS9960_RDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_RDATAH) * 256;\n        let g = i2cread_color(APDS9960_ADDR, APDS9960_GDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_GDATAH) * 256;\n        let b = i2cread_color(APDS9960_ADDR, APDS9960_BDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_BDATAH) * 256;\n        // map to rgb based on clear channel\n        let avg = c / 3;\n        r = r * 255 / avg;\n        g = g * 255 / avg;\n        b = b * 255 / avg;\n        //let hue = rgb2hue(r, g, b);\n        let hue = rgb2hsl(r, g, b)\n        return hue\n    }\n    //% block=\"Color sensor IIC port detects %color\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% color.fieldEditor=\"gridpicker\" color.fieldOptions.columns=3\n    export function checkColor(color: ColorList): boolean {\n        let hue = readColor()\n        switch (color) {\n            case ColorList.red:\n                if (hue > 330 || hue < 20) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.green:\n                if (hue > 120 && 180 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.blue:\n                if (hue > 210 && 270 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.cyan:\n                if (hue > 190 && 210 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.magenta:\n                if (hue > 260 && 330 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.yellow:\n                if (hue > 30 && 120 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.white:\n                if (hue >= 180 && 190 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n        }\n    }\n\n    //% blockId=\"potentiometer\" block=\"Trimpot %Rjpin analog value\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Input color=#E2C438 group=\"Analog\"\n    export function trimpot(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        return pins.analogReadPin(pin)\n    }\n    //% blockId=buttonab block=\"Button %Rjpin %button is pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonCD(Rjpin: DigitalRJPin, button: ButtonStateList): boolean {\n        let pinC = DigitalPin.P1\n        let pinD = DigitalPin.P2\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pinC = DigitalPin.P1\n                pinD = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pinC = DigitalPin.P2\n                pinD = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pinC = DigitalPin.P13\n                pinD = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pinC = DigitalPin.P15\n                pinD = DigitalPin.P16\n                break;\n            case DigitalRJPin.P3:\n                pinC = DigitalPin.P3\n                pinD = DigitalPin.P4\n                break;\n        }\n        pins.setPull(pinC, PinPullMode.PullUp)\n        pins.setPull(pinD, PinPullMode.PullUp)\n        if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 0 && button == ButtonStateList.CD) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinC) == 0 && pins.digitalReadPin(pinD) == 1 && button == ButtonStateList.C) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 1 && button == ButtonStateList.D) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    export enum ButtonState {\n        //% block=\"on\"\n        on = 1,\n        //% block=\"off\"\n        off = 2\n    }\n\n    const buttonEventSource = 5000\n    const buttonEventValue = {\n        CD_pressed: ButtonState.on,\n        CD_unpressed: ButtonState.off\n    }\n\n    //% block=\"on button %Rjpin %button pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=4\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonEvent(Rjpin: DigitalRJPin, button: ButtonStateList, handler: () => void) {\n        let ButtonPin_C = DigitalPin.P1\n        let ButtonPin_D = DigitalPin.P2\n        let pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P0\n        let pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                ButtonPin_C = DigitalPin.P1\n                ButtonPin_D = DigitalPin.P8\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P1\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P8\n                break;\n            case DigitalRJPin.J2:\n                ButtonPin_C = DigitalPin.P2\n                ButtonPin_D = DigitalPin.P12\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P2\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P12\n                break;\n            case DigitalRJPin.J3:\n                ButtonPin_C = DigitalPin.P13\n                ButtonPin_D = DigitalPin.P14\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P13\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P14\n                break;\n            case DigitalRJPin.J4:\n                ButtonPin_C = DigitalPin.P15\n                ButtonPin_D = DigitalPin.P16\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P15\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P16\n                break;\n            case DigitalRJPin.P3:\n                ButtonPin_C = DigitalPin.P3\n                ButtonPin_D = DigitalPin.P4\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P3\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P4\n                break;\n        }\n        if (button == ButtonStateList.C) {\n            pins.setPull(ButtonPin_C, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_C, PinEventType.Edge)\n            control.onEvent(pinEventSource_C, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.D) {\n            pins.setPull(ButtonPin_D, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_D, PinEventType.Edge)\n            control.onEvent(pinEventSource_D, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.CD) {\n            loops.everyInterval(50, function () {\n                if (pins.digitalReadPin(ButtonPin_C) == 0 && pins.digitalReadPin(ButtonPin_D) == 0) {\n                    control.raiseEvent(buttonEventSource, buttonEventValue.CD_pressed)\n                }\n            })\n            control.onEvent(buttonEventSource, buttonEventValue.CD_pressed, handler)\n        }\n    }\n\n    //% blockId=fans block=\"Motor fan %Rjpin toggle to $fanstate || speed %speed \\\\%\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% fanstate.shadow=\"toggleOnOff\"\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    //% speed.min=0 speed.max=100\n    //% expandableArgumentMode=\"toggle\"\n    export function motorFan(Rjpin: DigitalRJPin, fanstate: boolean, speed: number = 100): void {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.J3:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.J4:\n                pin = AnalogPin.P15\n                break;\n        }\n        if (fanstate) {\n            pins.analogSetPeriod(pin, 100)\n            pins.analogWritePin(pin, Math.map(speed, 0, 100, 0, 1023))\n        }\n        else {\n            pins.analogWritePin(pin, 0)\n            speed = 0\n        }\n    }\n\n\n    //% blockId=\"setLoopFolder\" block=\"loop play all the MP3s in the folder:$folderNum\"\n    //% folderNum.defl=\"01\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setLoopFolder(folderNum: string): void {\n        CMD = 0x17\n        para1 = 0\n        para2 = parseInt(folderNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    //% blockId=\"folderPlay\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum || repeatList: $myAns\"\n    //% folderNum.defl=\"01\" fileNum.defl=\"001\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function folderPlay(folderNum: string, fileNum: string, myAns: boolean = false): void {\n        CMD = 0x0F\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        if (myAns)\n            execute(0x19)\n    }\n\n    //% blockId=\"playFolderFilePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFilePort(folderNum: string, fileNum: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFolderFileVolumePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum with volume:$theVolume usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" theVolume.defl=\"10\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFileVolumePort(folderNum: string, fileNum: string, theVolume: string, Rjpin: DigitalRJPin): void {\n        \n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        \n        let volume = parseInt(theVolume)\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(200)\n\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"volumePort\" \n    //% block=\"set MP3 volume:$theVolume usingPin:$Rjpin\"\n    //% theVolume.defl=\"10\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function volumePort(theVolume: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        let volume = parseInt(theVolume)\n        if (volume > 30) {\n            volume = 30\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(300)\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n\n\n    //% blockId=\"setTracking\" \n    //% block=\"play the mp3 in order of:%tracking || repeatList: $myAns\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% tracking.defl=1\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setTracking(tracking: number, myAns: boolean = false): void {\n        CMD = 0x03\n        para1 = 0x00\n        para2 = tracking\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        execute(0x0D)\n        if (myAns)\n            execute(0x19)\n    }\n    //% blockId=MP3execute block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=\"setVolume\" block=\"Set volume(0~25):%volume\"\n    //% volume.min=0 volume.max=25\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setVolume(volume: number): void {\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 0x06\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=MP3setPort block=\"Set the MP3 port to %Rjpin\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function MP3SetPort(Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        setVolume(25)\n    }\n}","notlegos.ts":"// NotLegos Blocks\n\n//% block=\"Not LEGOs\" color=#0031AF weight=1000 icon=\"\\uf3a5\"\n//% groups=['MP3\",'Display', 'Laser', 'others']\nnamespace notLegos {\n\n    // Variables for MP3 and Volume Pot\n    let isPot = false\n    let potPin = AnalogPin.P0\n    let mp3bits = 0\n    let mp3Apin = SerialPin.P0\n    let mp3Bpin = SerialPin.P0\n    let mp3Cpin = SerialPin.P0\n    let mp3Avolume = 1\n    let mp3Bvolume = 1\n    let mp3Cvolume = 1\n    let relativeCvolume = 1\n    let lastMP3bit = \"\"\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n\n    // String Arrays for Full Player Sound Sets and Shuffled Playlists Thereof\n    let PlayerAwaitingMusic: string[] = []\n    let PlayerFailure: string[] = []\n    let PlayerHurry: string[] = []\n    let PlayerIntro: string[] = []\n    let PlayerIntroMusic: string[] = []\n    let PlayerLevelMusic: string[] = []\n    let PlayerLost: string[] = []\n    let PlayerLostMusic: string[] = []\n    let PlayerName: string[] = []\n    let PlayerNay: string[] = []\n    let PlayerOuch: string[] = []\n    let PlayerReady: string[] = []\n    let PlayerSuccess: string[] = []\n    let PlayerTutorialMusic: string[] = []\n    let PlayerWon: string[] = []\n    let PlayerWonMusic: string[] = []\n    let PlayerYay: string[] = []\n    let PlaylistAwaitingMusic: string[] = []\n    let PlaylistCorrect: string[] = []\n    let PlaylistExplosion: string[] = []\n    let PlaylistFailure: string[] = []\n    let PlaylistFire: string[] = []\n    let PlaylistGhost: string[] = []\n    let PlaylistHurry: string[] = []\n    let PlaylistIncorrect: string[] = []\n    let PlaylistIntro: string[] = []\n    let PlaylistLost: string[] = []\n    let PlaylistName: string[] = []\n    let PlaylistNay: string[] = []\n    let PlaylistOuch: string[] = []\n    let PlaylistReady: string[] = []\n    let PlaylistSlash: string[] = []\n    let PlaylistSpark: string[] = []\n    let PlaylistSplash: string[] = []\n    let PlaylistSuccess: string[] = []\n    let PlaylistWon: string[] = []\n    let PlaylistYay: string[] = []\n\n    // Sound Strings - Global\n    let VoiceTracks = \"10_1_90_1.75|10_2_90_3.65|10_3_50_11.5|10_4_90_0|10_5_90_0|10_6_90_4.65|10_7_90_7.15|10_8_90_4.8|10_9_90_3.75|10_10_90_5.05|10_11_90_0|10_12_90_0|10_13_90_3|10_14_90_3|10_15_90_3|10_16_90_4|10_17_90_0|10_18_90_3|10_19_90_3|10_20_90_4|10_21_90_2|10_22_90_0|10_23_90_2|10_24_90_2|10_25_90_6|10_26_90_6|10_27_90_6|10_28_90_6|10_29_90_6|10_30_90_6|10_31_90_6|10_32_90_6|10_33_90_8|10_34_90_9|10_35_90_6|10_36_90_6|10_37_90_6|10_38_90_6|10_39_90_6|10_40_90_6\".split(\"|\")\n    let CorrectSFX = \"7_1_100_4|7_2_100_8|7_3_100_8|7_4_100_6|7_5_100_10|7_6_100_8|7_7_100_6|7_8_100_4|7_9_100_17|7_10_100_9|7_11_100_4|7_12_100_8|7_13_100_12|7_14_100_7|7_15_100_10|7_16_100_9|7_17_100_10|7_18_100_9|7_19_100_8|7_20_100_4|7_21_100_7|7_22_100_26|7_23_100_5|7_24_100_4|7_25_100_10|7_26_100_7|7_27_100_7|7_28_100_6|7_29_100_7|7_30_100_7|7_31_100_12|7_32_100_4|7_33_100_6|7_34_100_6|7_35_100_6|7_36_100_6|7_37_100_5|7_38_100_3|7_39_100_6|7_40_100_6|7_41_100_6|7_42_100_8|7_43_100_6|7_44_100_8|7_45_100_6|7_46_100_5|7_47_100_5|7_48_100_12|7_49_100_3|7_50_100_7|7_51_100_8|7_52_100_11|7_53_100_6|7_54_100_2|7_55_100_5|7_56_100_7|7_57_100_8|7_58_100_7|7_59_100_6|7_60_100_7|7_61_100_6|7_62_100_8|7_63_100_5|7_64_100_5|7_65_100_7|7_66_100_9|7_67_100_6|7_68_100_6|7_69_100_7|7_70_100_10|7_71_100_7|7_72_100_5|7_73_100_6|7_74_100_8|7_75_100_3|7_76_100_3|7_77_100_6|7_78_100_7|7_79_100_4|7_80_100_6|7_81_100_2|7_82_100_3|7_83_100_3|7_84_100_1|7_85_100_3|7_86_100_6|7_87_100_7|7_88_100_5|7_89_100_3|7_90_100_5|7_91_100_3|7_92_100_3|7_93_100_2|7_94_100_3|7_95_100_3|7_96_100_1|7_99_100_1|7_100_100_1|7_101_100_1|7_102_100_1|7_103_100_1|7_104_100_3|7_105_100_1|7_106_100_1|7_107_100_4|7_108_100_4|7_109_100_1|7_110_100_1|7_111_100_1|7_112_100_1|7_113_100_1|7_114_100_2|7_115_100_1|7_116_100_1|7_117_100_1|7_118_100_1\".split(\"|\")\n    let IncorrectSFX = \"8_1_100_6|8_2_100_5|8_3_100_3|8_4_100_5|8_5_100_7|8_6_100_6|8_7_100_4|8_8_100_1|8_9_100_3|8_10_100_4|8_11_100_3|8_12_100_3|8_13_100_6|8_14_100_3|8_15_100_1|8_16_100_1|8_17_100_1|8_18_100_1|8_19_100_0|8_20_100_0|8_21_100_5|8_22_100_4|8_23_100_3|8_24_100_7\".split(\"|\")\n    let AllSFX = \"9_1_100_4.754|9_2_100_4.336|9_3_100_5.172|9_4_100_4.806|9_5_100_4.754|9_6_100_1.536|9_7_100_2.136|9_8_100_1.896|9_9_100_2.592|9_10_100_0.936|9_11_100_1.008|9_12_100_0.312|9_13_100_1.44|9_14_100_1.8|9_15_100_1.992|9_16_100_1.104|9_17_100_1.08|9_18_100_0.912|9_19_100_0.528|9_20_100_0.72|9_21_100_0.672|9_22_100_0.696|9_23_100_0.6|9_24_100_0.576|9_25_100_1.44|9_26_100_1.8|9_27_100_1.464|9_28_100_0.432|9_29_100_0.312|9_30_100_2.112|9_31_100_0.648|9_32_100_0.384|9_33_100_2.352|9_34_100_1.8|9_35_100_1.608|9_36_100_0.648|9_37_100_0.768|9_38_100_0.552|9_39_100_0.48|9_40_100_1.032|9_41_100_0.456|9_42_100_0.384|9_43_100_0.552|9_44_100_0.432|9_45_100_0.216|9_46_100_0.624|9_47_100_1.248|9_48_100_1.104|9_49_100_1.248|9_50_100_0.648|9_51_100_0.456|9_53_100_5.256|9_54_100_2.328|9_55_100_4.992|9_56_100_1.776|9_57_100_2.28|9_58_100_0.504|9_59_100_0.984|9_60_100_0.984|9_61_100_0.504|9_62_100_1.632|9_63_100_0.288|9_64_100_0.192|9_65_100_0.168|9_66_100_0.288|9_67_100_0.288|9_68_100_0.312|9_69_100_0.72|9_70_100_0.672|9_71_100_0.648|9_72_100_0.648|9_73_100_1.632|9_74_100_1.416|9_75_100_1.248|9_76_100_0.48|9_77_100_0.36|9_78_100_0.216|9_79_100_0.576|9_80_100_0.731|9_81_100_1.128|9_82_100_2.184|9_83_100_0.744|9_84_100_0.6|9_85_100_1.152|9_86_100_1.68|9_87_100_1.32|9_88_100_0.528|9_89_100_0.36|9_90_100_0.792|9_91_100_2.496|9_92_100_1.8|9_93_100_1.8|9_94_100_0.744|9_95_100_1.776|9_96_100_5.544|9_97_100_0.432|9_98_100_2.064|9_99_100_0.744|9_100_100_0.696|9_101_100_1.776|9_102_100_0.12|9_103_100_0.168|9_104_100_0.96|9_105_100_0.96|9_106_100_2.04|9_107_100_3.984|9_108_100_1.608|9_109_100_3.528|9_110_100_0.456|9_111_100_0.696|9_112_100_1.632|9_113_100_2.232\".split(\"|\")\n    let GhostSFX = \"9_1_100_4.754|9_2_100_4.336|9_3_100_5.172|9_4_100_4.806\".split(\"|\")\n    let FireSFX = \"9_6_100_1.536|9_15_100_1.992|9_53_100_5.256|9_106_100_2.04\".split(\"|\")\n    let ExplosionSFX = \"9_77_100_0.36|9_101_100_1.776|9_109_100_3.528\".split(\"|\")\n    let SplashSFX = \"9_33_100_2.352|9_34_100_1.8\".split(\"|\")\n    let SparkSFX = \"9_5_100_4.754|9_51_100_0.456|9_85_100_1.152|9_86_100_1.68|9_111_100_0.696|9_112_100_1.632\".split(\"|\")\n    let SlashSFX = \"9_10_100_0.936|9_25_100_1.44|9_28_100_0.432|9_32_100_0.384|9_50_100_0.648|9_59_100_0.984|9_63_100_0.288|9_64_100_0.192|9_65_100_0.168|9_66_100_0.288|9_67_100_0.288|9_68_100_0.312|9_69_100_0.72|9_75_100_1.248|9_76_100_0.48|9_77_100_0.36|9_78_100_0.216|9_89_100_0.36\".split(\"|\")\n    \n    // Music Strings - Super Mario Brothers\n    let SMBIntroMusic = \"1_1_75_2.808|1_2_75_3.912|1_3_75_7.81|1_4_75_4.992|1_5_75_3.918|1_6_75_12.382|1_7_75_3.204|1_8_75_6.648|1_9_75_6.168|1_10_75_7.464|1_11_75_9.36|1_12_75_9.038|1_13_75_10.605|1_14_75_3.492|1_15_75_9.613|1_16_75_3.48|1_17_75_5.58|1_18_75_5.041|1_19_75_6.336|1_20_75_5.424|1_21_75_7.2|1_22_75_5.424|1_23_75_3.317|1_24_75_7.262|1_25_75_5.59|1_26_75_5.52|1_27_75_10.776|1_28_75_4.944|1_29_75_5.496|1_30_75_4.032|1_31_75_6.264|1_32_75_3.918|1_33_75_4.44|1_34_75_10.152|1_35_75_8.097|1_36_75_7.706|1_37_75_3.317|1_38_75_6.87|1_39_75_4.466|1_40_75_5.877|1_41_75_3.432|1_42_75_7.392|1_43_75_6.768|1_44_75_2.616|1_45_75_6.269|1_46_75_1.188|1_47_75_2.088|1_48_75_2.124|1_49_75_8.228|1_50_75_15.647|1_51_75_9.064|1_52_75_10.152|1_53_75_13.008|1_54_75_14.16|1_55_75_14.236|1_56_75_15.792|1_57_75_7.392|1_58_75_4.368|1_59_75_9.384|1_60_75_7.653|1_61_75_8.76|1_62_75_8.952|1_63_75_12.024|1_64_75_4.284|1_65_75_6.048|1_66_75_9.072|1_67_75_4.68|1_68_75_6.138|1_69_75_5.208|1_70_75_9.576|1_71_75_8.045|1_72_75_8.045|1_73_75_5.407|1_74_75_3.186\".split(\"|\")\n    let SMBTutorialMusic = \"2_1_65_36|2_2_65_40|2_3_65_41|2_4_65_46|2_5_65_50|2_6_65_51|2_7_65_59|2_8_65_63|2_9_65_64|2_10_65_65|2_11_65_66|2_12_65_67|2_13_65_68|2_14_65_69|2_15_65_76|2_16_65_80|2_17_65_84|2_18_65_90|2_19_65_92|2_20_65_100|2_21_65_103|2_22_65_105|2_23_65_112|2_24_65_113|2_25_65_123|2_26_65_138|2_27_65_142|2_28_65_144|2_29_65_156|2_30_65_158|2_31_65_120|2_32_65_120|2_33_65_120|2_34_65_120|2_35_65_120|2_36_65_120\".split(\"|\")\n    let SMBAwaitingMusic = \"3_1_100_64|3_2_100_211|3_3_100_185|3_4_100_185|3_5_100_182|3_6_100_114|3_7_100_181|3_8_100_103|3_9_100_303|3_10_100_21|3_11_100_235|3_12_100_121|3_13_100_203|3_14_100_119|3_15_100_206|3_16_100_146|3_17_100_237|3_18_100_210|3_19_100_160\".split(\"|\")\n    let SMBLevelMusic = \"4_1_100_128|4_3_100_142|4_5_100_111|4_6_100_141|4_9_100_126|4_11_100_132|4_15_100_119|4_16_100_146|4_18_100_120|4_20_100_143|4_22_100_142|4_23_100_112|4_24_100_138|4_25_100_139|4_26_100_111|4_27_100_116|4_28_100_129|4_31_100_98|4_32_100_146|4_33_100_177|4_34_100_82|4_36_100_160|4_38_100_180|4_39_100_211|4_41_100_134|4_42_100_183|4_43_100_124|4_44_100_261|4_45_100_91|4_46_100_138|4_49_100_207|4_50_100_41|4_51_100_180|4_52_100_202|4_53_100_194|4_56_100_209|4_57_100_195|4_58_100_180|4_60_100_198|4_61_100_180|4_63_100_78|4_66_100_139|4_67_100_224|4_68_100_180|4_73_100_180|4_76_100_180|4_77_100_196|4_78_100_113|4_82_100_180|4_83_100_123|4_84_100_180|4_86_100_126|4_93_100_121|4_97_100_59|4_98_100_180|4_99_100_180|4_100_100_118|4_101_100_156|4_102_100_180|4_103_100_70|4_104_100_216|4_105_100_140|4_106_100_180|4_107_100_147|4_108_100_147|4_109_100_180|4_110_100_158|4_111_100_180|4_112_100_80|4_113_100_152|4_114_100_127|4_116_100_122|4_118_100_106|4_123_100_143|4_124_100_36|4_125_100_164|4_127_100_282|4_128_100_311|4_129_100_123|4_130_100_187|4_131_100_62|4_132_100_180|4_133_100_130|4_134_100_112|4_135_100_105|4_139_100_126|4_141_100_176|4_142_100_135|4_143_100_126|4_144_100_144|4_145_100_140|4_146_100_133|4_149_100_167|4_150_100_120|4_151_100_180|4_155_100_226|4_157_100_164|4_158_100_144|4_159_100_104|4_161_100_180|4_162_100_87|4_163_100_126|4_164_100_118|4_165_100_194|4_166_100_135|4_167_100_50|4_168_100_109|4_169_100_180|4_170_100_133|4_171_100_180|4_172_100_91|4_173_100_138|4_176_100_120|4_177_100_81|4_178_100_150|4_179_100_153|4_180_100_104|4_181_100_112\".split(\"|\")\n    let SMBWonMusic = \"5_1_100_4|5_2_100_17|5_3_100_29|5_4_100_172|5_5_100_13|5_6_100_248|5_7_100_11|5_8_100_445|5_9_100_241|5_10_100_244|5_11_100_20|5_12_100_7|5_13_100_28|5_14_100_74|5_15_100_15|5_16_100_74|5_17_100_17|5_18_100_17|5_19_100_15|5_20_100_38|5_21_100_42|5_22_100_67|5_23_100_8|5_24_100_8|5_25_100_13|5_26_100_17|5_27_100_5|5_28_100_122|5_29_100_226|5_30_100_79\".split(\"|\")\n    let SMBLostMusic = \"6_1_100_87|6_2_100_31|6_3_100_196|6_4_100_65|6_5_100_4|6_6_100_23|6_7_100_65|6_8_100_62|6_9_100_78|6_10_100_6|6_11_100_162\".split(\"|\")\n    \n    // Player Strings - Mario\n    let MarioSoundString = \"A_21_1_100_1.5|A_21_2_100_1|I_21_3_100_3.3|A_21_4_100_1.9|A_21_5_100_2.1|I_21_6_100_1.8|I_21_7_100_1.8|R_21_8_100_0.6|R_21_9_100_1.3|R_21_10_100_1.1|R_21_11_100_0.6|R_21_12_100_0.8|R_21_13_100_1.6|R_21_14_100_1.3|R_21_15_100_1.2|R_21_16_100_1.1|R_21_17_100_1.3|R_21_18_100_1|Y_21_19_100_0.2|Y_21_20_100_0.2|Y_21_21_100_0.3|Y_21_22_100_0.5|Y_21_23_100_0.6|Y_21_24_100_0.6|Y_21_25_100_0.6|Y_21_26_100_0.6|Y_21_27_100_0.6|Y_21_28_100_0.6|Y_21_29_100_0.7|Y_21_30_100_0.7|Y_21_31_100_0.7|Y_21_32_100_0.7|Y_21_33_100_0.7|Y_21_34_100_0.8|Y_21_35_100_0.8|Y_21_36_100_0.8|Y_21_37_100_0.8|Y_21_38_100_0.8|Y_21_39_100_0.8|Y_21_40_100_0.9|Y_21_41_100_0.9|Y_21_42_100_0.9|Y_21_43_100_0.9|Y_21_44_100_0.9|Y_21_45_100_0.9|Y_21_46_100_0.9|Y_21_47_100_1|Y_21_48_100_1|Y_21_49_100_1|Y_21_50_100_1|Y_21_51_100_1.1|Y_21_52_100_1.1|Y_21_53_100_1.1|Y_21_54_100_1.2|Y_21_55_100_1.2|Y_21_56_100_1.2|Y_21_57_100_1.2|Y_21_58_100_1.3|Y_21_59_100_1.3|Y_21_60_100_1.3|Y_21_61_100_1.4|Y_21_62_100_1.4|S_21_63_100_1|S_21_64_100_1.6|S_21_65_100_1.7|S_21_66_100_1.7|S_21_67_100_1.9|S_21_68_100_2.1|S_21_69_100_2.2|S_21_70_100_2.4|S_21_71_100_2.4|S_21_72_100_2.5|W_21_73_100_1.8|W_21_74_100_2|W_21_75_100_2.2|W_21_76_100_2.6|W_21_77_100_2.9|O_21_78_100_0.6|O_21_79_100_0.4|O_21_80_100_0.4|O_21_81_100_1.1|O_21_82_100_1.5|O_21_83_100_0.8|O_21_84_100_0.7|O_21_85_100_0.8|O_21_86_100_0.9|O_21_87_100_1.3|O_21_88_100_0.5|O_21_89_100_1|O_21_90_100_1|O_21_91_100_0.4|O_21_92_100_0.5|O_21_93_100_0.9|O_21_94_100_0.4|O_21_95_100_0.4|N_21_96_100_1|N_21_97_100_1.1|N_21_98_100_1|N_21_99_100_0.6|N_21_100_100_0.9|N_21_101_100_1.4|N_21_102_100_1.7|N_21_103_100_1.3|N_21_104_100_0.6|N_21_105_100_1.4|N_21_106_100_0.8|N_21_107_100_1.1|N_21_108_100_1.1|N_21_109_100_0.8|N_21_110_100_1.7|N_21_111_100_2.4|I_21_112_100_0.8|I_21_113_100_0.9|F_21_114_100_1.1|F_21_115_100_2.5|F_21_116_100_2.5|F_21_117_100_1.4|L_21_118_100_3.4|L_21_119_100_3.5|L_21_120_100_4.4|L_21_121_100_1.5|H_21_122_100_44.4\"\n\n    // BLOCK - Set the Player's Sounds\n    //% blockId=nl_player_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% weight=101\n    //% block=\"Set player to $player\"\n    export function setSounds(player: string): void {\n        let theSound = \"\"\n        let thisLetter = \"\"\n        let series = \"\"\n        let soundStrings: string[] = []\n        if (player == \"Mario\") {\n            soundStrings = MarioSoundString.split(\"|\")\n            series = \"SMB\"\n        }\n        if (series == \"SMB\") {\n            PlayerIntroMusic = SMBIntroMusic\n            PlayerTutorialMusic = SMBTutorialMusic\n            PlayerAwaitingMusic = SMBAwaitingMusic\n            PlayerLevelMusic = SMBLevelMusic\n            PlayerWonMusic = SMBWonMusic\n            PlayerLostMusic = SMBLostMusic\n        }\n        for (let sString of soundStrings) {\n            thisLetter = sString.charAt(0)\n            theSound = sString.substr(2, sString.length - 2)\n            if (thisLetter == \"A\") {\n                PlayerName.push(theSound)\n            } else if (thisLetter == \"R\") {\n                PlayerReady.push(theSound)\n            } else if (thisLetter == \"Y\") {\n                PlayerYay.push(theSound)\n            } else if (thisLetter == \"I\") {\n                PlayerIntro.push(theSound)\n            } else if (thisLetter == \"N\") {\n                PlayerNay.push(theSound)\n            } else if (thisLetter == \"O\") {\n                PlayerOuch.push(theSound)\n            } else if (thisLetter == \"S\") {\n                PlayerSuccess.push(theSound)\n            } else if (thisLetter == \"F\") {\n                PlayerFailure.push(theSound)\n            } else if (thisLetter == \"W\") {\n                PlayerWon.push(theSound)\n            } else if (thisLetter == \"L\") {\n                PlayerLost.push(theSound)\n            } else if (thisLetter == \"H\") {\n                PlayerHurry.push(theSound)\n            }\n        }\n    }    \n    \n    // Internal Function - Take a Sound from a Playlist After Filling it from a Soundbank if it's Empty\n    function takeReplenish(Playlist: any[], Soundbank: any[]) {\n        let returnSound = \"\"\n        returnSound = \"\"\n        if (Playlist.length == 0) {\n            for (let index = 0; index <= Soundbank.length - 1; index++) {\n                if (index == 0) {\n                    Playlist.push(Soundbank[index])\n                } else if (index >= 1) {\n                    Playlist.insertAt(randint(0, index), Soundbank[index])\n                }\n            }\n        }\n        returnSound = Playlist.shift()\n        return returnSound\n    }\n\n    // BLOCK - Fetch a Sound of a Type from a Category\n    //% blockId=nl_get_soundstring\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% weight=101\n    //% block=\"Get $Category sound $Type\"\n    export function getSoundString(Category: string, Type: string): string {\n        let returnString = \"\"\n        if (Category == \"Voice\") {\n            returnString = VoiceTracks[parseFloat(Type)]\n        } else if (Category == \"Player\") {\n            if (Type == \"Name\") {\n                returnString = takeReplenish(PlaylistName, PlayerName)\n            } else if (Type == \"Intro\") {\n                returnString = takeReplenish(PlaylistIntro, PlayerIntro)\n            } else if (Type == \"Ready\") {\n                returnString = takeReplenish(PlaylistReady, PlayerReady)\n            } else if (Type == \"Yay\") {\n                returnString = takeReplenish(PlaylistYay, PlayerYay)\n            } else if (Type == \"Success\") {\n                returnString = takeReplenish(PlaylistSuccess, PlayerSuccess)\n            } else if (Type == \"Nay\") {\n                returnString = takeReplenish(PlaylistNay, PlayerNay)\n            } else if (Type == \"Failure\") {\n                returnString = takeReplenish(PlaylistFailure, PlayerFailure)\n            } else if (Type == \"Won\") {\n                returnString = takeReplenish(PlaylistWon, PlayerWon)\n            } else if (Type == \"Lost\") {\n                returnString = takeReplenish(PlaylistLost, PlayerLost)\n            } else if (Type == \"Hurry\") {\n                returnString = takeReplenish(PlaylistHurry, PlayerHurry)\n            }\n        } else if (Category == \"SFX\") {\n            if (Type == \"Correct\") {\n                returnString = takeReplenish(PlaylistCorrect, CorrectSFX)\n            } else if (Type == \"Incorrect\") {\n                returnString = takeReplenish(PlaylistIncorrect, IncorrectSFX)\n            } else if (Type == \"Ghost\") {\n                returnString = takeReplenish(PlaylistGhost, GhostSFX)\n            } else if (Type == \"Fire\") {\n                returnString = takeReplenish(PlaylistFire, FireSFX)\n            } else if (Type == \"Explosion\") {\n                returnString = takeReplenish(PlaylistExplosion, ExplosionSFX)\n            } else if (Type == \"Splash\") {\n                returnString = takeReplenish(PlaylistSplash, SplashSFX)\n            } else if (Type == \"Spark\") {\n                returnString = takeReplenish(PlaylistSpark, SparkSFX)\n            } else if (Type == \"Slash\") {\n                returnString = takeReplenish(PlaylistSlash, SlashSFX)\n            }\n        } else if (Category == \"Music\") {\n            if (Type == \"Intro\") {\n                let PlaylistIntroMusic: number[] = []\n                returnString = takeReplenish(PlaylistIntroMusic, PlayerIntroMusic)\n            } else if (Type == \"Tutorial\") {\n                let PlaylistTutorialMusic: number[] = []\n                returnString = takeReplenish(PlaylistTutorialMusic, PlayerTutorialMusic)\n            } else if (Type == \"Awaiting\") {\n                returnString = takeReplenish(PlaylistAwaitingMusic, PlayerAwaitingMusic)\n            } else if (Type == \"Level\") {\n                let PlaylistLevelMusic: number[] = []\n                returnString = takeReplenish(PlaylistLevelMusic, PlayerLevelMusic)\n            } else if (Type == \"Won\") {\n                let PlaylistWonMusic: number[] = []\n                returnString = takeReplenish(PlaylistWonMusic, PlayerWonMusic)\n            } else if (Type == \"Lost\") {\n                let PlaylistLostMusic: number[] = []\n                returnString = takeReplenish(PlaylistLostMusic, PlayerLostMusic)\n            }\n        }\n        return returnString\n    }\n\n\n    ///////////////////////////////////////////////////////MP3\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(20) // Was 100; problematic at 10\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n    function sendMP3volume(sPin: SerialPin): void {\n        let theVolume = 5\n        if (sPin == mp3Apin) {\n            theVolume = Math.round(potRead() * mp3Avolume)\n        } else if (sPin == mp3Bpin) {\n            theVolume = Math.round(potRead() * mp3Bvolume)\n        } else if (sPin == mp3Cpin) {\n            theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    function sendMP3volumeFast(sPin: SerialPin): void {\n        let theVolume = 5\n        if (sPin == mp3Apin) {\n            theVolume = Math.round(potRead() * mp3Avolume)\n        } else if (sPin == mp3Bpin) {\n            theVolume = Math.round(potRead() * mp3Bvolume)\n        } else if (sPin == mp3Cpin) {\n            theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    function sendMP3play(folderNum: string, fileNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    //% blockId=\"playFileNl\" \n    //% block=\"Play length of file:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n\n    export function playFile(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P16\n        stringParts = soundString.split(\"_\")\n        let theFile = stringParts[0]\n        let theVolume = stringParts[1]\n        let theLength = stringParts[2]\n        sendMP3file(theFile, theVolume, sPin)\n        return parseFloat(theLength) * 1000\n    }\n    function sendMP3file(fileNum: string, volumeNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 3\n        para1 = parseInt(fileNum)\n        para2 = parseInt(volumeNum)\n        para1 = parseInt(\"0\")\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFileNl2\" \n    //% block=\"Play2 length of file:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n\n    export function playFile2(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P16\n        stringParts = soundString.split(\"_\")\n        let theFile = stringParts[0]\n        let theVolume = stringParts[1]\n        let theLength = stringParts[2]\n        sendMP3file2(theFile, theVolume, sPin)\n        return parseFloat(theLength) * 1000\n    }\n    function sendMP3file2(fileNum: string, volumeNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 15\n        para1 = parseInt(fileNum)\n        para2 = parseInt(volumeNum)\n        para1 = parseInt(\"1\")\n        para2 = parseInt(\"1\")\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=nl_backgroundVolume\n    //% block=\"Set background volume to:%relativeVolume\"\n    //% subcategory=\"MP3\" group=\"MP3\"\n    export function sendBackgroundVolume(relativeVolume: number): void {\n        relativeCvolume = relativeVolume/100\n\n        let sPin = mp3Cpin\n        let theVolume = Math.round(potRead() * mp3Cvolume * relativeVolume / 100)\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=MP3execute2 block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n  \n    //% blockId=notlegos_pot_read\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Trimpot analog value\"\n    export function potRead() {\n        if(isPot){\n            return Math.round(pins.map(pins.analogReadPin(potPin), 0, 1023, 0, 30))\n        } else{\n            return 5\n        }\n    }\n\n    //% blockId=notlegos_relCread\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return background volume\"\n    export function getBackgroundVolume() {\n\n            return relativeCvolume\n\n    }\n    //% blockId=notlegos_mp3Avolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3A volume\"\n    export function getMP3AVolume() {\n        return potRead() * mp3Avolume\n    }\n    //% blockId=notlegos_mp3Bvolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3B volume\"\n    export function getMP3BVolume() {\n        return potRead() * mp3Bvolume\n    }\n      //% blockId=notlegos_mp3Cvolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3C volume\"\n    export function getMP3CVolume() {\n        return potRead() * mp3Cvolume * relativeCvolume\n    }\n\n    //% blockId=notlegos_pot_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Connect Volume Control Pot at pin %aPin\"\n    //% aPin.fieldEditor=\"gridpicker\"\n    export function potSet(aPin: AnalogPin): void{\n        potPin = aPin\n        isPot = true\n    }\n\n    //% blockId=notlegos_mp3_ports_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Connect MP3 bit at pin %dPin\"\n    //% dPin.fieldEditor=\"gridpicker\"\n    export function mp3setPorts(sPin: SerialPin): void {\n        if (mp3bits == 0){\n            mp3Apin = sPin\n            mp3bits = 1\n        } else if (mp3bits == 1){\n            mp3Bpin = sPin\n            mp3bits = 2\n        } else if (mp3bits == 2){\n            mp3Cpin = sPin\n            mp3bits = 3\n        }\n    }\n\n    //% blockId=\"playFolderFile\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playFolderFile(folderNum: string, fileNum: string): void {\n    \n        if (mp3bits > 0) {\n            sendMP3volume(mp3Apin)\n        }\n        if (mp3bits > 1) {\n           // sendMP3volume(mp3Bpin)\n        }\n        if (mp3bits >0) {\n            sendMP3play(folderNum, fileNum, mp3Apin)\n        }\n        if (mp3bits > 1) {\n          //  sendMP3play(folderNum, fileNum, mp3Bpin)\n        }\n    }\n\n    //% blockId=\"playsFor\" \n    //% block=\"Play length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsFor(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        if (mp3bits == 1) {\n            sPin = mp3Apin\n            mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        } else {\n            if (lastMP3bit == \"A\") {\n                    sPin = mp3Bpin\n                    mp3Bvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n                    lastMP3bit = \"B\"\n            } else {\n                sPin = mp3Apin\n                mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n            lastMP3bit = \"A\"\n            }\n        }\n        let theLength = stringParts[3]\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n        return parseFloat(theLength) * 1000 + 20\n    }\n\n    //% blockId=nl_volume_refresh\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume\"\n    export function updateVolume(): void {\n        if (mp3bits > 0) {\n            sendMP3volumeFast(mp3Apin)\n        }\n        if (mp3bits > 1) {\n            sendMP3volumeFast(mp3Bpin)\n        }\n        if (mp3bits > 2) {\n            sendMP3volumeFast(mp3Cpin)\n        }\n    }\n\n\n    //% blockId=\"nl_playsForTwo\" \n    //% block=\"Dual play length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsForTwo(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n\n        mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        mp3Bvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n\n        sendMP3volumeFast(mp3Apin)\n        sendMP3volumeFast(mp3Bpin)\n        \n        basic.pause(20)\n\n        sendMP3play(theFolder, theFile, mp3Apin)\n        sendMP3play(theFolder, theFile, mp3Bpin)\n        \n        return parseFloat(theLength) * 1000 + 20\n    }\n\n\n    //% blockId=\"nl_playsForBackground\" \n    //% block=\"Play in background length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsForBackground(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n        mp3Cvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        sPin = mp3Cpin\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n        return parseFloat(theLength) * 1000 + 20\n    }\n\n\n    //% blockId=\"nl_playBackground\" \n    //% block=\"Play in background:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playBackground(soundString: string): void {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n        mp3Cvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        sPin = mp3Cpin\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n    }\n\n\n    //% blockId=\"nl_backgroundStop\" \n    //% block=\"Stop background sound\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function stopBackgroundSound(): void {\n        serial.redirect(mp3Cpin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 0x16\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    // Nezha - Functions for Pins and Ports\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_Serial(Rjpin: DigitalRJPin): any {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = SerialPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = SerialPin.P2\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.P12:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = SerialPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = SerialPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n\n    // Enum - To Support MP3\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n\n    // Enum - Nezha and Pins\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum mbPin {\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1 (Analog J1)\"\n        P1,\n        //% block=\"P2 (Analog J2)\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8 (J1)\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12 (J2)\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14 (J3)\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16 (J4)\"\n        P16,\n    }\n}\n","pxt.json":"{\n    \"name\": \"NotLegosExt\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"displaySendBuffer.asm\",\n        \"display.ts\",\n        \"planetxbasic.ts\",\n        \"notlegos.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"7.0.42\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n","test.ts":""}},{"timestamp":1726864909980,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"}g^Kh@tsk|1f0]fNt=Se\">digits</variable><variable id=\"x4t~+B8#]@461X;Q^-0c\">sockLights</variable><variable id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights</variable><variable id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"Connected_oledClear\"><next><block type=\"pin_set_audio_pin_enabled\"><value name=\"enabled\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow></value><next><block type=\"device_led_enable\"><value name=\"on\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"}g^Kh@tsk|1f0]fNt=Se\">digits</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"grove_tm1637_create\"><field name=\"cPin\">DigitalPin.P7</field><field name=\"dPin\">DigitalPin.P6</field></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"x4t~+B8#]@461X;Q^-0c\">sockLights</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P11</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"x4t~+B8#]@461X;Q^-0c\">sockLights</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"x4t~+B8#]@461X;Q^-0c\">sockLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P12</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">18</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P13</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"993\" y=\"-7\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl2\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">1_1_25_100</field></shadow></value></block></value></block></statement></block><block type=\"device_button_event\" x=\"1520\" y=\"-20\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">2_1_1</field></shadow></value></block></value></block></statement></block><block type=\"function_definition\" x=\"957\" y=\"222\"><mutation name=\"isNearly\" functionid=\"b1Q}-qv~wJN$grhC!ppp\"><arg name=\"reference\" id=\"5nona16w6rbe5o9cs7yri\" type=\"number\"></arg><arg name=\"reading\" id=\"1603v12143812bjzv2he\" type=\"number\"></arg><arg name=\"tolerance\" id=\"huqcis1hoaqr7iq5ev9lm\" type=\"number\"></arg></mutation><field name=\"function_name\">isNearly</field><value name=\"5nona16w6rbe5o9cs7yri\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reference</field></block></value><value name=\"1603v12143812bjzv2he\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reading</field></block></value><value name=\"huqcis1hoaqr7iq5ev9lm\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">tolerance</field></block></value><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_operation\"><field name=\"OP\">AND</field><value name=\"A\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value></block></value><statement name=\"DO0\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></block></value></block></statement><statement name=\"ELSE\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></block></value></block></statement></block></statement></block><block type=\"every_interval\" x=\"13\" y=\"980\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value><statement name=\"HANDLER\"><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"text_join\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P2</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P3</field></shadow></value></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">2</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">hue </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field></shadow><block type=\"apds9960_readcolor\"></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">3</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">distance </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field></shadow><block type=\"sonarbit\"><field name=\"tPin\">DigitalPin.P8</field><field name=\"ePin\">DigitalPin.P9</field><field name=\"distance_unit\">Connected.Distance_Unit_List.Distance_Unit_cm</field></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">4</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">gesture </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field></shadow><block type=\"Connected_getGesture\"></block></value></block></value></block></next></block></next></block></next></block></statement></block></xml>","main.ts":"","README.md":"\n> Open this page at [https://notlegos.github.io/castleresay/](https://notlegos.github.io/castleresay/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/castleresay** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/castleresay** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/soundbank/](https://notlegos.github.io/soundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/soundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/soundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/resoundbank/](https://notlegos.github.io/resoundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/resoundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/resoundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosext/](https://notlegos.github.io/notlegosext/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosext** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosext** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","displaySendBuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n","display.ts":"\n/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#EA5532 icon=\"\\uf110\" block=\"Connected\" blockId=\"PlanetX_Connected\" \n//% groups='[\"LED\", \"Digital\", \"Analog\", \"IIC Port\", \"OLED\", \"7-Seg 4-Dig LED Nixietube\"]'\nnamespace Connected {\n    ////////////////////////////////TM 1637/////////////////\n    let TM1637_CMD1 = 0x40;\n    let TM1637_CMD2 = 0xC0;\n    let TM1637_CMD3 = 0x80;\n    let _SEGMENTS = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];\n    /////////////////////OLED///////////////////////////////\n    let firstoledinit = true\n    const basicFont: string[] = [\n        \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", // \" \"\n        \"\\x00\\x00\\x5F\\x00\\x00\\x00\\x00\\x00\", // \"!\"\n        \"\\x00\\x00\\x07\\x00\\x07\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x14\\x7F\\x14\\x7F\\x14\\x00\\x00\", // \"#\"\n        \"\\x00\\x24\\x2A\\x7F\\x2A\\x12\\x00\\x00\", // \"$\"\n        \"\\x00\\x23\\x13\\x08\\x64\\x62\\x00\\x00\", // \"%\"\n        \"\\x00\\x36\\x49\\x55\\x22\\x50\\x00\\x00\", // \"&\"\n        \"\\x00\\x00\\x05\\x03\\x00\\x00\\x00\\x00\", // \"'\"\n        \"\\x00\\x1C\\x22\\x41\\x00\\x00\\x00\\x00\", // \"(\"\n        \"\\x00\\x41\\x22\\x1C\\x00\\x00\\x00\\x00\", // \")\"\n        \"\\x00\\x08\\x2A\\x1C\\x2A\\x08\\x00\\x00\", // \"*\"\n        \"\\x00\\x08\\x08\\x3E\\x08\\x08\\x00\\x00\", // \"+\"\n        \"\\x00\\xA0\\x60\\x00\\x00\\x00\\x00\\x00\", // \",\"\n        \"\\x00\\x08\\x08\\x08\\x08\\x08\\x00\\x00\", // \"-\"\n        \"\\x00\\x60\\x60\\x00\\x00\\x00\\x00\\x00\", // \".\"\n        \"\\x00\\x20\\x10\\x08\\x04\\x02\\x00\\x00\", // \"/\"\n        \"\\x00\\x3E\\x51\\x49\\x45\\x3E\\x00\\x00\", // \"0\"\n        \"\\x00\\x00\\x42\\x7F\\x40\\x00\\x00\\x00\", // \"1\"\n        \"\\x00\\x62\\x51\\x49\\x49\\x46\\x00\\x00\", // \"2\"\n        \"\\x00\\x22\\x41\\x49\\x49\\x36\\x00\\x00\", // \"3\"\n        \"\\x00\\x18\\x14\\x12\\x7F\\x10\\x00\\x00\", // \"4\"\n        \"\\x00\\x27\\x45\\x45\\x45\\x39\\x00\\x00\", // \"5\"\n        \"\\x00\\x3C\\x4A\\x49\\x49\\x30\\x00\\x00\", // \"6\"\n        \"\\x00\\x01\\x71\\x09\\x05\\x03\\x00\\x00\", // \"7\"\n        \"\\x00\\x36\\x49\\x49\\x49\\x36\\x00\\x00\", // \"8\"\n        \"\\x00\\x06\\x49\\x49\\x29\\x1E\\x00\\x00\", // \"9\"\n        \"\\x00\\x00\\x36\\x36\\x00\\x00\\x00\\x00\", // \":\"\n        \"\\x00\\x00\\xAC\\x6C\\x00\\x00\\x00\\x00\", // \";\"\n        \"\\x00\\x08\\x14\\x22\\x41\\x00\\x00\\x00\", // \"<\"\n        \"\\x00\\x14\\x14\\x14\\x14\\x14\\x00\\x00\", // \"=\"\n        \"\\x00\\x41\\x22\\x14\\x08\\x00\\x00\\x00\", // \">\"\n        \"\\x00\\x02\\x01\\x51\\x09\\x06\\x00\\x00\", // \"?\"\n        \"\\x00\\x32\\x49\\x79\\x41\\x3E\\x00\\x00\", // \"@\"\n        \"\\x00\\x7E\\x09\\x09\\x09\\x7E\\x00\\x00\", // \"A\"\n        \"\\x00\\x7F\\x49\\x49\\x49\\x36\\x00\\x00\", // \"B\"\n        \"\\x00\\x3E\\x41\\x41\\x41\\x22\\x00\\x00\", // \"C\"\n        \"\\x00\\x7F\\x41\\x41\\x22\\x1C\\x00\\x00\", // \"D\"\n        \"\\x00\\x7F\\x49\\x49\\x49\\x41\\x00\\x00\", // \"E\"\n        \"\\x00\\x7F\\x09\\x09\\x09\\x01\\x00\\x00\", // \"F\"\n        \"\\x00\\x3E\\x41\\x41\\x51\\x72\\x00\\x00\", // \"G\"\n        \"\\x00\\x7F\\x08\\x08\\x08\\x7F\\x00\\x00\", // \"H\"\n        \"\\x00\\x41\\x7F\\x41\\x00\\x00\\x00\\x00\", // \"I\"\n        \"\\x00\\x20\\x40\\x41\\x3F\\x01\\x00\\x00\", // \"J\"\n        \"\\x00\\x7F\\x08\\x14\\x22\\x41\\x00\\x00\", // \"K\"\n        \"\\x00\\x7F\\x40\\x40\\x40\\x40\\x00\\x00\", // \"L\"\n        \"\\x00\\x7F\\x02\\x0C\\x02\\x7F\\x00\\x00\", // \"M\"\n        \"\\x00\\x7F\\x04\\x08\\x10\\x7F\\x00\\x00\", // \"N\"\n        \"\\x00\\x3E\\x41\\x41\\x41\\x3E\\x00\\x00\", // \"O\"\n        \"\\x00\\x7F\\x09\\x09\\x09\\x06\\x00\\x00\", // \"P\"\n        \"\\x00\\x3E\\x41\\x51\\x21\\x5E\\x00\\x00\", // \"Q\"\n        \"\\x00\\x7F\\x09\\x19\\x29\\x46\\x00\\x00\", // \"R\"\n        \"\\x00\\x26\\x49\\x49\\x49\\x32\\x00\\x00\", // \"S\"\n        \"\\x00\\x01\\x01\\x7F\\x01\\x01\\x00\\x00\", // \"T\"\n        \"\\x00\\x3F\\x40\\x40\\x40\\x3F\\x00\\x00\", // \"U\"\n        \"\\x00\\x1F\\x20\\x40\\x20\\x1F\\x00\\x00\", // \"V\"\n        \"\\x00\\x3F\\x40\\x38\\x40\\x3F\\x00\\x00\", // \"W\"\n        \"\\x00\\x63\\x14\\x08\\x14\\x63\\x00\\x00\", // \"X\"\n        \"\\x00\\x03\\x04\\x78\\x04\\x03\\x00\\x00\", // \"Y\"\n        \"\\x00\\x61\\x51\\x49\\x45\\x43\\x00\\x00\", // \"Z\"\n        \"\\x00\\x7F\\x41\\x41\\x00\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x02\\x04\\x08\\x10\\x20\\x00\\x00\", // \"\\\"\n        \"\\x00\\x41\\x41\\x7F\\x00\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x04\\x02\\x01\\x02\\x04\\x00\\x00\", // \"^\"\n        \"\\x00\\x80\\x80\\x80\\x80\\x80\\x00\\x00\", // \"_\"\n        \"\\x00\\x01\\x02\\x04\\x00\\x00\\x00\\x00\", // \"`\"\n        \"\\x00\\x20\\x54\\x54\\x54\\x78\\x00\\x00\", // \"a\"\n        \"\\x00\\x7F\\x48\\x44\\x44\\x38\\x00\\x00\", // \"b\"\n        \"\\x00\\x38\\x44\\x44\\x28\\x00\\x00\\x00\", // \"c\"\n        \"\\x00\\x38\\x44\\x44\\x48\\x7F\\x00\\x00\", // \"d\"\n        \"\\x00\\x38\\x54\\x54\\x54\\x18\\x00\\x00\", // \"e\"\n        \"\\x00\\x08\\x7E\\x09\\x02\\x00\\x00\\x00\", // \"f\"\n        \"\\x00\\x18\\xA4\\xA4\\xA4\\x7C\\x00\\x00\", // \"g\"\n        \"\\x00\\x7F\\x08\\x04\\x04\\x78\\x00\\x00\", // \"h\"\n        \"\\x00\\x00\\x7D\\x00\\x00\\x00\\x00\\x00\", // \"i\"\n        \"\\x00\\x80\\x84\\x7D\\x00\\x00\\x00\\x00\", // \"j\"\n        \"\\x00\\x7F\\x10\\x28\\x44\\x00\\x00\\x00\", // \"k\"\n        \"\\x00\\x41\\x7F\\x40\\x00\\x00\\x00\\x00\", // \"l\"\n        \"\\x00\\x7C\\x04\\x18\\x04\\x78\\x00\\x00\", // \"m\"\n        \"\\x00\\x7C\\x08\\x04\\x7C\\x00\\x00\\x00\", // \"n\"\n        \"\\x00\\x38\\x44\\x44\\x38\\x00\\x00\\x00\", // \"o\"\n        \"\\x00\\xFC\\x24\\x24\\x18\\x00\\x00\\x00\", // \"p\"\n        \"\\x00\\x18\\x24\\x24\\xFC\\x00\\x00\\x00\", // \"q\"\n        \"\\x00\\x00\\x7C\\x08\\x04\\x00\\x00\\x00\", // \"r\"\n        \"\\x00\\x48\\x54\\x54\\x24\\x00\\x00\\x00\", // \"s\"\n        \"\\x00\\x04\\x7F\\x44\\x00\\x00\\x00\\x00\", // \"t\"\n        \"\\x00\\x3C\\x40\\x40\\x7C\\x00\\x00\\x00\", // \"u\"\n        \"\\x00\\x1C\\x20\\x40\\x20\\x1C\\x00\\x00\", // \"v\"\n        \"\\x00\\x3C\\x40\\x30\\x40\\x3C\\x00\\x00\", // \"w\"\n        \"\\x00\\x44\\x28\\x10\\x28\\x44\\x00\\x00\", // \"x\"\n        \"\\x00\\x1C\\xA0\\xA0\\x7C\\x00\\x00\\x00\", // \"y\"\n        \"\\x00\\x44\\x64\\x54\\x4C\\x44\\x00\\x00\", // \"z\"\n        \"\\x00\\x08\\x36\\x41\\x00\\x00\\x00\\x00\", // \"{\"\n        \"\\x00\\x00\\x7F\\x00\\x00\\x00\\x00\\x00\", // \"|\"\n        \"\\x00\\x41\\x36\\x08\\x00\\x00\\x00\\x00\", // \"}\"\n        \"\\x00\\x02\\x01\\x01\\x02\\x01\\x00\\x00\"  // \"~\"\n    ];\n    function oledcmd(c: number) {\n        pins.i2cWriteNumber(0x3c, c, NumberFormat.UInt16BE);\n    }\n    function writeData(n: number) {\n        let b = n;\n        if (n < 0) { n = 0 }\n        if (n > 255) { n = 255 }\n        pins.i2cWriteNumber(0x3c, 0x4000 + b, NumberFormat.UInt16BE);\n    }\n    function writeCustomChar(c: string) {\n        for (let i = 0; i < 8; i++) {\n            writeData(c.charCodeAt(i));\n        }\n    }\n    function setText(row: number, column: number) {\n        let r = row;\n        let c = column;\n        if (row < 0) { r = 0 }\n        if (column < 0) { c = 0 }\n        if (row > 7) { r = 7 }\n        if (column > 15) { c = 15 }\n        oledcmd(0xB0 + r);            //set page address\n        oledcmd(0x00 + (8 * c & 0x0F));  //set column lower address\n        oledcmd(0x10 + ((8 * c >> 4) & 0x0F));   //set column higher address\n    }\n    function putChar(c: string) {\n        let c1 = c.charCodeAt(0);\n        writeCustomChar(basicFont[c1 - 32]);\n    }\n    function oledinit(): void {\n        oledcmd(0xAE);  // Set display OFF\n        oledcmd(0xD5);  // Set Display Clock Divide Ratio / OSC Frequency 0xD4\n        oledcmd(0x80);  // Display Clock Divide Ratio / OSC Frequency \n        oledcmd(0xA8);  // Set Multiplex Ratio\n        oledcmd(0x3F);  // Multiplex Ratio for 128x64 (64-1)\n        oledcmd(0xD3);  // Set Display Offset\n        oledcmd(0x00);  // Display Offset\n        oledcmd(0x40);  // Set Display Start Line\n        oledcmd(0x8D);  // Set Charge Pump\n        oledcmd(0x14);  // Charge Pump (0x10 External, 0x14 Internal DC/DC)\n        oledcmd(0xA1);  // Set Segment Re-Map\n        oledcmd(0xC8);  // Set Com Output Scan Direction\n        oledcmd(0xDA);  // Set COM Hardware Configuration\n        oledcmd(0x12);  // COM Hardware Configuration\n        oledcmd(0x81);  // Set Contrast\n        oledcmd(0xCF);  // Contrast\n        oledcmd(0xD9);  // Set Pre-Charge Period\n        oledcmd(0xF1);  // Set Pre-Charge Period (0x22 External, 0xF1 Internal)\n        oledcmd(0xDB);  // Set VCOMH Deselect Level\n        oledcmd(0x40);  // VCOMH Deselect Level\n        oledcmd(0xA4);  // Set all pixels OFF\n        oledcmd(0xA6);  // Set display not inverted\n        oledcmd(0xAF);  // Set display On\n        oledClear();\n    }\n\n    ///////////////////////////////enum\n\n\n    export enum NeoPixelColors {\n        //% block=red\n        Red = 0xFF0000,\n        //% block=orange\n        Orange = 0xFFA500,\n        //% block=yellow\n        Yellow = 0xFFFF00,\n        //% block=green\n        Green = 0x00FF00,\n        //% block=blue\n        Blue = 0x0000FF,\n        //% block=indigo\n        Indigo = 0x4b0082,\n        //% block=violet\n        Violet = 0x8a2be2,\n        //% block=purple\n        Purple = 0xFF00FF,\n        //% block=white\n        White = 0xFFFFFF,\n        //% block=black\n        Black = 0x000000\n    }\n\n    /**\n     * Different modes for RGB or RGB+W NeoPixel strips\n     */\n    export enum NeoPixelMode {\n        //% block=\"RGB (GRB format)\"\n        RGB = 0,\n        //% block=\"RGB+W\"\n        RGBW = 1,\n        //% block=\"RGB (RGB format)\"\n        RGB_RGB = 2\n    }\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n    /////////////////////////////User_function//////////////////\n\n    //% line.min=1 line.max=8 line.defl=1\n    //% text.defl=\"Hello,ELECFREAKS\"\n    //% block=\"OLED show line %line|text %text\"\n    //% subcategory=Display group=\"OLED\" color=#00B1ED\n    export function showUserText(line: number, text: string) {\n        if (firstoledinit) {\n            oledinit()\n            firstoledinit = false\n        }\n        if (text.length > 16) {\n            text = text.substr(0, 16)\n        }\n        line = line - 1\n        setText(line, 0);\n        for (let c of text) {\n            putChar(c);\n        }\n\n        for (let i = text.length; i < 16; i++) {\n            setText(line, i);\n            putChar(\" \");\n        }\n    }\n    //% line.min=1 line.max=8 line.defl=2 \n    //% n.defl=20200508\n    //% block=\"OLED show line %line|number %n\"\n    //% subcategory=Display group=\"OLED\" color=#00B1ED\n    export function showUserNumber(line: number, n: number) {\n        if (firstoledinit) {\n            oledinit()\n            firstoledinit = false\n        }\n        showUserText(line, \"\" + n)\n    }\n    //% block=\"clear display\" color=#00B1ED\n    //% subcategory=Display group=\"OLED\"\n    export function oledClear() {\n        //oledcmd(DISPLAY_OFF);   //display off\n        for (let j = 0; j < 8; j++) {\n            setText(j, 0);\n            {\n                for (let i = 0; i < 16; i++)  //clear all columns\n                {\n                    putChar(' ');\n                }\n            }\n        }\n        //oledcmd(DISPLAY_ON);    //display on\n        setText(0, 0);\n    }\n    /**\n   * Create a new driver Grove - 4-Digit Display\n   * @param clkPin value of clk pin number\n   * @param dataPin value of data pin number\n   */\n    //% blockId=grove_tm1637_create block=\"connect 4-Digit cPin %cPin dPin %dPin\"\n    //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" blockSetVariable=display color=#EA5532\n    export function tm1637Create(cPin: DigitalPin, dPin: DigitalPin, intensity: number = 7, count: number = 4): TM1637LEDs {\n        let display = new TM1637LEDs();\n        display.clk = cPin\n        display.dio = dPin\n        if ((count < 1) || (count > 5)) count = 4;\n        display.count = count;\n        display.brightness = intensity;\n        display.init();\n        return display;\n    }\n    export class TM1637LEDs {\n        buf: Buffer;\n        clk: DigitalPin;\n        dio: DigitalPin;\n        _ON: number;\n        brightness: number;\n        count: number;  // number of LEDs\n        /**\n         * initial TM1637\n         */\n        init(): void {\n            pins.digitalWritePin(this.clk, 0);\n            pins.digitalWritePin(this.dio, 0);\n            this._ON = 8;\n            this.buf = pins.createBuffer(this.count);\n            this.clear();\n        }\n        /**\n         * Start \n         */\n        _start() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        /**\n         * Stop\n         */\n        _stop() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.dio, 1);\n        }\n        /**\n         * send command1\n         */\n        _write_data_cmd() {\n            this._start();\n            this._write_byte(TM1637_CMD1);\n            this._stop();\n        }\n        /**\n         * send command3\n         */\n        _write_dsp_ctrl() {\n            this._start();\n            this._write_byte(TM1637_CMD3 | this._ON | this.brightness);\n            this._stop();\n        }\n        /**\n         * send a byte to 2-wire interface\n         */\n        _write_byte(b: number) {\n            for (let i = 0; i < 8; i++) {\n                pins.digitalWritePin(this.dio, (b >> i) & 1);\n                pins.digitalWritePin(this.clk, 1);\n                pins.digitalWritePin(this.clk, 0);\n            }\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _intensity(val: number = 7) {\n            this._ON = 8;\n            this.brightness = val - 1;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n        /**\n         * set data to TM1637, with given bit\n         */\n        _dat(bit: number, dat: number) {\n            this._write_data_cmd();\n            this._start();\n            this._write_byte(TM1637_CMD2 | (bit % this.count))\n            this._write_byte(dat);\n            this._stop();\n            this._write_dsp_ctrl();\n        }\n        /**\n         * Show a single number from 0 to 9 at a specified digit of Grove - 4-Digit Display\n         * @param dispData value of number\n         * @param bitAddr value of bit number\n         */\n        //% blockId=grove_tm1637_display_bit block=\"%display|show single number|%num|at digit|%bit\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        //% bit.defl=1 bit.min=0 bit.max=9\n        showbit(num: number = 5, bit: number = 0) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            this.buf[bit % this.count] = _SEGMENTS[num % 16]\n            this._dat(bit, _SEGMENTS[num % 16])\n        }\n        /**\n         * Show a 4 digits number on display\n         * @param dispData value of number\n         */\n        //% blockId=grove_tm1637_display_number block=\"%display|show number|%num\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        showNumber(num: number) {\n            if (num < 0) {\n                num = -num\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n                this._dat(0, 0x40) // '-'\n            }\n            else {\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n            }\n        }\n        /**\n         * show or hide dot point. \n         * @param bit is the position, eg: 1\n         * @param show is show/hide dp, eg: true\n         */\n        //% blockId=\"TM1637_showDP\" block=\"%display|DotPoint at %bit|show $show\"\n        //% show.shadow=\"toggleOnOff\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        showDP(bit: number = 1, show: boolean = true) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            bit = bit % this.count\n            if (show) this._dat(bit, this.buf[bit] | 0x80)\n            else this._dat(bit, this.buf[bit] & 0x7F)\n        }\n        /**\n         * clear LED. \n         */\n        //% blockId=\"TM1637_clear\" block=\"clear display %display\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        clear() {\n            for (let i = 0; i < this.count; i++) {\n                this._dat(i, 0)\n                this.buf[i] = 0\n            }\n        }\n    }\n    //% shim=sendBufferAsm\n    function sendBuffer(buf: Buffer, pin: DigitalPin) {\n    }\n    export class Strip {\n        buf: Buffer;\n        pin: DigitalPin;\n        // TODO: encode as bytes instead of 32bit\n        brightness: number;\n        start: number; // start offset in LED strip\n        _length: number; // number of LEDs\n        _mode: NeoPixelMode;\n        _matrixWidth: number; // number of leds in a matrix - if any\n\n        /**\n         * Shows all LEDs to a given color (range 0-255 for r, g, b).\n         * @param rgb RGB color of the LED\n         */\n        //% blockId=\"neopixel_set_strip_color\" block=\"%strip|show color %rgb=neopixel_colors\"\n        //% weight=85 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        showColor(rgb: number) {\n            rgb = rgb >> 0;\n            this.setAllRGB(rgb);\n            this.show();\n        }\n\n        /**\n         * Shows a rainbow pattern on all LEDs.\n         * @param startHue the start hue value for the rainbow, eg: 1\n         * @param endHue the end hue value for the rainbow, eg: 360\n         */\n        //% blockId=\"neopixel_set_strip_rainbow\" block=\"%strip|show rainbow from %startHue|to %endHue\"\n        //% weight=85 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        showRainbow(startHue: number = 1, endHue: number = 360) {\n            if (this._length <= 0) return;\n\n            startHue = startHue >> 0;\n            endHue = endHue >> 0;\n            const saturation = 100;\n            const luminance = 50;\n            const steps = this._length;\n            const direction = HueInterpolationDirection.Clockwise;\n\n            //hue\n            const h1 = startHue;\n            const h2 = endHue;\n            const hDistCW = ((h2 + 360) - h1) % 360;\n            const hStepCW = Math.idiv((hDistCW * 100), steps);\n            const hDistCCW = ((h1 + 360) - h2) % 360;\n            const hStepCCW = Math.idiv(-(hDistCCW * 100), steps);\n            let hStep: number;\n            if (direction === HueInterpolationDirection.Clockwise) {\n                hStep = hStepCW;\n            } else if (direction === HueInterpolationDirection.CounterClockwise) {\n                hStep = hStepCCW;\n            } else {\n                hStep = hDistCW < hDistCCW ? hStepCW : hStepCCW;\n            }\n            const h1_100 = h1 * 100; //we multiply by 100 so we keep more accurate results while doing interpolation\n\n            //sat\n            const s1 = saturation;\n            const s2 = saturation;\n            const sDist = s2 - s1;\n            const sStep = Math.idiv(sDist, steps);\n            const s1_100 = s1 * 100;\n\n            //lum\n            const l1 = luminance;\n            const l2 = luminance;\n            const lDist = l2 - l1;\n            const lStep = Math.idiv(lDist, steps);\n            const l1_100 = l1 * 100\n\n            //interpolate\n            if (steps === 1) {\n                this.setPixelColor(0, hsl(h1 + hStep, s1 + sStep, l1 + lStep))\n            } else {\n                this.setPixelColor(0, hsl(startHue, saturation, luminance));\n                for (let i = 1; i < steps - 1; i++) {\n                    const h = Math.idiv((h1_100 + i * hStep), 100) + 360;\n                    const s = Math.idiv((s1_100 + i * sStep), 100);\n                    const l = Math.idiv((l1_100 + i * lStep), 100);\n                    this.setPixelColor(i, hsl(h, s, l));\n                }\n                this.setPixelColor(steps - 1, hsl(endHue, saturation, luminance));\n            }\n            this.show();\n        }\n\n        /**\n         * Set LED to a given color (range 0-255 for r, g, b).\n         * You need to call ``show`` to make the changes visible.\n         * @param pixeloffset position of the NeoPixel in the strip\n         * @param rgb RGB color of the LED\n         */\n        //% blockId=\"neopixel_set_pixel_color\" block=\"%strip|set pixel color at %pixeloffset|to %rgb=neopixel_colors\"\n        //% weight=80 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setPixelColor(pixeloffset: number, rgb: number): void {\n            this.setPixelRGB(pixeloffset >> 0, rgb >> 0);\n        }\n\n        /**\n         * Send all the changes to the strip.\n         */\n        //% blockId=\"neopixel_show\" block=\"%strip|show\" \n        //% weight=79\n        //% parts=\"neopixel\" subcategory=Neopixel\n        show() {\n            sendBuffer(this.buf, this.pin);\n        }\n\n        /**\n         * Turn off all LEDs.\n         * You need to call ``show`` to make the changes visible.\n         */\n        //% blockId=\"neopixel_clear\" block=\"%strip|clear\"\n        //% weight=76 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        clear(): void {\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.fill(0, this.start * stride, this._length * stride);\n        }\n\n        /**\n         * Set the brightness of the strip. This flag only applies to future operation.\n         * @param brightness a measure of LED brightness in 0-255. eg: 255\n         */\n        //% blockId=\"neopixel_set_brightness\" block=\"%strip|set brightness %brightness\" \n        //% weight=59 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setBrightness(brightness: number): void {\n            this.brightness = brightness & 0xff;\n        }\n        /**\n         * Gets the number of pixels declared on the strip\n         */\n        //% blockId=\"neopixel_length\" block=\"%strip|length\" blockGap=8\n        //% subcategory=\"Neopixel\"\n        //% weight=60 advanced=true\n        length() {\n            return this._length;\n        }\n        /**\n         * Create a range of LEDs.\n         * @param start offset in the LED strip to start the range\n         * @param length number of LEDs in the range. eg: 4\n         */\n        //% weight=89 color=#EA5532\n        //% blockId=\"neopixel_range\" block=\"%strip|range from %start|with %length|leds\"\n        //% parts=\"neopixel\"\n        //% blockSetVariable=range subcategory=Neopixel\n        range(start: number, length: number): Strip {\n            start = start >> 0;\n            length = length >> 0;\n            let strip = new Strip();\n            strip.buf = this.buf;\n            strip.pin = this.pin;\n            strip.brightness = this.brightness;\n            strip.start = this.start + Math.clamp(0, this._length - 1, start);\n            strip._length = Math.clamp(0, this._length - (strip.start - this.start), length);\n            strip._matrixWidth = 0;\n            strip._mode = this._mode;\n            return strip;\n        }\n\n        /**\n         * Shift LEDs forward and clear with zeros.\n         * You need to call ``show`` to make the changes visible.\n         * @param offset number of pixels to shift forward, eg: 1\n         */\n        //% blockId=\"neopixel_shift\" block=\"%strip|shift pixels by %offset\" \n        //% weight=40 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        shift(offset: number = 1): void {\n            offset = offset >> 0;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.shift(-offset * stride, this.start * stride, this._length * stride)\n        }\n\n        /**\n         * Rotate LEDs forward.\n         * You need to call ``show`` to make the changes visible.\n         * @param offset number of pixels to rotate forward, eg: 1\n         */\n        //% blockId=\"neopixel_rotate\" block=\"%strip|rotate pixels by %offset\" \n        //% weight=39 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        rotate(offset: number = 1): void {\n            offset = offset >> 0;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.rotate(-offset * stride, this.start * stride, this._length * stride)\n        }\n\n        /**\n         * Set the pin where the neopixel is connected, defaults to P0.\n         */\n        //% weight=10 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setPin(pin: DigitalPin): void {\n            this.pin = pin;\n            pins.digitalWritePin(this.pin, 0);\n            // don't yield to avoid races on initialization\n        }\n\n        private setBufferRGB(offset: number, red: number, green: number, blue: number): void {\n            if (this._mode === NeoPixelMode.RGB_RGB) {\n                this.buf[offset + 0] = red;\n                this.buf[offset + 1] = green;\n            } else {\n                this.buf[offset + 0] = green;\n                this.buf[offset + 1] = red;\n            }\n            this.buf[offset + 2] = blue;\n        }\n\n        private setAllRGB(rgb: number) {\n            let red = unpackR(rgb);\n            let green = unpackG(rgb);\n            let blue = unpackB(rgb);\n\n            const br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            const end = this.start + this._length;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            for (let i = this.start; i < end; ++i) {\n                this.setBufferRGB(i * stride, red, green, blue)\n            }\n        }\n        private setPixelRGB(pixeloffset: number, rgb: number): void {\n            if (pixeloffset < 0\n                || pixeloffset >= this._length)\n                return;\n\n            let stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            pixeloffset = (pixeloffset + this.start) * stride;\n\n            let red = unpackR(rgb);\n            let green = unpackG(rgb);\n            let blue = unpackB(rgb);\n\n            let br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            this.setBufferRGB(pixeloffset, red, green, blue)\n        }\n\n    }\n\n    /**\n     * Create a new NeoPixel driver for `numleds` LEDs.\n     * @param pin the pin where the neopixel is connected.\n     * @param numleds number of leds in the strip, eg: 24,30,60,64\n     */\n    //% blockId=\"neopixel_create\" block=\"NeoPixel at pin %Rjpin|with %numleds|leds as %mode\"\n    //% weight=90 color=#EA5532\n    //% parts=\"neopixel\"\n    //% trackArgs=0,2\n    //% blockSetVariable=strip subcategory=Neopixel\n    export function create(Rjpin: DigitalRJPin, numleds: number, mode: NeoPixelMode): Strip {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        let strip = new Strip();\n        let stride = mode === NeoPixelMode.RGBW ? 4 : 3;\n        strip.buf = pins.createBuffer(numleds * stride);\n        strip.start = 0;\n        strip._length = numleds;\n        strip._mode = mode;\n        strip._matrixWidth = 0;\n        strip.setBrightness(50)\n        strip.setPin(pin)\n        return strip;\n    }\n\n    /**\n     * Converts red, green, blue channels into a RGB color\n     * @param red value of the red channel between 0 and 255. eg: 255\n     * @param green value of the green channel between 0 and 255. eg: 255\n     * @param blue value of the blue channel between 0 and 255. eg: 255\n     */\n    //% weight=1 subcategory=Neopixel color=#EA5532\n    //% blockId=\"neopixel_rgb\" block=\"red %red|green %green|blue %blue\"\n    export function rgb(red: number, green: number, blue: number): number {\n        return packRGB(red, green, blue);\n    }\n\n    /**\n     * Gets the RGB value of a known color\n    */\n    //% weight=2 subcategory=Neopixel color=#EA5532\n    //% blockId=\"neopixel_colors\" block=\"%color\"\n    export function colors(color: NeoPixelColors): number {\n        return color;\n    }\n\n    function packRGB(a: number, b: number, c: number): number {\n        return ((a & 0xFF) << 16) | ((b & 0xFF) << 8) | (c & 0xFF);\n    }\n    function unpackR(rgb: number): number {\n        let r = (rgb >> 16) & 0xFF;\n        return r;\n    }\n    function unpackG(rgb: number): number {\n        let g = (rgb >> 8) & 0xFF;\n        return g;\n    }\n    function unpackB(rgb: number): number {\n        let b = (rgb) & 0xFF;\n        return b;\n    }\n\n    /**\n     * Converts a hue saturation luminosity value into a RGB color\n     * @param h hue from 0 to 360\n     * @param s saturation from 0 to 99\n     * @param l luminosity from 0 to 99\n     */\n    //% blockId=neopixelHSL block=\"hue %h|saturation %s|luminosity %l\" subcategory=Neopixel color=#EA5532\n    export function hsl(h: number, s: number, l: number): number {\n        h = Math.round(h);\n        s = Math.round(s);\n        l = Math.round(l);\n\n        h = h % 360;\n        s = Math.clamp(0, 99, s);\n        l = Math.clamp(0, 99, l);\n        let c = Math.idiv((((100 - Math.abs(2 * l - 100)) * s) << 8), 10000); //chroma, [0,255]\n        let h1 = Math.idiv(h, 60);//[0,6]\n        let h2 = Math.idiv((h - h1 * 60) * 256, 60);//[0,255]\n        let temp = Math.abs((((h1 % 2) << 8) + h2) - 256);\n        let x = (c * (256 - (temp))) >> 8;//[0,255], second largest component of this color\n        let r$:\n            number;\n        let g$:\n            number;\n        let b$:\n            number;\n        if (h1 == 0) {\n            r$ = c;\n            g$ = x;\n            b$ = 0;\n        }\n        else if (h1 == 1) {\n            r$ = x;\n            g$ = c;\n            b$ = 0;\n        }\n        else if (h1 == 2) {\n            r$ = 0;\n            g$ = c;\n            b$ = x;\n        }\n        else if (h1 == 3) {\n            r$ = 0;\n            g$ = x;\n            b$ = c;\n        }\n        else if (h1 == 4) {\n            r$ = x;\n            g$ = 0;\n            b$ = c;\n        }\n        else if (h1 == 5) {\n            r$ = c;\n            g$ = 0;\n            b$ = x;\n        }\n        let m = Math.idiv((Math.idiv((l * 2 << 8), 100) - c), 2);\n        let r = r$ + m;\n        let g = g$ + m;\n        let b = b$ + m;\n        return packRGB(r, g, b);\n    }\n\n    export enum HueInterpolationDirection {\n        Clockwise,\n        CounterClockwise,\n        Shortest\n    }\n}\n","planetxbasic.ts":"/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#00B1ED  icon=\"\\uf005\" block=\"Connected\" blockId=\"PlanetX_Connected\"\n//% groups='[\"Digital\", \"Analog\", \"IIC Port\"]'\nnamespace Connected {\n    \n    ////////////////////////paj7620//////////////////////\n    let gesture_first_init = true\n    const initRegisterArray: number[] = [\n        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17,\n        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F,\n        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14,\n        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27,\n        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01,\n        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00,\n        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20,\n        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37,\n        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A,\n        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F,\n        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30,\n        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19,\n        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04,\n        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00,\n        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00,\n        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F,\n        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07,\n        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01,\n        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F,\n        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01,\n        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40,\n        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E,\n        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00,\n        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08,\n        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00,\n        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01,\n        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01,\n        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01\n    ];\n    \n    /////////////////////////color/////////////////////////\n    const APDS9960_ADDR = 0x39\n    const APDS9960_ENABLE = 0x80\n    const APDS9960_ATIME = 0x81\n    const APDS9960_CONTROL = 0x8F\n    const APDS9960_STATUS = 0x93\n    const APDS9960_CDATAL = 0x94\n    const APDS9960_CDATAH = 0x95\n    const APDS9960_RDATAL = 0x96\n    const APDS9960_RDATAH = 0x97\n    const APDS9960_GDATAL = 0x98\n    const APDS9960_GDATAH = 0x99\n    const APDS9960_BDATAL = 0x9A\n    const APDS9960_BDATAH = 0x9B\n    const APDS9960_GCONF4 = 0xAB\n    const APDS9960_AICLEAR = 0xE7\n    let color_first_init = false\n\n    function i2cwrite_color(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n    function i2cread_color(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n    function rgb2hsl(color_r: number, color_g: number, color_b: number): number {\n        let Hue = 0\n        let R = color_r * 100 / 255;\n        let G = color_g * 100 / 255;\n        let B = color_b * 100 / 255;\n        let maxVal = Math.max(R, Math.max(G, B))\n        let minVal = Math.min(R, Math.min(G, B))\n        let Delta = maxVal - minVal;\n\n        if (Delta < 0) {\n            Hue = 0;\n        }\n        else if (maxVal == R && G >= B) {\n            Hue = (60 * ((G - B) * 100 / Delta)) / 100;\n        }\n        else if (maxVal == R && G < B) {\n            Hue = (60 * ((G - B) * 100 / Delta) + 360 * 100) / 100;\n        }\n        else if (maxVal == G) {\n            Hue = (60 * ((B - R) * 100 / Delta) + 120 * 100) / 100;\n        }\n        else if (maxVal == B) {\n            Hue = (60 * ((R - G) * 100 / Delta) + 240 * 100) / 100;\n        }\n        return Hue\n    }\n    function initModule(): void {\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ATIME, 252)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_CONTROL, 0x03)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_GCONF4, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_AICLEAR, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x01)\n        color_first_init = true\n    }\n    function colorMode(): void {\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_ENABLE) | 0x2;\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, tmp);\n    }\n\n    ///////////////////////////////////////////////////////MP3\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    /*\n    * Play status selection button list\n    */\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(100)\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,        \n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum Distance_Unit_List {\n        //% block=\"cm\" \n        Distance_Unit_cm,\n\n        //% block=\"foot\"\n        Distance_Unit_foot,\n    }\n    export enum ButtonStateList {\n        //% block=\"C\"\n        C,\n        //% block=\"D\"\n        D,\n        //% block=\"C+D\"\n        CD\n    }\n    export enum GestureType {\n        //% block=\"None\"\n        None = 0,\n        //% block=\"Right\"\n        Right = 1,\n        //% block=\"Left\"\n        Left = 2,\n        //% block=\"Up\"\n        Up = 3,\n        //% block=\"Down\"\n        Down = 4,\n        //% block=\"Forward\"\n        Forward = 5,\n        //% block=\"Backward\"\n        Backward = 6,\n        //% block=\"Clockwise\"\n        Clockwise = 7,\n        //% block=\"Anticlockwise\"\n        Anticlockwise = 8,\n        //% block=\"Wave\"\n        Wave = 9\n    }\n    export enum ColorList {\n        //% block=\"Red\"\n        red,\n        //% block=\"Green\"\n        green,\n        //% block=\"Blue\"\n        blue,\n        //% block=\"Cyan\"\n        cyan,\n        //% block=\"Magenta\"\n        magenta,\n        //% block=\"Yellow\"\n        yellow,\n        //% block=\"White\"\n        white\n    }\n\n    ///////////////////////////////////blocks/////////////////////////////\n\n    //% blockId=\"readwaterLevel\" block=\"Water level sensor %Rjpin value(0~100)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function waterLevel(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let voltage = 0, waterlevel = 0;\n        voltage = pins.map(\n            pins.analogReadPin(pin),\n            50,\n            600,\n            0,\n            100\n        );\n        if (voltage < 0) {\n            voltage = 0\n        }\n        waterlevel = voltage;\n        return Math.round(waterlevel)\n    }\n\n    let distance_last = 0\n\n    //% blockId=sonarbit block=\"Ultrasonic sensor pinT %tPin pinE %ePin distance %distance_unit\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% distance_unit.fieldEditor=\"gridpicker\"\n    //% distance_unit.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function ultrasoundSensor(tPin: DigitalPin, ePin: DigitalPin, distance_unit: Distance_Unit_List): number {\n        let pinT = tPin\n        let pinE = ePin\n        pins.setPull(pinT, PinPullMode.PullNone)\n        pins.digitalWritePin(pinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(pinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(pinT, 0)\n\n        // read pulse\n        let d = pins.pulseIn(pinE, PulseValue.High, 25000)\n        let version = control.hardwareVersion()\n        let distance = d * 34 / 2 / 1000\n        if (version == \"1\") {\n            distance = distance * 3 / 2\n        }\n\n        if (distance > 430) {\n            distance = 0\n        }\n\n        if (distance == 0) {\n            distance = distance_last\n            distance_last = 0\n        }\n        else {\n            distance_last = distance\n        }\n\n        switch (distance_unit) {\n            case Distance_Unit_List.Distance_Unit_cm:\n                return Math.floor(distance)  //cm\n                break\n            case Distance_Unit_List.Distance_Unit_foot:\n                return Math.floor(distance / 30.48)   //foot\n                break\n            default:\n                return 0\n        }\n    }\n\n    export class PAJ7620 {\n        private paj7620WriteReg(addr: number, cmd: number) {\n            let buf: Buffer = pins.createBuffer(2);\n            buf[0] = addr;\n            buf[1] = cmd;\n            pins.i2cWriteBuffer(0x73, buf, false);\n        }\n        private paj7620ReadReg(addr: number): number {\n            let buf: Buffer = pins.createBuffer(1);\n            buf[0] = addr;\n            pins.i2cWriteBuffer(0x73, buf, false);\n            buf = pins.i2cReadBuffer(0x73, 1, false);\n            return buf[0];\n        }\n        private paj7620SelectBank(bank: number) {\n            if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n        }\n        private paj7620Init() {\n            let temp = 0;\n            this.paj7620SelectBank(0);\n            temp = this.paj7620ReadReg(0);\n            if (temp == 0x20) {\n                for (let i = 0; i < 438; i += 2) {\n                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n                }\n            }\n            this.paj7620SelectBank(0);\n        }\n        init() {\n            this.paj7620Init();\n            basic.pause(200);\n        }\n        read(): number {\n            let data = 0, result = 0;\n            data = this.paj7620ReadReg(0x43);\n            switch (data) {\n                case 0x01:\n                    result = GestureType.Right;\n                    break;\n                case 0x02:\n                    result = GestureType.Left;\n                    break;\n                case 0x04:\n                    result = GestureType.Up;\n                    break;\n                case 0x08:\n                    result = GestureType.Down;\n                    break;\n                case 0x10:\n                    result = GestureType.Forward;\n                    break;\n                case 0x20:\n                    result = GestureType.Backward;\n                    break;\n                case 0x40:\n                    result = GestureType.Clockwise;\n                    break;\n                case 0x80:\n                    result = GestureType.Anticlockwise;\n                    break;\n                default:\n                    data = this.paj7620ReadReg(0x44);\n                    if (data == 0x01)\n                        result = GestureType.Wave;\n                    break;\n            }\n            return result;\n        }\n    }\n    const gestureEventId = 3100;\n    let lastGesture = GestureType.None;\n    let paj7620 = new PAJ7620();\n    //% blockId= gesture_create_event block=\"Gesture sensor IIC port is %gesture\"\n    //% gesture.fieldEditor=\"gridpicker\" gesture.fieldOptions.columns=3\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function onGesture(gesture: GestureType, handler: () => void) {\n        control.onEvent(gestureEventId, gesture, handler);\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        control.inBackground(() => {\n            while (true) {\n                const gesture = paj7620.read();\n                if (gesture != lastGesture) {\n                    lastGesture = gesture;\n                    control.raiseEvent(gestureEventId, lastGesture);\n                }\n                basic.pause(200);\n            }\n        })\n    }\n\n    //% blockId= gesture_get_event block=\"Gesture sensor IIC port detects\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function getGesture(): number {\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        const gesture = paj7620.read();\n        return gesture\n    }\n\n\n\n\n    //% blockId=apds9960_readcolor block=\"Color sensor IIC port color HUE(0~360)\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readColor(): number {\n        if (color_first_init == false) {\n            initModule()\n            colorMode()\n        }\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        while (!tmp) {\n            basic.pause(5);\n            tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        }\n        let c = i2cread_color(APDS9960_ADDR, APDS9960_CDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_CDATAH) * 256;\n        let r = i2cread_color(APDS9960_ADDR, APDS9960_RDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_RDATAH) * 256;\n        let g = i2cread_color(APDS9960_ADDR, APDS9960_GDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_GDATAH) * 256;\n        let b = i2cread_color(APDS9960_ADDR, APDS9960_BDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_BDATAH) * 256;\n        // map to rgb based on clear channel\n        let avg = c / 3;\n        r = r * 255 / avg;\n        g = g * 255 / avg;\n        b = b * 255 / avg;\n        //let hue = rgb2hue(r, g, b);\n        let hue = rgb2hsl(r, g, b)\n        return hue\n    }\n    //% block=\"Color sensor IIC port detects %color\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% color.fieldEditor=\"gridpicker\" color.fieldOptions.columns=3\n    export function checkColor(color: ColorList): boolean {\n        let hue = readColor()\n        switch (color) {\n            case ColorList.red:\n                if (hue > 330 || hue < 20) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.green:\n                if (hue > 120 && 180 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.blue:\n                if (hue > 210 && 270 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.cyan:\n                if (hue > 190 && 210 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.magenta:\n                if (hue > 260 && 330 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.yellow:\n                if (hue > 30 && 120 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.white:\n                if (hue >= 180 && 190 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n        }\n    }\n\n    //% blockId=\"potentiometer\" block=\"Trimpot %Rjpin analog value\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Input color=#E2C438 group=\"Analog\"\n    export function trimpot(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        return pins.analogReadPin(pin)\n    }\n    //% blockId=buttonab block=\"Button %Rjpin %button is pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonCD(Rjpin: DigitalRJPin, button: ButtonStateList): boolean {\n        let pinC = DigitalPin.P1\n        let pinD = DigitalPin.P2\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pinC = DigitalPin.P1\n                pinD = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pinC = DigitalPin.P2\n                pinD = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pinC = DigitalPin.P13\n                pinD = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pinC = DigitalPin.P15\n                pinD = DigitalPin.P16\n                break;\n            case DigitalRJPin.P3:\n                pinC = DigitalPin.P3\n                pinD = DigitalPin.P4\n                break;\n        }\n        pins.setPull(pinC, PinPullMode.PullUp)\n        pins.setPull(pinD, PinPullMode.PullUp)\n        if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 0 && button == ButtonStateList.CD) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinC) == 0 && pins.digitalReadPin(pinD) == 1 && button == ButtonStateList.C) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 1 && button == ButtonStateList.D) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    export enum ButtonState {\n        //% block=\"on\"\n        on = 1,\n        //% block=\"off\"\n        off = 2\n    }\n\n    const buttonEventSource = 5000\n    const buttonEventValue = {\n        CD_pressed: ButtonState.on,\n        CD_unpressed: ButtonState.off\n    }\n\n    //% block=\"on button %Rjpin %button pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=4\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonEvent(Rjpin: DigitalRJPin, button: ButtonStateList, handler: () => void) {\n        let ButtonPin_C = DigitalPin.P1\n        let ButtonPin_D = DigitalPin.P2\n        let pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P0\n        let pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                ButtonPin_C = DigitalPin.P1\n                ButtonPin_D = DigitalPin.P8\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P1\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P8\n                break;\n            case DigitalRJPin.J2:\n                ButtonPin_C = DigitalPin.P2\n                ButtonPin_D = DigitalPin.P12\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P2\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P12\n                break;\n            case DigitalRJPin.J3:\n                ButtonPin_C = DigitalPin.P13\n                ButtonPin_D = DigitalPin.P14\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P13\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P14\n                break;\n            case DigitalRJPin.J4:\n                ButtonPin_C = DigitalPin.P15\n                ButtonPin_D = DigitalPin.P16\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P15\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P16\n                break;\n            case DigitalRJPin.P3:\n                ButtonPin_C = DigitalPin.P3\n                ButtonPin_D = DigitalPin.P4\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P3\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P4\n                break;\n        }\n        if (button == ButtonStateList.C) {\n            pins.setPull(ButtonPin_C, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_C, PinEventType.Edge)\n            control.onEvent(pinEventSource_C, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.D) {\n            pins.setPull(ButtonPin_D, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_D, PinEventType.Edge)\n            control.onEvent(pinEventSource_D, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.CD) {\n            loops.everyInterval(50, function () {\n                if (pins.digitalReadPin(ButtonPin_C) == 0 && pins.digitalReadPin(ButtonPin_D) == 0) {\n                    control.raiseEvent(buttonEventSource, buttonEventValue.CD_pressed)\n                }\n            })\n            control.onEvent(buttonEventSource, buttonEventValue.CD_pressed, handler)\n        }\n    }\n\n    //% blockId=fans block=\"Motor fan %Rjpin toggle to $fanstate || speed %speed \\\\%\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% fanstate.shadow=\"toggleOnOff\"\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    //% speed.min=0 speed.max=100\n    //% expandableArgumentMode=\"toggle\"\n    export function motorFan(Rjpin: DigitalRJPin, fanstate: boolean, speed: number = 100): void {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.J3:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.J4:\n                pin = AnalogPin.P15\n                break;\n        }\n        if (fanstate) {\n            pins.analogSetPeriod(pin, 100)\n            pins.analogWritePin(pin, Math.map(speed, 0, 100, 0, 1023))\n        }\n        else {\n            pins.analogWritePin(pin, 0)\n            speed = 0\n        }\n    }\n\n\n    //% blockId=\"setLoopFolder\" block=\"loop play all the MP3s in the folder:$folderNum\"\n    //% folderNum.defl=\"01\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setLoopFolder(folderNum: string): void {\n        CMD = 0x17\n        para1 = 0\n        para2 = parseInt(folderNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    //% blockId=\"folderPlay\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum || repeatList: $myAns\"\n    //% folderNum.defl=\"01\" fileNum.defl=\"001\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function folderPlay(folderNum: string, fileNum: string, myAns: boolean = false): void {\n        CMD = 0x0F\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        if (myAns)\n            execute(0x19)\n    }\n\n    //% blockId=\"playFolderFilePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFilePort(folderNum: string, fileNum: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFolderFileVolumePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum with volume:$theVolume usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" theVolume.defl=\"10\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFileVolumePort(folderNum: string, fileNum: string, theVolume: string, Rjpin: DigitalRJPin): void {\n        \n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        \n        let volume = parseInt(theVolume)\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(200)\n\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"volumePort\" \n    //% block=\"set MP3 volume:$theVolume usingPin:$Rjpin\"\n    //% theVolume.defl=\"10\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function volumePort(theVolume: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        let volume = parseInt(theVolume)\n        if (volume > 30) {\n            volume = 30\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(300)\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n\n\n    //% blockId=\"setTracking\" \n    //% block=\"play the mp3 in order of:%tracking || repeatList: $myAns\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% tracking.defl=1\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setTracking(tracking: number, myAns: boolean = false): void {\n        CMD = 0x03\n        para1 = 0x00\n        para2 = tracking\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        execute(0x0D)\n        if (myAns)\n            execute(0x19)\n    }\n    //% blockId=MP3execute block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=\"setVolume\" block=\"Set volume(0~25):%volume\"\n    //% volume.min=0 volume.max=25\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setVolume(volume: number): void {\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 0x06\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=MP3setPort block=\"Set the MP3 port to %Rjpin\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function MP3SetPort(Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        setVolume(25)\n    }\n}","notlegos.ts":"// NotLegos Blocks\n\n//% block=\"Not LEGOs\" color=#0031AF weight=1000 icon=\"\\uf3a5\"\n//% groups=['MP3\",'Display', 'Laser', 'others']\nnamespace notLegos {\n\n    // Variables for MP3 and Volume Pot\n    let isPot = false\n    let potPin = AnalogPin.P0\n    let mp3bits = 0\n    let mp3Apin = SerialPin.P0\n    let mp3Bpin = SerialPin.P0\n    let mp3Cpin = SerialPin.P0\n    let mp3Avolume = 1\n    let mp3Bvolume = 1\n    let mp3Cvolume = 1\n    let relativeCvolume = 1\n    let lastMP3bit = \"\"\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n\n    // String Arrays for Full Player Sound Sets and Shuffled Playlists Thereof\n    let PlayerAwaitingMusic: string[] = []\n    let PlayerFailure: string[] = []\n    let PlayerHurry: string[] = []\n    let PlayerIntro: string[] = []\n    let PlayerIntroMusic: string[] = []\n    let PlayerLevelMusic: string[] = []\n    let PlayerLost: string[] = []\n    let PlayerLostMusic: string[] = []\n    let PlayerName: string[] = []\n    let PlayerNay: string[] = []\n    let PlayerOuch: string[] = []\n    let PlayerReady: string[] = []\n    let PlayerSuccess: string[] = []\n    let PlayerTutorialMusic: string[] = []\n    let PlayerWon: string[] = []\n    let PlayerWonMusic: string[] = []\n    let PlayerYay: string[] = []\n    let PlaylistAwaitingMusic: string[] = []\n    let PlaylistCorrect: string[] = []\n    let PlaylistExplosion: string[] = []\n    let PlaylistFailure: string[] = []\n    let PlaylistFire: string[] = []\n    let PlaylistGhost: string[] = []\n    let PlaylistHurry: string[] = []\n    let PlaylistIncorrect: string[] = []\n    let PlaylistIntro: string[] = []\n    let PlaylistLost: string[] = []\n    let PlaylistName: string[] = []\n    let PlaylistNay: string[] = []\n    let PlaylistOuch: string[] = []\n    let PlaylistReady: string[] = []\n    let PlaylistSlash: string[] = []\n    let PlaylistSpark: string[] = []\n    let PlaylistSplash: string[] = []\n    let PlaylistSuccess: string[] = []\n    let PlaylistWon: string[] = []\n    let PlaylistYay: string[] = []\n\n    // Sound Strings - Global\n    let VoiceTracks = \"10_1_90_1.75|10_2_90_3.65|10_3_50_11.5|10_4_90_0|10_5_90_0|10_6_90_4.65|10_7_90_7.15|10_8_90_4.8|10_9_90_3.75|10_10_90_5.05|10_11_90_0|10_12_90_0|10_13_90_3|10_14_90_3|10_15_90_3|10_16_90_4|10_17_90_0|10_18_90_3|10_19_90_3|10_20_90_4|10_21_90_2|10_22_90_0|10_23_90_2|10_24_90_2|10_25_90_6|10_26_90_6|10_27_90_6|10_28_90_6|10_29_90_6|10_30_90_6|10_31_90_6|10_32_90_6|10_33_90_8|10_34_90_9|10_35_90_6|10_36_90_6|10_37_90_6|10_38_90_6|10_39_90_6|10_40_90_6\".split(\"|\")\n    let CorrectSFX = \"7_1_100_4|7_2_100_8|7_3_100_8|7_4_100_6|7_5_100_10|7_6_100_8|7_7_100_6|7_8_100_4|7_9_100_17|7_10_100_9|7_11_100_4|7_12_100_8|7_13_100_12|7_14_100_7|7_15_100_10|7_16_100_9|7_17_100_10|7_18_100_9|7_19_100_8|7_20_100_4|7_21_100_7|7_22_100_26|7_23_100_5|7_24_100_4|7_25_100_10|7_26_100_7|7_27_100_7|7_28_100_6|7_29_100_7|7_30_100_7|7_31_100_12|7_32_100_4|7_33_100_6|7_34_100_6|7_35_100_6|7_36_100_6|7_37_100_5|7_38_100_3|7_39_100_6|7_40_100_6|7_41_100_6|7_42_100_8|7_43_100_6|7_44_100_8|7_45_100_6|7_46_100_5|7_47_100_5|7_48_100_12|7_49_100_3|7_50_100_7|7_51_100_8|7_52_100_11|7_53_100_6|7_54_100_2|7_55_100_5|7_56_100_7|7_57_100_8|7_58_100_7|7_59_100_6|7_60_100_7|7_61_100_6|7_62_100_8|7_63_100_5|7_64_100_5|7_65_100_7|7_66_100_9|7_67_100_6|7_68_100_6|7_69_100_7|7_70_100_10|7_71_100_7|7_72_100_5|7_73_100_6|7_74_100_8|7_75_100_3|7_76_100_3|7_77_100_6|7_78_100_7|7_79_100_4|7_80_100_6|7_81_100_2|7_82_100_3|7_83_100_3|7_84_100_1|7_85_100_3|7_86_100_6|7_87_100_7|7_88_100_5|7_89_100_3|7_90_100_5|7_91_100_3|7_92_100_3|7_93_100_2|7_94_100_3|7_95_100_3|7_96_100_1|7_99_100_1|7_100_100_1|7_101_100_1|7_102_100_1|7_103_100_1|7_104_100_3|7_105_100_1|7_106_100_1|7_107_100_4|7_108_100_4|7_109_100_1|7_110_100_1|7_111_100_1|7_112_100_1|7_113_100_1|7_114_100_2|7_115_100_1|7_116_100_1|7_117_100_1|7_118_100_1\".split(\"|\")\n    let IncorrectSFX = \"8_1_100_6|8_2_100_5|8_3_100_3|8_4_100_5|8_5_100_7|8_6_100_6|8_7_100_4|8_8_100_1|8_9_100_3|8_10_100_4|8_11_100_3|8_12_100_3|8_13_100_6|8_14_100_3|8_15_100_1|8_16_100_1|8_17_100_1|8_18_100_1|8_19_100_0|8_20_100_0|8_21_100_5|8_22_100_4|8_23_100_3|8_24_100_7\".split(\"|\")\n    let AllSFX = \"9_1_100_4.754|9_2_100_4.336|9_3_100_5.172|9_4_100_4.806|9_5_100_4.754|9_6_100_1.536|9_7_100_2.136|9_8_100_1.896|9_9_100_2.592|9_10_100_0.936|9_11_100_1.008|9_12_100_0.312|9_13_100_1.44|9_14_100_1.8|9_15_100_1.992|9_16_100_1.104|9_17_100_1.08|9_18_100_0.912|9_19_100_0.528|9_20_100_0.72|9_21_100_0.672|9_22_100_0.696|9_23_100_0.6|9_24_100_0.576|9_25_100_1.44|9_26_100_1.8|9_27_100_1.464|9_28_100_0.432|9_29_100_0.312|9_30_100_2.112|9_31_100_0.648|9_32_100_0.384|9_33_100_2.352|9_34_100_1.8|9_35_100_1.608|9_36_100_0.648|9_37_100_0.768|9_38_100_0.552|9_39_100_0.48|9_40_100_1.032|9_41_100_0.456|9_42_100_0.384|9_43_100_0.552|9_44_100_0.432|9_45_100_0.216|9_46_100_0.624|9_47_100_1.248|9_48_100_1.104|9_49_100_1.248|9_50_100_0.648|9_51_100_0.456|9_53_100_5.256|9_54_100_2.328|9_55_100_4.992|9_56_100_1.776|9_57_100_2.28|9_58_100_0.504|9_59_100_0.984|9_60_100_0.984|9_61_100_0.504|9_62_100_1.632|9_63_100_0.288|9_64_100_0.192|9_65_100_0.168|9_66_100_0.288|9_67_100_0.288|9_68_100_0.312|9_69_100_0.72|9_70_100_0.672|9_71_100_0.648|9_72_100_0.648|9_73_100_1.632|9_74_100_1.416|9_75_100_1.248|9_76_100_0.48|9_77_100_0.36|9_78_100_0.216|9_79_100_0.576|9_80_100_0.731|9_81_100_1.128|9_82_100_2.184|9_83_100_0.744|9_84_100_0.6|9_85_100_1.152|9_86_100_1.68|9_87_100_1.32|9_88_100_0.528|9_89_100_0.36|9_90_100_0.792|9_91_100_2.496|9_92_100_1.8|9_93_100_1.8|9_94_100_0.744|9_95_100_1.776|9_96_100_5.544|9_97_100_0.432|9_98_100_2.064|9_99_100_0.744|9_100_100_0.696|9_101_100_1.776|9_102_100_0.12|9_103_100_0.168|9_104_100_0.96|9_105_100_0.96|9_106_100_2.04|9_107_100_3.984|9_108_100_1.608|9_109_100_3.528|9_110_100_0.456|9_111_100_0.696|9_112_100_1.632|9_113_100_2.232\".split(\"|\")\n    let GhostSFX = \"9_1_100_4.754|9_2_100_4.336|9_3_100_5.172|9_4_100_4.806\".split(\"|\")\n    let FireSFX = \"9_6_100_1.536|9_15_100_1.992|9_53_100_5.256|9_106_100_2.04\".split(\"|\")\n    let ExplosionSFX = \"9_77_100_0.36|9_101_100_1.776|9_109_100_3.528\".split(\"|\")\n    let SplashSFX = \"9_33_100_2.352|9_34_100_1.8\".split(\"|\")\n    let SparkSFX = \"9_5_100_4.754|9_51_100_0.456|9_85_100_1.152|9_86_100_1.68|9_111_100_0.696|9_112_100_1.632\".split(\"|\")\n    let SlashSFX = \"9_10_100_0.936|9_25_100_1.44|9_28_100_0.432|9_32_100_0.384|9_50_100_0.648|9_59_100_0.984|9_63_100_0.288|9_64_100_0.192|9_65_100_0.168|9_66_100_0.288|9_67_100_0.288|9_68_100_0.312|9_69_100_0.72|9_75_100_1.248|9_76_100_0.48|9_77_100_0.36|9_78_100_0.216|9_89_100_0.36\".split(\"|\")\n    \n    // Music Strings - Super Mario Brothers\n    let SMBIntroMusic = \"1_1_75_2.808|1_2_75_3.912|1_3_75_7.81|1_4_75_4.992|1_5_75_3.918|1_6_75_12.382|1_7_75_3.204|1_8_75_6.648|1_9_75_6.168|1_10_75_7.464|1_11_75_9.36|1_12_75_9.038|1_13_75_10.605|1_14_75_3.492|1_15_75_9.613|1_16_75_3.48|1_17_75_5.58|1_18_75_5.041|1_19_75_6.336|1_20_75_5.424|1_21_75_7.2|1_22_75_5.424|1_23_75_3.317|1_24_75_7.262|1_25_75_5.59|1_26_75_5.52|1_27_75_10.776|1_28_75_4.944|1_29_75_5.496|1_30_75_4.032|1_31_75_6.264|1_32_75_3.918|1_33_75_4.44|1_34_75_10.152|1_35_75_8.097|1_36_75_7.706|1_37_75_3.317|1_38_75_6.87|1_39_75_4.466|1_40_75_5.877|1_41_75_3.432|1_42_75_7.392|1_43_75_6.768|1_44_75_2.616|1_45_75_6.269|1_46_75_1.188|1_47_75_2.088|1_48_75_2.124|1_49_75_8.228|1_50_75_15.647|1_51_75_9.064|1_52_75_10.152|1_53_75_13.008|1_54_75_14.16|1_55_75_14.236|1_56_75_15.792|1_57_75_7.392|1_58_75_4.368|1_59_75_9.384|1_60_75_7.653|1_61_75_8.76|1_62_75_8.952|1_63_75_12.024|1_64_75_4.284|1_65_75_6.048|1_66_75_9.072|1_67_75_4.68|1_68_75_6.138|1_69_75_5.208|1_70_75_9.576|1_71_75_8.045|1_72_75_8.045|1_73_75_5.407|1_74_75_3.186\".split(\"|\")\n    let SMBTutorialMusic = \"2_1_65_36|2_2_65_40|2_3_65_41|2_4_65_46|2_5_65_50|2_6_65_51|2_7_65_59|2_8_65_63|2_9_65_64|2_10_65_65|2_11_65_66|2_12_65_67|2_13_65_68|2_14_65_69|2_15_65_76|2_16_65_80|2_17_65_84|2_18_65_90|2_19_65_92|2_20_65_100|2_21_65_103|2_22_65_105|2_23_65_112|2_24_65_113|2_25_65_123|2_26_65_138|2_27_65_142|2_28_65_144|2_29_65_156|2_30_65_158|2_31_65_120|2_32_65_120|2_33_65_120|2_34_65_120|2_35_65_120|2_36_65_120\".split(\"|\")\n    let SMBAwaitingMusic = \"3_1_100_64|3_2_100_211|3_3_100_185|3_4_100_185|3_5_100_182|3_6_100_114|3_7_100_181|3_8_100_103|3_9_100_303|3_10_100_21|3_11_100_235|3_12_100_121|3_13_100_203|3_14_100_119|3_15_100_206|3_16_100_146|3_17_100_237|3_18_100_210|3_19_100_160\".split(\"|\")\n    let SMBLevelMusic = \"4_1_100_128|4_3_100_142|4_5_100_111|4_6_100_141|4_9_100_126|4_11_100_132|4_15_100_119|4_16_100_146|4_18_100_120|4_20_100_143|4_22_100_142|4_23_100_112|4_24_100_138|4_25_100_139|4_26_100_111|4_27_100_116|4_28_100_129|4_31_100_98|4_32_100_146|4_33_100_177|4_34_100_82|4_36_100_160|4_38_100_180|4_39_100_211|4_41_100_134|4_42_100_183|4_43_100_124|4_44_100_261|4_45_100_91|4_46_100_138|4_49_100_207|4_50_100_41|4_51_100_180|4_52_100_202|4_53_100_194|4_56_100_209|4_57_100_195|4_58_100_180|4_60_100_198|4_61_100_180|4_63_100_78|4_66_100_139|4_67_100_224|4_68_100_180|4_73_100_180|4_76_100_180|4_77_100_196|4_78_100_113|4_82_100_180|4_83_100_123|4_84_100_180|4_86_100_126|4_93_100_121|4_97_100_59|4_98_100_180|4_99_100_180|4_100_100_118|4_101_100_156|4_102_100_180|4_103_100_70|4_104_100_216|4_105_100_140|4_106_100_180|4_107_100_147|4_108_100_147|4_109_100_180|4_110_100_158|4_111_100_180|4_112_100_80|4_113_100_152|4_114_100_127|4_116_100_122|4_118_100_106|4_123_100_143|4_124_100_36|4_125_100_164|4_127_100_282|4_128_100_311|4_129_100_123|4_130_100_187|4_131_100_62|4_132_100_180|4_133_100_130|4_134_100_112|4_135_100_105|4_139_100_126|4_141_100_176|4_142_100_135|4_143_100_126|4_144_100_144|4_145_100_140|4_146_100_133|4_149_100_167|4_150_100_120|4_151_100_180|4_155_100_226|4_157_100_164|4_158_100_144|4_159_100_104|4_161_100_180|4_162_100_87|4_163_100_126|4_164_100_118|4_165_100_194|4_166_100_135|4_167_100_50|4_168_100_109|4_169_100_180|4_170_100_133|4_171_100_180|4_172_100_91|4_173_100_138|4_176_100_120|4_177_100_81|4_178_100_150|4_179_100_153|4_180_100_104|4_181_100_112\".split(\"|\")\n    let SMBWonMusic = \"5_1_100_4|5_2_100_17|5_3_100_29|5_4_100_172|5_5_100_13|5_6_100_248|5_7_100_11|5_8_100_445|5_9_100_241|5_10_100_244|5_11_100_20|5_12_100_7|5_13_100_28|5_14_100_74|5_15_100_15|5_16_100_74|5_17_100_17|5_18_100_17|5_19_100_15|5_20_100_38|5_21_100_42|5_22_100_67|5_23_100_8|5_24_100_8|5_25_100_13|5_26_100_17|5_27_100_5|5_28_100_122|5_29_100_226|5_30_100_79\".split(\"|\")\n    let SMBLostMusic = \"6_1_100_87|6_2_100_31|6_3_100_196|6_4_100_65|6_5_100_4|6_6_100_23|6_7_100_65|6_8_100_62|6_9_100_78|6_10_100_6|6_11_100_162\".split(\"|\")\n    \n    // Player Strings - Mario\n    let MarioSoundString = \"A_21_1_100_1.5|A_21_2_100_1|I_21_3_100_3.3|A_21_4_100_1.9|A_21_5_100_2.1|I_21_6_100_1.8|I_21_7_100_1.8|R_21_8_100_0.6|R_21_9_100_1.3|R_21_10_100_1.1|R_21_11_100_0.6|R_21_12_100_0.8|R_21_13_100_1.6|R_21_14_100_1.3|R_21_15_100_1.2|R_21_16_100_1.1|R_21_17_100_1.3|R_21_18_100_1|Y_21_19_100_0.2|Y_21_20_100_0.2|Y_21_21_100_0.3|Y_21_22_100_0.5|Y_21_23_100_0.6|Y_21_24_100_0.6|Y_21_25_100_0.6|Y_21_26_100_0.6|Y_21_27_100_0.6|Y_21_28_100_0.6|Y_21_29_100_0.7|Y_21_30_100_0.7|Y_21_31_100_0.7|Y_21_32_100_0.7|Y_21_33_100_0.7|Y_21_34_100_0.8|Y_21_35_100_0.8|Y_21_36_100_0.8|Y_21_37_100_0.8|Y_21_38_100_0.8|Y_21_39_100_0.8|Y_21_40_100_0.9|Y_21_41_100_0.9|Y_21_42_100_0.9|Y_21_43_100_0.9|Y_21_44_100_0.9|Y_21_45_100_0.9|Y_21_46_100_0.9|Y_21_47_100_1|Y_21_48_100_1|Y_21_49_100_1|Y_21_50_100_1|Y_21_51_100_1.1|Y_21_52_100_1.1|Y_21_53_100_1.1|Y_21_54_100_1.2|Y_21_55_100_1.2|Y_21_56_100_1.2|Y_21_57_100_1.2|Y_21_58_100_1.3|Y_21_59_100_1.3|Y_21_60_100_1.3|Y_21_61_100_1.4|Y_21_62_100_1.4|S_21_63_100_1|S_21_64_100_1.6|S_21_65_100_1.7|S_21_66_100_1.7|S_21_67_100_1.9|S_21_68_100_2.1|S_21_69_100_2.2|S_21_70_100_2.4|S_21_71_100_2.4|S_21_72_100_2.5|W_21_73_100_1.8|W_21_74_100_2|W_21_75_100_2.2|W_21_76_100_2.6|W_21_77_100_2.9|O_21_78_100_0.6|O_21_79_100_0.4|O_21_80_100_0.4|O_21_81_100_1.1|O_21_82_100_1.5|O_21_83_100_0.8|O_21_84_100_0.7|O_21_85_100_0.8|O_21_86_100_0.9|O_21_87_100_1.3|O_21_88_100_0.5|O_21_89_100_1|O_21_90_100_1|O_21_91_100_0.4|O_21_92_100_0.5|O_21_93_100_0.9|O_21_94_100_0.4|O_21_95_100_0.4|N_21_96_100_1|N_21_97_100_1.1|N_21_98_100_1|N_21_99_100_0.6|N_21_100_100_0.9|N_21_101_100_1.4|N_21_102_100_1.7|N_21_103_100_1.3|N_21_104_100_0.6|N_21_105_100_1.4|N_21_106_100_0.8|N_21_107_100_1.1|N_21_108_100_1.1|N_21_109_100_0.8|N_21_110_100_1.7|N_21_111_100_2.4|I_21_112_100_0.8|I_21_113_100_0.9|F_21_114_100_1.1|F_21_115_100_2.5|F_21_116_100_2.5|F_21_117_100_1.4|L_21_118_100_3.4|L_21_119_100_3.5|L_21_120_100_4.4|L_21_121_100_1.5|H_21_122_100_44.4\"\n\n    // BLOCK - Set the Player's Sounds\n    //% blockId=nl_player_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% weight=101\n    //% block=\"Set player to $player\"\n    export function setSounds(player: string): void {\n        let theSound = \"\"\n        let thisLetter = \"\"\n        let series = \"\"\n        let soundStrings: string[] = []\n        if (player == \"Mario\") {\n            soundStrings = MarioSoundString.split(\"|\")\n            series = \"SMB\"\n        }\n        if (series == \"SMB\") {\n            PlayerIntroMusic = SMBIntroMusic\n            PlayerTutorialMusic = SMBTutorialMusic\n            PlayerAwaitingMusic = SMBAwaitingMusic\n            PlayerLevelMusic = SMBLevelMusic\n            PlayerWonMusic = SMBWonMusic\n            PlayerLostMusic = SMBLostMusic\n        }\n        for (let sString of soundStrings) {\n            thisLetter = sString.charAt(0)\n            theSound = sString.substr(2, sString.length - 2)\n            if (thisLetter == \"A\") {\n                PlayerName.push(theSound)\n            } else if (thisLetter == \"R\") {\n                PlayerReady.push(theSound)\n            } else if (thisLetter == \"Y\") {\n                PlayerYay.push(theSound)\n            } else if (thisLetter == \"I\") {\n                PlayerIntro.push(theSound)\n            } else if (thisLetter == \"N\") {\n                PlayerNay.push(theSound)\n            } else if (thisLetter == \"O\") {\n                PlayerOuch.push(theSound)\n            } else if (thisLetter == \"S\") {\n                PlayerSuccess.push(theSound)\n            } else if (thisLetter == \"F\") {\n                PlayerFailure.push(theSound)\n            } else if (thisLetter == \"W\") {\n                PlayerWon.push(theSound)\n            } else if (thisLetter == \"L\") {\n                PlayerLost.push(theSound)\n            } else if (thisLetter == \"H\") {\n                PlayerHurry.push(theSound)\n            }\n        }\n    }    \n    \n    // Internal Function - Take a Sound from a Playlist After Filling it from a Soundbank if it's Empty\n    function takeReplenish(Playlist: any[], Soundbank: any[]) {\n        let returnSound = \"\"\n        returnSound = \"\"\n        if (Playlist.length == 0) {\n            for (let index = 0; index <= Soundbank.length - 1; index++) {\n                if (index == 0) {\n                    Playlist.push(Soundbank[index])\n                } else if (index >= 1) {\n                    Playlist.insertAt(randint(0, index), Soundbank[index])\n                }\n            }\n        }\n        returnSound = Playlist.shift()\n        return returnSound\n    }\n\n    // BLOCK - Fetch a Sound of a Type from a Category\n    //% blockId=nl_get_soundstring\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% weight=101\n    //% block=\"Get $Category sound $Type\"\n    export function getSoundString(Category: string, Type: string): string {\n        let returnString = \"\"\n        if (Category == \"Voice\") {\n            returnString = VoiceTracks[parseFloat(Type)]\n        } else if (Category == \"Player\") {\n            if (Type == \"Name\") {\n                returnString = takeReplenish(PlaylistName, PlayerName)\n            } else if (Type == \"Intro\") {\n                returnString = takeReplenish(PlaylistIntro, PlayerIntro)\n            } else if (Type == \"Ready\") {\n                returnString = takeReplenish(PlaylistReady, PlayerReady)\n            } else if (Type == \"Yay\") {\n                returnString = takeReplenish(PlaylistYay, PlayerYay)\n            } else if (Type == \"Success\") {\n                returnString = takeReplenish(PlaylistSuccess, PlayerSuccess)\n            } else if (Type == \"Nay\") {\n                returnString = takeReplenish(PlaylistNay, PlayerNay)\n            } else if (Type == \"Failure\") {\n                returnString = takeReplenish(PlaylistFailure, PlayerFailure)\n            } else if (Type == \"Won\") {\n                returnString = takeReplenish(PlaylistWon, PlayerWon)\n            } else if (Type == \"Lost\") {\n                returnString = takeReplenish(PlaylistLost, PlayerLost)\n            } else if (Type == \"Hurry\") {\n                returnString = takeReplenish(PlaylistHurry, PlayerHurry)\n            }\n        } else if (Category == \"SFX\") {\n            if (Type == \"Correct\") {\n                returnString = takeReplenish(PlaylistCorrect, CorrectSFX)\n            } else if (Type == \"Incorrect\") {\n                returnString = takeReplenish(PlaylistIncorrect, IncorrectSFX)\n            } else if (Type == \"Ghost\") {\n                returnString = takeReplenish(PlaylistGhost, GhostSFX)\n            } else if (Type == \"Fire\") {\n                returnString = takeReplenish(PlaylistFire, FireSFX)\n            } else if (Type == \"Explosion\") {\n                returnString = takeReplenish(PlaylistExplosion, ExplosionSFX)\n            } else if (Type == \"Splash\") {\n                returnString = takeReplenish(PlaylistSplash, SplashSFX)\n            } else if (Type == \"Spark\") {\n                returnString = takeReplenish(PlaylistSpark, SparkSFX)\n            } else if (Type == \"Slash\") {\n                returnString = takeReplenish(PlaylistSlash, SlashSFX)\n            }\n        } else if (Category == \"Music\") {\n            if (Type == \"Intro\") {\n                let PlaylistIntroMusic: number[] = []\n                returnString = takeReplenish(PlaylistIntroMusic, PlayerIntroMusic)\n            } else if (Type == \"Tutorial\") {\n                let PlaylistTutorialMusic: number[] = []\n                returnString = takeReplenish(PlaylistTutorialMusic, PlayerTutorialMusic)\n            } else if (Type == \"Awaiting\") {\n                returnString = takeReplenish(PlaylistAwaitingMusic, PlayerAwaitingMusic)\n            } else if (Type == \"Level\") {\n                let PlaylistLevelMusic: number[] = []\n                returnString = takeReplenish(PlaylistLevelMusic, PlayerLevelMusic)\n            } else if (Type == \"Won\") {\n                let PlaylistWonMusic: number[] = []\n                returnString = takeReplenish(PlaylistWonMusic, PlayerWonMusic)\n            } else if (Type == \"Lost\") {\n                let PlaylistLostMusic: number[] = []\n                returnString = takeReplenish(PlaylistLostMusic, PlayerLostMusic)\n            }\n        }\n        return returnString\n    }\n\n\n    ///////////////////////////////////////////////////////MP3\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(20) // Was 100; problematic at 10\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n    function sendMP3volume(sPin: SerialPin): void {\n        let theVolume = 5\n        if (sPin == mp3Apin) {\n            theVolume = Math.round(potRead() * mp3Avolume)\n        } else if (sPin == mp3Bpin) {\n            theVolume = Math.round(potRead() * mp3Bvolume)\n        } else if (sPin == mp3Cpin) {\n            theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    function sendMP3volumeFast(sPin: SerialPin): void {\n        let theVolume = 5\n        if (sPin == mp3Apin) {\n            theVolume = Math.round(potRead() * mp3Avolume)\n        } else if (sPin == mp3Bpin) {\n            theVolume = Math.round(potRead() * mp3Bvolume)\n        } else if (sPin == mp3Cpin) {\n            theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    function sendMP3play(folderNum: string, fileNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    //% blockId=\"playFileNl\" \n    //% block=\"Play length of file:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n\n    export function playFile(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P16\n        stringParts = soundString.split(\"_\")\n        let theFile = stringParts[0]\n        let theVolume = stringParts[1]\n        let theLength = stringParts[2]\n        sendMP3file(theFile, theVolume, sPin)\n        return parseFloat(theLength) * 1000\n    }\n    function sendMP3file(fileNum: string, volumeNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 3\n        para1 = parseInt(fileNum)\n        para2 = parseInt(volumeNum)\n        para1 = parseInt(\"0\")\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFileNl2\" \n    //% block=\"Play2 length of file:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n\n    export function playFile2(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P16\n        stringParts = soundString.split(\"_\")\n        let theFile = stringParts[0]\n        let theVolume = stringParts[1]\n        let theLength = stringParts[2]\n        sendMP3file2(theFile, theVolume, sPin)\n        return parseFloat(theLength) * 1000\n    }\n    function sendMP3file2(fileNum: string, volumeNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 15\n        para1 = parseInt(fileNum)\n        para2 = parseInt(volumeNum)\n        para1 = parseInt(\"1\")\n        para2 = parseInt(\"1\")\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=nl_backgroundVolume\n    //% block=\"Set background volume to:%relativeVolume\"\n    //% subcategory=\"MP3\" group=\"MP3\"\n    export function sendBackgroundVolume(relativeVolume: number): void {\n        relativeCvolume = relativeVolume/100\n\n        let sPin = mp3Cpin\n        let theVolume = Math.round(potRead() * mp3Cvolume * relativeVolume / 100)\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=MP3execute2 block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n  \n    //% blockId=notlegos_pot_read\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Trimpot analog value\"\n    export function potRead() {\n        if(isPot){\n            return Math.round(pins.map(pins.analogReadPin(potPin), 0, 1023, 0, 30))\n        } else{\n            return 5\n        }\n    }\n\n    //% blockId=notlegos_relCread\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return background volume\"\n    export function getBackgroundVolume() {\n\n            return relativeCvolume\n\n    }\n    //% blockId=notlegos_mp3Avolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3A volume\"\n    export function getMP3AVolume() {\n        return potRead() * mp3Avolume\n    }\n    //% blockId=notlegos_mp3Bvolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3B volume\"\n    export function getMP3BVolume() {\n        return potRead() * mp3Bvolume\n    }\n      //% blockId=notlegos_mp3Cvolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3C volume\"\n    export function getMP3CVolume() {\n        return potRead() * mp3Cvolume * relativeCvolume\n    }\n\n    //% blockId=notlegos_pot_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Connect Volume Control Pot at pin %aPin\"\n    //% aPin.fieldEditor=\"gridpicker\"\n    export function potSet(aPin: AnalogPin): void{\n        potPin = aPin\n        isPot = true\n    }\n\n    //% blockId=notlegos_mp3_ports_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Connect MP3 bit at pin %dPin\"\n    //% dPin.fieldEditor=\"gridpicker\"\n    export function mp3setPorts(sPin: SerialPin): void {\n        if (mp3bits == 0){\n            mp3Apin = sPin\n            mp3bits = 1\n        } else if (mp3bits == 1){\n            mp3Bpin = sPin\n            mp3bits = 2\n        } else if (mp3bits == 2){\n            mp3Cpin = sPin\n            mp3bits = 3\n        }\n    }\n\n    //% blockId=\"playFolderFile\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playFolderFile(folderNum: string, fileNum: string): void {\n    \n        if (mp3bits > 0) {\n            sendMP3volume(mp3Apin)\n        }\n        if (mp3bits > 1) {\n           // sendMP3volume(mp3Bpin)\n        }\n        if (mp3bits >0) {\n            sendMP3play(folderNum, fileNum, mp3Apin)\n        }\n        if (mp3bits > 1) {\n          //  sendMP3play(folderNum, fileNum, mp3Bpin)\n        }\n    }\n\n    //% blockId=\"playsFor\" \n    //% block=\"Play length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsFor(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        if (mp3bits == 1) {\n            sPin = mp3Apin\n            mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        } else {\n            if (lastMP3bit == \"A\") {\n                    sPin = mp3Bpin\n                    mp3Bvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n                    lastMP3bit = \"B\"\n            } else {\n                sPin = mp3Apin\n                mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n            lastMP3bit = \"A\"\n            }\n        }\n        let theLength = stringParts[3]\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n        return parseFloat(theLength) * 1000 + 20\n    }\n\n    //% blockId=nl_volume_refresh\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume\"\n    export function updateVolume(): void {\n        if (mp3bits > 0) {\n            sendMP3volumeFast(mp3Apin)\n        }\n        if (mp3bits > 1) {\n            sendMP3volumeFast(mp3Bpin)\n        }\n        if (mp3bits > 2) {\n            sendMP3volumeFast(mp3Cpin)\n        }\n    }\n\n\n    //% blockId=\"nl_playsForTwo\" \n    //% block=\"Dual play length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsForTwo(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n\n        mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        mp3Bvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n\n        sendMP3volumeFast(mp3Apin)\n        sendMP3volumeFast(mp3Bpin)\n        \n        basic.pause(20)\n\n        sendMP3play(theFolder, theFile, mp3Apin)\n        sendMP3play(theFolder, theFile, mp3Bpin)\n        \n        return parseFloat(theLength) * 1000 + 20\n    }\n\n\n    //% blockId=\"nl_playsForBackground\" \n    //% block=\"Play in background length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsForBackground(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n        mp3Cvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        sPin = mp3Cpin\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n        return parseFloat(theLength) * 1000 + 20\n    }\n\n\n    //% blockId=\"nl_playBackground\" \n    //% block=\"Play in background:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playBackground(soundString: string): void {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n        mp3Cvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        sPin = mp3Cpin\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n    }\n\n\n    //% blockId=\"nl_backgroundStop\" \n    //% block=\"Stop background sound\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function stopBackgroundSound(): void {\n        serial.redirect(mp3Cpin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 0x16\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    // Nezha - Functions for Pins and Ports\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_Serial(Rjpin: DigitalRJPin): any {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = SerialPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = SerialPin.P2\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.P12:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = SerialPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = SerialPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n\n    // Enum - To Support MP3\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n\n    // Enum - Nezha and Pins\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum mbPin {\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1 (Analog J1)\"\n        P1,\n        //% block=\"P2 (Analog J2)\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8 (J1)\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12 (J2)\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14 (J3)\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16 (J4)\"\n        P16,\n    }\n}\n","pxt.json":"{\n    \"name\": \"NotLegosExt\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"displaySendBuffer.asm\",\n        \"display.ts\",\n        \"planetxbasic.ts\",\n        \"notlegos.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"7.0.42\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n","test.ts":""}},{"timestamp":1726866712011,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"}g^Kh@tsk|1f0]fNt=Se\">digits</variable><variable id=\"x4t~+B8#]@461X;Q^-0c\">sockLights</variable><variable id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights</variable><variable id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"Connected_oledClear\"><next><block type=\"pin_set_audio_pin_enabled\"><value name=\"enabled\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow></value><next><block type=\"device_led_enable\"><value name=\"on\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"}g^Kh@tsk|1f0]fNt=Se\">digits</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"grove_tm1637_create\"><field name=\"cPin\">DigitalPin.P7</field><field name=\"dPin\">DigitalPin.P6</field></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"x4t~+B8#]@461X;Q^-0c\">sockLights</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P11</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"x4t~+B8#]@461X;Q^-0c\">sockLights</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"x4t~+B8#]@461X;Q^-0c\">sockLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P12</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">18</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P13</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"993\" y=\"-7\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl2\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">1_1_25_100</field></shadow></value></block></value></block></statement></block><block type=\"device_button_event\" x=\"1520\" y=\"-20\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">2_1_1</field></shadow></value></block></value></block></statement></block><block type=\"function_definition\" x=\"957\" y=\"222\"><mutation name=\"isNearly\" functionid=\"b1Q}-qv~wJN$grhC!ppp\"><arg name=\"reference\" id=\"5nona16w6rbe5o9cs7yri\" type=\"number\"></arg><arg name=\"reading\" id=\"1603v12143812bjzv2he\" type=\"number\"></arg><arg name=\"tolerance\" id=\"huqcis1hoaqr7iq5ev9lm\" type=\"number\"></arg></mutation><field name=\"function_name\">isNearly</field><value name=\"5nona16w6rbe5o9cs7yri\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reference</field></block></value><value name=\"1603v12143812bjzv2he\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reading</field></block></value><value name=\"huqcis1hoaqr7iq5ev9lm\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">tolerance</field></block></value><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_operation\"><field name=\"OP\">AND</field><value name=\"A\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value></block></value><statement name=\"DO0\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></block></value></block></statement><statement name=\"ELSE\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></block></value></block></statement></block></statement></block><block type=\"every_interval\" x=\"673\" y=\"776\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value><statement name=\"HANDLER\"><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"text_join\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P2</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P3</field></shadow></value></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">2</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">hue </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field></shadow><block type=\"apds9960_readcolor\"></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">3</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">distance </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field></shadow><block type=\"sonarbit\"><field name=\"tPin\">DigitalPin.P8</field><field name=\"ePin\">DigitalPin.P9</field><field name=\"distance_unit\">Connected.Distance_Unit_List.Distance_Unit_cm</field></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">4</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">gesture </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field></shadow><block type=\"Connected_getGesture\"></block></value></block></value></block></next></block></next></block></next></block></statement></block></xml>","main.ts":"function isNearly (reference: number, reading: number, tolerance: number) {\n    if (reading >= reference - tolerance && reading <= reference + tolerance) {\n        return true\n    } else {\n        return false\n    }\n}\ninput.onButtonPressed(Button.A, function () {\n    basic.pause(notLegos.playFile2(\"1_1_25_100\"))\n})\ninput.onButtonPressed(Button.B, function () {\n    basic.pause(notLegos.playFile(\"2_1_1\"))\n})\nConnected.oledClear()\npins.setAudioPinEnabled(true)\nled.enable(false)\nbasic.pause(100)\nlet digits = Connected.tm1637Create(\nDigitalPin.P7,\nDigitalPin.P6\n)\nbasic.pause(1000)\nlet sockLights = Connected.create(Connected.DigitalRJPin.P11, 8, Connected.NeoPixelMode.RGB)\nsockLights.showColor(Connected.colors(Connected.NeoPixelColors.Blue))\nsockLights.show()\nlet wheelLights = Connected.create(Connected.DigitalRJPin.P12, 18, Connected.NeoPixelMode.RGB)\nwheelLights.showColor(Connected.colors(Connected.NeoPixelColors.Blue))\nwheelLights.show()\nlet scoreCircle = Connected.create(Connected.DigitalRJPin.P13, 8, Connected.NeoPixelMode.RGB)\nscoreCircle.showColor(Connected.colors(Connected.NeoPixelColors.Blue))\nscoreCircle.show()\nloops.everyInterval(500, function () {\n    Connected.showUserText(1, \"R\" + pins.analogReadPin(AnalogReadWritePin.P1) + \" C\" + pins.analogReadPin(AnalogReadWritePin.P2) + \" L\" + pins.analogReadPin(AnalogReadWritePin.P3))\n    Connected.showUserText(2, \"hue \" + Connected.readColor())\n    Connected.showUserText(3, \"distance \" + Connected.ultrasoundSensor(DigitalPin.P8, DigitalPin.P9, Connected.Distance_Unit_List.Distance_Unit_cm))\n    Connected.showUserText(4, \"gesture \" + Connected.getGesture())\n})\n","README.md":"\n> Open this page at [https://notlegos.github.io/castleresay/](https://notlegos.github.io/castleresay/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/castleresay** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/castleresay** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/soundbank/](https://notlegos.github.io/soundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/soundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/soundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/resoundbank/](https://notlegos.github.io/resoundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/resoundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/resoundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosext/](https://notlegos.github.io/notlegosext/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosext** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosext** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","displaySendBuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n","display.ts":"\n/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#EA5532 icon=\"\\uf110\" block=\"Connected\" blockId=\"PlanetX_Connected\" \n//% groups='[\"LED\", \"Digital\", \"Analog\", \"IIC Port\", \"OLED\", \"7-Seg 4-Dig LED Nixietube\"]'\nnamespace Connected {\n    ////////////////////////////////TM 1637/////////////////\n    let TM1637_CMD1 = 0x40;\n    let TM1637_CMD2 = 0xC0;\n    let TM1637_CMD3 = 0x80;\n    let _SEGMENTS = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];\n    /////////////////////OLED///////////////////////////////\n    let firstoledinit = true\n    const basicFont: string[] = [\n        \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", // \" \"\n        \"\\x00\\x00\\x5F\\x00\\x00\\x00\\x00\\x00\", // \"!\"\n        \"\\x00\\x00\\x07\\x00\\x07\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x14\\x7F\\x14\\x7F\\x14\\x00\\x00\", // \"#\"\n        \"\\x00\\x24\\x2A\\x7F\\x2A\\x12\\x00\\x00\", // \"$\"\n        \"\\x00\\x23\\x13\\x08\\x64\\x62\\x00\\x00\", // \"%\"\n        \"\\x00\\x36\\x49\\x55\\x22\\x50\\x00\\x00\", // \"&\"\n        \"\\x00\\x00\\x05\\x03\\x00\\x00\\x00\\x00\", // \"'\"\n        \"\\x00\\x1C\\x22\\x41\\x00\\x00\\x00\\x00\", // \"(\"\n        \"\\x00\\x41\\x22\\x1C\\x00\\x00\\x00\\x00\", // \")\"\n        \"\\x00\\x08\\x2A\\x1C\\x2A\\x08\\x00\\x00\", // \"*\"\n        \"\\x00\\x08\\x08\\x3E\\x08\\x08\\x00\\x00\", // \"+\"\n        \"\\x00\\xA0\\x60\\x00\\x00\\x00\\x00\\x00\", // \",\"\n        \"\\x00\\x08\\x08\\x08\\x08\\x08\\x00\\x00\", // \"-\"\n        \"\\x00\\x60\\x60\\x00\\x00\\x00\\x00\\x00\", // \".\"\n        \"\\x00\\x20\\x10\\x08\\x04\\x02\\x00\\x00\", // \"/\"\n        \"\\x00\\x3E\\x51\\x49\\x45\\x3E\\x00\\x00\", // \"0\"\n        \"\\x00\\x00\\x42\\x7F\\x40\\x00\\x00\\x00\", // \"1\"\n        \"\\x00\\x62\\x51\\x49\\x49\\x46\\x00\\x00\", // \"2\"\n        \"\\x00\\x22\\x41\\x49\\x49\\x36\\x00\\x00\", // \"3\"\n        \"\\x00\\x18\\x14\\x12\\x7F\\x10\\x00\\x00\", // \"4\"\n        \"\\x00\\x27\\x45\\x45\\x45\\x39\\x00\\x00\", // \"5\"\n        \"\\x00\\x3C\\x4A\\x49\\x49\\x30\\x00\\x00\", // \"6\"\n        \"\\x00\\x01\\x71\\x09\\x05\\x03\\x00\\x00\", // \"7\"\n        \"\\x00\\x36\\x49\\x49\\x49\\x36\\x00\\x00\", // \"8\"\n        \"\\x00\\x06\\x49\\x49\\x29\\x1E\\x00\\x00\", // \"9\"\n        \"\\x00\\x00\\x36\\x36\\x00\\x00\\x00\\x00\", // \":\"\n        \"\\x00\\x00\\xAC\\x6C\\x00\\x00\\x00\\x00\", // \";\"\n        \"\\x00\\x08\\x14\\x22\\x41\\x00\\x00\\x00\", // \"<\"\n        \"\\x00\\x14\\x14\\x14\\x14\\x14\\x00\\x00\", // \"=\"\n        \"\\x00\\x41\\x22\\x14\\x08\\x00\\x00\\x00\", // \">\"\n        \"\\x00\\x02\\x01\\x51\\x09\\x06\\x00\\x00\", // \"?\"\n        \"\\x00\\x32\\x49\\x79\\x41\\x3E\\x00\\x00\", // \"@\"\n        \"\\x00\\x7E\\x09\\x09\\x09\\x7E\\x00\\x00\", // \"A\"\n        \"\\x00\\x7F\\x49\\x49\\x49\\x36\\x00\\x00\", // \"B\"\n        \"\\x00\\x3E\\x41\\x41\\x41\\x22\\x00\\x00\", // \"C\"\n        \"\\x00\\x7F\\x41\\x41\\x22\\x1C\\x00\\x00\", // \"D\"\n        \"\\x00\\x7F\\x49\\x49\\x49\\x41\\x00\\x00\", // \"E\"\n        \"\\x00\\x7F\\x09\\x09\\x09\\x01\\x00\\x00\", // \"F\"\n        \"\\x00\\x3E\\x41\\x41\\x51\\x72\\x00\\x00\", // \"G\"\n        \"\\x00\\x7F\\x08\\x08\\x08\\x7F\\x00\\x00\", // \"H\"\n        \"\\x00\\x41\\x7F\\x41\\x00\\x00\\x00\\x00\", // \"I\"\n        \"\\x00\\x20\\x40\\x41\\x3F\\x01\\x00\\x00\", // \"J\"\n        \"\\x00\\x7F\\x08\\x14\\x22\\x41\\x00\\x00\", // \"K\"\n        \"\\x00\\x7F\\x40\\x40\\x40\\x40\\x00\\x00\", // \"L\"\n        \"\\x00\\x7F\\x02\\x0C\\x02\\x7F\\x00\\x00\", // \"M\"\n        \"\\x00\\x7F\\x04\\x08\\x10\\x7F\\x00\\x00\", // \"N\"\n        \"\\x00\\x3E\\x41\\x41\\x41\\x3E\\x00\\x00\", // \"O\"\n        \"\\x00\\x7F\\x09\\x09\\x09\\x06\\x00\\x00\", // \"P\"\n        \"\\x00\\x3E\\x41\\x51\\x21\\x5E\\x00\\x00\", // \"Q\"\n        \"\\x00\\x7F\\x09\\x19\\x29\\x46\\x00\\x00\", // \"R\"\n        \"\\x00\\x26\\x49\\x49\\x49\\x32\\x00\\x00\", // \"S\"\n        \"\\x00\\x01\\x01\\x7F\\x01\\x01\\x00\\x00\", // \"T\"\n        \"\\x00\\x3F\\x40\\x40\\x40\\x3F\\x00\\x00\", // \"U\"\n        \"\\x00\\x1F\\x20\\x40\\x20\\x1F\\x00\\x00\", // \"V\"\n        \"\\x00\\x3F\\x40\\x38\\x40\\x3F\\x00\\x00\", // \"W\"\n        \"\\x00\\x63\\x14\\x08\\x14\\x63\\x00\\x00\", // \"X\"\n        \"\\x00\\x03\\x04\\x78\\x04\\x03\\x00\\x00\", // \"Y\"\n        \"\\x00\\x61\\x51\\x49\\x45\\x43\\x00\\x00\", // \"Z\"\n        \"\\x00\\x7F\\x41\\x41\\x00\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x02\\x04\\x08\\x10\\x20\\x00\\x00\", // \"\\\"\n        \"\\x00\\x41\\x41\\x7F\\x00\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x04\\x02\\x01\\x02\\x04\\x00\\x00\", // \"^\"\n        \"\\x00\\x80\\x80\\x80\\x80\\x80\\x00\\x00\", // \"_\"\n        \"\\x00\\x01\\x02\\x04\\x00\\x00\\x00\\x00\", // \"`\"\n        \"\\x00\\x20\\x54\\x54\\x54\\x78\\x00\\x00\", // \"a\"\n        \"\\x00\\x7F\\x48\\x44\\x44\\x38\\x00\\x00\", // \"b\"\n        \"\\x00\\x38\\x44\\x44\\x28\\x00\\x00\\x00\", // \"c\"\n        \"\\x00\\x38\\x44\\x44\\x48\\x7F\\x00\\x00\", // \"d\"\n        \"\\x00\\x38\\x54\\x54\\x54\\x18\\x00\\x00\", // \"e\"\n        \"\\x00\\x08\\x7E\\x09\\x02\\x00\\x00\\x00\", // \"f\"\n        \"\\x00\\x18\\xA4\\xA4\\xA4\\x7C\\x00\\x00\", // \"g\"\n        \"\\x00\\x7F\\x08\\x04\\x04\\x78\\x00\\x00\", // \"h\"\n        \"\\x00\\x00\\x7D\\x00\\x00\\x00\\x00\\x00\", // \"i\"\n        \"\\x00\\x80\\x84\\x7D\\x00\\x00\\x00\\x00\", // \"j\"\n        \"\\x00\\x7F\\x10\\x28\\x44\\x00\\x00\\x00\", // \"k\"\n        \"\\x00\\x41\\x7F\\x40\\x00\\x00\\x00\\x00\", // \"l\"\n        \"\\x00\\x7C\\x04\\x18\\x04\\x78\\x00\\x00\", // \"m\"\n        \"\\x00\\x7C\\x08\\x04\\x7C\\x00\\x00\\x00\", // \"n\"\n        \"\\x00\\x38\\x44\\x44\\x38\\x00\\x00\\x00\", // \"o\"\n        \"\\x00\\xFC\\x24\\x24\\x18\\x00\\x00\\x00\", // \"p\"\n        \"\\x00\\x18\\x24\\x24\\xFC\\x00\\x00\\x00\", // \"q\"\n        \"\\x00\\x00\\x7C\\x08\\x04\\x00\\x00\\x00\", // \"r\"\n        \"\\x00\\x48\\x54\\x54\\x24\\x00\\x00\\x00\", // \"s\"\n        \"\\x00\\x04\\x7F\\x44\\x00\\x00\\x00\\x00\", // \"t\"\n        \"\\x00\\x3C\\x40\\x40\\x7C\\x00\\x00\\x00\", // \"u\"\n        \"\\x00\\x1C\\x20\\x40\\x20\\x1C\\x00\\x00\", // \"v\"\n        \"\\x00\\x3C\\x40\\x30\\x40\\x3C\\x00\\x00\", // \"w\"\n        \"\\x00\\x44\\x28\\x10\\x28\\x44\\x00\\x00\", // \"x\"\n        \"\\x00\\x1C\\xA0\\xA0\\x7C\\x00\\x00\\x00\", // \"y\"\n        \"\\x00\\x44\\x64\\x54\\x4C\\x44\\x00\\x00\", // \"z\"\n        \"\\x00\\x08\\x36\\x41\\x00\\x00\\x00\\x00\", // \"{\"\n        \"\\x00\\x00\\x7F\\x00\\x00\\x00\\x00\\x00\", // \"|\"\n        \"\\x00\\x41\\x36\\x08\\x00\\x00\\x00\\x00\", // \"}\"\n        \"\\x00\\x02\\x01\\x01\\x02\\x01\\x00\\x00\"  // \"~\"\n    ];\n    function oledcmd(c: number) {\n        pins.i2cWriteNumber(0x3c, c, NumberFormat.UInt16BE);\n    }\n    function writeData(n: number) {\n        let b = n;\n        if (n < 0) { n = 0 }\n        if (n > 255) { n = 255 }\n        pins.i2cWriteNumber(0x3c, 0x4000 + b, NumberFormat.UInt16BE);\n    }\n    function writeCustomChar(c: string) {\n        for (let i = 0; i < 8; i++) {\n            writeData(c.charCodeAt(i));\n        }\n    }\n    function setText(row: number, column: number) {\n        let r = row;\n        let c = column;\n        if (row < 0) { r = 0 }\n        if (column < 0) { c = 0 }\n        if (row > 7) { r = 7 }\n        if (column > 15) { c = 15 }\n        oledcmd(0xB0 + r);            //set page address\n        oledcmd(0x00 + (8 * c & 0x0F));  //set column lower address\n        oledcmd(0x10 + ((8 * c >> 4) & 0x0F));   //set column higher address\n    }\n    function putChar(c: string) {\n        let c1 = c.charCodeAt(0);\n        writeCustomChar(basicFont[c1 - 32]);\n    }\n    function oledinit(): void {\n        oledcmd(0xAE);  // Set display OFF\n        oledcmd(0xD5);  // Set Display Clock Divide Ratio / OSC Frequency 0xD4\n        oledcmd(0x80);  // Display Clock Divide Ratio / OSC Frequency \n        oledcmd(0xA8);  // Set Multiplex Ratio\n        oledcmd(0x3F);  // Multiplex Ratio for 128x64 (64-1)\n        oledcmd(0xD3);  // Set Display Offset\n        oledcmd(0x00);  // Display Offset\n        oledcmd(0x40);  // Set Display Start Line\n        oledcmd(0x8D);  // Set Charge Pump\n        oledcmd(0x14);  // Charge Pump (0x10 External, 0x14 Internal DC/DC)\n        oledcmd(0xA1);  // Set Segment Re-Map\n        oledcmd(0xC8);  // Set Com Output Scan Direction\n        oledcmd(0xDA);  // Set COM Hardware Configuration\n        oledcmd(0x12);  // COM Hardware Configuration\n        oledcmd(0x81);  // Set Contrast\n        oledcmd(0xCF);  // Contrast\n        oledcmd(0xD9);  // Set Pre-Charge Period\n        oledcmd(0xF1);  // Set Pre-Charge Period (0x22 External, 0xF1 Internal)\n        oledcmd(0xDB);  // Set VCOMH Deselect Level\n        oledcmd(0x40);  // VCOMH Deselect Level\n        oledcmd(0xA4);  // Set all pixels OFF\n        oledcmd(0xA6);  // Set display not inverted\n        oledcmd(0xAF);  // Set display On\n        oledClear();\n    }\n\n    ///////////////////////////////enum\n\n\n    export enum NeoPixelColors {\n        //% block=red\n        Red = 0xFF0000,\n        //% block=orange\n        Orange = 0xFFA500,\n        //% block=yellow\n        Yellow = 0xFFFF00,\n        //% block=green\n        Green = 0x00FF00,\n        //% block=blue\n        Blue = 0x0000FF,\n        //% block=indigo\n        Indigo = 0x4b0082,\n        //% block=violet\n        Violet = 0x8a2be2,\n        //% block=purple\n        Purple = 0xFF00FF,\n        //% block=white\n        White = 0xFFFFFF,\n        //% block=black\n        Black = 0x000000\n    }\n\n    /**\n     * Different modes for RGB or RGB+W NeoPixel strips\n     */\n    export enum NeoPixelMode {\n        //% block=\"RGB (GRB format)\"\n        RGB = 0,\n        //% block=\"RGB+W\"\n        RGBW = 1,\n        //% block=\"RGB (RGB format)\"\n        RGB_RGB = 2\n    }\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n    /////////////////////////////User_function//////////////////\n\n    //% line.min=1 line.max=8 line.defl=1\n    //% text.defl=\"Hello,ELECFREAKS\"\n    //% block=\"OLED show line %line|text %text\"\n    //% subcategory=Display group=\"OLED\" color=#00B1ED\n    export function showUserText(line: number, text: string) {\n        if (firstoledinit) {\n            oledinit()\n            firstoledinit = false\n        }\n        if (text.length > 16) {\n            text = text.substr(0, 16)\n        }\n        line = line - 1\n        setText(line, 0);\n        for (let c of text) {\n            putChar(c);\n        }\n\n        for (let i = text.length; i < 16; i++) {\n            setText(line, i);\n            putChar(\" \");\n        }\n    }\n    //% line.min=1 line.max=8 line.defl=2 \n    //% n.defl=20200508\n    //% block=\"OLED show line %line|number %n\"\n    //% subcategory=Display group=\"OLED\" color=#00B1ED\n    export function showUserNumber(line: number, n: number) {\n        if (firstoledinit) {\n            oledinit()\n            firstoledinit = false\n        }\n        showUserText(line, \"\" + n)\n    }\n    //% block=\"clear display\" color=#00B1ED\n    //% subcategory=Display group=\"OLED\"\n    export function oledClear() {\n        //oledcmd(DISPLAY_OFF);   //display off\n        for (let j = 0; j < 8; j++) {\n            setText(j, 0);\n            {\n                for (let i = 0; i < 16; i++)  //clear all columns\n                {\n                    putChar(' ');\n                }\n            }\n        }\n        //oledcmd(DISPLAY_ON);    //display on\n        setText(0, 0);\n    }\n    /**\n   * Create a new driver Grove - 4-Digit Display\n   * @param clkPin value of clk pin number\n   * @param dataPin value of data pin number\n   */\n    //% blockId=grove_tm1637_create block=\"connect 4-Digit cPin %cPin dPin %dPin\"\n    //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" blockSetVariable=display color=#EA5532\n    export function tm1637Create(cPin: DigitalPin, dPin: DigitalPin, intensity: number = 7, count: number = 4): TM1637LEDs {\n        let display = new TM1637LEDs();\n        display.clk = cPin\n        display.dio = dPin\n        if ((count < 1) || (count > 5)) count = 4;\n        display.count = count;\n        display.brightness = intensity;\n        display.init();\n        return display;\n    }\n    export class TM1637LEDs {\n        buf: Buffer;\n        clk: DigitalPin;\n        dio: DigitalPin;\n        _ON: number;\n        brightness: number;\n        count: number;  // number of LEDs\n        /**\n         * initial TM1637\n         */\n        init(): void {\n            pins.digitalWritePin(this.clk, 0);\n            pins.digitalWritePin(this.dio, 0);\n            this._ON = 8;\n            this.buf = pins.createBuffer(this.count);\n            this.clear();\n        }\n        /**\n         * Start \n         */\n        _start() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        /**\n         * Stop\n         */\n        _stop() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.dio, 1);\n        }\n        /**\n         * send command1\n         */\n        _write_data_cmd() {\n            this._start();\n            this._write_byte(TM1637_CMD1);\n            this._stop();\n        }\n        /**\n         * send command3\n         */\n        _write_dsp_ctrl() {\n            this._start();\n            this._write_byte(TM1637_CMD3 | this._ON | this.brightness);\n            this._stop();\n        }\n        /**\n         * send a byte to 2-wire interface\n         */\n        _write_byte(b: number) {\n            for (let i = 0; i < 8; i++) {\n                pins.digitalWritePin(this.dio, (b >> i) & 1);\n                pins.digitalWritePin(this.clk, 1);\n                pins.digitalWritePin(this.clk, 0);\n            }\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _intensity(val: number = 7) {\n            this._ON = 8;\n            this.brightness = val - 1;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n        /**\n         * set data to TM1637, with given bit\n         */\n        _dat(bit: number, dat: number) {\n            this._write_data_cmd();\n            this._start();\n            this._write_byte(TM1637_CMD2 | (bit % this.count))\n            this._write_byte(dat);\n            this._stop();\n            this._write_dsp_ctrl();\n        }\n        /**\n         * Show a single number from 0 to 9 at a specified digit of Grove - 4-Digit Display\n         * @param dispData value of number\n         * @param bitAddr value of bit number\n         */\n        //% blockId=grove_tm1637_display_bit block=\"%display|show single number|%num|at digit|%bit\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        //% bit.defl=1 bit.min=0 bit.max=9\n        showbit(num: number = 5, bit: number = 0) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            this.buf[bit % this.count] = _SEGMENTS[num % 16]\n            this._dat(bit, _SEGMENTS[num % 16])\n        }\n        /**\n         * Show a 4 digits number on display\n         * @param dispData value of number\n         */\n        //% blockId=grove_tm1637_display_number block=\"%display|show number|%num\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        showNumber(num: number) {\n            if (num < 0) {\n                num = -num\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n                this._dat(0, 0x40) // '-'\n            }\n            else {\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n            }\n        }\n        /**\n         * show or hide dot point. \n         * @param bit is the position, eg: 1\n         * @param show is show/hide dp, eg: true\n         */\n        //% blockId=\"TM1637_showDP\" block=\"%display|DotPoint at %bit|show $show\"\n        //% show.shadow=\"toggleOnOff\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        showDP(bit: number = 1, show: boolean = true) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            bit = bit % this.count\n            if (show) this._dat(bit, this.buf[bit] | 0x80)\n            else this._dat(bit, this.buf[bit] & 0x7F)\n        }\n        /**\n         * clear LED. \n         */\n        //% blockId=\"TM1637_clear\" block=\"clear display %display\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        clear() {\n            for (let i = 0; i < this.count; i++) {\n                this._dat(i, 0)\n                this.buf[i] = 0\n            }\n        }\n    }\n    //% shim=sendBufferAsm\n    function sendBuffer(buf: Buffer, pin: DigitalPin) {\n    }\n    export class Strip {\n        buf: Buffer;\n        pin: DigitalPin;\n        // TODO: encode as bytes instead of 32bit\n        brightness: number;\n        start: number; // start offset in LED strip\n        _length: number; // number of LEDs\n        _mode: NeoPixelMode;\n        _matrixWidth: number; // number of leds in a matrix - if any\n\n        /**\n         * Shows all LEDs to a given color (range 0-255 for r, g, b).\n         * @param rgb RGB color of the LED\n         */\n        //% blockId=\"neopixel_set_strip_color\" block=\"%strip|show color %rgb=neopixel_colors\"\n        //% weight=85 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        showColor(rgb: number) {\n            rgb = rgb >> 0;\n            this.setAllRGB(rgb);\n            this.show();\n        }\n\n        /**\n         * Shows a rainbow pattern on all LEDs.\n         * @param startHue the start hue value for the rainbow, eg: 1\n         * @param endHue the end hue value for the rainbow, eg: 360\n         */\n        //% blockId=\"neopixel_set_strip_rainbow\" block=\"%strip|show rainbow from %startHue|to %endHue\"\n        //% weight=85 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        showRainbow(startHue: number = 1, endHue: number = 360) {\n            if (this._length <= 0) return;\n\n            startHue = startHue >> 0;\n            endHue = endHue >> 0;\n            const saturation = 100;\n            const luminance = 50;\n            const steps = this._length;\n            const direction = HueInterpolationDirection.Clockwise;\n\n            //hue\n            const h1 = startHue;\n            const h2 = endHue;\n            const hDistCW = ((h2 + 360) - h1) % 360;\n            const hStepCW = Math.idiv((hDistCW * 100), steps);\n            const hDistCCW = ((h1 + 360) - h2) % 360;\n            const hStepCCW = Math.idiv(-(hDistCCW * 100), steps);\n            let hStep: number;\n            if (direction === HueInterpolationDirection.Clockwise) {\n                hStep = hStepCW;\n            } else if (direction === HueInterpolationDirection.CounterClockwise) {\n                hStep = hStepCCW;\n            } else {\n                hStep = hDistCW < hDistCCW ? hStepCW : hStepCCW;\n            }\n            const h1_100 = h1 * 100; //we multiply by 100 so we keep more accurate results while doing interpolation\n\n            //sat\n            const s1 = saturation;\n            const s2 = saturation;\n            const sDist = s2 - s1;\n            const sStep = Math.idiv(sDist, steps);\n            const s1_100 = s1 * 100;\n\n            //lum\n            const l1 = luminance;\n            const l2 = luminance;\n            const lDist = l2 - l1;\n            const lStep = Math.idiv(lDist, steps);\n            const l1_100 = l1 * 100\n\n            //interpolate\n            if (steps === 1) {\n                this.setPixelColor(0, hsl(h1 + hStep, s1 + sStep, l1 + lStep))\n            } else {\n                this.setPixelColor(0, hsl(startHue, saturation, luminance));\n                for (let i = 1; i < steps - 1; i++) {\n                    const h = Math.idiv((h1_100 + i * hStep), 100) + 360;\n                    const s = Math.idiv((s1_100 + i * sStep), 100);\n                    const l = Math.idiv((l1_100 + i * lStep), 100);\n                    this.setPixelColor(i, hsl(h, s, l));\n                }\n                this.setPixelColor(steps - 1, hsl(endHue, saturation, luminance));\n            }\n            this.show();\n        }\n\n        /**\n         * Set LED to a given color (range 0-255 for r, g, b).\n         * You need to call ``show`` to make the changes visible.\n         * @param pixeloffset position of the NeoPixel in the strip\n         * @param rgb RGB color of the LED\n         */\n        //% blockId=\"neopixel_set_pixel_color\" block=\"%strip|set pixel color at %pixeloffset|to %rgb=neopixel_colors\"\n        //% weight=80 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setPixelColor(pixeloffset: number, rgb: number): void {\n            this.setPixelRGB(pixeloffset >> 0, rgb >> 0);\n        }\n\n        /**\n         * Send all the changes to the strip.\n         */\n        //% blockId=\"neopixel_show\" block=\"%strip|show\" \n        //% weight=79\n        //% parts=\"neopixel\" subcategory=Neopixel\n        show() {\n            sendBuffer(this.buf, this.pin);\n        }\n\n        /**\n         * Turn off all LEDs.\n         * You need to call ``show`` to make the changes visible.\n         */\n        //% blockId=\"neopixel_clear\" block=\"%strip|clear\"\n        //% weight=76 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        clear(): void {\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.fill(0, this.start * stride, this._length * stride);\n        }\n\n        /**\n         * Set the brightness of the strip. This flag only applies to future operation.\n         * @param brightness a measure of LED brightness in 0-255. eg: 255\n         */\n        //% blockId=\"neopixel_set_brightness\" block=\"%strip|set brightness %brightness\" \n        //% weight=59 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setBrightness(brightness: number): void {\n            this.brightness = brightness & 0xff;\n        }\n        /**\n         * Gets the number of pixels declared on the strip\n         */\n        //% blockId=\"neopixel_length\" block=\"%strip|length\" blockGap=8\n        //% subcategory=\"Neopixel\"\n        //% weight=60 advanced=true\n        length() {\n            return this._length;\n        }\n        /**\n         * Create a range of LEDs.\n         * @param start offset in the LED strip to start the range\n         * @param length number of LEDs in the range. eg: 4\n         */\n        //% weight=89 color=#EA5532\n        //% blockId=\"neopixel_range\" block=\"%strip|range from %start|with %length|leds\"\n        //% parts=\"neopixel\"\n        //% blockSetVariable=range subcategory=Neopixel\n        range(start: number, length: number): Strip {\n            start = start >> 0;\n            length = length >> 0;\n            let strip = new Strip();\n            strip.buf = this.buf;\n            strip.pin = this.pin;\n            strip.brightness = this.brightness;\n            strip.start = this.start + Math.clamp(0, this._length - 1, start);\n            strip._length = Math.clamp(0, this._length - (strip.start - this.start), length);\n            strip._matrixWidth = 0;\n            strip._mode = this._mode;\n            return strip;\n        }\n\n        /**\n         * Shift LEDs forward and clear with zeros.\n         * You need to call ``show`` to make the changes visible.\n         * @param offset number of pixels to shift forward, eg: 1\n         */\n        //% blockId=\"neopixel_shift\" block=\"%strip|shift pixels by %offset\" \n        //% weight=40 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        shift(offset: number = 1): void {\n            offset = offset >> 0;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.shift(-offset * stride, this.start * stride, this._length * stride)\n        }\n\n        /**\n         * Rotate LEDs forward.\n         * You need to call ``show`` to make the changes visible.\n         * @param offset number of pixels to rotate forward, eg: 1\n         */\n        //% blockId=\"neopixel_rotate\" block=\"%strip|rotate pixels by %offset\" \n        //% weight=39 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        rotate(offset: number = 1): void {\n            offset = offset >> 0;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.rotate(-offset * stride, this.start * stride, this._length * stride)\n        }\n\n        /**\n         * Set the pin where the neopixel is connected, defaults to P0.\n         */\n        //% weight=10 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setPin(pin: DigitalPin): void {\n            this.pin = pin;\n            pins.digitalWritePin(this.pin, 0);\n            // don't yield to avoid races on initialization\n        }\n\n        private setBufferRGB(offset: number, red: number, green: number, blue: number): void {\n            if (this._mode === NeoPixelMode.RGB_RGB) {\n                this.buf[offset + 0] = red;\n                this.buf[offset + 1] = green;\n            } else {\n                this.buf[offset + 0] = green;\n                this.buf[offset + 1] = red;\n            }\n            this.buf[offset + 2] = blue;\n        }\n\n        private setAllRGB(rgb: number) {\n            let red = unpackR(rgb);\n            let green = unpackG(rgb);\n            let blue = unpackB(rgb);\n\n            const br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            const end = this.start + this._length;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            for (let i = this.start; i < end; ++i) {\n                this.setBufferRGB(i * stride, red, green, blue)\n            }\n        }\n        private setPixelRGB(pixeloffset: number, rgb: number): void {\n            if (pixeloffset < 0\n                || pixeloffset >= this._length)\n                return;\n\n            let stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            pixeloffset = (pixeloffset + this.start) * stride;\n\n            let red = unpackR(rgb);\n            let green = unpackG(rgb);\n            let blue = unpackB(rgb);\n\n            let br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            this.setBufferRGB(pixeloffset, red, green, blue)\n        }\n\n    }\n\n    /**\n     * Create a new NeoPixel driver for `numleds` LEDs.\n     * @param pin the pin where the neopixel is connected.\n     * @param numleds number of leds in the strip, eg: 24,30,60,64\n     */\n    //% blockId=\"neopixel_create\" block=\"NeoPixel at pin %Rjpin|with %numleds|leds as %mode\"\n    //% weight=90 color=#EA5532\n    //% parts=\"neopixel\"\n    //% trackArgs=0,2\n    //% blockSetVariable=strip subcategory=Neopixel\n    export function create(Rjpin: DigitalRJPin, numleds: number, mode: NeoPixelMode): Strip {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        let strip = new Strip();\n        let stride = mode === NeoPixelMode.RGBW ? 4 : 3;\n        strip.buf = pins.createBuffer(numleds * stride);\n        strip.start = 0;\n        strip._length = numleds;\n        strip._mode = mode;\n        strip._matrixWidth = 0;\n        strip.setBrightness(50)\n        strip.setPin(pin)\n        return strip;\n    }\n\n    /**\n     * Converts red, green, blue channels into a RGB color\n     * @param red value of the red channel between 0 and 255. eg: 255\n     * @param green value of the green channel between 0 and 255. eg: 255\n     * @param blue value of the blue channel between 0 and 255. eg: 255\n     */\n    //% weight=1 subcategory=Neopixel color=#EA5532\n    //% blockId=\"neopixel_rgb\" block=\"red %red|green %green|blue %blue\"\n    export function rgb(red: number, green: number, blue: number): number {\n        return packRGB(red, green, blue);\n    }\n\n    /**\n     * Gets the RGB value of a known color\n    */\n    //% weight=2 subcategory=Neopixel color=#EA5532\n    //% blockId=\"neopixel_colors\" block=\"%color\"\n    export function colors(color: NeoPixelColors): number {\n        return color;\n    }\n\n    function packRGB(a: number, b: number, c: number): number {\n        return ((a & 0xFF) << 16) | ((b & 0xFF) << 8) | (c & 0xFF);\n    }\n    function unpackR(rgb: number): number {\n        let r = (rgb >> 16) & 0xFF;\n        return r;\n    }\n    function unpackG(rgb: number): number {\n        let g = (rgb >> 8) & 0xFF;\n        return g;\n    }\n    function unpackB(rgb: number): number {\n        let b = (rgb) & 0xFF;\n        return b;\n    }\n\n    /**\n     * Converts a hue saturation luminosity value into a RGB color\n     * @param h hue from 0 to 360\n     * @param s saturation from 0 to 99\n     * @param l luminosity from 0 to 99\n     */\n    //% blockId=neopixelHSL block=\"hue %h|saturation %s|luminosity %l\" subcategory=Neopixel color=#EA5532\n    export function hsl(h: number, s: number, l: number): number {\n        h = Math.round(h);\n        s = Math.round(s);\n        l = Math.round(l);\n\n        h = h % 360;\n        s = Math.clamp(0, 99, s);\n        l = Math.clamp(0, 99, l);\n        let c = Math.idiv((((100 - Math.abs(2 * l - 100)) * s) << 8), 10000); //chroma, [0,255]\n        let h1 = Math.idiv(h, 60);//[0,6]\n        let h2 = Math.idiv((h - h1 * 60) * 256, 60);//[0,255]\n        let temp = Math.abs((((h1 % 2) << 8) + h2) - 256);\n        let x = (c * (256 - (temp))) >> 8;//[0,255], second largest component of this color\n        let r$:\n            number;\n        let g$:\n            number;\n        let b$:\n            number;\n        if (h1 == 0) {\n            r$ = c;\n            g$ = x;\n            b$ = 0;\n        }\n        else if (h1 == 1) {\n            r$ = x;\n            g$ = c;\n            b$ = 0;\n        }\n        else if (h1 == 2) {\n            r$ = 0;\n            g$ = c;\n            b$ = x;\n        }\n        else if (h1 == 3) {\n            r$ = 0;\n            g$ = x;\n            b$ = c;\n        }\n        else if (h1 == 4) {\n            r$ = x;\n            g$ = 0;\n            b$ = c;\n        }\n        else if (h1 == 5) {\n            r$ = c;\n            g$ = 0;\n            b$ = x;\n        }\n        let m = Math.idiv((Math.idiv((l * 2 << 8), 100) - c), 2);\n        let r = r$ + m;\n        let g = g$ + m;\n        let b = b$ + m;\n        return packRGB(r, g, b);\n    }\n\n    export enum HueInterpolationDirection {\n        Clockwise,\n        CounterClockwise,\n        Shortest\n    }\n}\n","planetxbasic.ts":"/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#00B1ED  icon=\"\\uf005\" block=\"Connected\" blockId=\"PlanetX_Connected\"\n//% groups='[\"Digital\", \"Analog\", \"IIC Port\"]'\nnamespace Connected {\n    \n    ////////////////////////paj7620//////////////////////\n    let gesture_first_init = true\n    const initRegisterArray: number[] = [\n        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17,\n        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F,\n        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14,\n        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27,\n        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01,\n        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00,\n        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20,\n        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37,\n        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A,\n        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F,\n        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30,\n        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19,\n        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04,\n        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00,\n        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00,\n        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F,\n        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07,\n        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01,\n        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F,\n        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01,\n        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40,\n        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E,\n        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00,\n        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08,\n        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00,\n        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01,\n        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01,\n        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01\n    ];\n    \n    /////////////////////////color/////////////////////////\n    const APDS9960_ADDR = 0x39\n    const APDS9960_ENABLE = 0x80\n    const APDS9960_ATIME = 0x81\n    const APDS9960_CONTROL = 0x8F\n    const APDS9960_STATUS = 0x93\n    const APDS9960_CDATAL = 0x94\n    const APDS9960_CDATAH = 0x95\n    const APDS9960_RDATAL = 0x96\n    const APDS9960_RDATAH = 0x97\n    const APDS9960_GDATAL = 0x98\n    const APDS9960_GDATAH = 0x99\n    const APDS9960_BDATAL = 0x9A\n    const APDS9960_BDATAH = 0x9B\n    const APDS9960_GCONF4 = 0xAB\n    const APDS9960_AICLEAR = 0xE7\n    let color_first_init = false\n\n    function i2cwrite_color(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n    function i2cread_color(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n    function rgb2hsl(color_r: number, color_g: number, color_b: number): number {\n        let Hue = 0\n        let R = color_r * 100 / 255;\n        let G = color_g * 100 / 255;\n        let B = color_b * 100 / 255;\n        let maxVal = Math.max(R, Math.max(G, B))\n        let minVal = Math.min(R, Math.min(G, B))\n        let Delta = maxVal - minVal;\n\n        if (Delta < 0) {\n            Hue = 0;\n        }\n        else if (maxVal == R && G >= B) {\n            Hue = (60 * ((G - B) * 100 / Delta)) / 100;\n        }\n        else if (maxVal == R && G < B) {\n            Hue = (60 * ((G - B) * 100 / Delta) + 360 * 100) / 100;\n        }\n        else if (maxVal == G) {\n            Hue = (60 * ((B - R) * 100 / Delta) + 120 * 100) / 100;\n        }\n        else if (maxVal == B) {\n            Hue = (60 * ((R - G) * 100 / Delta) + 240 * 100) / 100;\n        }\n        return Hue\n    }\n    function initModule(): void {\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ATIME, 252)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_CONTROL, 0x03)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_GCONF4, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_AICLEAR, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x01)\n        color_first_init = true\n    }\n    function colorMode(): void {\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_ENABLE) | 0x2;\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, tmp);\n    }\n\n    ///////////////////////////////////////////////////////MP3\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    /*\n    * Play status selection button list\n    */\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(100)\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,        \n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum Distance_Unit_List {\n        //% block=\"cm\" \n        Distance_Unit_cm,\n\n        //% block=\"foot\"\n        Distance_Unit_foot,\n    }\n    export enum ButtonStateList {\n        //% block=\"C\"\n        C,\n        //% block=\"D\"\n        D,\n        //% block=\"C+D\"\n        CD\n    }\n    export enum GestureType {\n        //% block=\"None\"\n        None = 0,\n        //% block=\"Right\"\n        Right = 1,\n        //% block=\"Left\"\n        Left = 2,\n        //% block=\"Up\"\n        Up = 3,\n        //% block=\"Down\"\n        Down = 4,\n        //% block=\"Forward\"\n        Forward = 5,\n        //% block=\"Backward\"\n        Backward = 6,\n        //% block=\"Clockwise\"\n        Clockwise = 7,\n        //% block=\"Anticlockwise\"\n        Anticlockwise = 8,\n        //% block=\"Wave\"\n        Wave = 9\n    }\n    export enum ColorList {\n        //% block=\"Red\"\n        red,\n        //% block=\"Green\"\n        green,\n        //% block=\"Blue\"\n        blue,\n        //% block=\"Cyan\"\n        cyan,\n        //% block=\"Magenta\"\n        magenta,\n        //% block=\"Yellow\"\n        yellow,\n        //% block=\"White\"\n        white\n    }\n\n    ///////////////////////////////////blocks/////////////////////////////\n\n    //% blockId=\"readwaterLevel\" block=\"Water level sensor %Rjpin value(0~100)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function waterLevel(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let voltage = 0, waterlevel = 0;\n        voltage = pins.map(\n            pins.analogReadPin(pin),\n            50,\n            600,\n            0,\n            100\n        );\n        if (voltage < 0) {\n            voltage = 0\n        }\n        waterlevel = voltage;\n        return Math.round(waterlevel)\n    }\n\n    let distance_last = 0\n\n    //% blockId=sonarbit block=\"Ultrasonic sensor pinT %tPin pinE %ePin distance %distance_unit\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% distance_unit.fieldEditor=\"gridpicker\"\n    //% distance_unit.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function ultrasoundSensor(tPin: DigitalPin, ePin: DigitalPin, distance_unit: Distance_Unit_List): number {\n        let pinT = tPin\n        let pinE = ePin\n        pins.setPull(pinT, PinPullMode.PullNone)\n        pins.digitalWritePin(pinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(pinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(pinT, 0)\n\n        // read pulse\n        let d = pins.pulseIn(pinE, PulseValue.High, 25000)\n        let version = control.hardwareVersion()\n        let distance = d * 34 / 2 / 1000\n        if (version == \"1\") {\n            distance = distance * 3 / 2\n        }\n\n        if (distance > 430) {\n            distance = 0\n        }\n\n        if (distance == 0) {\n            distance = distance_last\n            distance_last = 0\n        }\n        else {\n            distance_last = distance\n        }\n\n        switch (distance_unit) {\n            case Distance_Unit_List.Distance_Unit_cm:\n                return Math.floor(distance)  //cm\n                break\n            case Distance_Unit_List.Distance_Unit_foot:\n                return Math.floor(distance / 30.48)   //foot\n                break\n            default:\n                return 0\n        }\n    }\n\n    export class PAJ7620 {\n        private paj7620WriteReg(addr: number, cmd: number) {\n            let buf: Buffer = pins.createBuffer(2);\n            buf[0] = addr;\n            buf[1] = cmd;\n            pins.i2cWriteBuffer(0x73, buf, false);\n        }\n        private paj7620ReadReg(addr: number): number {\n            let buf: Buffer = pins.createBuffer(1);\n            buf[0] = addr;\n            pins.i2cWriteBuffer(0x73, buf, false);\n            buf = pins.i2cReadBuffer(0x73, 1, false);\n            return buf[0];\n        }\n        private paj7620SelectBank(bank: number) {\n            if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n        }\n        private paj7620Init() {\n            let temp = 0;\n            this.paj7620SelectBank(0);\n            temp = this.paj7620ReadReg(0);\n            if (temp == 0x20) {\n                for (let i = 0; i < 438; i += 2) {\n                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n                }\n            }\n            this.paj7620SelectBank(0);\n        }\n        init() {\n            this.paj7620Init();\n            basic.pause(200);\n        }\n        read(): number {\n            let data = 0, result = 0;\n            data = this.paj7620ReadReg(0x43);\n            switch (data) {\n                case 0x01:\n                    result = GestureType.Right;\n                    break;\n                case 0x02:\n                    result = GestureType.Left;\n                    break;\n                case 0x04:\n                    result = GestureType.Up;\n                    break;\n                case 0x08:\n                    result = GestureType.Down;\n                    break;\n                case 0x10:\n                    result = GestureType.Forward;\n                    break;\n                case 0x20:\n                    result = GestureType.Backward;\n                    break;\n                case 0x40:\n                    result = GestureType.Clockwise;\n                    break;\n                case 0x80:\n                    result = GestureType.Anticlockwise;\n                    break;\n                default:\n                    data = this.paj7620ReadReg(0x44);\n                    if (data == 0x01)\n                        result = GestureType.Wave;\n                    break;\n            }\n            return result;\n        }\n    }\n    const gestureEventId = 3100;\n    let lastGesture = GestureType.None;\n    let paj7620 = new PAJ7620();\n    //% blockId= gesture_create_event block=\"Gesture sensor IIC port is %gesture\"\n    //% gesture.fieldEditor=\"gridpicker\" gesture.fieldOptions.columns=3\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function onGesture(gesture: GestureType, handler: () => void) {\n        control.onEvent(gestureEventId, gesture, handler);\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        control.inBackground(() => {\n            while (true) {\n                const gesture = paj7620.read();\n                if (gesture != lastGesture) {\n                    lastGesture = gesture;\n                    control.raiseEvent(gestureEventId, lastGesture);\n                }\n                basic.pause(200);\n            }\n        })\n    }\n\n    //% blockId= gesture_get_event block=\"Gesture sensor IIC port detects\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function getGesture(): number {\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        const gesture = paj7620.read();\n        return gesture\n    }\n\n\n\n\n    //% blockId=apds9960_readcolor block=\"Color sensor IIC port color HUE(0~360)\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readColor(): number {\n        if (color_first_init == false) {\n            initModule()\n            colorMode()\n        }\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        while (!tmp) {\n            basic.pause(5);\n            tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        }\n        let c = i2cread_color(APDS9960_ADDR, APDS9960_CDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_CDATAH) * 256;\n        let r = i2cread_color(APDS9960_ADDR, APDS9960_RDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_RDATAH) * 256;\n        let g = i2cread_color(APDS9960_ADDR, APDS9960_GDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_GDATAH) * 256;\n        let b = i2cread_color(APDS9960_ADDR, APDS9960_BDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_BDATAH) * 256;\n        // map to rgb based on clear channel\n        let avg = c / 3;\n        r = r * 255 / avg;\n        g = g * 255 / avg;\n        b = b * 255 / avg;\n        //let hue = rgb2hue(r, g, b);\n        let hue = rgb2hsl(r, g, b)\n        return hue\n    }\n    //% block=\"Color sensor IIC port detects %color\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% color.fieldEditor=\"gridpicker\" color.fieldOptions.columns=3\n    export function checkColor(color: ColorList): boolean {\n        let hue = readColor()\n        switch (color) {\n            case ColorList.red:\n                if (hue > 330 || hue < 20) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.green:\n                if (hue > 120 && 180 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.blue:\n                if (hue > 210 && 270 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.cyan:\n                if (hue > 190 && 210 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.magenta:\n                if (hue > 260 && 330 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.yellow:\n                if (hue > 30 && 120 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.white:\n                if (hue >= 180 && 190 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n        }\n    }\n\n    //% blockId=\"potentiometer\" block=\"Trimpot %Rjpin analog value\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Input color=#E2C438 group=\"Analog\"\n    export function trimpot(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        return pins.analogReadPin(pin)\n    }\n    //% blockId=buttonab block=\"Button %Rjpin %button is pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonCD(Rjpin: DigitalRJPin, button: ButtonStateList): boolean {\n        let pinC = DigitalPin.P1\n        let pinD = DigitalPin.P2\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pinC = DigitalPin.P1\n                pinD = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pinC = DigitalPin.P2\n                pinD = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pinC = DigitalPin.P13\n                pinD = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pinC = DigitalPin.P15\n                pinD = DigitalPin.P16\n                break;\n            case DigitalRJPin.P3:\n                pinC = DigitalPin.P3\n                pinD = DigitalPin.P4\n                break;\n        }\n        pins.setPull(pinC, PinPullMode.PullUp)\n        pins.setPull(pinD, PinPullMode.PullUp)\n        if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 0 && button == ButtonStateList.CD) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinC) == 0 && pins.digitalReadPin(pinD) == 1 && button == ButtonStateList.C) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 1 && button == ButtonStateList.D) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    export enum ButtonState {\n        //% block=\"on\"\n        on = 1,\n        //% block=\"off\"\n        off = 2\n    }\n\n    const buttonEventSource = 5000\n    const buttonEventValue = {\n        CD_pressed: ButtonState.on,\n        CD_unpressed: ButtonState.off\n    }\n\n    //% block=\"on button %Rjpin %button pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=4\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonEvent(Rjpin: DigitalRJPin, button: ButtonStateList, handler: () => void) {\n        let ButtonPin_C = DigitalPin.P1\n        let ButtonPin_D = DigitalPin.P2\n        let pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P0\n        let pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                ButtonPin_C = DigitalPin.P1\n                ButtonPin_D = DigitalPin.P8\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P1\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P8\n                break;\n            case DigitalRJPin.J2:\n                ButtonPin_C = DigitalPin.P2\n                ButtonPin_D = DigitalPin.P12\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P2\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P12\n                break;\n            case DigitalRJPin.J3:\n                ButtonPin_C = DigitalPin.P13\n                ButtonPin_D = DigitalPin.P14\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P13\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P14\n                break;\n            case DigitalRJPin.J4:\n                ButtonPin_C = DigitalPin.P15\n                ButtonPin_D = DigitalPin.P16\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P15\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P16\n                break;\n            case DigitalRJPin.P3:\n                ButtonPin_C = DigitalPin.P3\n                ButtonPin_D = DigitalPin.P4\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P3\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P4\n                break;\n        }\n        if (button == ButtonStateList.C) {\n            pins.setPull(ButtonPin_C, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_C, PinEventType.Edge)\n            control.onEvent(pinEventSource_C, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.D) {\n            pins.setPull(ButtonPin_D, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_D, PinEventType.Edge)\n            control.onEvent(pinEventSource_D, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.CD) {\n            loops.everyInterval(50, function () {\n                if (pins.digitalReadPin(ButtonPin_C) == 0 && pins.digitalReadPin(ButtonPin_D) == 0) {\n                    control.raiseEvent(buttonEventSource, buttonEventValue.CD_pressed)\n                }\n            })\n            control.onEvent(buttonEventSource, buttonEventValue.CD_pressed, handler)\n        }\n    }\n\n    //% blockId=fans block=\"Motor fan %Rjpin toggle to $fanstate || speed %speed \\\\%\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% fanstate.shadow=\"toggleOnOff\"\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    //% speed.min=0 speed.max=100\n    //% expandableArgumentMode=\"toggle\"\n    export function motorFan(Rjpin: DigitalRJPin, fanstate: boolean, speed: number = 100): void {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.J3:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.J4:\n                pin = AnalogPin.P15\n                break;\n        }\n        if (fanstate) {\n            pins.analogSetPeriod(pin, 100)\n            pins.analogWritePin(pin, Math.map(speed, 0, 100, 0, 1023))\n        }\n        else {\n            pins.analogWritePin(pin, 0)\n            speed = 0\n        }\n    }\n\n\n    //% blockId=\"setLoopFolder\" block=\"loop play all the MP3s in the folder:$folderNum\"\n    //% folderNum.defl=\"01\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setLoopFolder(folderNum: string): void {\n        CMD = 0x17\n        para1 = 0\n        para2 = parseInt(folderNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    //% blockId=\"folderPlay\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum || repeatList: $myAns\"\n    //% folderNum.defl=\"01\" fileNum.defl=\"001\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function folderPlay(folderNum: string, fileNum: string, myAns: boolean = false): void {\n        CMD = 0x0F\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        if (myAns)\n            execute(0x19)\n    }\n\n    //% blockId=\"playFolderFilePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFilePort(folderNum: string, fileNum: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFolderFileVolumePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum with volume:$theVolume usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" theVolume.defl=\"10\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFileVolumePort(folderNum: string, fileNum: string, theVolume: string, Rjpin: DigitalRJPin): void {\n        \n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        \n        let volume = parseInt(theVolume)\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(200)\n\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"volumePort\" \n    //% block=\"set MP3 volume:$theVolume usingPin:$Rjpin\"\n    //% theVolume.defl=\"10\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function volumePort(theVolume: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        let volume = parseInt(theVolume)\n        if (volume > 30) {\n            volume = 30\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(300)\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n\n\n    //% blockId=\"setTracking\" \n    //% block=\"play the mp3 in order of:%tracking || repeatList: $myAns\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% tracking.defl=1\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setTracking(tracking: number, myAns: boolean = false): void {\n        CMD = 0x03\n        para1 = 0x00\n        para2 = tracking\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        execute(0x0D)\n        if (myAns)\n            execute(0x19)\n    }\n    //% blockId=MP3execute block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=\"setVolume\" block=\"Set volume(0~25):%volume\"\n    //% volume.min=0 volume.max=25\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setVolume(volume: number): void {\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 0x06\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=MP3setPort block=\"Set the MP3 port to %Rjpin\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function MP3SetPort(Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        setVolume(25)\n    }\n}","notlegos.ts":"// NotLegos Blocks\n\n//% block=\"Not LEGOs\" color=#0031AF weight=1000 icon=\"\\uf3a5\"\n//% groups=['MP3\",'Display', 'Laser', 'others']\nnamespace notLegos {\n\n    // Variables for MP3 and Volume Pot\n    let isPot = false\n    let potPin = AnalogPin.P0\n    let mp3bits = 0\n    let mp3Apin = SerialPin.P0\n    let mp3Bpin = SerialPin.P0\n    let mp3Cpin = SerialPin.P0\n    let mp3Avolume = 1\n    let mp3Bvolume = 1\n    let mp3Cvolume = 1\n    let relativeCvolume = 1\n    let lastMP3bit = \"\"\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    let mp3musicPin = null\n    let mp3music = false\n    let mp3voicePin = null\n    let mp3voice = false\n    let mp3sfxPin = null\n    let mp3sfx = false\n\n    // String Arrays for Full Player Sound Sets and Shuffled Playlists Thereof\n    let PlayerAwaitingMusic: string[] = []\n    let PlayerFailure: string[] = []\n    let PlayerHurry: string[] = []\n    let PlayerIntro: string[] = []\n    let PlayerIntroMusic: string[] = []\n    let PlayerLevelMusic: string[] = []\n    let PlayerLost: string[] = []\n    let PlayerLostMusic: string[] = []\n    let PlayerName: string[] = []\n    let PlayerNay: string[] = []\n    let PlayerOuch: string[] = []\n    let PlayerReady: string[] = []\n    let PlayerSuccess: string[] = []\n    let PlayerTutorialMusic: string[] = []\n    let PlayerWon: string[] = []\n    let PlayerWonMusic: string[] = []\n    let PlayerYay: string[] = []\n    let PlaylistAwaitingMusic: string[] = []\n    let PlaylistCorrect: string[] = []\n    let PlaylistExplosion: string[] = []\n    let PlaylistFailure: string[] = []\n    let PlaylistFire: string[] = []\n    let PlaylistGhost: string[] = []\n    let PlaylistHurry: string[] = []\n    let PlaylistIncorrect: string[] = []\n    let PlaylistIntro: string[] = []\n    let PlaylistLost: string[] = []\n    let PlaylistName: string[] = []\n    let PlaylistNay: string[] = []\n    let PlaylistOuch: string[] = []\n    let PlaylistReady: string[] = []\n    let PlaylistSlash: string[] = []\n    let PlaylistSpark: string[] = []\n    let PlaylistSplash: string[] = []\n    let PlaylistSuccess: string[] = []\n    let PlaylistWon: string[] = []\n    let PlaylistYay: string[] = []\n\n    // Sound Strings - Global\n    let VoiceTracks = \"10_1_90_1.75|10_2_90_3.65|10_3_50_11.5|10_4_90_0|10_5_90_0|10_6_90_4.65|10_7_90_7.15|10_8_90_4.8|10_9_90_3.75|10_10_90_5.05|10_11_90_0|10_12_90_0|10_13_90_3|10_14_90_3|10_15_90_3|10_16_90_4|10_17_90_0|10_18_90_3|10_19_90_3|10_20_90_4|10_21_90_2|10_22_90_0|10_23_90_2|10_24_90_2|10_25_90_6|10_26_90_6|10_27_90_6|10_28_90_6|10_29_90_6|10_30_90_6|10_31_90_6|10_32_90_6|10_33_90_8|10_34_90_9|10_35_90_6|10_36_90_6|10_37_90_6|10_38_90_6|10_39_90_6|10_40_90_6\".split(\"|\")\n    let CorrectSFX = \"7_1_100_4|7_2_100_8|7_3_100_8|7_4_100_6|7_5_100_10|7_6_100_8|7_7_100_6|7_8_100_4|7_9_100_17|7_10_100_9|7_11_100_4|7_12_100_8|7_13_100_12|7_14_100_7|7_15_100_10|7_16_100_9|7_17_100_10|7_18_100_9|7_19_100_8|7_20_100_4|7_21_100_7|7_22_100_26|7_23_100_5|7_24_100_4|7_25_100_10|7_26_100_7|7_27_100_7|7_28_100_6|7_29_100_7|7_30_100_7|7_31_100_12|7_32_100_4|7_33_100_6|7_34_100_6|7_35_100_6|7_36_100_6|7_37_100_5|7_38_100_3|7_39_100_6|7_40_100_6|7_41_100_6|7_42_100_8|7_43_100_6|7_44_100_8|7_45_100_6|7_46_100_5|7_47_100_5|7_48_100_12|7_49_100_3|7_50_100_7|7_51_100_8|7_52_100_11|7_53_100_6|7_54_100_2|7_55_100_5|7_56_100_7|7_57_100_8|7_58_100_7|7_59_100_6|7_60_100_7|7_61_100_6|7_62_100_8|7_63_100_5|7_64_100_5|7_65_100_7|7_66_100_9|7_67_100_6|7_68_100_6|7_69_100_7|7_70_100_10|7_71_100_7|7_72_100_5|7_73_100_6|7_74_100_8|7_75_100_3|7_76_100_3|7_77_100_6|7_78_100_7|7_79_100_4|7_80_100_6|7_81_100_2|7_82_100_3|7_83_100_3|7_84_100_1|7_85_100_3|7_86_100_6|7_87_100_7|7_88_100_5|7_89_100_3|7_90_100_5|7_91_100_3|7_92_100_3|7_93_100_2|7_94_100_3|7_95_100_3|7_96_100_1|7_99_100_1|7_100_100_1|7_101_100_1|7_102_100_1|7_103_100_1|7_104_100_3|7_105_100_1|7_106_100_1|7_107_100_4|7_108_100_4|7_109_100_1|7_110_100_1|7_111_100_1|7_112_100_1|7_113_100_1|7_114_100_2|7_115_100_1|7_116_100_1|7_117_100_1|7_118_100_1\".split(\"|\")\n    let IncorrectSFX = \"8_1_100_6|8_2_100_5|8_3_100_3|8_4_100_5|8_5_100_7|8_6_100_6|8_7_100_4|8_8_100_1|8_9_100_3|8_10_100_4|8_11_100_3|8_12_100_3|8_13_100_6|8_14_100_3|8_15_100_1|8_16_100_1|8_17_100_1|8_18_100_1|8_19_100_0|8_20_100_0|8_21_100_5|8_22_100_4|8_23_100_3|8_24_100_7\".split(\"|\")\n    let AllSFX = \"9_1_100_4.754|9_2_100_4.336|9_3_100_5.172|9_4_100_4.806|9_5_100_4.754|9_6_100_1.536|9_7_100_2.136|9_8_100_1.896|9_9_100_2.592|9_10_100_0.936|9_11_100_1.008|9_12_100_0.312|9_13_100_1.44|9_14_100_1.8|9_15_100_1.992|9_16_100_1.104|9_17_100_1.08|9_18_100_0.912|9_19_100_0.528|9_20_100_0.72|9_21_100_0.672|9_22_100_0.696|9_23_100_0.6|9_24_100_0.576|9_25_100_1.44|9_26_100_1.8|9_27_100_1.464|9_28_100_0.432|9_29_100_0.312|9_30_100_2.112|9_31_100_0.648|9_32_100_0.384|9_33_100_2.352|9_34_100_1.8|9_35_100_1.608|9_36_100_0.648|9_37_100_0.768|9_38_100_0.552|9_39_100_0.48|9_40_100_1.032|9_41_100_0.456|9_42_100_0.384|9_43_100_0.552|9_44_100_0.432|9_45_100_0.216|9_46_100_0.624|9_47_100_1.248|9_48_100_1.104|9_49_100_1.248|9_50_100_0.648|9_51_100_0.456|9_53_100_5.256|9_54_100_2.328|9_55_100_4.992|9_56_100_1.776|9_57_100_2.28|9_58_100_0.504|9_59_100_0.984|9_60_100_0.984|9_61_100_0.504|9_62_100_1.632|9_63_100_0.288|9_64_100_0.192|9_65_100_0.168|9_66_100_0.288|9_67_100_0.288|9_68_100_0.312|9_69_100_0.72|9_70_100_0.672|9_71_100_0.648|9_72_100_0.648|9_73_100_1.632|9_74_100_1.416|9_75_100_1.248|9_76_100_0.48|9_77_100_0.36|9_78_100_0.216|9_79_100_0.576|9_80_100_0.731|9_81_100_1.128|9_82_100_2.184|9_83_100_0.744|9_84_100_0.6|9_85_100_1.152|9_86_100_1.68|9_87_100_1.32|9_88_100_0.528|9_89_100_0.36|9_90_100_0.792|9_91_100_2.496|9_92_100_1.8|9_93_100_1.8|9_94_100_0.744|9_95_100_1.776|9_96_100_5.544|9_97_100_0.432|9_98_100_2.064|9_99_100_0.744|9_100_100_0.696|9_101_100_1.776|9_102_100_0.12|9_103_100_0.168|9_104_100_0.96|9_105_100_0.96|9_106_100_2.04|9_107_100_3.984|9_108_100_1.608|9_109_100_3.528|9_110_100_0.456|9_111_100_0.696|9_112_100_1.632|9_113_100_2.232\".split(\"|\")\n    let GhostSFX = \"9_1_100_4.754|9_2_100_4.336|9_3_100_5.172|9_4_100_4.806\".split(\"|\")\n    let FireSFX = \"9_6_100_1.536|9_15_100_1.992|9_53_100_5.256|9_106_100_2.04\".split(\"|\")\n    let ExplosionSFX = \"9_77_100_0.36|9_101_100_1.776|9_109_100_3.528\".split(\"|\")\n    let SplashSFX = \"9_33_100_2.352|9_34_100_1.8\".split(\"|\")\n    let SparkSFX = \"9_5_100_4.754|9_51_100_0.456|9_85_100_1.152|9_86_100_1.68|9_111_100_0.696|9_112_100_1.632\".split(\"|\")\n    let SlashSFX = \"9_10_100_0.936|9_25_100_1.44|9_28_100_0.432|9_32_100_0.384|9_50_100_0.648|9_59_100_0.984|9_63_100_0.288|9_64_100_0.192|9_65_100_0.168|9_66_100_0.288|9_67_100_0.288|9_68_100_0.312|9_69_100_0.72|9_75_100_1.248|9_76_100_0.48|9_77_100_0.36|9_78_100_0.216|9_89_100_0.36\".split(\"|\")\n    \n    // Music Strings - Super Mario Brothers\n    let SMBIntroMusic = \"1_1_75_2.808|1_2_75_3.912|1_3_75_7.81|1_4_75_4.992|1_5_75_3.918|1_6_75_12.382|1_7_75_3.204|1_8_75_6.648|1_9_75_6.168|1_10_75_7.464|1_11_75_9.36|1_12_75_9.038|1_13_75_10.605|1_14_75_3.492|1_15_75_9.613|1_16_75_3.48|1_17_75_5.58|1_18_75_5.041|1_19_75_6.336|1_20_75_5.424|1_21_75_7.2|1_22_75_5.424|1_23_75_3.317|1_24_75_7.262|1_25_75_5.59|1_26_75_5.52|1_27_75_10.776|1_28_75_4.944|1_29_75_5.496|1_30_75_4.032|1_31_75_6.264|1_32_75_3.918|1_33_75_4.44|1_34_75_10.152|1_35_75_8.097|1_36_75_7.706|1_37_75_3.317|1_38_75_6.87|1_39_75_4.466|1_40_75_5.877|1_41_75_3.432|1_42_75_7.392|1_43_75_6.768|1_44_75_2.616|1_45_75_6.269|1_46_75_1.188|1_47_75_2.088|1_48_75_2.124|1_49_75_8.228|1_50_75_15.647|1_51_75_9.064|1_52_75_10.152|1_53_75_13.008|1_54_75_14.16|1_55_75_14.236|1_56_75_15.792|1_57_75_7.392|1_58_75_4.368|1_59_75_9.384|1_60_75_7.653|1_61_75_8.76|1_62_75_8.952|1_63_75_12.024|1_64_75_4.284|1_65_75_6.048|1_66_75_9.072|1_67_75_4.68|1_68_75_6.138|1_69_75_5.208|1_70_75_9.576|1_71_75_8.045|1_72_75_8.045|1_73_75_5.407|1_74_75_3.186\".split(\"|\")\n    let SMBTutorialMusic = \"2_1_65_36|2_2_65_40|2_3_65_41|2_4_65_46|2_5_65_50|2_6_65_51|2_7_65_59|2_8_65_63|2_9_65_64|2_10_65_65|2_11_65_66|2_12_65_67|2_13_65_68|2_14_65_69|2_15_65_76|2_16_65_80|2_17_65_84|2_18_65_90|2_19_65_92|2_20_65_100|2_21_65_103|2_22_65_105|2_23_65_112|2_24_65_113|2_25_65_123|2_26_65_138|2_27_65_142|2_28_65_144|2_29_65_156|2_30_65_158|2_31_65_120|2_32_65_120|2_33_65_120|2_34_65_120|2_35_65_120|2_36_65_120\".split(\"|\")\n    let SMBAwaitingMusic = \"3_1_100_64|3_2_100_211|3_3_100_185|3_4_100_185|3_5_100_182|3_6_100_114|3_7_100_181|3_8_100_103|3_9_100_303|3_10_100_21|3_11_100_235|3_12_100_121|3_13_100_203|3_14_100_119|3_15_100_206|3_16_100_146|3_17_100_237|3_18_100_210|3_19_100_160\".split(\"|\")\n    let SMBLevelMusic = \"4_1_100_128|4_3_100_142|4_5_100_111|4_6_100_141|4_9_100_126|4_11_100_132|4_15_100_119|4_16_100_146|4_18_100_120|4_20_100_143|4_22_100_142|4_23_100_112|4_24_100_138|4_25_100_139|4_26_100_111|4_27_100_116|4_28_100_129|4_31_100_98|4_32_100_146|4_33_100_177|4_34_100_82|4_36_100_160|4_38_100_180|4_39_100_211|4_41_100_134|4_42_100_183|4_43_100_124|4_44_100_261|4_45_100_91|4_46_100_138|4_49_100_207|4_50_100_41|4_51_100_180|4_52_100_202|4_53_100_194|4_56_100_209|4_57_100_195|4_58_100_180|4_60_100_198|4_61_100_180|4_63_100_78|4_66_100_139|4_67_100_224|4_68_100_180|4_73_100_180|4_76_100_180|4_77_100_196|4_78_100_113|4_82_100_180|4_83_100_123|4_84_100_180|4_86_100_126|4_93_100_121|4_97_100_59|4_98_100_180|4_99_100_180|4_100_100_118|4_101_100_156|4_102_100_180|4_103_100_70|4_104_100_216|4_105_100_140|4_106_100_180|4_107_100_147|4_108_100_147|4_109_100_180|4_110_100_158|4_111_100_180|4_112_100_80|4_113_100_152|4_114_100_127|4_116_100_122|4_118_100_106|4_123_100_143|4_124_100_36|4_125_100_164|4_127_100_282|4_128_100_311|4_129_100_123|4_130_100_187|4_131_100_62|4_132_100_180|4_133_100_130|4_134_100_112|4_135_100_105|4_139_100_126|4_141_100_176|4_142_100_135|4_143_100_126|4_144_100_144|4_145_100_140|4_146_100_133|4_149_100_167|4_150_100_120|4_151_100_180|4_155_100_226|4_157_100_164|4_158_100_144|4_159_100_104|4_161_100_180|4_162_100_87|4_163_100_126|4_164_100_118|4_165_100_194|4_166_100_135|4_167_100_50|4_168_100_109|4_169_100_180|4_170_100_133|4_171_100_180|4_172_100_91|4_173_100_138|4_176_100_120|4_177_100_81|4_178_100_150|4_179_100_153|4_180_100_104|4_181_100_112\".split(\"|\")\n    let SMBWonMusic = \"5_1_100_4|5_2_100_17|5_3_100_29|5_4_100_172|5_5_100_13|5_6_100_248|5_7_100_11|5_8_100_445|5_9_100_241|5_10_100_244|5_11_100_20|5_12_100_7|5_13_100_28|5_14_100_74|5_15_100_15|5_16_100_74|5_17_100_17|5_18_100_17|5_19_100_15|5_20_100_38|5_21_100_42|5_22_100_67|5_23_100_8|5_24_100_8|5_25_100_13|5_26_100_17|5_27_100_5|5_28_100_122|5_29_100_226|5_30_100_79\".split(\"|\")\n    let SMBLostMusic = \"6_1_100_87|6_2_100_31|6_3_100_196|6_4_100_65|6_5_100_4|6_6_100_23|6_7_100_65|6_8_100_62|6_9_100_78|6_10_100_6|6_11_100_162\".split(\"|\")\n    \n    // Player Strings - Mario\n    let MarioSoundString = \"A_21_1_100_1.5|A_21_2_100_1|I_21_3_100_3.3|A_21_4_100_1.9|A_21_5_100_2.1|I_21_6_100_1.8|I_21_7_100_1.8|R_21_8_100_0.6|R_21_9_100_1.3|R_21_10_100_1.1|R_21_11_100_0.6|R_21_12_100_0.8|R_21_13_100_1.6|R_21_14_100_1.3|R_21_15_100_1.2|R_21_16_100_1.1|R_21_17_100_1.3|R_21_18_100_1|Y_21_19_100_0.2|Y_21_20_100_0.2|Y_21_21_100_0.3|Y_21_22_100_0.5|Y_21_23_100_0.6|Y_21_24_100_0.6|Y_21_25_100_0.6|Y_21_26_100_0.6|Y_21_27_100_0.6|Y_21_28_100_0.6|Y_21_29_100_0.7|Y_21_30_100_0.7|Y_21_31_100_0.7|Y_21_32_100_0.7|Y_21_33_100_0.7|Y_21_34_100_0.8|Y_21_35_100_0.8|Y_21_36_100_0.8|Y_21_37_100_0.8|Y_21_38_100_0.8|Y_21_39_100_0.8|Y_21_40_100_0.9|Y_21_41_100_0.9|Y_21_42_100_0.9|Y_21_43_100_0.9|Y_21_44_100_0.9|Y_21_45_100_0.9|Y_21_46_100_0.9|Y_21_47_100_1|Y_21_48_100_1|Y_21_49_100_1|Y_21_50_100_1|Y_21_51_100_1.1|Y_21_52_100_1.1|Y_21_53_100_1.1|Y_21_54_100_1.2|Y_21_55_100_1.2|Y_21_56_100_1.2|Y_21_57_100_1.2|Y_21_58_100_1.3|Y_21_59_100_1.3|Y_21_60_100_1.3|Y_21_61_100_1.4|Y_21_62_100_1.4|S_21_63_100_1|S_21_64_100_1.6|S_21_65_100_1.7|S_21_66_100_1.7|S_21_67_100_1.9|S_21_68_100_2.1|S_21_69_100_2.2|S_21_70_100_2.4|S_21_71_100_2.4|S_21_72_100_2.5|W_21_73_100_1.8|W_21_74_100_2|W_21_75_100_2.2|W_21_76_100_2.6|W_21_77_100_2.9|O_21_78_100_0.6|O_21_79_100_0.4|O_21_80_100_0.4|O_21_81_100_1.1|O_21_82_100_1.5|O_21_83_100_0.8|O_21_84_100_0.7|O_21_85_100_0.8|O_21_86_100_0.9|O_21_87_100_1.3|O_21_88_100_0.5|O_21_89_100_1|O_21_90_100_1|O_21_91_100_0.4|O_21_92_100_0.5|O_21_93_100_0.9|O_21_94_100_0.4|O_21_95_100_0.4|N_21_96_100_1|N_21_97_100_1.1|N_21_98_100_1|N_21_99_100_0.6|N_21_100_100_0.9|N_21_101_100_1.4|N_21_102_100_1.7|N_21_103_100_1.3|N_21_104_100_0.6|N_21_105_100_1.4|N_21_106_100_0.8|N_21_107_100_1.1|N_21_108_100_1.1|N_21_109_100_0.8|N_21_110_100_1.7|N_21_111_100_2.4|I_21_112_100_0.8|I_21_113_100_0.9|F_21_114_100_1.1|F_21_115_100_2.5|F_21_116_100_2.5|F_21_117_100_1.4|L_21_118_100_3.4|L_21_119_100_3.5|L_21_120_100_4.4|L_21_121_100_1.5|H_21_122_100_44.4\"\n\n    // BLOCK - Set the Player's Sounds\n    //% blockId=nl_player_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% weight=101\n    //% block=\"Set player to $player\"\n    export function setSounds(player: string): void {\n        let theSound = \"\"\n        let thisLetter = \"\"\n        let series = \"\"\n        let soundStrings: string[] = []\n        if (player == \"Mario\") {\n            soundStrings = MarioSoundString.split(\"|\")\n            series = \"SMB\"\n        }\n        if (series == \"SMB\") {\n            PlayerIntroMusic = SMBIntroMusic\n            PlayerTutorialMusic = SMBTutorialMusic\n            PlayerAwaitingMusic = SMBAwaitingMusic\n            PlayerLevelMusic = SMBLevelMusic\n            PlayerWonMusic = SMBWonMusic\n            PlayerLostMusic = SMBLostMusic\n        }\n        for (let sString of soundStrings) {\n            thisLetter = sString.charAt(0)\n            theSound = sString.substr(2, sString.length - 2)\n            if (thisLetter == \"A\") {\n                PlayerName.push(theSound)\n            } else if (thisLetter == \"R\") {\n                PlayerReady.push(theSound)\n            } else if (thisLetter == \"Y\") {\n                PlayerYay.push(theSound)\n            } else if (thisLetter == \"I\") {\n                PlayerIntro.push(theSound)\n            } else if (thisLetter == \"N\") {\n                PlayerNay.push(theSound)\n            } else if (thisLetter == \"O\") {\n                PlayerOuch.push(theSound)\n            } else if (thisLetter == \"S\") {\n                PlayerSuccess.push(theSound)\n            } else if (thisLetter == \"F\") {\n                PlayerFailure.push(theSound)\n            } else if (thisLetter == \"W\") {\n                PlayerWon.push(theSound)\n            } else if (thisLetter == \"L\") {\n                PlayerLost.push(theSound)\n            } else if (thisLetter == \"H\") {\n                PlayerHurry.push(theSound)\n            }\n        }\n    }    \n    \n    // Internal Function - Take a Sound from a Playlist After Filling it from a Soundbank if it's Empty\n    function takeReplenish(Playlist: any[], Soundbank: any[]) {\n        let returnSound = \"\"\n        returnSound = \"\"\n        if (Playlist.length == 0) {\n            for (let index = 0; index <= Soundbank.length - 1; index++) {\n                if (index == 0) {\n                    Playlist.push(Soundbank[index])\n                } else if (index >= 1) {\n                    Playlist.insertAt(randint(0, index), Soundbank[index])\n                }\n            }\n        }\n        returnSound = Playlist.shift()\n        return returnSound\n    }\n\n    // BLOCK - Fetch a Sound of a Type from a Category\n    //% blockId=nl_get_soundstring\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% weight=101\n    //% block=\"Get $Category sound $Type\"\n    export function getSoundString(Category: string, Type: string): string {\n        let returnString = \"\"\n        if (Category == \"Voice\") {\n            returnString = VoiceTracks[parseFloat(Type)]\n        } else if (Category == \"Player\") {\n            if (Type == \"Name\") {\n                returnString = takeReplenish(PlaylistName, PlayerName)\n            } else if (Type == \"Intro\") {\n                returnString = takeReplenish(PlaylistIntro, PlayerIntro)\n            } else if (Type == \"Ready\") {\n                returnString = takeReplenish(PlaylistReady, PlayerReady)\n            } else if (Type == \"Yay\") {\n                returnString = takeReplenish(PlaylistYay, PlayerYay)\n            } else if (Type == \"Success\") {\n                returnString = takeReplenish(PlaylistSuccess, PlayerSuccess)\n            } else if (Type == \"Nay\") {\n                returnString = takeReplenish(PlaylistNay, PlayerNay)\n            } else if (Type == \"Failure\") {\n                returnString = takeReplenish(PlaylistFailure, PlayerFailure)\n            } else if (Type == \"Won\") {\n                returnString = takeReplenish(PlaylistWon, PlayerWon)\n            } else if (Type == \"Lost\") {\n                returnString = takeReplenish(PlaylistLost, PlayerLost)\n            } else if (Type == \"Hurry\") {\n                returnString = takeReplenish(PlaylistHurry, PlayerHurry)\n            }\n        } else if (Category == \"SFX\") {\n            if (Type == \"Correct\") {\n                returnString = takeReplenish(PlaylistCorrect, CorrectSFX)\n            } else if (Type == \"Incorrect\") {\n                returnString = takeReplenish(PlaylistIncorrect, IncorrectSFX)\n            } else if (Type == \"Ghost\") {\n                returnString = takeReplenish(PlaylistGhost, GhostSFX)\n            } else if (Type == \"Fire\") {\n                returnString = takeReplenish(PlaylistFire, FireSFX)\n            } else if (Type == \"Explosion\") {\n                returnString = takeReplenish(PlaylistExplosion, ExplosionSFX)\n            } else if (Type == \"Splash\") {\n                returnString = takeReplenish(PlaylistSplash, SplashSFX)\n            } else if (Type == \"Spark\") {\n                returnString = takeReplenish(PlaylistSpark, SparkSFX)\n            } else if (Type == \"Slash\") {\n                returnString = takeReplenish(PlaylistSlash, SlashSFX)\n            }\n        } else if (Category == \"Music\") {\n            if (Type == \"Intro\") {\n                let PlaylistIntroMusic: number[] = []\n                returnString = takeReplenish(PlaylistIntroMusic, PlayerIntroMusic)\n            } else if (Type == \"Tutorial\") {\n                let PlaylistTutorialMusic: number[] = []\n                returnString = takeReplenish(PlaylistTutorialMusic, PlayerTutorialMusic)\n            } else if (Type == \"Awaiting\") {\n                returnString = takeReplenish(PlaylistAwaitingMusic, PlayerAwaitingMusic)\n            } else if (Type == \"Level\") {\n                let PlaylistLevelMusic: number[] = []\n                returnString = takeReplenish(PlaylistLevelMusic, PlayerLevelMusic)\n            } else if (Type == \"Won\") {\n                let PlaylistWonMusic: number[] = []\n                returnString = takeReplenish(PlaylistWonMusic, PlayerWonMusic)\n            } else if (Type == \"Lost\") {\n                let PlaylistLostMusic: number[] = []\n                returnString = takeReplenish(PlaylistLostMusic, PlayerLostMusic)\n            }\n        }\n        return returnString\n    }\n\n\n    ///////////////////////////////////////////////////////MP3\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(20) // Was 100; problematic at 10\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n    function sendMP3volume(sPin: SerialPin): void {\n        let theVolume = 5\n        if (sPin == mp3Apin) {\n            theVolume = Math.round(potRead() * mp3Avolume)\n        } else if (sPin == mp3Bpin) {\n            theVolume = Math.round(potRead() * mp3Bvolume)\n        } else if (sPin == mp3Cpin) {\n            theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    function sendMP3volumeFast(sPin: SerialPin): void {\n        let theVolume = 5\n        if (sPin == mp3Apin) {\n            theVolume = Math.round(potRead() * mp3Avolume)\n        } else if (sPin == mp3Bpin) {\n            theVolume = Math.round(potRead() * mp3Bvolume)\n        } else if (sPin == mp3Cpin) {\n            theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    function sendMP3play(folderNum: string, fileNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    //% blockId=\"playFileNl\" \n    //% block=\"Play length of file:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n\n    export function playFile(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P16\n        stringParts = soundString.split(\"_\")\n        let theFile = stringParts[0]\n        let theVolume = stringParts[1]\n        let theLength = stringParts[2]\n        sendMP3file(theFile, theVolume, sPin)\n        return parseFloat(theLength) * 1000\n    }\n    function sendMP3file(fileNum: string, volumeNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 3\n        para1 = parseInt(fileNum)\n        para2 = parseInt(volumeNum)\n        para1 = parseInt(\"0\")\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFileNl2\" \n    //% block=\"Play2 length of file:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n\n    export function playFile2(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P16\n        stringParts = soundString.split(\"_\")\n        let theFile = stringParts[0]\n        let theVolume = stringParts[1]\n        let theLength = stringParts[2]\n        sendMP3file2(theFile, theVolume, sPin)\n        return parseFloat(theLength) * 1000\n    }\n    function sendMP3file2(fileNum: string, volumeNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 15\n        para1 = parseInt(fileNum)\n        para2 = parseInt(volumeNum)\n        para1 = parseInt(\"1\")\n        para2 = parseInt(\"1\")\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=nl_backgroundVolume\n    //% block=\"Set background volume to:%relativeVolume\"\n    //% subcategory=\"MP3\" group=\"MP3\"\n    export function sendBackgroundVolume(relativeVolume: number): void {\n        relativeCvolume = relativeVolume/100\n\n        let sPin = mp3Cpin\n        let theVolume = Math.round(potRead() * mp3Cvolume * relativeVolume / 100)\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=MP3execute2 block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n  \n    //% blockId=notlegos_pot_read\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Trimpot analog value\"\n    export function potRead() {\n        if(isPot){\n            return Math.round(pins.map(pins.analogReadPin(potPin), 0, 1023, 0, 30))\n        } else{\n            return 5\n        }\n    }\n\n    //% blockId=notlegos_relCread\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return background volume\"\n    export function getBackgroundVolume() {\n\n            return relativeCvolume\n\n    }\n    //% blockId=notlegos_mp3Avolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3A volume\"\n    export function getMP3AVolume() {\n        return potRead() * mp3Avolume\n    }\n    //% blockId=notlegos_mp3Bvolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3B volume\"\n    export function getMP3BVolume() {\n        return potRead() * mp3Bvolume\n    }\n      //% blockId=notlegos_mp3Cvolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3C volume\"\n    export function getMP3CVolume() {\n        return potRead() * mp3Cvolume * relativeCvolume\n    }\n\n    //% blockId=notlegos_pot_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Connect Volume Control Pot at pin %aPin\"\n    //% aPin.fieldEditor=\"gridpicker\"\n    export function potSet(aPin: AnalogPin): void{\n        potPin = aPin\n        isPot = true\n    }\n\n//////////////////////////////////////////////////////////\n\n    //% blockId=nl_mp3_init\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Ready MP3bit at %sPin for %type\"\n    //% dPin.fieldEditor=\"gridpicker\"\n    export function mp3setPorts(type:mp3type, sPin: SerialPin): void {\n        if (type == mp3type.music){\n            mp3musicPin = sPin\n            mp3music = true\n        } else if (type == mp3type.voice){\n            mp3voicePin = sPin\n            mp3voice = true\n        } else if (type == mp3type.sfx){\n            mp3sfxPin = sPin\n            mp3sfx = true\n        }\n        sendMP3volumeQuick(sPin)\n    }\n\n    function sendMP3volumeQuick(sPin: SerialPin): void {\n        let theVolume = 5\n        // if (sPin == mp3Apin) {\n        //     theVolume = Math.round(potRead() * mp3Avolume)\n        // } else if (sPin == mp3Bpin) {\n        //     theVolume = Math.round(potRead() * mp3Bvolume)\n        // } else if (sPin == mp3Cpin) {\n        //     theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        // }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    //% blockId=nl_mp3_music\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play music \"\n    //% dPin.fieldEditor=\"gridpicker\"\n\n\n\n\n\n\n    //% blockId=\"playFolderFile\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playFolderFile(folderNum: string, fileNum: string): void {\n    \n        if (mp3bits > 0) {\n            sendMP3volume(mp3Apin)\n        }\n        if (mp3bits > 1) {\n           // sendMP3volume(mp3Bpin)\n        }\n        if (mp3bits >0) {\n            sendMP3play(folderNum, fileNum, mp3Apin)\n        }\n        if (mp3bits > 1) {\n          //  sendMP3play(folderNum, fileNum, mp3Bpin)\n        }\n    }\n\n    //% blockId=\"playsFor\" \n    //% block=\"Play length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsFor(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        if (mp3bits == 1) {\n            sPin = mp3Apin\n            mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        } else {\n            if (lastMP3bit == \"A\") {\n                    sPin = mp3Bpin\n                    mp3Bvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n                    lastMP3bit = \"B\"\n            } else {\n                sPin = mp3Apin\n                mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n            lastMP3bit = \"A\"\n            }\n        }\n        let theLength = stringParts[3]\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n        return parseFloat(theLength) * 1000 + 20\n    }\n\n    //% blockId=nl_volume_refresh\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume\"\n    export function updateVolume(): void {\n        if (mp3bits > 0) {\n            sendMP3volumeFast(mp3Apin)\n        }\n        if (mp3bits > 1) {\n            sendMP3volumeFast(mp3Bpin)\n        }\n        if (mp3bits > 2) {\n            sendMP3volumeFast(mp3Cpin)\n        }\n    }\n\n\n    //% blockId=\"nl_playsForTwo\" \n    //% block=\"Dual play length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsForTwo(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n\n        mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        mp3Bvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n\n        sendMP3volumeFast(mp3Apin)\n        sendMP3volumeFast(mp3Bpin)\n        \n        basic.pause(20)\n\n        sendMP3play(theFolder, theFile, mp3Apin)\n        sendMP3play(theFolder, theFile, mp3Bpin)\n        \n        return parseFloat(theLength) * 1000 + 20\n    }\n\n\n    //% blockId=\"nl_playsForBackground\" \n    //% block=\"Play in background length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsForBackground(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n        mp3Cvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        sPin = mp3Cpin\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n        return parseFloat(theLength) * 1000 + 20\n    }\n\n\n    //% blockId=\"nl_playBackground\" \n    //% block=\"Play in background:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playBackground(soundString: string): void {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n        mp3Cvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        sPin = mp3Cpin\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n    }\n\n\n    //% blockId=\"nl_backgroundStop\" \n    //% block=\"Stop background sound\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function stopBackgroundSound(): void {\n        serial.redirect(mp3Cpin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 0x16\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    // Nezha - Functions for Pins and Ports\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_Serial(Rjpin: DigitalRJPin): any {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = SerialPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = SerialPin.P2\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.P12:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = SerialPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = SerialPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n\n    // Enum - To Support MP3\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n\n    // Enum - Nezha and Pins\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum mbPin {\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1 (Analog J1)\"\n        P1,\n        //% block=\"P2 (Analog J2)\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8 (J1)\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12 (J2)\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14 (J3)\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16 (J4)\"\n        P16,\n    }\n}\nenum mp3type {\n    music,\n    voice,\n    sfx\n}","pxt.json":"{\n    \"name\": \"NotLegosExt\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"displaySendBuffer.asm\",\n        \"display.ts\",\n        \"planetxbasic.ts\",\n        \"notlegos.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"7.0.42\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","test.ts":""}},{"timestamp":1726869428176,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"}g^Kh@tsk|1f0]fNt=Se\">digits</variable><variable id=\"x4t~+B8#]@461X;Q^-0c\">sockLights</variable><variable id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights</variable><variable id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"Connected_oledClear\"><next><block type=\"pin_set_audio_pin_enabled\"><value name=\"enabled\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow></value><next><block type=\"device_led_enable\"><value name=\"on\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"}g^Kh@tsk|1f0]fNt=Se\">digits</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"grove_tm1637_create\"><field name=\"cPin\">DigitalPin.P7</field><field name=\"dPin\">DigitalPin.P6</field></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"x4t~+B8#]@461X;Q^-0c\">sockLights</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P11</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"x4t~+B8#]@461X;Q^-0c\">sockLights</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"x4t~+B8#]@461X;Q^-0c\">sockLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P12</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">18</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P13</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"993\" y=\"-7\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl2\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">1_1_25_100</field></shadow></value></block></value></block></statement></block><block type=\"device_button_event\" x=\"1520\" y=\"-20\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">2_1_1</field></shadow></value></block></value></block></statement></block><block type=\"function_definition\" x=\"957\" y=\"222\"><mutation name=\"isNearly\" functionid=\"b1Q}-qv~wJN$grhC!ppp\"><arg name=\"reference\" id=\"5nona16w6rbe5o9cs7yri\" type=\"number\"></arg><arg name=\"reading\" id=\"1603v12143812bjzv2he\" type=\"number\"></arg><arg name=\"tolerance\" id=\"huqcis1hoaqr7iq5ev9lm\" type=\"number\"></arg></mutation><field name=\"function_name\">isNearly</field><value name=\"5nona16w6rbe5o9cs7yri\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reference</field></block></value><value name=\"1603v12143812bjzv2he\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reading</field></block></value><value name=\"huqcis1hoaqr7iq5ev9lm\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">tolerance</field></block></value><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_operation\"><field name=\"OP\">AND</field><value name=\"A\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value></block></value><statement name=\"DO0\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></block></value></block></statement><statement name=\"ELSE\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></block></value></block></statement></block></statement></block><block type=\"every_interval\" x=\"673\" y=\"776\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value><statement name=\"HANDLER\"><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"text_join\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P2</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P3</field></shadow></value></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">2</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">hue </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field></shadow><block type=\"apds9960_readcolor\"></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">3</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">distance </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field></shadow><block type=\"sonarbit\"><field name=\"tPin\">DigitalPin.P8</field><field name=\"ePin\">DigitalPin.P9</field><field name=\"distance_unit\">Connected.Distance_Unit_List.Distance_Unit_cm</field></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">4</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">gesture </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field></shadow><block type=\"Connected_getGesture\"></block></value></block></value></block></next></block></next></block></next></block></statement></block></xml>","main.ts":"function isNearly (reference: number, reading: number, tolerance: number) {\n    if (reading >= reference - tolerance && reading <= reference + tolerance) {\n        return true\n    } else {\n        return false\n    }\n}\ninput.onButtonPressed(Button.A, function () {\n    basic.pause(notLegos.playFile2(\"1_1_25_100\"))\n})\ninput.onButtonPressed(Button.B, function () {\n    basic.pause(notLegos.playFile(\"2_1_1\"))\n})\nConnected.oledClear()\npins.setAudioPinEnabled(true)\nled.enable(false)\nbasic.pause(100)\nlet digits = Connected.tm1637Create(\nDigitalPin.P7,\nDigitalPin.P6\n)\nbasic.pause(1000)\nlet sockLights = Connected.create(Connected.DigitalRJPin.P11, 8, Connected.NeoPixelMode.RGB)\nsockLights.showColor(Connected.colors(Connected.NeoPixelColors.Blue))\nsockLights.show()\nlet wheelLights = Connected.create(Connected.DigitalRJPin.P12, 18, Connected.NeoPixelMode.RGB)\nwheelLights.showColor(Connected.colors(Connected.NeoPixelColors.Blue))\nwheelLights.show()\nlet scoreCircle = Connected.create(Connected.DigitalRJPin.P13, 8, Connected.NeoPixelMode.RGB)\nscoreCircle.showColor(Connected.colors(Connected.NeoPixelColors.Blue))\nscoreCircle.show()\nloops.everyInterval(500, function () {\n    Connected.showUserText(1, \"R\" + pins.analogReadPin(AnalogReadWritePin.P1) + \" C\" + pins.analogReadPin(AnalogReadWritePin.P2) + \" L\" + pins.analogReadPin(AnalogReadWritePin.P3))\n    Connected.showUserText(2, \"hue \" + Connected.readColor())\n    Connected.showUserText(3, \"distance \" + Connected.ultrasoundSensor(DigitalPin.P8, DigitalPin.P9, Connected.Distance_Unit_List.Distance_Unit_cm))\n    Connected.showUserText(4, \"gesture \" + Connected.getGesture())\n})\n","README.md":"\n> Open this page at [https://notlegos.github.io/castleresay/](https://notlegos.github.io/castleresay/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/castleresay** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/castleresay** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/soundbank/](https://notlegos.github.io/soundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/soundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/soundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/resoundbank/](https://notlegos.github.io/resoundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/resoundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/resoundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosext/](https://notlegos.github.io/notlegosext/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosext** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosext** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","displaySendBuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n","display.ts":"\n/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#EA5532 icon=\"\\uf110\" block=\"Connected\" blockId=\"PlanetX_Connected\" \n//% groups='[\"LED\", \"Digital\", \"Analog\", \"IIC Port\", \"OLED\", \"7-Seg 4-Dig LED Nixietube\"]'\nnamespace Connected {\n    ////////////////////////////////TM 1637/////////////////\n    let TM1637_CMD1 = 0x40;\n    let TM1637_CMD2 = 0xC0;\n    let TM1637_CMD3 = 0x80;\n    let _SEGMENTS = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];\n    /////////////////////OLED///////////////////////////////\n    let firstoledinit = true\n    const basicFont: string[] = [\n        \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", // \" \"\n        \"\\x00\\x00\\x5F\\x00\\x00\\x00\\x00\\x00\", // \"!\"\n        \"\\x00\\x00\\x07\\x00\\x07\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x14\\x7F\\x14\\x7F\\x14\\x00\\x00\", // \"#\"\n        \"\\x00\\x24\\x2A\\x7F\\x2A\\x12\\x00\\x00\", // \"$\"\n        \"\\x00\\x23\\x13\\x08\\x64\\x62\\x00\\x00\", // \"%\"\n        \"\\x00\\x36\\x49\\x55\\x22\\x50\\x00\\x00\", // \"&\"\n        \"\\x00\\x00\\x05\\x03\\x00\\x00\\x00\\x00\", // \"'\"\n        \"\\x00\\x1C\\x22\\x41\\x00\\x00\\x00\\x00\", // \"(\"\n        \"\\x00\\x41\\x22\\x1C\\x00\\x00\\x00\\x00\", // \")\"\n        \"\\x00\\x08\\x2A\\x1C\\x2A\\x08\\x00\\x00\", // \"*\"\n        \"\\x00\\x08\\x08\\x3E\\x08\\x08\\x00\\x00\", // \"+\"\n        \"\\x00\\xA0\\x60\\x00\\x00\\x00\\x00\\x00\", // \",\"\n        \"\\x00\\x08\\x08\\x08\\x08\\x08\\x00\\x00\", // \"-\"\n        \"\\x00\\x60\\x60\\x00\\x00\\x00\\x00\\x00\", // \".\"\n        \"\\x00\\x20\\x10\\x08\\x04\\x02\\x00\\x00\", // \"/\"\n        \"\\x00\\x3E\\x51\\x49\\x45\\x3E\\x00\\x00\", // \"0\"\n        \"\\x00\\x00\\x42\\x7F\\x40\\x00\\x00\\x00\", // \"1\"\n        \"\\x00\\x62\\x51\\x49\\x49\\x46\\x00\\x00\", // \"2\"\n        \"\\x00\\x22\\x41\\x49\\x49\\x36\\x00\\x00\", // \"3\"\n        \"\\x00\\x18\\x14\\x12\\x7F\\x10\\x00\\x00\", // \"4\"\n        \"\\x00\\x27\\x45\\x45\\x45\\x39\\x00\\x00\", // \"5\"\n        \"\\x00\\x3C\\x4A\\x49\\x49\\x30\\x00\\x00\", // \"6\"\n        \"\\x00\\x01\\x71\\x09\\x05\\x03\\x00\\x00\", // \"7\"\n        \"\\x00\\x36\\x49\\x49\\x49\\x36\\x00\\x00\", // \"8\"\n        \"\\x00\\x06\\x49\\x49\\x29\\x1E\\x00\\x00\", // \"9\"\n        \"\\x00\\x00\\x36\\x36\\x00\\x00\\x00\\x00\", // \":\"\n        \"\\x00\\x00\\xAC\\x6C\\x00\\x00\\x00\\x00\", // \";\"\n        \"\\x00\\x08\\x14\\x22\\x41\\x00\\x00\\x00\", // \"<\"\n        \"\\x00\\x14\\x14\\x14\\x14\\x14\\x00\\x00\", // \"=\"\n        \"\\x00\\x41\\x22\\x14\\x08\\x00\\x00\\x00\", // \">\"\n        \"\\x00\\x02\\x01\\x51\\x09\\x06\\x00\\x00\", // \"?\"\n        \"\\x00\\x32\\x49\\x79\\x41\\x3E\\x00\\x00\", // \"@\"\n        \"\\x00\\x7E\\x09\\x09\\x09\\x7E\\x00\\x00\", // \"A\"\n        \"\\x00\\x7F\\x49\\x49\\x49\\x36\\x00\\x00\", // \"B\"\n        \"\\x00\\x3E\\x41\\x41\\x41\\x22\\x00\\x00\", // \"C\"\n        \"\\x00\\x7F\\x41\\x41\\x22\\x1C\\x00\\x00\", // \"D\"\n        \"\\x00\\x7F\\x49\\x49\\x49\\x41\\x00\\x00\", // \"E\"\n        \"\\x00\\x7F\\x09\\x09\\x09\\x01\\x00\\x00\", // \"F\"\n        \"\\x00\\x3E\\x41\\x41\\x51\\x72\\x00\\x00\", // \"G\"\n        \"\\x00\\x7F\\x08\\x08\\x08\\x7F\\x00\\x00\", // \"H\"\n        \"\\x00\\x41\\x7F\\x41\\x00\\x00\\x00\\x00\", // \"I\"\n        \"\\x00\\x20\\x40\\x41\\x3F\\x01\\x00\\x00\", // \"J\"\n        \"\\x00\\x7F\\x08\\x14\\x22\\x41\\x00\\x00\", // \"K\"\n        \"\\x00\\x7F\\x40\\x40\\x40\\x40\\x00\\x00\", // \"L\"\n        \"\\x00\\x7F\\x02\\x0C\\x02\\x7F\\x00\\x00\", // \"M\"\n        \"\\x00\\x7F\\x04\\x08\\x10\\x7F\\x00\\x00\", // \"N\"\n        \"\\x00\\x3E\\x41\\x41\\x41\\x3E\\x00\\x00\", // \"O\"\n        \"\\x00\\x7F\\x09\\x09\\x09\\x06\\x00\\x00\", // \"P\"\n        \"\\x00\\x3E\\x41\\x51\\x21\\x5E\\x00\\x00\", // \"Q\"\n        \"\\x00\\x7F\\x09\\x19\\x29\\x46\\x00\\x00\", // \"R\"\n        \"\\x00\\x26\\x49\\x49\\x49\\x32\\x00\\x00\", // \"S\"\n        \"\\x00\\x01\\x01\\x7F\\x01\\x01\\x00\\x00\", // \"T\"\n        \"\\x00\\x3F\\x40\\x40\\x40\\x3F\\x00\\x00\", // \"U\"\n        \"\\x00\\x1F\\x20\\x40\\x20\\x1F\\x00\\x00\", // \"V\"\n        \"\\x00\\x3F\\x40\\x38\\x40\\x3F\\x00\\x00\", // \"W\"\n        \"\\x00\\x63\\x14\\x08\\x14\\x63\\x00\\x00\", // \"X\"\n        \"\\x00\\x03\\x04\\x78\\x04\\x03\\x00\\x00\", // \"Y\"\n        \"\\x00\\x61\\x51\\x49\\x45\\x43\\x00\\x00\", // \"Z\"\n        \"\\x00\\x7F\\x41\\x41\\x00\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x02\\x04\\x08\\x10\\x20\\x00\\x00\", // \"\\\"\n        \"\\x00\\x41\\x41\\x7F\\x00\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x04\\x02\\x01\\x02\\x04\\x00\\x00\", // \"^\"\n        \"\\x00\\x80\\x80\\x80\\x80\\x80\\x00\\x00\", // \"_\"\n        \"\\x00\\x01\\x02\\x04\\x00\\x00\\x00\\x00\", // \"`\"\n        \"\\x00\\x20\\x54\\x54\\x54\\x78\\x00\\x00\", // \"a\"\n        \"\\x00\\x7F\\x48\\x44\\x44\\x38\\x00\\x00\", // \"b\"\n        \"\\x00\\x38\\x44\\x44\\x28\\x00\\x00\\x00\", // \"c\"\n        \"\\x00\\x38\\x44\\x44\\x48\\x7F\\x00\\x00\", // \"d\"\n        \"\\x00\\x38\\x54\\x54\\x54\\x18\\x00\\x00\", // \"e\"\n        \"\\x00\\x08\\x7E\\x09\\x02\\x00\\x00\\x00\", // \"f\"\n        \"\\x00\\x18\\xA4\\xA4\\xA4\\x7C\\x00\\x00\", // \"g\"\n        \"\\x00\\x7F\\x08\\x04\\x04\\x78\\x00\\x00\", // \"h\"\n        \"\\x00\\x00\\x7D\\x00\\x00\\x00\\x00\\x00\", // \"i\"\n        \"\\x00\\x80\\x84\\x7D\\x00\\x00\\x00\\x00\", // \"j\"\n        \"\\x00\\x7F\\x10\\x28\\x44\\x00\\x00\\x00\", // \"k\"\n        \"\\x00\\x41\\x7F\\x40\\x00\\x00\\x00\\x00\", // \"l\"\n        \"\\x00\\x7C\\x04\\x18\\x04\\x78\\x00\\x00\", // \"m\"\n        \"\\x00\\x7C\\x08\\x04\\x7C\\x00\\x00\\x00\", // \"n\"\n        \"\\x00\\x38\\x44\\x44\\x38\\x00\\x00\\x00\", // \"o\"\n        \"\\x00\\xFC\\x24\\x24\\x18\\x00\\x00\\x00\", // \"p\"\n        \"\\x00\\x18\\x24\\x24\\xFC\\x00\\x00\\x00\", // \"q\"\n        \"\\x00\\x00\\x7C\\x08\\x04\\x00\\x00\\x00\", // \"r\"\n        \"\\x00\\x48\\x54\\x54\\x24\\x00\\x00\\x00\", // \"s\"\n        \"\\x00\\x04\\x7F\\x44\\x00\\x00\\x00\\x00\", // \"t\"\n        \"\\x00\\x3C\\x40\\x40\\x7C\\x00\\x00\\x00\", // \"u\"\n        \"\\x00\\x1C\\x20\\x40\\x20\\x1C\\x00\\x00\", // \"v\"\n        \"\\x00\\x3C\\x40\\x30\\x40\\x3C\\x00\\x00\", // \"w\"\n        \"\\x00\\x44\\x28\\x10\\x28\\x44\\x00\\x00\", // \"x\"\n        \"\\x00\\x1C\\xA0\\xA0\\x7C\\x00\\x00\\x00\", // \"y\"\n        \"\\x00\\x44\\x64\\x54\\x4C\\x44\\x00\\x00\", // \"z\"\n        \"\\x00\\x08\\x36\\x41\\x00\\x00\\x00\\x00\", // \"{\"\n        \"\\x00\\x00\\x7F\\x00\\x00\\x00\\x00\\x00\", // \"|\"\n        \"\\x00\\x41\\x36\\x08\\x00\\x00\\x00\\x00\", // \"}\"\n        \"\\x00\\x02\\x01\\x01\\x02\\x01\\x00\\x00\"  // \"~\"\n    ];\n    function oledcmd(c: number) {\n        pins.i2cWriteNumber(0x3c, c, NumberFormat.UInt16BE);\n    }\n    function writeData(n: number) {\n        let b = n;\n        if (n < 0) { n = 0 }\n        if (n > 255) { n = 255 }\n        pins.i2cWriteNumber(0x3c, 0x4000 + b, NumberFormat.UInt16BE);\n    }\n    function writeCustomChar(c: string) {\n        for (let i = 0; i < 8; i++) {\n            writeData(c.charCodeAt(i));\n        }\n    }\n    function setText(row: number, column: number) {\n        let r = row;\n        let c = column;\n        if (row < 0) { r = 0 }\n        if (column < 0) { c = 0 }\n        if (row > 7) { r = 7 }\n        if (column > 15) { c = 15 }\n        oledcmd(0xB0 + r);            //set page address\n        oledcmd(0x00 + (8 * c & 0x0F));  //set column lower address\n        oledcmd(0x10 + ((8 * c >> 4) & 0x0F));   //set column higher address\n    }\n    function putChar(c: string) {\n        let c1 = c.charCodeAt(0);\n        writeCustomChar(basicFont[c1 - 32]);\n    }\n    function oledinit(): void {\n        oledcmd(0xAE);  // Set display OFF\n        oledcmd(0xD5);  // Set Display Clock Divide Ratio / OSC Frequency 0xD4\n        oledcmd(0x80);  // Display Clock Divide Ratio / OSC Frequency \n        oledcmd(0xA8);  // Set Multiplex Ratio\n        oledcmd(0x3F);  // Multiplex Ratio for 128x64 (64-1)\n        oledcmd(0xD3);  // Set Display Offset\n        oledcmd(0x00);  // Display Offset\n        oledcmd(0x40);  // Set Display Start Line\n        oledcmd(0x8D);  // Set Charge Pump\n        oledcmd(0x14);  // Charge Pump (0x10 External, 0x14 Internal DC/DC)\n        oledcmd(0xA1);  // Set Segment Re-Map\n        oledcmd(0xC8);  // Set Com Output Scan Direction\n        oledcmd(0xDA);  // Set COM Hardware Configuration\n        oledcmd(0x12);  // COM Hardware Configuration\n        oledcmd(0x81);  // Set Contrast\n        oledcmd(0xCF);  // Contrast\n        oledcmd(0xD9);  // Set Pre-Charge Period\n        oledcmd(0xF1);  // Set Pre-Charge Period (0x22 External, 0xF1 Internal)\n        oledcmd(0xDB);  // Set VCOMH Deselect Level\n        oledcmd(0x40);  // VCOMH Deselect Level\n        oledcmd(0xA4);  // Set all pixels OFF\n        oledcmd(0xA6);  // Set display not inverted\n        oledcmd(0xAF);  // Set display On\n        oledClear();\n    }\n\n    ///////////////////////////////enum\n\n\n    export enum NeoPixelColors {\n        //% block=red\n        Red = 0xFF0000,\n        //% block=orange\n        Orange = 0xFFA500,\n        //% block=yellow\n        Yellow = 0xFFFF00,\n        //% block=green\n        Green = 0x00FF00,\n        //% block=blue\n        Blue = 0x0000FF,\n        //% block=indigo\n        Indigo = 0x4b0082,\n        //% block=violet\n        Violet = 0x8a2be2,\n        //% block=purple\n        Purple = 0xFF00FF,\n        //% block=white\n        White = 0xFFFFFF,\n        //% block=black\n        Black = 0x000000\n    }\n\n    /**\n     * Different modes for RGB or RGB+W NeoPixel strips\n     */\n    export enum NeoPixelMode {\n        //% block=\"RGB (GRB format)\"\n        RGB = 0,\n        //% block=\"RGB+W\"\n        RGBW = 1,\n        //% block=\"RGB (RGB format)\"\n        RGB_RGB = 2\n    }\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n    /////////////////////////////User_function//////////////////\n\n    //% line.min=1 line.max=8 line.defl=1\n    //% text.defl=\"Hello,ELECFREAKS\"\n    //% block=\"OLED show line %line|text %text\"\n    //% subcategory=Display group=\"OLED\" color=#00B1ED\n    export function showUserText(line: number, text: string) {\n        if (firstoledinit) {\n            oledinit()\n            firstoledinit = false\n        }\n        if (text.length > 16) {\n            text = text.substr(0, 16)\n        }\n        line = line - 1\n        setText(line, 0);\n        for (let c of text) {\n            putChar(c);\n        }\n\n        for (let i = text.length; i < 16; i++) {\n            setText(line, i);\n            putChar(\" \");\n        }\n    }\n    //% line.min=1 line.max=8 line.defl=2 \n    //% n.defl=20200508\n    //% block=\"OLED show line %line|number %n\"\n    //% subcategory=Display group=\"OLED\" color=#00B1ED\n    export function showUserNumber(line: number, n: number) {\n        if (firstoledinit) {\n            oledinit()\n            firstoledinit = false\n        }\n        showUserText(line, \"\" + n)\n    }\n    //% block=\"clear display\" color=#00B1ED\n    //% subcategory=Display group=\"OLED\"\n    export function oledClear() {\n        //oledcmd(DISPLAY_OFF);   //display off\n        for (let j = 0; j < 8; j++) {\n            setText(j, 0);\n            {\n                for (let i = 0; i < 16; i++)  //clear all columns\n                {\n                    putChar(' ');\n                }\n            }\n        }\n        //oledcmd(DISPLAY_ON);    //display on\n        setText(0, 0);\n    }\n    /**\n   * Create a new driver Grove - 4-Digit Display\n   * @param clkPin value of clk pin number\n   * @param dataPin value of data pin number\n   */\n    //% blockId=grove_tm1637_create block=\"connect 4-Digit cPin %cPin dPin %dPin\"\n    //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" blockSetVariable=display color=#EA5532\n    export function tm1637Create(cPin: DigitalPin, dPin: DigitalPin, intensity: number = 7, count: number = 4): TM1637LEDs {\n        let display = new TM1637LEDs();\n        display.clk = cPin\n        display.dio = dPin\n        if ((count < 1) || (count > 5)) count = 4;\n        display.count = count;\n        display.brightness = intensity;\n        display.init();\n        return display;\n    }\n    export class TM1637LEDs {\n        buf: Buffer;\n        clk: DigitalPin;\n        dio: DigitalPin;\n        _ON: number;\n        brightness: number;\n        count: number;  // number of LEDs\n        /**\n         * initial TM1637\n         */\n        init(): void {\n            pins.digitalWritePin(this.clk, 0);\n            pins.digitalWritePin(this.dio, 0);\n            this._ON = 8;\n            this.buf = pins.createBuffer(this.count);\n            this.clear();\n        }\n        /**\n         * Start \n         */\n        _start() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        /**\n         * Stop\n         */\n        _stop() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.dio, 1);\n        }\n        /**\n         * send command1\n         */\n        _write_data_cmd() {\n            this._start();\n            this._write_byte(TM1637_CMD1);\n            this._stop();\n        }\n        /**\n         * send command3\n         */\n        _write_dsp_ctrl() {\n            this._start();\n            this._write_byte(TM1637_CMD3 | this._ON | this.brightness);\n            this._stop();\n        }\n        /**\n         * send a byte to 2-wire interface\n         */\n        _write_byte(b: number) {\n            for (let i = 0; i < 8; i++) {\n                pins.digitalWritePin(this.dio, (b >> i) & 1);\n                pins.digitalWritePin(this.clk, 1);\n                pins.digitalWritePin(this.clk, 0);\n            }\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _intensity(val: number = 7) {\n            this._ON = 8;\n            this.brightness = val - 1;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n        /**\n         * set data to TM1637, with given bit\n         */\n        _dat(bit: number, dat: number) {\n            this._write_data_cmd();\n            this._start();\n            this._write_byte(TM1637_CMD2 | (bit % this.count))\n            this._write_byte(dat);\n            this._stop();\n            this._write_dsp_ctrl();\n        }\n        /**\n         * Show a single number from 0 to 9 at a specified digit of Grove - 4-Digit Display\n         * @param dispData value of number\n         * @param bitAddr value of bit number\n         */\n        //% blockId=grove_tm1637_display_bit block=\"%display|show single number|%num|at digit|%bit\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        //% bit.defl=1 bit.min=0 bit.max=9\n        showbit(num: number = 5, bit: number = 0) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            this.buf[bit % this.count] = _SEGMENTS[num % 16]\n            this._dat(bit, _SEGMENTS[num % 16])\n        }\n        /**\n         * Show a 4 digits number on display\n         * @param dispData value of number\n         */\n        //% blockId=grove_tm1637_display_number block=\"%display|show number|%num\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        showNumber(num: number) {\n            if (num < 0) {\n                num = -num\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n                this._dat(0, 0x40) // '-'\n            }\n            else {\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n            }\n        }\n        /**\n         * show or hide dot point. \n         * @param bit is the position, eg: 1\n         * @param show is show/hide dp, eg: true\n         */\n        //% blockId=\"TM1637_showDP\" block=\"%display|DotPoint at %bit|show $show\"\n        //% show.shadow=\"toggleOnOff\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        showDP(bit: number = 1, show: boolean = true) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            bit = bit % this.count\n            if (show) this._dat(bit, this.buf[bit] | 0x80)\n            else this._dat(bit, this.buf[bit] & 0x7F)\n        }\n        /**\n         * clear LED. \n         */\n        //% blockId=\"TM1637_clear\" block=\"clear display %display\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        clear() {\n            for (let i = 0; i < this.count; i++) {\n                this._dat(i, 0)\n                this.buf[i] = 0\n            }\n        }\n    }\n    //% shim=sendBufferAsm\n    function sendBuffer(buf: Buffer, pin: DigitalPin) {\n    }\n    export class Strip {\n        buf: Buffer;\n        pin: DigitalPin;\n        // TODO: encode as bytes instead of 32bit\n        brightness: number;\n        start: number; // start offset in LED strip\n        _length: number; // number of LEDs\n        _mode: NeoPixelMode;\n        _matrixWidth: number; // number of leds in a matrix - if any\n\n        /**\n         * Shows all LEDs to a given color (range 0-255 for r, g, b).\n         * @param rgb RGB color of the LED\n         */\n        //% blockId=\"neopixel_set_strip_color\" block=\"%strip|show color %rgb=neopixel_colors\"\n        //% weight=85 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        showColor(rgb: number) {\n            rgb = rgb >> 0;\n            this.setAllRGB(rgb);\n            this.show();\n        }\n\n        /**\n         * Shows a rainbow pattern on all LEDs.\n         * @param startHue the start hue value for the rainbow, eg: 1\n         * @param endHue the end hue value for the rainbow, eg: 360\n         */\n        //% blockId=\"neopixel_set_strip_rainbow\" block=\"%strip|show rainbow from %startHue|to %endHue\"\n        //% weight=85 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        showRainbow(startHue: number = 1, endHue: number = 360) {\n            if (this._length <= 0) return;\n\n            startHue = startHue >> 0;\n            endHue = endHue >> 0;\n            const saturation = 100;\n            const luminance = 50;\n            const steps = this._length;\n            const direction = HueInterpolationDirection.Clockwise;\n\n            //hue\n            const h1 = startHue;\n            const h2 = endHue;\n            const hDistCW = ((h2 + 360) - h1) % 360;\n            const hStepCW = Math.idiv((hDistCW * 100), steps);\n            const hDistCCW = ((h1 + 360) - h2) % 360;\n            const hStepCCW = Math.idiv(-(hDistCCW * 100), steps);\n            let hStep: number;\n            if (direction === HueInterpolationDirection.Clockwise) {\n                hStep = hStepCW;\n            } else if (direction === HueInterpolationDirection.CounterClockwise) {\n                hStep = hStepCCW;\n            } else {\n                hStep = hDistCW < hDistCCW ? hStepCW : hStepCCW;\n            }\n            const h1_100 = h1 * 100; //we multiply by 100 so we keep more accurate results while doing interpolation\n\n            //sat\n            const s1 = saturation;\n            const s2 = saturation;\n            const sDist = s2 - s1;\n            const sStep = Math.idiv(sDist, steps);\n            const s1_100 = s1 * 100;\n\n            //lum\n            const l1 = luminance;\n            const l2 = luminance;\n            const lDist = l2 - l1;\n            const lStep = Math.idiv(lDist, steps);\n            const l1_100 = l1 * 100\n\n            //interpolate\n            if (steps === 1) {\n                this.setPixelColor(0, hsl(h1 + hStep, s1 + sStep, l1 + lStep))\n            } else {\n                this.setPixelColor(0, hsl(startHue, saturation, luminance));\n                for (let i = 1; i < steps - 1; i++) {\n                    const h = Math.idiv((h1_100 + i * hStep), 100) + 360;\n                    const s = Math.idiv((s1_100 + i * sStep), 100);\n                    const l = Math.idiv((l1_100 + i * lStep), 100);\n                    this.setPixelColor(i, hsl(h, s, l));\n                }\n                this.setPixelColor(steps - 1, hsl(endHue, saturation, luminance));\n            }\n            this.show();\n        }\n\n        /**\n         * Set LED to a given color (range 0-255 for r, g, b).\n         * You need to call ``show`` to make the changes visible.\n         * @param pixeloffset position of the NeoPixel in the strip\n         * @param rgb RGB color of the LED\n         */\n        //% blockId=\"neopixel_set_pixel_color\" block=\"%strip|set pixel color at %pixeloffset|to %rgb=neopixel_colors\"\n        //% weight=80 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setPixelColor(pixeloffset: number, rgb: number): void {\n            this.setPixelRGB(pixeloffset >> 0, rgb >> 0);\n        }\n\n        /**\n         * Send all the changes to the strip.\n         */\n        //% blockId=\"neopixel_show\" block=\"%strip|show\" \n        //% weight=79\n        //% parts=\"neopixel\" subcategory=Neopixel\n        show() {\n            sendBuffer(this.buf, this.pin);\n        }\n\n        /**\n         * Turn off all LEDs.\n         * You need to call ``show`` to make the changes visible.\n         */\n        //% blockId=\"neopixel_clear\" block=\"%strip|clear\"\n        //% weight=76 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        clear(): void {\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.fill(0, this.start * stride, this._length * stride);\n        }\n\n        /**\n         * Set the brightness of the strip. This flag only applies to future operation.\n         * @param brightness a measure of LED brightness in 0-255. eg: 255\n         */\n        //% blockId=\"neopixel_set_brightness\" block=\"%strip|set brightness %brightness\" \n        //% weight=59 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setBrightness(brightness: number): void {\n            this.brightness = brightness & 0xff;\n        }\n        /**\n         * Gets the number of pixels declared on the strip\n         */\n        //% blockId=\"neopixel_length\" block=\"%strip|length\" blockGap=8\n        //% subcategory=\"Neopixel\"\n        //% weight=60 advanced=true\n        length() {\n            return this._length;\n        }\n        /**\n         * Create a range of LEDs.\n         * @param start offset in the LED strip to start the range\n         * @param length number of LEDs in the range. eg: 4\n         */\n        //% weight=89 color=#EA5532\n        //% blockId=\"neopixel_range\" block=\"%strip|range from %start|with %length|leds\"\n        //% parts=\"neopixel\"\n        //% blockSetVariable=range subcategory=Neopixel\n        range(start: number, length: number): Strip {\n            start = start >> 0;\n            length = length >> 0;\n            let strip = new Strip();\n            strip.buf = this.buf;\n            strip.pin = this.pin;\n            strip.brightness = this.brightness;\n            strip.start = this.start + Math.clamp(0, this._length - 1, start);\n            strip._length = Math.clamp(0, this._length - (strip.start - this.start), length);\n            strip._matrixWidth = 0;\n            strip._mode = this._mode;\n            return strip;\n        }\n\n        /**\n         * Shift LEDs forward and clear with zeros.\n         * You need to call ``show`` to make the changes visible.\n         * @param offset number of pixels to shift forward, eg: 1\n         */\n        //% blockId=\"neopixel_shift\" block=\"%strip|shift pixels by %offset\" \n        //% weight=40 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        shift(offset: number = 1): void {\n            offset = offset >> 0;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.shift(-offset * stride, this.start * stride, this._length * stride)\n        }\n\n        /**\n         * Rotate LEDs forward.\n         * You need to call ``show`` to make the changes visible.\n         * @param offset number of pixels to rotate forward, eg: 1\n         */\n        //% blockId=\"neopixel_rotate\" block=\"%strip|rotate pixels by %offset\" \n        //% weight=39 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        rotate(offset: number = 1): void {\n            offset = offset >> 0;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.rotate(-offset * stride, this.start * stride, this._length * stride)\n        }\n\n        /**\n         * Set the pin where the neopixel is connected, defaults to P0.\n         */\n        //% weight=10 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setPin(pin: DigitalPin): void {\n            this.pin = pin;\n            pins.digitalWritePin(this.pin, 0);\n            // don't yield to avoid races on initialization\n        }\n\n        private setBufferRGB(offset: number, red: number, green: number, blue: number): void {\n            if (this._mode === NeoPixelMode.RGB_RGB) {\n                this.buf[offset + 0] = red;\n                this.buf[offset + 1] = green;\n            } else {\n                this.buf[offset + 0] = green;\n                this.buf[offset + 1] = red;\n            }\n            this.buf[offset + 2] = blue;\n        }\n\n        private setAllRGB(rgb: number) {\n            let red = unpackR(rgb);\n            let green = unpackG(rgb);\n            let blue = unpackB(rgb);\n\n            const br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            const end = this.start + this._length;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            for (let i = this.start; i < end; ++i) {\n                this.setBufferRGB(i * stride, red, green, blue)\n            }\n        }\n        private setPixelRGB(pixeloffset: number, rgb: number): void {\n            if (pixeloffset < 0\n                || pixeloffset >= this._length)\n                return;\n\n            let stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            pixeloffset = (pixeloffset + this.start) * stride;\n\n            let red = unpackR(rgb);\n            let green = unpackG(rgb);\n            let blue = unpackB(rgb);\n\n            let br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            this.setBufferRGB(pixeloffset, red, green, blue)\n        }\n\n    }\n\n    /**\n     * Create a new NeoPixel driver for `numleds` LEDs.\n     * @param pin the pin where the neopixel is connected.\n     * @param numleds number of leds in the strip, eg: 24,30,60,64\n     */\n    //% blockId=\"neopixel_create\" block=\"NeoPixel at pin %Rjpin|with %numleds|leds as %mode\"\n    //% weight=90 color=#EA5532\n    //% parts=\"neopixel\"\n    //% trackArgs=0,2\n    //% blockSetVariable=strip subcategory=Neopixel\n    export function create(Rjpin: DigitalRJPin, numleds: number, mode: NeoPixelMode): Strip {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        let strip = new Strip();\n        let stride = mode === NeoPixelMode.RGBW ? 4 : 3;\n        strip.buf = pins.createBuffer(numleds * stride);\n        strip.start = 0;\n        strip._length = numleds;\n        strip._mode = mode;\n        strip._matrixWidth = 0;\n        strip.setBrightness(50)\n        strip.setPin(pin)\n        return strip;\n    }\n\n    /**\n     * Converts red, green, blue channels into a RGB color\n     * @param red value of the red channel between 0 and 255. eg: 255\n     * @param green value of the green channel between 0 and 255. eg: 255\n     * @param blue value of the blue channel between 0 and 255. eg: 255\n     */\n    //% weight=1 subcategory=Neopixel color=#EA5532\n    //% blockId=\"neopixel_rgb\" block=\"red %red|green %green|blue %blue\"\n    export function rgb(red: number, green: number, blue: number): number {\n        return packRGB(red, green, blue);\n    }\n\n    /**\n     * Gets the RGB value of a known color\n    */\n    //% weight=2 subcategory=Neopixel color=#EA5532\n    //% blockId=\"neopixel_colors\" block=\"%color\"\n    export function colors(color: NeoPixelColors): number {\n        return color;\n    }\n\n    function packRGB(a: number, b: number, c: number): number {\n        return ((a & 0xFF) << 16) | ((b & 0xFF) << 8) | (c & 0xFF);\n    }\n    function unpackR(rgb: number): number {\n        let r = (rgb >> 16) & 0xFF;\n        return r;\n    }\n    function unpackG(rgb: number): number {\n        let g = (rgb >> 8) & 0xFF;\n        return g;\n    }\n    function unpackB(rgb: number): number {\n        let b = (rgb) & 0xFF;\n        return b;\n    }\n\n    /**\n     * Converts a hue saturation luminosity value into a RGB color\n     * @param h hue from 0 to 360\n     * @param s saturation from 0 to 99\n     * @param l luminosity from 0 to 99\n     */\n    //% blockId=neopixelHSL block=\"hue %h|saturation %s|luminosity %l\" subcategory=Neopixel color=#EA5532\n    export function hsl(h: number, s: number, l: number): number {\n        h = Math.round(h);\n        s = Math.round(s);\n        l = Math.round(l);\n\n        h = h % 360;\n        s = Math.clamp(0, 99, s);\n        l = Math.clamp(0, 99, l);\n        let c = Math.idiv((((100 - Math.abs(2 * l - 100)) * s) << 8), 10000); //chroma, [0,255]\n        let h1 = Math.idiv(h, 60);//[0,6]\n        let h2 = Math.idiv((h - h1 * 60) * 256, 60);//[0,255]\n        let temp = Math.abs((((h1 % 2) << 8) + h2) - 256);\n        let x = (c * (256 - (temp))) >> 8;//[0,255], second largest component of this color\n        let r$:\n            number;\n        let g$:\n            number;\n        let b$:\n            number;\n        if (h1 == 0) {\n            r$ = c;\n            g$ = x;\n            b$ = 0;\n        }\n        else if (h1 == 1) {\n            r$ = x;\n            g$ = c;\n            b$ = 0;\n        }\n        else if (h1 == 2) {\n            r$ = 0;\n            g$ = c;\n            b$ = x;\n        }\n        else if (h1 == 3) {\n            r$ = 0;\n            g$ = x;\n            b$ = c;\n        }\n        else if (h1 == 4) {\n            r$ = x;\n            g$ = 0;\n            b$ = c;\n        }\n        else if (h1 == 5) {\n            r$ = c;\n            g$ = 0;\n            b$ = x;\n        }\n        let m = Math.idiv((Math.idiv((l * 2 << 8), 100) - c), 2);\n        let r = r$ + m;\n        let g = g$ + m;\n        let b = b$ + m;\n        return packRGB(r, g, b);\n    }\n\n    export enum HueInterpolationDirection {\n        Clockwise,\n        CounterClockwise,\n        Shortest\n    }\n}\n","planetxbasic.ts":"/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#00B1ED  icon=\"\\uf005\" block=\"Connected\" blockId=\"PlanetX_Connected\"\n//% groups='[\"Digital\", \"Analog\", \"IIC Port\"]'\nnamespace Connected {\n    \n    ////////////////////////paj7620//////////////////////\n    let gesture_first_init = true\n    const initRegisterArray: number[] = [\n        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17,\n        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F,\n        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14,\n        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27,\n        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01,\n        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00,\n        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20,\n        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37,\n        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A,\n        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F,\n        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30,\n        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19,\n        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04,\n        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00,\n        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00,\n        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F,\n        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07,\n        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01,\n        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F,\n        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01,\n        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40,\n        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E,\n        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00,\n        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08,\n        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00,\n        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01,\n        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01,\n        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01\n    ];\n    \n    /////////////////////////color/////////////////////////\n    const APDS9960_ADDR = 0x39\n    const APDS9960_ENABLE = 0x80\n    const APDS9960_ATIME = 0x81\n    const APDS9960_CONTROL = 0x8F\n    const APDS9960_STATUS = 0x93\n    const APDS9960_CDATAL = 0x94\n    const APDS9960_CDATAH = 0x95\n    const APDS9960_RDATAL = 0x96\n    const APDS9960_RDATAH = 0x97\n    const APDS9960_GDATAL = 0x98\n    const APDS9960_GDATAH = 0x99\n    const APDS9960_BDATAL = 0x9A\n    const APDS9960_BDATAH = 0x9B\n    const APDS9960_GCONF4 = 0xAB\n    const APDS9960_AICLEAR = 0xE7\n    let color_first_init = false\n\n    function i2cwrite_color(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n    function i2cread_color(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n    function rgb2hsl(color_r: number, color_g: number, color_b: number): number {\n        let Hue = 0\n        let R = color_r * 100 / 255;\n        let G = color_g * 100 / 255;\n        let B = color_b * 100 / 255;\n        let maxVal = Math.max(R, Math.max(G, B))\n        let minVal = Math.min(R, Math.min(G, B))\n        let Delta = maxVal - minVal;\n\n        if (Delta < 0) {\n            Hue = 0;\n        }\n        else if (maxVal == R && G >= B) {\n            Hue = (60 * ((G - B) * 100 / Delta)) / 100;\n        }\n        else if (maxVal == R && G < B) {\n            Hue = (60 * ((G - B) * 100 / Delta) + 360 * 100) / 100;\n        }\n        else if (maxVal == G) {\n            Hue = (60 * ((B - R) * 100 / Delta) + 120 * 100) / 100;\n        }\n        else if (maxVal == B) {\n            Hue = (60 * ((R - G) * 100 / Delta) + 240 * 100) / 100;\n        }\n        return Hue\n    }\n    function initModule(): void {\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ATIME, 252)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_CONTROL, 0x03)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_GCONF4, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_AICLEAR, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x01)\n        color_first_init = true\n    }\n    function colorMode(): void {\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_ENABLE) | 0x2;\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, tmp);\n    }\n\n    ///////////////////////////////////////////////////////MP3\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    /*\n    * Play status selection button list\n    */\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(100)\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,        \n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum Distance_Unit_List {\n        //% block=\"cm\" \n        Distance_Unit_cm,\n\n        //% block=\"foot\"\n        Distance_Unit_foot,\n    }\n    export enum ButtonStateList {\n        //% block=\"C\"\n        C,\n        //% block=\"D\"\n        D,\n        //% block=\"C+D\"\n        CD\n    }\n    export enum GestureType {\n        //% block=\"None\"\n        None = 0,\n        //% block=\"Right\"\n        Right = 1,\n        //% block=\"Left\"\n        Left = 2,\n        //% block=\"Up\"\n        Up = 3,\n        //% block=\"Down\"\n        Down = 4,\n        //% block=\"Forward\"\n        Forward = 5,\n        //% block=\"Backward\"\n        Backward = 6,\n        //% block=\"Clockwise\"\n        Clockwise = 7,\n        //% block=\"Anticlockwise\"\n        Anticlockwise = 8,\n        //% block=\"Wave\"\n        Wave = 9\n    }\n    export enum ColorList {\n        //% block=\"Red\"\n        red,\n        //% block=\"Green\"\n        green,\n        //% block=\"Blue\"\n        blue,\n        //% block=\"Cyan\"\n        cyan,\n        //% block=\"Magenta\"\n        magenta,\n        //% block=\"Yellow\"\n        yellow,\n        //% block=\"White\"\n        white\n    }\n\n    ///////////////////////////////////blocks/////////////////////////////\n\n    //% blockId=\"readwaterLevel\" block=\"Water level sensor %Rjpin value(0~100)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function waterLevel(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let voltage = 0, waterlevel = 0;\n        voltage = pins.map(\n            pins.analogReadPin(pin),\n            50,\n            600,\n            0,\n            100\n        );\n        if (voltage < 0) {\n            voltage = 0\n        }\n        waterlevel = voltage;\n        return Math.round(waterlevel)\n    }\n\n    let distance_last = 0\n\n    //% blockId=sonarbit block=\"Ultrasonic sensor pinT %tPin pinE %ePin distance %distance_unit\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% distance_unit.fieldEditor=\"gridpicker\"\n    //% distance_unit.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function ultrasoundSensor(tPin: DigitalPin, ePin: DigitalPin, distance_unit: Distance_Unit_List): number {\n        let pinT = tPin\n        let pinE = ePin\n        pins.setPull(pinT, PinPullMode.PullNone)\n        pins.digitalWritePin(pinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(pinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(pinT, 0)\n\n        // read pulse\n        let d = pins.pulseIn(pinE, PulseValue.High, 25000)\n        let version = control.hardwareVersion()\n        let distance = d * 34 / 2 / 1000\n        if (version == \"1\") {\n            distance = distance * 3 / 2\n        }\n\n        if (distance > 430) {\n            distance = 0\n        }\n\n        if (distance == 0) {\n            distance = distance_last\n            distance_last = 0\n        }\n        else {\n            distance_last = distance\n        }\n\n        switch (distance_unit) {\n            case Distance_Unit_List.Distance_Unit_cm:\n                return Math.floor(distance)  //cm\n                break\n            case Distance_Unit_List.Distance_Unit_foot:\n                return Math.floor(distance / 30.48)   //foot\n                break\n            default:\n                return 0\n        }\n    }\n\n    export class PAJ7620 {\n        private paj7620WriteReg(addr: number, cmd: number) {\n            let buf: Buffer = pins.createBuffer(2);\n            buf[0] = addr;\n            buf[1] = cmd;\n            pins.i2cWriteBuffer(0x73, buf, false);\n        }\n        private paj7620ReadReg(addr: number): number {\n            let buf: Buffer = pins.createBuffer(1);\n            buf[0] = addr;\n            pins.i2cWriteBuffer(0x73, buf, false);\n            buf = pins.i2cReadBuffer(0x73, 1, false);\n            return buf[0];\n        }\n        private paj7620SelectBank(bank: number) {\n            if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n        }\n        private paj7620Init() {\n            let temp = 0;\n            this.paj7620SelectBank(0);\n            temp = this.paj7620ReadReg(0);\n            if (temp == 0x20) {\n                for (let i = 0; i < 438; i += 2) {\n                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n                }\n            }\n            this.paj7620SelectBank(0);\n        }\n        init() {\n            this.paj7620Init();\n            basic.pause(200);\n        }\n        read(): number {\n            let data = 0, result = 0;\n            data = this.paj7620ReadReg(0x43);\n            switch (data) {\n                case 0x01:\n                    result = GestureType.Right;\n                    break;\n                case 0x02:\n                    result = GestureType.Left;\n                    break;\n                case 0x04:\n                    result = GestureType.Up;\n                    break;\n                case 0x08:\n                    result = GestureType.Down;\n                    break;\n                case 0x10:\n                    result = GestureType.Forward;\n                    break;\n                case 0x20:\n                    result = GestureType.Backward;\n                    break;\n                case 0x40:\n                    result = GestureType.Clockwise;\n                    break;\n                case 0x80:\n                    result = GestureType.Anticlockwise;\n                    break;\n                default:\n                    data = this.paj7620ReadReg(0x44);\n                    if (data == 0x01)\n                        result = GestureType.Wave;\n                    break;\n            }\n            return result;\n        }\n    }\n    const gestureEventId = 3100;\n    let lastGesture = GestureType.None;\n    let paj7620 = new PAJ7620();\n    //% blockId= gesture_create_event block=\"Gesture sensor IIC port is %gesture\"\n    //% gesture.fieldEditor=\"gridpicker\" gesture.fieldOptions.columns=3\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function onGesture(gesture: GestureType, handler: () => void) {\n        control.onEvent(gestureEventId, gesture, handler);\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        control.inBackground(() => {\n            while (true) {\n                const gesture = paj7620.read();\n                if (gesture != lastGesture) {\n                    lastGesture = gesture;\n                    control.raiseEvent(gestureEventId, lastGesture);\n                }\n                basic.pause(200);\n            }\n        })\n    }\n\n    //% blockId= gesture_get_event block=\"Gesture sensor IIC port detects\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function getGesture(): number {\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        const gesture = paj7620.read();\n        return gesture\n    }\n\n\n\n\n    //% blockId=apds9960_readcolor block=\"Color sensor IIC port color HUE(0~360)\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readColor(): number {\n        if (color_first_init == false) {\n            initModule()\n            colorMode()\n        }\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        while (!tmp) {\n            basic.pause(5);\n            tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        }\n        let c = i2cread_color(APDS9960_ADDR, APDS9960_CDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_CDATAH) * 256;\n        let r = i2cread_color(APDS9960_ADDR, APDS9960_RDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_RDATAH) * 256;\n        let g = i2cread_color(APDS9960_ADDR, APDS9960_GDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_GDATAH) * 256;\n        let b = i2cread_color(APDS9960_ADDR, APDS9960_BDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_BDATAH) * 256;\n        // map to rgb based on clear channel\n        let avg = c / 3;\n        r = r * 255 / avg;\n        g = g * 255 / avg;\n        b = b * 255 / avg;\n        //let hue = rgb2hue(r, g, b);\n        let hue = rgb2hsl(r, g, b)\n        return hue\n    }\n    //% block=\"Color sensor IIC port detects %color\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% color.fieldEditor=\"gridpicker\" color.fieldOptions.columns=3\n    export function checkColor(color: ColorList): boolean {\n        let hue = readColor()\n        switch (color) {\n            case ColorList.red:\n                if (hue > 330 || hue < 20) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.green:\n                if (hue > 120 && 180 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.blue:\n                if (hue > 210 && 270 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.cyan:\n                if (hue > 190 && 210 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.magenta:\n                if (hue > 260 && 330 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.yellow:\n                if (hue > 30 && 120 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.white:\n                if (hue >= 180 && 190 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n        }\n    }\n\n    //% blockId=\"potentiometer\" block=\"Trimpot %Rjpin analog value\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Input color=#E2C438 group=\"Analog\"\n    export function trimpot(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        return pins.analogReadPin(pin)\n    }\n    //% blockId=buttonab block=\"Button %Rjpin %button is pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonCD(Rjpin: DigitalRJPin, button: ButtonStateList): boolean {\n        let pinC = DigitalPin.P1\n        let pinD = DigitalPin.P2\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pinC = DigitalPin.P1\n                pinD = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pinC = DigitalPin.P2\n                pinD = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pinC = DigitalPin.P13\n                pinD = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pinC = DigitalPin.P15\n                pinD = DigitalPin.P16\n                break;\n            case DigitalRJPin.P3:\n                pinC = DigitalPin.P3\n                pinD = DigitalPin.P4\n                break;\n        }\n        pins.setPull(pinC, PinPullMode.PullUp)\n        pins.setPull(pinD, PinPullMode.PullUp)\n        if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 0 && button == ButtonStateList.CD) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinC) == 0 && pins.digitalReadPin(pinD) == 1 && button == ButtonStateList.C) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 1 && button == ButtonStateList.D) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    export enum ButtonState {\n        //% block=\"on\"\n        on = 1,\n        //% block=\"off\"\n        off = 2\n    }\n\n    const buttonEventSource = 5000\n    const buttonEventValue = {\n        CD_pressed: ButtonState.on,\n        CD_unpressed: ButtonState.off\n    }\n\n    //% block=\"on button %Rjpin %button pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=4\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonEvent(Rjpin: DigitalRJPin, button: ButtonStateList, handler: () => void) {\n        let ButtonPin_C = DigitalPin.P1\n        let ButtonPin_D = DigitalPin.P2\n        let pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P0\n        let pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                ButtonPin_C = DigitalPin.P1\n                ButtonPin_D = DigitalPin.P8\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P1\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P8\n                break;\n            case DigitalRJPin.J2:\n                ButtonPin_C = DigitalPin.P2\n                ButtonPin_D = DigitalPin.P12\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P2\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P12\n                break;\n            case DigitalRJPin.J3:\n                ButtonPin_C = DigitalPin.P13\n                ButtonPin_D = DigitalPin.P14\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P13\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P14\n                break;\n            case DigitalRJPin.J4:\n                ButtonPin_C = DigitalPin.P15\n                ButtonPin_D = DigitalPin.P16\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P15\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P16\n                break;\n            case DigitalRJPin.P3:\n                ButtonPin_C = DigitalPin.P3\n                ButtonPin_D = DigitalPin.P4\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P3\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P4\n                break;\n        }\n        if (button == ButtonStateList.C) {\n            pins.setPull(ButtonPin_C, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_C, PinEventType.Edge)\n            control.onEvent(pinEventSource_C, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.D) {\n            pins.setPull(ButtonPin_D, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_D, PinEventType.Edge)\n            control.onEvent(pinEventSource_D, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.CD) {\n            loops.everyInterval(50, function () {\n                if (pins.digitalReadPin(ButtonPin_C) == 0 && pins.digitalReadPin(ButtonPin_D) == 0) {\n                    control.raiseEvent(buttonEventSource, buttonEventValue.CD_pressed)\n                }\n            })\n            control.onEvent(buttonEventSource, buttonEventValue.CD_pressed, handler)\n        }\n    }\n\n    //% blockId=fans block=\"Motor fan %Rjpin toggle to $fanstate || speed %speed \\\\%\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% fanstate.shadow=\"toggleOnOff\"\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    //% speed.min=0 speed.max=100\n    //% expandableArgumentMode=\"toggle\"\n    export function motorFan(Rjpin: DigitalRJPin, fanstate: boolean, speed: number = 100): void {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.J3:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.J4:\n                pin = AnalogPin.P15\n                break;\n        }\n        if (fanstate) {\n            pins.analogSetPeriod(pin, 100)\n            pins.analogWritePin(pin, Math.map(speed, 0, 100, 0, 1023))\n        }\n        else {\n            pins.analogWritePin(pin, 0)\n            speed = 0\n        }\n    }\n\n\n    //% blockId=\"setLoopFolder\" block=\"loop play all the MP3s in the folder:$folderNum\"\n    //% folderNum.defl=\"01\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setLoopFolder(folderNum: string): void {\n        CMD = 0x17\n        para1 = 0\n        para2 = parseInt(folderNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    //% blockId=\"folderPlay\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum || repeatList: $myAns\"\n    //% folderNum.defl=\"01\" fileNum.defl=\"001\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function folderPlay(folderNum: string, fileNum: string, myAns: boolean = false): void {\n        CMD = 0x0F\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        if (myAns)\n            execute(0x19)\n    }\n\n    //% blockId=\"playFolderFilePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFilePort(folderNum: string, fileNum: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFolderFileVolumePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum with volume:$theVolume usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" theVolume.defl=\"10\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFileVolumePort(folderNum: string, fileNum: string, theVolume: string, Rjpin: DigitalRJPin): void {\n        \n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        \n        let volume = parseInt(theVolume)\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(200)\n\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"volumePort\" \n    //% block=\"set MP3 volume:$theVolume usingPin:$Rjpin\"\n    //% theVolume.defl=\"10\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function volumePort(theVolume: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        let volume = parseInt(theVolume)\n        if (volume > 30) {\n            volume = 30\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(300)\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n\n\n    //% blockId=\"setTracking\" \n    //% block=\"play the mp3 in order of:%tracking || repeatList: $myAns\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% tracking.defl=1\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setTracking(tracking: number, myAns: boolean = false): void {\n        CMD = 0x03\n        para1 = 0x00\n        para2 = tracking\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        execute(0x0D)\n        if (myAns)\n            execute(0x19)\n    }\n    //% blockId=MP3execute block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=\"setVolume\" block=\"Set volume(0~25):%volume\"\n    //% volume.min=0 volume.max=25\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setVolume(volume: number): void {\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 0x06\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=MP3setPort block=\"Set the MP3 port to %Rjpin\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function MP3SetPort(Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        setVolume(25)\n    }\n}","notlegos.ts":"// NotLegos Blocks\n\n//% block=\"Not LEGOs\" color=#0031AF weight=1000 icon=\"\\uf3a5\"\n//% groups=['MP3\",'Display', 'Laser', 'others']\nnamespace notLegos {\n\n    // Variables for MP3 and Volume Pot\n    let isPot = false\n    let potPin = AnalogPin.P0\n    let mp3bits = 0\n    let mp3Apin = SerialPin.P0\n    let mp3Bpin = SerialPin.P0\n    let mp3Cpin = SerialPin.P0\n    let mp3Avolume = 1\n    let mp3Bvolume = 1\n    let mp3Cvolume = 1\n    let relativeCvolume = 1\n    let lastMP3bit = \"\"\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    let mp3musicPin = null\n    let mp3music = false\n    let mp3voicePin = null\n    let mp3voice = false\n    let mp3sfxPin = null\n    let mp3sfx = false\n\n    // String Arrays for Full Player Sound Sets and Shuffled Playlists Thereof\n    let PlayerAwaitingMusic: string[] = []\n    let PlayerFailure: string[] = []\n    let PlayerHurry: string[] = []\n    let PlayerIntro: string[] = []\n    let PlayerIntroMusic: string[] = []\n    let PlayerLevelMusic: string[] = []\n    let PlayerLost: string[] = []\n    let PlayerLostMusic: string[] = []\n    let PlayerName: string[] = []\n    let PlayerNay: string[] = []\n    let PlayerOuch: string[] = []\n    let PlayerReady: string[] = []\n    let PlayerSuccess: string[] = []\n    let PlayerTutorialMusic: string[] = []\n    let PlayerWon: string[] = []\n    let PlayerWonMusic: string[] = []\n    let PlayerYay: string[] = []\n    let PlaylistAwaitingMusic: string[] = []\n    let PlaylistCorrect: string[] = []\n    let PlaylistExplosion: string[] = []\n    let PlaylistFailure: string[] = []\n    let PlaylistFire: string[] = []\n    let PlaylistGhost: string[] = []\n    let PlaylistHurry: string[] = []\n    let PlaylistIncorrect: string[] = []\n    let PlaylistIntro: string[] = []\n    let PlaylistLost: string[] = []\n    let PlaylistName: string[] = []\n    let PlaylistNay: string[] = []\n    let PlaylistOuch: string[] = []\n    let PlaylistReady: string[] = []\n    let PlaylistSlash: string[] = []\n    let PlaylistSpark: string[] = []\n    let PlaylistSplash: string[] = []\n    let PlaylistSuccess: string[] = []\n    let PlaylistWon: string[] = []\n    let PlaylistYay: string[] = []\n\n    // Sound Strings - Global\n    let VoiceTracks = \"10_1_90_1.75|10_2_90_3.65|10_3_50_11.5|10_4_90_0|10_5_90_0|10_6_90_4.65|10_7_90_7.15|10_8_90_4.8|10_9_90_3.75|10_10_90_5.05|10_11_90_0|10_12_90_0|10_13_90_3|10_14_90_3|10_15_90_3|10_16_90_4|10_17_90_0|10_18_90_3|10_19_90_3|10_20_90_4|10_21_90_2|10_22_90_0|10_23_90_2|10_24_90_2|10_25_90_6|10_26_90_6|10_27_90_6|10_28_90_6|10_29_90_6|10_30_90_6|10_31_90_6|10_32_90_6|10_33_90_8|10_34_90_9|10_35_90_6|10_36_90_6|10_37_90_6|10_38_90_6|10_39_90_6|10_40_90_6\".split(\"|\")\n    let CorrectSFX = \"7_1_100_4|7_2_100_8|7_3_100_8|7_4_100_6|7_5_100_10|7_6_100_8|7_7_100_6|7_8_100_4|7_9_100_17|7_10_100_9|7_11_100_4|7_12_100_8|7_13_100_12|7_14_100_7|7_15_100_10|7_16_100_9|7_17_100_10|7_18_100_9|7_19_100_8|7_20_100_4|7_21_100_7|7_22_100_26|7_23_100_5|7_24_100_4|7_25_100_10|7_26_100_7|7_27_100_7|7_28_100_6|7_29_100_7|7_30_100_7|7_31_100_12|7_32_100_4|7_33_100_6|7_34_100_6|7_35_100_6|7_36_100_6|7_37_100_5|7_38_100_3|7_39_100_6|7_40_100_6|7_41_100_6|7_42_100_8|7_43_100_6|7_44_100_8|7_45_100_6|7_46_100_5|7_47_100_5|7_48_100_12|7_49_100_3|7_50_100_7|7_51_100_8|7_52_100_11|7_53_100_6|7_54_100_2|7_55_100_5|7_56_100_7|7_57_100_8|7_58_100_7|7_59_100_6|7_60_100_7|7_61_100_6|7_62_100_8|7_63_100_5|7_64_100_5|7_65_100_7|7_66_100_9|7_67_100_6|7_68_100_6|7_69_100_7|7_70_100_10|7_71_100_7|7_72_100_5|7_73_100_6|7_74_100_8|7_75_100_3|7_76_100_3|7_77_100_6|7_78_100_7|7_79_100_4|7_80_100_6|7_81_100_2|7_82_100_3|7_83_100_3|7_84_100_1|7_85_100_3|7_86_100_6|7_87_100_7|7_88_100_5|7_89_100_3|7_90_100_5|7_91_100_3|7_92_100_3|7_93_100_2|7_94_100_3|7_95_100_3|7_96_100_1|7_99_100_1|7_100_100_1|7_101_100_1|7_102_100_1|7_103_100_1|7_104_100_3|7_105_100_1|7_106_100_1|7_107_100_4|7_108_100_4|7_109_100_1|7_110_100_1|7_111_100_1|7_112_100_1|7_113_100_1|7_114_100_2|7_115_100_1|7_116_100_1|7_117_100_1|7_118_100_1\".split(\"|\")\n    let IncorrectSFX = \"8_1_100_6|8_2_100_5|8_3_100_3|8_4_100_5|8_5_100_7|8_6_100_6|8_7_100_4|8_8_100_1|8_9_100_3|8_10_100_4|8_11_100_3|8_12_100_3|8_13_100_6|8_14_100_3|8_15_100_1|8_16_100_1|8_17_100_1|8_18_100_1|8_19_100_0|8_20_100_0|8_21_100_5|8_22_100_4|8_23_100_3|8_24_100_7\".split(\"|\")\n    let AllSFX = \"9_1_100_4.754|9_2_100_4.336|9_3_100_5.172|9_4_100_4.806|9_5_100_4.754|9_6_100_1.536|9_7_100_2.136|9_8_100_1.896|9_9_100_2.592|9_10_100_0.936|9_11_100_1.008|9_12_100_0.312|9_13_100_1.44|9_14_100_1.8|9_15_100_1.992|9_16_100_1.104|9_17_100_1.08|9_18_100_0.912|9_19_100_0.528|9_20_100_0.72|9_21_100_0.672|9_22_100_0.696|9_23_100_0.6|9_24_100_0.576|9_25_100_1.44|9_26_100_1.8|9_27_100_1.464|9_28_100_0.432|9_29_100_0.312|9_30_100_2.112|9_31_100_0.648|9_32_100_0.384|9_33_100_2.352|9_34_100_1.8|9_35_100_1.608|9_36_100_0.648|9_37_100_0.768|9_38_100_0.552|9_39_100_0.48|9_40_100_1.032|9_41_100_0.456|9_42_100_0.384|9_43_100_0.552|9_44_100_0.432|9_45_100_0.216|9_46_100_0.624|9_47_100_1.248|9_48_100_1.104|9_49_100_1.248|9_50_100_0.648|9_51_100_0.456|9_53_100_5.256|9_54_100_2.328|9_55_100_4.992|9_56_100_1.776|9_57_100_2.28|9_58_100_0.504|9_59_100_0.984|9_60_100_0.984|9_61_100_0.504|9_62_100_1.632|9_63_100_0.288|9_64_100_0.192|9_65_100_0.168|9_66_100_0.288|9_67_100_0.288|9_68_100_0.312|9_69_100_0.72|9_70_100_0.672|9_71_100_0.648|9_72_100_0.648|9_73_100_1.632|9_74_100_1.416|9_75_100_1.248|9_76_100_0.48|9_77_100_0.36|9_78_100_0.216|9_79_100_0.576|9_80_100_0.731|9_81_100_1.128|9_82_100_2.184|9_83_100_0.744|9_84_100_0.6|9_85_100_1.152|9_86_100_1.68|9_87_100_1.32|9_88_100_0.528|9_89_100_0.36|9_90_100_0.792|9_91_100_2.496|9_92_100_1.8|9_93_100_1.8|9_94_100_0.744|9_95_100_1.776|9_96_100_5.544|9_97_100_0.432|9_98_100_2.064|9_99_100_0.744|9_100_100_0.696|9_101_100_1.776|9_102_100_0.12|9_103_100_0.168|9_104_100_0.96|9_105_100_0.96|9_106_100_2.04|9_107_100_3.984|9_108_100_1.608|9_109_100_3.528|9_110_100_0.456|9_111_100_0.696|9_112_100_1.632|9_113_100_2.232\".split(\"|\")\n    let GhostSFX = \"9_1_100_4.754|9_2_100_4.336|9_3_100_5.172|9_4_100_4.806\".split(\"|\")\n    let FireSFX = \"9_6_100_1.536|9_15_100_1.992|9_53_100_5.256|9_106_100_2.04\".split(\"|\")\n    let ExplosionSFX = \"9_77_100_0.36|9_101_100_1.776|9_109_100_3.528\".split(\"|\")\n    let SplashSFX = \"9_33_100_2.352|9_34_100_1.8\".split(\"|\")\n    let SparkSFX = \"9_5_100_4.754|9_51_100_0.456|9_85_100_1.152|9_86_100_1.68|9_111_100_0.696|9_112_100_1.632\".split(\"|\")\n    let SlashSFX = \"9_10_100_0.936|9_25_100_1.44|9_28_100_0.432|9_32_100_0.384|9_50_100_0.648|9_59_100_0.984|9_63_100_0.288|9_64_100_0.192|9_65_100_0.168|9_66_100_0.288|9_67_100_0.288|9_68_100_0.312|9_69_100_0.72|9_75_100_1.248|9_76_100_0.48|9_77_100_0.36|9_78_100_0.216|9_89_100_0.36\".split(\"|\")\n    \n    // Music Strings - Super Mario Brothers\n    let SMBIntroMusic = \"1_1_75_2.808|1_2_75_3.912|1_3_75_7.81|1_4_75_4.992|1_5_75_3.918|1_6_75_12.382|1_7_75_3.204|1_8_75_6.648|1_9_75_6.168|1_10_75_7.464|1_11_75_9.36|1_12_75_9.038|1_13_75_10.605|1_14_75_3.492|1_15_75_9.613|1_16_75_3.48|1_17_75_5.58|1_18_75_5.041|1_19_75_6.336|1_20_75_5.424|1_21_75_7.2|1_22_75_5.424|1_23_75_3.317|1_24_75_7.262|1_25_75_5.59|1_26_75_5.52|1_27_75_10.776|1_28_75_4.944|1_29_75_5.496|1_30_75_4.032|1_31_75_6.264|1_32_75_3.918|1_33_75_4.44|1_34_75_10.152|1_35_75_8.097|1_36_75_7.706|1_37_75_3.317|1_38_75_6.87|1_39_75_4.466|1_40_75_5.877|1_41_75_3.432|1_42_75_7.392|1_43_75_6.768|1_44_75_2.616|1_45_75_6.269|1_46_75_1.188|1_47_75_2.088|1_48_75_2.124|1_49_75_8.228|1_50_75_15.647|1_51_75_9.064|1_52_75_10.152|1_53_75_13.008|1_54_75_14.16|1_55_75_14.236|1_56_75_15.792|1_57_75_7.392|1_58_75_4.368|1_59_75_9.384|1_60_75_7.653|1_61_75_8.76|1_62_75_8.952|1_63_75_12.024|1_64_75_4.284|1_65_75_6.048|1_66_75_9.072|1_67_75_4.68|1_68_75_6.138|1_69_75_5.208|1_70_75_9.576|1_71_75_8.045|1_72_75_8.045|1_73_75_5.407|1_74_75_3.186\".split(\"|\")\n    let SMBTutorialMusic = \"2_1_65_36|2_2_65_40|2_3_65_41|2_4_65_46|2_5_65_50|2_6_65_51|2_7_65_59|2_8_65_63|2_9_65_64|2_10_65_65|2_11_65_66|2_12_65_67|2_13_65_68|2_14_65_69|2_15_65_76|2_16_65_80|2_17_65_84|2_18_65_90|2_19_65_92|2_20_65_100|2_21_65_103|2_22_65_105|2_23_65_112|2_24_65_113|2_25_65_123|2_26_65_138|2_27_65_142|2_28_65_144|2_29_65_156|2_30_65_158|2_31_65_120|2_32_65_120|2_33_65_120|2_34_65_120|2_35_65_120|2_36_65_120\".split(\"|\")\n    let SMBAwaitingMusic = \"3_1_100_64|3_2_100_211|3_3_100_185|3_4_100_185|3_5_100_182|3_6_100_114|3_7_100_181|3_8_100_103|3_9_100_303|3_10_100_21|3_11_100_235|3_12_100_121|3_13_100_203|3_14_100_119|3_15_100_206|3_16_100_146|3_17_100_237|3_18_100_210|3_19_100_160\".split(\"|\")\n    let SMBLevelMusic = \"4_1_100_128|4_3_100_142|4_5_100_111|4_6_100_141|4_9_100_126|4_11_100_132|4_15_100_119|4_16_100_146|4_18_100_120|4_20_100_143|4_22_100_142|4_23_100_112|4_24_100_138|4_25_100_139|4_26_100_111|4_27_100_116|4_28_100_129|4_31_100_98|4_32_100_146|4_33_100_177|4_34_100_82|4_36_100_160|4_38_100_180|4_39_100_211|4_41_100_134|4_42_100_183|4_43_100_124|4_44_100_261|4_45_100_91|4_46_100_138|4_49_100_207|4_50_100_41|4_51_100_180|4_52_100_202|4_53_100_194|4_56_100_209|4_57_100_195|4_58_100_180|4_60_100_198|4_61_100_180|4_63_100_78|4_66_100_139|4_67_100_224|4_68_100_180|4_73_100_180|4_76_100_180|4_77_100_196|4_78_100_113|4_82_100_180|4_83_100_123|4_84_100_180|4_86_100_126|4_93_100_121|4_97_100_59|4_98_100_180|4_99_100_180|4_100_100_118|4_101_100_156|4_102_100_180|4_103_100_70|4_104_100_216|4_105_100_140|4_106_100_180|4_107_100_147|4_108_100_147|4_109_100_180|4_110_100_158|4_111_100_180|4_112_100_80|4_113_100_152|4_114_100_127|4_116_100_122|4_118_100_106|4_123_100_143|4_124_100_36|4_125_100_164|4_127_100_282|4_128_100_311|4_129_100_123|4_130_100_187|4_131_100_62|4_132_100_180|4_133_100_130|4_134_100_112|4_135_100_105|4_139_100_126|4_141_100_176|4_142_100_135|4_143_100_126|4_144_100_144|4_145_100_140|4_146_100_133|4_149_100_167|4_150_100_120|4_151_100_180|4_155_100_226|4_157_100_164|4_158_100_144|4_159_100_104|4_161_100_180|4_162_100_87|4_163_100_126|4_164_100_118|4_165_100_194|4_166_100_135|4_167_100_50|4_168_100_109|4_169_100_180|4_170_100_133|4_171_100_180|4_172_100_91|4_173_100_138|4_176_100_120|4_177_100_81|4_178_100_150|4_179_100_153|4_180_100_104|4_181_100_112\".split(\"|\")\n    let SMBWonMusic = \"5_1_100_4|5_2_100_17|5_3_100_29|5_4_100_172|5_5_100_13|5_6_100_248|5_7_100_11|5_8_100_445|5_9_100_241|5_10_100_244|5_11_100_20|5_12_100_7|5_13_100_28|5_14_100_74|5_15_100_15|5_16_100_74|5_17_100_17|5_18_100_17|5_19_100_15|5_20_100_38|5_21_100_42|5_22_100_67|5_23_100_8|5_24_100_8|5_25_100_13|5_26_100_17|5_27_100_5|5_28_100_122|5_29_100_226|5_30_100_79\".split(\"|\")\n    let SMBLostMusic = \"6_1_100_87|6_2_100_31|6_3_100_196|6_4_100_65|6_5_100_4|6_6_100_23|6_7_100_65|6_8_100_62|6_9_100_78|6_10_100_6|6_11_100_162\".split(\"|\")\n    \n    // Player Strings - Mario\n    let MarioSoundString = \"A_21_1_100_1.5|A_21_2_100_1|I_21_3_100_3.3|A_21_4_100_1.9|A_21_5_100_2.1|I_21_6_100_1.8|I_21_7_100_1.8|R_21_8_100_0.6|R_21_9_100_1.3|R_21_10_100_1.1|R_21_11_100_0.6|R_21_12_100_0.8|R_21_13_100_1.6|R_21_14_100_1.3|R_21_15_100_1.2|R_21_16_100_1.1|R_21_17_100_1.3|R_21_18_100_1|Y_21_19_100_0.2|Y_21_20_100_0.2|Y_21_21_100_0.3|Y_21_22_100_0.5|Y_21_23_100_0.6|Y_21_24_100_0.6|Y_21_25_100_0.6|Y_21_26_100_0.6|Y_21_27_100_0.6|Y_21_28_100_0.6|Y_21_29_100_0.7|Y_21_30_100_0.7|Y_21_31_100_0.7|Y_21_32_100_0.7|Y_21_33_100_0.7|Y_21_34_100_0.8|Y_21_35_100_0.8|Y_21_36_100_0.8|Y_21_37_100_0.8|Y_21_38_100_0.8|Y_21_39_100_0.8|Y_21_40_100_0.9|Y_21_41_100_0.9|Y_21_42_100_0.9|Y_21_43_100_0.9|Y_21_44_100_0.9|Y_21_45_100_0.9|Y_21_46_100_0.9|Y_21_47_100_1|Y_21_48_100_1|Y_21_49_100_1|Y_21_50_100_1|Y_21_51_100_1.1|Y_21_52_100_1.1|Y_21_53_100_1.1|Y_21_54_100_1.2|Y_21_55_100_1.2|Y_21_56_100_1.2|Y_21_57_100_1.2|Y_21_58_100_1.3|Y_21_59_100_1.3|Y_21_60_100_1.3|Y_21_61_100_1.4|Y_21_62_100_1.4|S_21_63_100_1|S_21_64_100_1.6|S_21_65_100_1.7|S_21_66_100_1.7|S_21_67_100_1.9|S_21_68_100_2.1|S_21_69_100_2.2|S_21_70_100_2.4|S_21_71_100_2.4|S_21_72_100_2.5|W_21_73_100_1.8|W_21_74_100_2|W_21_75_100_2.2|W_21_76_100_2.6|W_21_77_100_2.9|O_21_78_100_0.6|O_21_79_100_0.4|O_21_80_100_0.4|O_21_81_100_1.1|O_21_82_100_1.5|O_21_83_100_0.8|O_21_84_100_0.7|O_21_85_100_0.8|O_21_86_100_0.9|O_21_87_100_1.3|O_21_88_100_0.5|O_21_89_100_1|O_21_90_100_1|O_21_91_100_0.4|O_21_92_100_0.5|O_21_93_100_0.9|O_21_94_100_0.4|O_21_95_100_0.4|N_21_96_100_1|N_21_97_100_1.1|N_21_98_100_1|N_21_99_100_0.6|N_21_100_100_0.9|N_21_101_100_1.4|N_21_102_100_1.7|N_21_103_100_1.3|N_21_104_100_0.6|N_21_105_100_1.4|N_21_106_100_0.8|N_21_107_100_1.1|N_21_108_100_1.1|N_21_109_100_0.8|N_21_110_100_1.7|N_21_111_100_2.4|I_21_112_100_0.8|I_21_113_100_0.9|F_21_114_100_1.1|F_21_115_100_2.5|F_21_116_100_2.5|F_21_117_100_1.4|L_21_118_100_3.4|L_21_119_100_3.5|L_21_120_100_4.4|L_21_121_100_1.5|H_21_122_100_44.4\"\n\n    // BLOCK - Set the Player's Sounds\n    //% blockId=nl_player_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% weight=101\n    //% block=\"Set player to $player\"\n    export function setSounds(player: string): void {\n        let theSound = \"\"\n        let thisLetter = \"\"\n        let series = \"\"\n        let soundStrings: string[] = []\n        if (player == \"Mario\") {\n            soundStrings = MarioSoundString.split(\"|\")\n            series = \"SMB\"\n        }\n        if (series == \"SMB\") {\n            PlayerIntroMusic = SMBIntroMusic\n            PlayerTutorialMusic = SMBTutorialMusic\n            PlayerAwaitingMusic = SMBAwaitingMusic\n            PlayerLevelMusic = SMBLevelMusic\n            PlayerWonMusic = SMBWonMusic\n            PlayerLostMusic = SMBLostMusic\n        }\n        for (let sString of soundStrings) {\n            thisLetter = sString.charAt(0)\n            theSound = sString.substr(2, sString.length - 2)\n            if (thisLetter == \"A\") {\n                PlayerName.push(theSound)\n            } else if (thisLetter == \"R\") {\n                PlayerReady.push(theSound)\n            } else if (thisLetter == \"Y\") {\n                PlayerYay.push(theSound)\n            } else if (thisLetter == \"I\") {\n                PlayerIntro.push(theSound)\n            } else if (thisLetter == \"N\") {\n                PlayerNay.push(theSound)\n            } else if (thisLetter == \"O\") {\n                PlayerOuch.push(theSound)\n            } else if (thisLetter == \"S\") {\n                PlayerSuccess.push(theSound)\n            } else if (thisLetter == \"F\") {\n                PlayerFailure.push(theSound)\n            } else if (thisLetter == \"W\") {\n                PlayerWon.push(theSound)\n            } else if (thisLetter == \"L\") {\n                PlayerLost.push(theSound)\n            } else if (thisLetter == \"H\") {\n                PlayerHurry.push(theSound)\n            }\n        }\n    }    \n    \n    // Internal Function - Take a Sound from a Playlist After Filling it from a Soundbank if it's Empty\n    function takeReplenish(Playlist: any[], Soundbank: any[]) {\n        let returnSound = \"\"\n        returnSound = \"\"\n        if (Playlist.length == 0) {\n            for (let index = 0; index <= Soundbank.length - 1; index++) {\n                if (index == 0) {\n                    Playlist.push(Soundbank[index])\n                } else if (index >= 1) {\n                    Playlist.insertAt(randint(0, index), Soundbank[index])\n                }\n            }\n        }\n        returnSound = Playlist.shift()\n        return returnSound\n    }\n\n    // BLOCK - Fetch a Sound of a Type from a Category\n    //% blockId=nl_get_soundstring\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% weight=101\n    //% block=\"Get $Category sound $Type\"\n    export function getSoundString(Category: string, Type: string): string {\n        let returnString = \"\"\n        if (Category == \"Voice\") {\n            returnString = VoiceTracks[parseFloat(Type)]\n        } else if (Category == \"Player\") {\n            if (Type == \"Name\") {\n                returnString = takeReplenish(PlaylistName, PlayerName)\n            } else if (Type == \"Intro\") {\n                returnString = takeReplenish(PlaylistIntro, PlayerIntro)\n            } else if (Type == \"Ready\") {\n                returnString = takeReplenish(PlaylistReady, PlayerReady)\n            } else if (Type == \"Yay\") {\n                returnString = takeReplenish(PlaylistYay, PlayerYay)\n            } else if (Type == \"Success\") {\n                returnString = takeReplenish(PlaylistSuccess, PlayerSuccess)\n            } else if (Type == \"Nay\") {\n                returnString = takeReplenish(PlaylistNay, PlayerNay)\n            } else if (Type == \"Failure\") {\n                returnString = takeReplenish(PlaylistFailure, PlayerFailure)\n            } else if (Type == \"Won\") {\n                returnString = takeReplenish(PlaylistWon, PlayerWon)\n            } else if (Type == \"Lost\") {\n                returnString = takeReplenish(PlaylistLost, PlayerLost)\n            } else if (Type == \"Hurry\") {\n                returnString = takeReplenish(PlaylistHurry, PlayerHurry)\n            }\n        } else if (Category == \"SFX\") {\n            if (Type == \"Correct\") {\n                returnString = takeReplenish(PlaylistCorrect, CorrectSFX)\n            } else if (Type == \"Incorrect\") {\n                returnString = takeReplenish(PlaylistIncorrect, IncorrectSFX)\n            } else if (Type == \"Ghost\") {\n                returnString = takeReplenish(PlaylistGhost, GhostSFX)\n            } else if (Type == \"Fire\") {\n                returnString = takeReplenish(PlaylistFire, FireSFX)\n            } else if (Type == \"Explosion\") {\n                returnString = takeReplenish(PlaylistExplosion, ExplosionSFX)\n            } else if (Type == \"Splash\") {\n                returnString = takeReplenish(PlaylistSplash, SplashSFX)\n            } else if (Type == \"Spark\") {\n                returnString = takeReplenish(PlaylistSpark, SparkSFX)\n            } else if (Type == \"Slash\") {\n                returnString = takeReplenish(PlaylistSlash, SlashSFX)\n            }\n        } else if (Category == \"Music\") {\n            if (Type == \"Intro\") {\n                let PlaylistIntroMusic: number[] = []\n                returnString = takeReplenish(PlaylistIntroMusic, PlayerIntroMusic)\n            } else if (Type == \"Tutorial\") {\n                let PlaylistTutorialMusic: number[] = []\n                returnString = takeReplenish(PlaylistTutorialMusic, PlayerTutorialMusic)\n            } else if (Type == \"Awaiting\") {\n                returnString = takeReplenish(PlaylistAwaitingMusic, PlayerAwaitingMusic)\n            } else if (Type == \"Level\") {\n                let PlaylistLevelMusic: number[] = []\n                returnString = takeReplenish(PlaylistLevelMusic, PlayerLevelMusic)\n            } else if (Type == \"Won\") {\n                let PlaylistWonMusic: number[] = []\n                returnString = takeReplenish(PlaylistWonMusic, PlayerWonMusic)\n            } else if (Type == \"Lost\") {\n                let PlaylistLostMusic: number[] = []\n                returnString = takeReplenish(PlaylistLostMusic, PlayerLostMusic)\n            }\n        }\n        return returnString\n    }\n\n\n    ///////////////////////////////////////////////////////MP3\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(20) // Was 100; problematic at 10\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n    function sendMP3volume(sPin: SerialPin): void {\n        let theVolume = 5\n        if (sPin == mp3Apin) {\n            theVolume = Math.round(potRead() * mp3Avolume)\n        } else if (sPin == mp3Bpin) {\n            theVolume = Math.round(potRead() * mp3Bvolume)\n        } else if (sPin == mp3Cpin) {\n            theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    function sendMP3volumeFast(sPin: SerialPin): void {\n        let theVolume = 5\n        if (sPin == mp3Apin) {\n            theVolume = Math.round(potRead() * mp3Avolume)\n        } else if (sPin == mp3Bpin) {\n            theVolume = Math.round(potRead() * mp3Bvolume)\n        } else if (sPin == mp3Cpin) {\n            theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    function sendMP3play(folderNum: string, fileNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    //% blockId=\"playFileNl\" \n    //% block=\"Play length of file:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n\n    export function playFile(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P16\n        stringParts = soundString.split(\"_\")\n        let theFile = stringParts[0]\n        let theVolume = stringParts[1]\n        let theLength = stringParts[2]\n        sendMP3file(theFile, theVolume, sPin)\n        return parseFloat(theLength) * 1000\n    }\n    function sendMP3file(fileNum: string, volumeNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 3\n        para1 = parseInt(fileNum)\n        para2 = parseInt(volumeNum)\n        para1 = parseInt(\"0\")\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFileNl2\" \n    //% block=\"Play2 length of file:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n\n    export function playFile2(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P16\n        stringParts = soundString.split(\"_\")\n        let theFile = stringParts[0]\n        let theVolume = stringParts[1]\n        let theLength = stringParts[2]\n        sendMP3file2(theFile, theVolume, sPin)\n        return parseFloat(theLength) * 1000\n    }\n    function sendMP3file2(fileNum: string, volumeNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 15\n        para1 = parseInt(fileNum)\n        para2 = parseInt(volumeNum)\n        para1 = parseInt(\"1\")\n        para2 = parseInt(\"1\")\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=nl_backgroundVolume\n    //% block=\"Set background volume to:%relativeVolume\"\n    //% subcategory=\"MP3\" group=\"MP3\"\n    export function sendBackgroundVolume(relativeVolume: number): void {\n        relativeCvolume = relativeVolume/100\n\n        let sPin = mp3Cpin\n        let theVolume = Math.round(potRead() * mp3Cvolume * relativeVolume / 100)\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=MP3execute2 block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n  \n    //% blockId=notlegos_pot_read\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Trimpot analog value\"\n    export function potRead() {\n        if(isPot){\n            return Math.round(pins.map(pins.analogReadPin(potPin), 0, 1023, 0, 30))\n        } else{\n            return 5\n        }\n    }\n\n    //% blockId=notlegos_relCread\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return background volume\"\n    export function getBackgroundVolume() {\n\n            return relativeCvolume\n\n    }\n    //% blockId=notlegos_mp3Avolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3A volume\"\n    export function getMP3AVolume() {\n        return potRead() * mp3Avolume\n    }\n    //% blockId=notlegos_mp3Bvolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3B volume\"\n    export function getMP3BVolume() {\n        return potRead() * mp3Bvolume\n    }\n      //% blockId=notlegos_mp3Cvolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3C volume\"\n    export function getMP3CVolume() {\n        return potRead() * mp3Cvolume * relativeCvolume\n    }\n\n    //% blockId=notlegos_pot_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Connect Volume Control Pot at pin %aPin\"\n    //% aPin.fieldEditor=\"gridpicker\"\n    export function potSet(aPin: AnalogPin): void{\n        potPin = aPin\n        isPot = true\n    }\n\n//////////////////////////////////////////////////////////\n\n    //% blockId=nl_mp3_init\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Ready MP3bit at %sPin for %type\"\n    //% dPin.fieldEditor=\"gridpicker\"\n    export function mp3setPorts(type:mp3type, sPin: SerialPin): void {\n        if (type == mp3type.music){\n            mp3musicPin = sPin\n            mp3music = true\n        } else if (type == mp3type.voice){\n            mp3voicePin = sPin\n            mp3voice = true\n        } else if (type == mp3type.sfx){\n            mp3sfxPin = sPin\n            mp3sfx = true\n        }\n        sendMP3volumeQuick(sPin)\n    }\n\n    function sendMP3volumeQuick(sPin: SerialPin): void {\n        let theVolume = 5\n        // if (sPin == mp3Apin) {\n        //     theVolume = Math.round(potRead() * mp3Avolume)\n        // } else if (sPin == mp3Bpin) {\n        //     theVolume = Math.round(potRead() * mp3Bvolume)\n        // } else if (sPin == mp3Cpin) {\n        //     theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        // }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    //% blockId=nl_mp3_music\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %genre music\"\n    export function mp3musicPlay(genre:musicGenre): void{\n\n    }\n\n    //% blockId=nl_mp3_say\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %saying as player\"\n    export function mp3sayPlay(saying: playerSaying): void {\n\n    }\n\n\n\n    //% blockId=\"playFolderFile\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playFolderFile(folderNum: string, fileNum: string): void {\n    \n        if (mp3bits > 0) {\n            sendMP3volume(mp3Apin)\n        }\n        if (mp3bits > 1) {\n           // sendMP3volume(mp3Bpin)\n        }\n        if (mp3bits >0) {\n            sendMP3play(folderNum, fileNum, mp3Apin)\n        }\n        if (mp3bits > 1) {\n          //  sendMP3play(folderNum, fileNum, mp3Bpin)\n        }\n    }\n\n    //% blockId=\"playsFor\" \n    //% block=\"Play length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsFor(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        if (mp3bits == 1) {\n            sPin = mp3Apin\n            mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        } else {\n            if (lastMP3bit == \"A\") {\n                    sPin = mp3Bpin\n                    mp3Bvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n                    lastMP3bit = \"B\"\n            } else {\n                sPin = mp3Apin\n                mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n            lastMP3bit = \"A\"\n            }\n        }\n        let theLength = stringParts[3]\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n        return parseFloat(theLength) * 1000 + 20\n    }\n\n    //% blockId=nl_volume_refresh\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume\"\n    export function updateVolume(): void {\n        if (mp3bits > 0) {\n            sendMP3volumeFast(mp3Apin)\n        }\n        if (mp3bits > 1) {\n            sendMP3volumeFast(mp3Bpin)\n        }\n        if (mp3bits > 2) {\n            sendMP3volumeFast(mp3Cpin)\n        }\n    }\n\n\n    //% blockId=\"nl_playsForTwo\" \n    //% block=\"Dual play length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsForTwo(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n\n        mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        mp3Bvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n\n        sendMP3volumeFast(mp3Apin)\n        sendMP3volumeFast(mp3Bpin)\n        \n        basic.pause(20)\n\n        sendMP3play(theFolder, theFile, mp3Apin)\n        sendMP3play(theFolder, theFile, mp3Bpin)\n        \n        return parseFloat(theLength) * 1000 + 20\n    }\n\n\n    //% blockId=\"nl_playsForBackground\" \n    //% block=\"Play in background length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsForBackground(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n        mp3Cvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        sPin = mp3Cpin\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n        return parseFloat(theLength) * 1000 + 20\n    }\n\n\n    //% blockId=\"nl_playBackground\" \n    //% block=\"Play in background:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playBackground(soundString: string): void {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n        mp3Cvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        sPin = mp3Cpin\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n    }\n\n\n    //% blockId=\"nl_backgroundStop\" \n    //% block=\"Stop background sound\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function stopBackgroundSound(): void {\n        serial.redirect(mp3Cpin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 0x16\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    // Nezha - Functions for Pins and Ports\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_Serial(Rjpin: DigitalRJPin): any {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = SerialPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = SerialPin.P2\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.P12:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = SerialPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = SerialPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n\n    // Enum - To Support MP3\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n\n    // Enum - Nezha and Pins\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum mbPin {\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1 (Analog J1)\"\n        P1,\n        //% block=\"P2 (Analog J2)\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8 (J1)\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12 (J2)\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14 (J3)\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16 (J4)\"\n        P16,\n    }\n}\nenum mp3type {\n    music,\n    voice,\n    sfx\n}\nenum musicGenre {\n    intro,\n    tutorial,\n    awaiting,\n    level,\n    won,\n    lost\n}\nexport playerSaying{\n    ready,\n    yay,\n    intro,\n    nay,\n    ouch,\n    success,\n    failure,\n    won,\n    lost,\n    hurry\n}\nexport sfxType{\n    name,\n    correct,\n    incorrect,\n    ghost,\n    fire,\n    explosion,\n    splash,\n    spark,\n    slash,\n    retry,\n    gameover\n}\nexport voiceSay{\n    name,\n    retry,\n    gameover,\n    welcome,\n    howto,\n}","pxt.json":"{\n    \"name\": \"NotLegosExt\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"displaySendBuffer.asm\",\n        \"display.ts\",\n        \"planetxbasic.ts\",\n        \"notlegos.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"7.0.42\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","test.ts":""}},{"timestamp":1726871229304,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"}g^Kh@tsk|1f0]fNt=Se\">digits</variable><variable id=\"x4t~+B8#]@461X;Q^-0c\">sockLights</variable><variable id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights</variable><variable id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"Connected_oledClear\"><next><block type=\"pin_set_audio_pin_enabled\"><value name=\"enabled\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow></value><next><block type=\"device_led_enable\"><value name=\"on\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"}g^Kh@tsk|1f0]fNt=Se\">digits</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"grove_tm1637_create\"><field name=\"cPin\">DigitalPin.P7</field><field name=\"dPin\">DigitalPin.P6</field></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"x4t~+B8#]@461X;Q^-0c\">sockLights</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P11</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"x4t~+B8#]@461X;Q^-0c\">sockLights</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"x4t~+B8#]@461X;Q^-0c\">sockLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P12</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">18</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P13</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"993\" y=\"-7\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl2\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">1_1_25_100</field></shadow></value></block></value></block></statement></block><block type=\"device_button_event\" x=\"1520\" y=\"-20\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">2_1_1</field></shadow></value></block></value></block></statement></block><block type=\"function_definition\" x=\"957\" y=\"222\"><mutation name=\"isNearly\" functionid=\"b1Q}-qv~wJN$grhC!ppp\"><arg name=\"reference\" id=\"5nona16w6rbe5o9cs7yri\" type=\"number\"></arg><arg name=\"reading\" id=\"1603v12143812bjzv2he\" type=\"number\"></arg><arg name=\"tolerance\" id=\"huqcis1hoaqr7iq5ev9lm\" type=\"number\"></arg></mutation><field name=\"function_name\">isNearly</field><value name=\"5nona16w6rbe5o9cs7yri\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reference</field></block></value><value name=\"1603v12143812bjzv2he\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reading</field></block></value><value name=\"huqcis1hoaqr7iq5ev9lm\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">tolerance</field></block></value><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_operation\"><field name=\"OP\">AND</field><value name=\"A\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value></block></value><statement name=\"DO0\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></block></value></block></statement><statement name=\"ELSE\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></block></value></block></statement></block></statement></block><block type=\"every_interval\" x=\"673\" y=\"776\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value><statement name=\"HANDLER\"><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"text_join\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P2</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P3</field></shadow></value></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">2</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">hue </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field></shadow><block type=\"apds9960_readcolor\"></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">3</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">distance </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field></shadow><block type=\"sonarbit\"><field name=\"tPin\">DigitalPin.P8</field><field name=\"ePin\">DigitalPin.P9</field><field name=\"distance_unit\">Connected.Distance_Unit_List.Distance_Unit_cm</field></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">4</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">gesture </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field></shadow><block type=\"Connected_getGesture\"></block></value></block></value></block></next></block></next></block></next></block></statement></block></xml>","main.ts":"function isNearly (reference: number, reading: number, tolerance: number) {\n    if (reading >= reference - tolerance && reading <= reference + tolerance) {\n        return true\n    } else {\n        return false\n    }\n}\ninput.onButtonPressed(Button.A, function () {\n    basic.pause(notLegos.playFile2(\"1_1_25_100\"))\n})\ninput.onButtonPressed(Button.B, function () {\n    basic.pause(notLegos.playFile(\"2_1_1\"))\n})\nConnected.oledClear()\npins.setAudioPinEnabled(true)\nled.enable(false)\nbasic.pause(100)\nlet digits = Connected.tm1637Create(\nDigitalPin.P7,\nDigitalPin.P6\n)\nbasic.pause(1000)\nlet sockLights = Connected.create(Connected.DigitalRJPin.P11, 8, Connected.NeoPixelMode.RGB)\nsockLights.showColor(Connected.colors(Connected.NeoPixelColors.Blue))\nsockLights.show()\nlet wheelLights = Connected.create(Connected.DigitalRJPin.P12, 18, Connected.NeoPixelMode.RGB)\nwheelLights.showColor(Connected.colors(Connected.NeoPixelColors.Blue))\nwheelLights.show()\nlet scoreCircle = Connected.create(Connected.DigitalRJPin.P13, 8, Connected.NeoPixelMode.RGB)\nscoreCircle.showColor(Connected.colors(Connected.NeoPixelColors.Blue))\nscoreCircle.show()\nloops.everyInterval(500, function () {\n    Connected.showUserText(1, \"R\" + pins.analogReadPin(AnalogReadWritePin.P1) + \" C\" + pins.analogReadPin(AnalogReadWritePin.P2) + \" L\" + pins.analogReadPin(AnalogReadWritePin.P3))\n    Connected.showUserText(2, \"hue \" + Connected.readColor())\n    Connected.showUserText(3, \"distance \" + Connected.ultrasoundSensor(DigitalPin.P8, DigitalPin.P9, Connected.Distance_Unit_List.Distance_Unit_cm))\n    Connected.showUserText(4, \"gesture \" + Connected.getGesture())\n})\n","README.md":"\n> Open this page at [https://notlegos.github.io/castleresay/](https://notlegos.github.io/castleresay/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/castleresay** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/castleresay** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/soundbank/](https://notlegos.github.io/soundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/soundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/soundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/resoundbank/](https://notlegos.github.io/resoundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/resoundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/resoundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosext/](https://notlegos.github.io/notlegosext/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosext** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosext** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","displaySendBuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n","display.ts":"\n/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#EA5532 icon=\"\\uf110\" block=\"Connected\" blockId=\"PlanetX_Connected\" \n//% groups='[\"LED\", \"Digital\", \"Analog\", \"IIC Port\", \"OLED\", \"7-Seg 4-Dig LED Nixietube\"]'\nnamespace Connected {\n    ////////////////////////////////TM 1637/////////////////\n    let TM1637_CMD1 = 0x40;\n    let TM1637_CMD2 = 0xC0;\n    let TM1637_CMD3 = 0x80;\n    let _SEGMENTS = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];\n    /////////////////////OLED///////////////////////////////\n    let firstoledinit = true\n    const basicFont: string[] = [\n        \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", // \" \"\n        \"\\x00\\x00\\x5F\\x00\\x00\\x00\\x00\\x00\", // \"!\"\n        \"\\x00\\x00\\x07\\x00\\x07\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x14\\x7F\\x14\\x7F\\x14\\x00\\x00\", // \"#\"\n        \"\\x00\\x24\\x2A\\x7F\\x2A\\x12\\x00\\x00\", // \"$\"\n        \"\\x00\\x23\\x13\\x08\\x64\\x62\\x00\\x00\", // \"%\"\n        \"\\x00\\x36\\x49\\x55\\x22\\x50\\x00\\x00\", // \"&\"\n        \"\\x00\\x00\\x05\\x03\\x00\\x00\\x00\\x00\", // \"'\"\n        \"\\x00\\x1C\\x22\\x41\\x00\\x00\\x00\\x00\", // \"(\"\n        \"\\x00\\x41\\x22\\x1C\\x00\\x00\\x00\\x00\", // \")\"\n        \"\\x00\\x08\\x2A\\x1C\\x2A\\x08\\x00\\x00\", // \"*\"\n        \"\\x00\\x08\\x08\\x3E\\x08\\x08\\x00\\x00\", // \"+\"\n        \"\\x00\\xA0\\x60\\x00\\x00\\x00\\x00\\x00\", // \",\"\n        \"\\x00\\x08\\x08\\x08\\x08\\x08\\x00\\x00\", // \"-\"\n        \"\\x00\\x60\\x60\\x00\\x00\\x00\\x00\\x00\", // \".\"\n        \"\\x00\\x20\\x10\\x08\\x04\\x02\\x00\\x00\", // \"/\"\n        \"\\x00\\x3E\\x51\\x49\\x45\\x3E\\x00\\x00\", // \"0\"\n        \"\\x00\\x00\\x42\\x7F\\x40\\x00\\x00\\x00\", // \"1\"\n        \"\\x00\\x62\\x51\\x49\\x49\\x46\\x00\\x00\", // \"2\"\n        \"\\x00\\x22\\x41\\x49\\x49\\x36\\x00\\x00\", // \"3\"\n        \"\\x00\\x18\\x14\\x12\\x7F\\x10\\x00\\x00\", // \"4\"\n        \"\\x00\\x27\\x45\\x45\\x45\\x39\\x00\\x00\", // \"5\"\n        \"\\x00\\x3C\\x4A\\x49\\x49\\x30\\x00\\x00\", // \"6\"\n        \"\\x00\\x01\\x71\\x09\\x05\\x03\\x00\\x00\", // \"7\"\n        \"\\x00\\x36\\x49\\x49\\x49\\x36\\x00\\x00\", // \"8\"\n        \"\\x00\\x06\\x49\\x49\\x29\\x1E\\x00\\x00\", // \"9\"\n        \"\\x00\\x00\\x36\\x36\\x00\\x00\\x00\\x00\", // \":\"\n        \"\\x00\\x00\\xAC\\x6C\\x00\\x00\\x00\\x00\", // \";\"\n        \"\\x00\\x08\\x14\\x22\\x41\\x00\\x00\\x00\", // \"<\"\n        \"\\x00\\x14\\x14\\x14\\x14\\x14\\x00\\x00\", // \"=\"\n        \"\\x00\\x41\\x22\\x14\\x08\\x00\\x00\\x00\", // \">\"\n        \"\\x00\\x02\\x01\\x51\\x09\\x06\\x00\\x00\", // \"?\"\n        \"\\x00\\x32\\x49\\x79\\x41\\x3E\\x00\\x00\", // \"@\"\n        \"\\x00\\x7E\\x09\\x09\\x09\\x7E\\x00\\x00\", // \"A\"\n        \"\\x00\\x7F\\x49\\x49\\x49\\x36\\x00\\x00\", // \"B\"\n        \"\\x00\\x3E\\x41\\x41\\x41\\x22\\x00\\x00\", // \"C\"\n        \"\\x00\\x7F\\x41\\x41\\x22\\x1C\\x00\\x00\", // \"D\"\n        \"\\x00\\x7F\\x49\\x49\\x49\\x41\\x00\\x00\", // \"E\"\n        \"\\x00\\x7F\\x09\\x09\\x09\\x01\\x00\\x00\", // \"F\"\n        \"\\x00\\x3E\\x41\\x41\\x51\\x72\\x00\\x00\", // \"G\"\n        \"\\x00\\x7F\\x08\\x08\\x08\\x7F\\x00\\x00\", // \"H\"\n        \"\\x00\\x41\\x7F\\x41\\x00\\x00\\x00\\x00\", // \"I\"\n        \"\\x00\\x20\\x40\\x41\\x3F\\x01\\x00\\x00\", // \"J\"\n        \"\\x00\\x7F\\x08\\x14\\x22\\x41\\x00\\x00\", // \"K\"\n        \"\\x00\\x7F\\x40\\x40\\x40\\x40\\x00\\x00\", // \"L\"\n        \"\\x00\\x7F\\x02\\x0C\\x02\\x7F\\x00\\x00\", // \"M\"\n        \"\\x00\\x7F\\x04\\x08\\x10\\x7F\\x00\\x00\", // \"N\"\n        \"\\x00\\x3E\\x41\\x41\\x41\\x3E\\x00\\x00\", // \"O\"\n        \"\\x00\\x7F\\x09\\x09\\x09\\x06\\x00\\x00\", // \"P\"\n        \"\\x00\\x3E\\x41\\x51\\x21\\x5E\\x00\\x00\", // \"Q\"\n        \"\\x00\\x7F\\x09\\x19\\x29\\x46\\x00\\x00\", // \"R\"\n        \"\\x00\\x26\\x49\\x49\\x49\\x32\\x00\\x00\", // \"S\"\n        \"\\x00\\x01\\x01\\x7F\\x01\\x01\\x00\\x00\", // \"T\"\n        \"\\x00\\x3F\\x40\\x40\\x40\\x3F\\x00\\x00\", // \"U\"\n        \"\\x00\\x1F\\x20\\x40\\x20\\x1F\\x00\\x00\", // \"V\"\n        \"\\x00\\x3F\\x40\\x38\\x40\\x3F\\x00\\x00\", // \"W\"\n        \"\\x00\\x63\\x14\\x08\\x14\\x63\\x00\\x00\", // \"X\"\n        \"\\x00\\x03\\x04\\x78\\x04\\x03\\x00\\x00\", // \"Y\"\n        \"\\x00\\x61\\x51\\x49\\x45\\x43\\x00\\x00\", // \"Z\"\n        \"\\x00\\x7F\\x41\\x41\\x00\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x02\\x04\\x08\\x10\\x20\\x00\\x00\", // \"\\\"\n        \"\\x00\\x41\\x41\\x7F\\x00\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x04\\x02\\x01\\x02\\x04\\x00\\x00\", // \"^\"\n        \"\\x00\\x80\\x80\\x80\\x80\\x80\\x00\\x00\", // \"_\"\n        \"\\x00\\x01\\x02\\x04\\x00\\x00\\x00\\x00\", // \"`\"\n        \"\\x00\\x20\\x54\\x54\\x54\\x78\\x00\\x00\", // \"a\"\n        \"\\x00\\x7F\\x48\\x44\\x44\\x38\\x00\\x00\", // \"b\"\n        \"\\x00\\x38\\x44\\x44\\x28\\x00\\x00\\x00\", // \"c\"\n        \"\\x00\\x38\\x44\\x44\\x48\\x7F\\x00\\x00\", // \"d\"\n        \"\\x00\\x38\\x54\\x54\\x54\\x18\\x00\\x00\", // \"e\"\n        \"\\x00\\x08\\x7E\\x09\\x02\\x00\\x00\\x00\", // \"f\"\n        \"\\x00\\x18\\xA4\\xA4\\xA4\\x7C\\x00\\x00\", // \"g\"\n        \"\\x00\\x7F\\x08\\x04\\x04\\x78\\x00\\x00\", // \"h\"\n        \"\\x00\\x00\\x7D\\x00\\x00\\x00\\x00\\x00\", // \"i\"\n        \"\\x00\\x80\\x84\\x7D\\x00\\x00\\x00\\x00\", // \"j\"\n        \"\\x00\\x7F\\x10\\x28\\x44\\x00\\x00\\x00\", // \"k\"\n        \"\\x00\\x41\\x7F\\x40\\x00\\x00\\x00\\x00\", // \"l\"\n        \"\\x00\\x7C\\x04\\x18\\x04\\x78\\x00\\x00\", // \"m\"\n        \"\\x00\\x7C\\x08\\x04\\x7C\\x00\\x00\\x00\", // \"n\"\n        \"\\x00\\x38\\x44\\x44\\x38\\x00\\x00\\x00\", // \"o\"\n        \"\\x00\\xFC\\x24\\x24\\x18\\x00\\x00\\x00\", // \"p\"\n        \"\\x00\\x18\\x24\\x24\\xFC\\x00\\x00\\x00\", // \"q\"\n        \"\\x00\\x00\\x7C\\x08\\x04\\x00\\x00\\x00\", // \"r\"\n        \"\\x00\\x48\\x54\\x54\\x24\\x00\\x00\\x00\", // \"s\"\n        \"\\x00\\x04\\x7F\\x44\\x00\\x00\\x00\\x00\", // \"t\"\n        \"\\x00\\x3C\\x40\\x40\\x7C\\x00\\x00\\x00\", // \"u\"\n        \"\\x00\\x1C\\x20\\x40\\x20\\x1C\\x00\\x00\", // \"v\"\n        \"\\x00\\x3C\\x40\\x30\\x40\\x3C\\x00\\x00\", // \"w\"\n        \"\\x00\\x44\\x28\\x10\\x28\\x44\\x00\\x00\", // \"x\"\n        \"\\x00\\x1C\\xA0\\xA0\\x7C\\x00\\x00\\x00\", // \"y\"\n        \"\\x00\\x44\\x64\\x54\\x4C\\x44\\x00\\x00\", // \"z\"\n        \"\\x00\\x08\\x36\\x41\\x00\\x00\\x00\\x00\", // \"{\"\n        \"\\x00\\x00\\x7F\\x00\\x00\\x00\\x00\\x00\", // \"|\"\n        \"\\x00\\x41\\x36\\x08\\x00\\x00\\x00\\x00\", // \"}\"\n        \"\\x00\\x02\\x01\\x01\\x02\\x01\\x00\\x00\"  // \"~\"\n    ];\n    function oledcmd(c: number) {\n        pins.i2cWriteNumber(0x3c, c, NumberFormat.UInt16BE);\n    }\n    function writeData(n: number) {\n        let b = n;\n        if (n < 0) { n = 0 }\n        if (n > 255) { n = 255 }\n        pins.i2cWriteNumber(0x3c, 0x4000 + b, NumberFormat.UInt16BE);\n    }\n    function writeCustomChar(c: string) {\n        for (let i = 0; i < 8; i++) {\n            writeData(c.charCodeAt(i));\n        }\n    }\n    function setText(row: number, column: number) {\n        let r = row;\n        let c = column;\n        if (row < 0) { r = 0 }\n        if (column < 0) { c = 0 }\n        if (row > 7) { r = 7 }\n        if (column > 15) { c = 15 }\n        oledcmd(0xB0 + r);            //set page address\n        oledcmd(0x00 + (8 * c & 0x0F));  //set column lower address\n        oledcmd(0x10 + ((8 * c >> 4) & 0x0F));   //set column higher address\n    }\n    function putChar(c: string) {\n        let c1 = c.charCodeAt(0);\n        writeCustomChar(basicFont[c1 - 32]);\n    }\n    function oledinit(): void {\n        oledcmd(0xAE);  // Set display OFF\n        oledcmd(0xD5);  // Set Display Clock Divide Ratio / OSC Frequency 0xD4\n        oledcmd(0x80);  // Display Clock Divide Ratio / OSC Frequency \n        oledcmd(0xA8);  // Set Multiplex Ratio\n        oledcmd(0x3F);  // Multiplex Ratio for 128x64 (64-1)\n        oledcmd(0xD3);  // Set Display Offset\n        oledcmd(0x00);  // Display Offset\n        oledcmd(0x40);  // Set Display Start Line\n        oledcmd(0x8D);  // Set Charge Pump\n        oledcmd(0x14);  // Charge Pump (0x10 External, 0x14 Internal DC/DC)\n        oledcmd(0xA1);  // Set Segment Re-Map\n        oledcmd(0xC8);  // Set Com Output Scan Direction\n        oledcmd(0xDA);  // Set COM Hardware Configuration\n        oledcmd(0x12);  // COM Hardware Configuration\n        oledcmd(0x81);  // Set Contrast\n        oledcmd(0xCF);  // Contrast\n        oledcmd(0xD9);  // Set Pre-Charge Period\n        oledcmd(0xF1);  // Set Pre-Charge Period (0x22 External, 0xF1 Internal)\n        oledcmd(0xDB);  // Set VCOMH Deselect Level\n        oledcmd(0x40);  // VCOMH Deselect Level\n        oledcmd(0xA4);  // Set all pixels OFF\n        oledcmd(0xA6);  // Set display not inverted\n        oledcmd(0xAF);  // Set display On\n        oledClear();\n    }\n\n    ///////////////////////////////enum\n\n\n    export enum NeoPixelColors {\n        //% block=red\n        Red = 0xFF0000,\n        //% block=orange\n        Orange = 0xFFA500,\n        //% block=yellow\n        Yellow = 0xFFFF00,\n        //% block=green\n        Green = 0x00FF00,\n        //% block=blue\n        Blue = 0x0000FF,\n        //% block=indigo\n        Indigo = 0x4b0082,\n        //% block=violet\n        Violet = 0x8a2be2,\n        //% block=purple\n        Purple = 0xFF00FF,\n        //% block=white\n        White = 0xFFFFFF,\n        //% block=black\n        Black = 0x000000\n    }\n\n    /**\n     * Different modes for RGB or RGB+W NeoPixel strips\n     */\n    export enum NeoPixelMode {\n        //% block=\"RGB (GRB format)\"\n        RGB = 0,\n        //% block=\"RGB+W\"\n        RGBW = 1,\n        //% block=\"RGB (RGB format)\"\n        RGB_RGB = 2\n    }\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n    /////////////////////////////User_function//////////////////\n\n    //% line.min=1 line.max=8 line.defl=1\n    //% text.defl=\"Hello,ELECFREAKS\"\n    //% block=\"OLED show line %line|text %text\"\n    //% subcategory=Display group=\"OLED\" color=#00B1ED\n    export function showUserText(line: number, text: string) {\n        if (firstoledinit) {\n            oledinit()\n            firstoledinit = false\n        }\n        if (text.length > 16) {\n            text = text.substr(0, 16)\n        }\n        line = line - 1\n        setText(line, 0);\n        for (let c of text) {\n            putChar(c);\n        }\n\n        for (let i = text.length; i < 16; i++) {\n            setText(line, i);\n            putChar(\" \");\n        }\n    }\n    //% line.min=1 line.max=8 line.defl=2 \n    //% n.defl=20200508\n    //% block=\"OLED show line %line|number %n\"\n    //% subcategory=Display group=\"OLED\" color=#00B1ED\n    export function showUserNumber(line: number, n: number) {\n        if (firstoledinit) {\n            oledinit()\n            firstoledinit = false\n        }\n        showUserText(line, \"\" + n)\n    }\n    //% block=\"clear display\" color=#00B1ED\n    //% subcategory=Display group=\"OLED\"\n    export function oledClear() {\n        //oledcmd(DISPLAY_OFF);   //display off\n        for (let j = 0; j < 8; j++) {\n            setText(j, 0);\n            {\n                for (let i = 0; i < 16; i++)  //clear all columns\n                {\n                    putChar(' ');\n                }\n            }\n        }\n        //oledcmd(DISPLAY_ON);    //display on\n        setText(0, 0);\n    }\n    /**\n   * Create a new driver Grove - 4-Digit Display\n   * @param clkPin value of clk pin number\n   * @param dataPin value of data pin number\n   */\n    //% blockId=grove_tm1637_create block=\"connect 4-Digit cPin %cPin dPin %dPin\"\n    //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" blockSetVariable=display color=#EA5532\n    export function tm1637Create(cPin: DigitalPin, dPin: DigitalPin, intensity: number = 7, count: number = 4): TM1637LEDs {\n        let display = new TM1637LEDs();\n        display.clk = cPin\n        display.dio = dPin\n        if ((count < 1) || (count > 5)) count = 4;\n        display.count = count;\n        display.brightness = intensity;\n        display.init();\n        return display;\n    }\n    export class TM1637LEDs {\n        buf: Buffer;\n        clk: DigitalPin;\n        dio: DigitalPin;\n        _ON: number;\n        brightness: number;\n        count: number;  // number of LEDs\n        /**\n         * initial TM1637\n         */\n        init(): void {\n            pins.digitalWritePin(this.clk, 0);\n            pins.digitalWritePin(this.dio, 0);\n            this._ON = 8;\n            this.buf = pins.createBuffer(this.count);\n            this.clear();\n        }\n        /**\n         * Start \n         */\n        _start() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        /**\n         * Stop\n         */\n        _stop() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.dio, 1);\n        }\n        /**\n         * send command1\n         */\n        _write_data_cmd() {\n            this._start();\n            this._write_byte(TM1637_CMD1);\n            this._stop();\n        }\n        /**\n         * send command3\n         */\n        _write_dsp_ctrl() {\n            this._start();\n            this._write_byte(TM1637_CMD3 | this._ON | this.brightness);\n            this._stop();\n        }\n        /**\n         * send a byte to 2-wire interface\n         */\n        _write_byte(b: number) {\n            for (let i = 0; i < 8; i++) {\n                pins.digitalWritePin(this.dio, (b >> i) & 1);\n                pins.digitalWritePin(this.clk, 1);\n                pins.digitalWritePin(this.clk, 0);\n            }\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _intensity(val: number = 7) {\n            this._ON = 8;\n            this.brightness = val - 1;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n        /**\n         * set data to TM1637, with given bit\n         */\n        _dat(bit: number, dat: number) {\n            this._write_data_cmd();\n            this._start();\n            this._write_byte(TM1637_CMD2 | (bit % this.count))\n            this._write_byte(dat);\n            this._stop();\n            this._write_dsp_ctrl();\n        }\n        /**\n         * Show a single number from 0 to 9 at a specified digit of Grove - 4-Digit Display\n         * @param dispData value of number\n         * @param bitAddr value of bit number\n         */\n        //% blockId=grove_tm1637_display_bit block=\"%display|show single number|%num|at digit|%bit\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        //% bit.defl=1 bit.min=0 bit.max=9\n        showbit(num: number = 5, bit: number = 0) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            this.buf[bit % this.count] = _SEGMENTS[num % 16]\n            this._dat(bit, _SEGMENTS[num % 16])\n        }\n        /**\n         * Show a 4 digits number on display\n         * @param dispData value of number\n         */\n        //% blockId=grove_tm1637_display_number block=\"%display|show number|%num\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        showNumber(num: number) {\n            if (num < 0) {\n                num = -num\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n                this._dat(0, 0x40) // '-'\n            }\n            else {\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n            }\n        }\n        /**\n         * show or hide dot point. \n         * @param bit is the position, eg: 1\n         * @param show is show/hide dp, eg: true\n         */\n        //% blockId=\"TM1637_showDP\" block=\"%display|DotPoint at %bit|show $show\"\n        //% show.shadow=\"toggleOnOff\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        showDP(bit: number = 1, show: boolean = true) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            bit = bit % this.count\n            if (show) this._dat(bit, this.buf[bit] | 0x80)\n            else this._dat(bit, this.buf[bit] & 0x7F)\n        }\n        /**\n         * clear LED. \n         */\n        //% blockId=\"TM1637_clear\" block=\"clear display %display\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        clear() {\n            for (let i = 0; i < this.count; i++) {\n                this._dat(i, 0)\n                this.buf[i] = 0\n            }\n        }\n    }\n    //% shim=sendBufferAsm\n    function sendBuffer(buf: Buffer, pin: DigitalPin) {\n    }\n    export class Strip {\n        buf: Buffer;\n        pin: DigitalPin;\n        // TODO: encode as bytes instead of 32bit\n        brightness: number;\n        start: number; // start offset in LED strip\n        _length: number; // number of LEDs\n        _mode: NeoPixelMode;\n        _matrixWidth: number; // number of leds in a matrix - if any\n\n        /**\n         * Shows all LEDs to a given color (range 0-255 for r, g, b).\n         * @param rgb RGB color of the LED\n         */\n        //% blockId=\"neopixel_set_strip_color\" block=\"%strip|show color %rgb=neopixel_colors\"\n        //% weight=85 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        showColor(rgb: number) {\n            rgb = rgb >> 0;\n            this.setAllRGB(rgb);\n            this.show();\n        }\n\n        /**\n         * Shows a rainbow pattern on all LEDs.\n         * @param startHue the start hue value for the rainbow, eg: 1\n         * @param endHue the end hue value for the rainbow, eg: 360\n         */\n        //% blockId=\"neopixel_set_strip_rainbow\" block=\"%strip|show rainbow from %startHue|to %endHue\"\n        //% weight=85 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        showRainbow(startHue: number = 1, endHue: number = 360) {\n            if (this._length <= 0) return;\n\n            startHue = startHue >> 0;\n            endHue = endHue >> 0;\n            const saturation = 100;\n            const luminance = 50;\n            const steps = this._length;\n            const direction = HueInterpolationDirection.Clockwise;\n\n            //hue\n            const h1 = startHue;\n            const h2 = endHue;\n            const hDistCW = ((h2 + 360) - h1) % 360;\n            const hStepCW = Math.idiv((hDistCW * 100), steps);\n            const hDistCCW = ((h1 + 360) - h2) % 360;\n            const hStepCCW = Math.idiv(-(hDistCCW * 100), steps);\n            let hStep: number;\n            if (direction === HueInterpolationDirection.Clockwise) {\n                hStep = hStepCW;\n            } else if (direction === HueInterpolationDirection.CounterClockwise) {\n                hStep = hStepCCW;\n            } else {\n                hStep = hDistCW < hDistCCW ? hStepCW : hStepCCW;\n            }\n            const h1_100 = h1 * 100; //we multiply by 100 so we keep more accurate results while doing interpolation\n\n            //sat\n            const s1 = saturation;\n            const s2 = saturation;\n            const sDist = s2 - s1;\n            const sStep = Math.idiv(sDist, steps);\n            const s1_100 = s1 * 100;\n\n            //lum\n            const l1 = luminance;\n            const l2 = luminance;\n            const lDist = l2 - l1;\n            const lStep = Math.idiv(lDist, steps);\n            const l1_100 = l1 * 100\n\n            //interpolate\n            if (steps === 1) {\n                this.setPixelColor(0, hsl(h1 + hStep, s1 + sStep, l1 + lStep))\n            } else {\n                this.setPixelColor(0, hsl(startHue, saturation, luminance));\n                for (let i = 1; i < steps - 1; i++) {\n                    const h = Math.idiv((h1_100 + i * hStep), 100) + 360;\n                    const s = Math.idiv((s1_100 + i * sStep), 100);\n                    const l = Math.idiv((l1_100 + i * lStep), 100);\n                    this.setPixelColor(i, hsl(h, s, l));\n                }\n                this.setPixelColor(steps - 1, hsl(endHue, saturation, luminance));\n            }\n            this.show();\n        }\n\n        /**\n         * Set LED to a given color (range 0-255 for r, g, b).\n         * You need to call ``show`` to make the changes visible.\n         * @param pixeloffset position of the NeoPixel in the strip\n         * @param rgb RGB color of the LED\n         */\n        //% blockId=\"neopixel_set_pixel_color\" block=\"%strip|set pixel color at %pixeloffset|to %rgb=neopixel_colors\"\n        //% weight=80 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setPixelColor(pixeloffset: number, rgb: number): void {\n            this.setPixelRGB(pixeloffset >> 0, rgb >> 0);\n        }\n\n        /**\n         * Send all the changes to the strip.\n         */\n        //% blockId=\"neopixel_show\" block=\"%strip|show\" \n        //% weight=79\n        //% parts=\"neopixel\" subcategory=Neopixel\n        show() {\n            sendBuffer(this.buf, this.pin);\n        }\n\n        /**\n         * Turn off all LEDs.\n         * You need to call ``show`` to make the changes visible.\n         */\n        //% blockId=\"neopixel_clear\" block=\"%strip|clear\"\n        //% weight=76 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        clear(): void {\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.fill(0, this.start * stride, this._length * stride);\n        }\n\n        /**\n         * Set the brightness of the strip. This flag only applies to future operation.\n         * @param brightness a measure of LED brightness in 0-255. eg: 255\n         */\n        //% blockId=\"neopixel_set_brightness\" block=\"%strip|set brightness %brightness\" \n        //% weight=59 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setBrightness(brightness: number): void {\n            this.brightness = brightness & 0xff;\n        }\n        /**\n         * Gets the number of pixels declared on the strip\n         */\n        //% blockId=\"neopixel_length\" block=\"%strip|length\" blockGap=8\n        //% subcategory=\"Neopixel\"\n        //% weight=60 advanced=true\n        length() {\n            return this._length;\n        }\n        /**\n         * Create a range of LEDs.\n         * @param start offset in the LED strip to start the range\n         * @param length number of LEDs in the range. eg: 4\n         */\n        //% weight=89 color=#EA5532\n        //% blockId=\"neopixel_range\" block=\"%strip|range from %start|with %length|leds\"\n        //% parts=\"neopixel\"\n        //% blockSetVariable=range subcategory=Neopixel\n        range(start: number, length: number): Strip {\n            start = start >> 0;\n            length = length >> 0;\n            let strip = new Strip();\n            strip.buf = this.buf;\n            strip.pin = this.pin;\n            strip.brightness = this.brightness;\n            strip.start = this.start + Math.clamp(0, this._length - 1, start);\n            strip._length = Math.clamp(0, this._length - (strip.start - this.start), length);\n            strip._matrixWidth = 0;\n            strip._mode = this._mode;\n            return strip;\n        }\n\n        /**\n         * Shift LEDs forward and clear with zeros.\n         * You need to call ``show`` to make the changes visible.\n         * @param offset number of pixels to shift forward, eg: 1\n         */\n        //% blockId=\"neopixel_shift\" block=\"%strip|shift pixels by %offset\" \n        //% weight=40 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        shift(offset: number = 1): void {\n            offset = offset >> 0;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.shift(-offset * stride, this.start * stride, this._length * stride)\n        }\n\n        /**\n         * Rotate LEDs forward.\n         * You need to call ``show`` to make the changes visible.\n         * @param offset number of pixels to rotate forward, eg: 1\n         */\n        //% blockId=\"neopixel_rotate\" block=\"%strip|rotate pixels by %offset\" \n        //% weight=39 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        rotate(offset: number = 1): void {\n            offset = offset >> 0;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.rotate(-offset * stride, this.start * stride, this._length * stride)\n        }\n\n        /**\n         * Set the pin where the neopixel is connected, defaults to P0.\n         */\n        //% weight=10 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setPin(pin: DigitalPin): void {\n            this.pin = pin;\n            pins.digitalWritePin(this.pin, 0);\n            // don't yield to avoid races on initialization\n        }\n\n        private setBufferRGB(offset: number, red: number, green: number, blue: number): void {\n            if (this._mode === NeoPixelMode.RGB_RGB) {\n                this.buf[offset + 0] = red;\n                this.buf[offset + 1] = green;\n            } else {\n                this.buf[offset + 0] = green;\n                this.buf[offset + 1] = red;\n            }\n            this.buf[offset + 2] = blue;\n        }\n\n        private setAllRGB(rgb: number) {\n            let red = unpackR(rgb);\n            let green = unpackG(rgb);\n            let blue = unpackB(rgb);\n\n            const br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            const end = this.start + this._length;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            for (let i = this.start; i < end; ++i) {\n                this.setBufferRGB(i * stride, red, green, blue)\n            }\n        }\n        private setPixelRGB(pixeloffset: number, rgb: number): void {\n            if (pixeloffset < 0\n                || pixeloffset >= this._length)\n                return;\n\n            let stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            pixeloffset = (pixeloffset + this.start) * stride;\n\n            let red = unpackR(rgb);\n            let green = unpackG(rgb);\n            let blue = unpackB(rgb);\n\n            let br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            this.setBufferRGB(pixeloffset, red, green, blue)\n        }\n\n    }\n\n    /**\n     * Create a new NeoPixel driver for `numleds` LEDs.\n     * @param pin the pin where the neopixel is connected.\n     * @param numleds number of leds in the strip, eg: 24,30,60,64\n     */\n    //% blockId=\"neopixel_create\" block=\"NeoPixel at pin %Rjpin|with %numleds|leds as %mode\"\n    //% weight=90 color=#EA5532\n    //% parts=\"neopixel\"\n    //% trackArgs=0,2\n    //% blockSetVariable=strip subcategory=Neopixel\n    export function create(Rjpin: DigitalRJPin, numleds: number, mode: NeoPixelMode): Strip {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        let strip = new Strip();\n        let stride = mode === NeoPixelMode.RGBW ? 4 : 3;\n        strip.buf = pins.createBuffer(numleds * stride);\n        strip.start = 0;\n        strip._length = numleds;\n        strip._mode = mode;\n        strip._matrixWidth = 0;\n        strip.setBrightness(50)\n        strip.setPin(pin)\n        return strip;\n    }\n\n    /**\n     * Converts red, green, blue channels into a RGB color\n     * @param red value of the red channel between 0 and 255. eg: 255\n     * @param green value of the green channel between 0 and 255. eg: 255\n     * @param blue value of the blue channel between 0 and 255. eg: 255\n     */\n    //% weight=1 subcategory=Neopixel color=#EA5532\n    //% blockId=\"neopixel_rgb\" block=\"red %red|green %green|blue %blue\"\n    export function rgb(red: number, green: number, blue: number): number {\n        return packRGB(red, green, blue);\n    }\n\n    /**\n     * Gets the RGB value of a known color\n    */\n    //% weight=2 subcategory=Neopixel color=#EA5532\n    //% blockId=\"neopixel_colors\" block=\"%color\"\n    export function colors(color: NeoPixelColors): number {\n        return color;\n    }\n\n    function packRGB(a: number, b: number, c: number): number {\n        return ((a & 0xFF) << 16) | ((b & 0xFF) << 8) | (c & 0xFF);\n    }\n    function unpackR(rgb: number): number {\n        let r = (rgb >> 16) & 0xFF;\n        return r;\n    }\n    function unpackG(rgb: number): number {\n        let g = (rgb >> 8) & 0xFF;\n        return g;\n    }\n    function unpackB(rgb: number): number {\n        let b = (rgb) & 0xFF;\n        return b;\n    }\n\n    /**\n     * Converts a hue saturation luminosity value into a RGB color\n     * @param h hue from 0 to 360\n     * @param s saturation from 0 to 99\n     * @param l luminosity from 0 to 99\n     */\n    //% blockId=neopixelHSL block=\"hue %h|saturation %s|luminosity %l\" subcategory=Neopixel color=#EA5532\n    export function hsl(h: number, s: number, l: number): number {\n        h = Math.round(h);\n        s = Math.round(s);\n        l = Math.round(l);\n\n        h = h % 360;\n        s = Math.clamp(0, 99, s);\n        l = Math.clamp(0, 99, l);\n        let c = Math.idiv((((100 - Math.abs(2 * l - 100)) * s) << 8), 10000); //chroma, [0,255]\n        let h1 = Math.idiv(h, 60);//[0,6]\n        let h2 = Math.idiv((h - h1 * 60) * 256, 60);//[0,255]\n        let temp = Math.abs((((h1 % 2) << 8) + h2) - 256);\n        let x = (c * (256 - (temp))) >> 8;//[0,255], second largest component of this color\n        let r$:\n            number;\n        let g$:\n            number;\n        let b$:\n            number;\n        if (h1 == 0) {\n            r$ = c;\n            g$ = x;\n            b$ = 0;\n        }\n        else if (h1 == 1) {\n            r$ = x;\n            g$ = c;\n            b$ = 0;\n        }\n        else if (h1 == 2) {\n            r$ = 0;\n            g$ = c;\n            b$ = x;\n        }\n        else if (h1 == 3) {\n            r$ = 0;\n            g$ = x;\n            b$ = c;\n        }\n        else if (h1 == 4) {\n            r$ = x;\n            g$ = 0;\n            b$ = c;\n        }\n        else if (h1 == 5) {\n            r$ = c;\n            g$ = 0;\n            b$ = x;\n        }\n        let m = Math.idiv((Math.idiv((l * 2 << 8), 100) - c), 2);\n        let r = r$ + m;\n        let g = g$ + m;\n        let b = b$ + m;\n        return packRGB(r, g, b);\n    }\n\n    export enum HueInterpolationDirection {\n        Clockwise,\n        CounterClockwise,\n        Shortest\n    }\n}\n","planetxbasic.ts":"/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#00B1ED  icon=\"\\uf005\" block=\"Connected\" blockId=\"PlanetX_Connected\"\n//% groups='[\"Digital\", \"Analog\", \"IIC Port\"]'\nnamespace Connected {\n    \n    ////////////////////////paj7620//////////////////////\n    let gesture_first_init = true\n    const initRegisterArray: number[] = [\n        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17,\n        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F,\n        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14,\n        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27,\n        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01,\n        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00,\n        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20,\n        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37,\n        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A,\n        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F,\n        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30,\n        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19,\n        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04,\n        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00,\n        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00,\n        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F,\n        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07,\n        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01,\n        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F,\n        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01,\n        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40,\n        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E,\n        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00,\n        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08,\n        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00,\n        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01,\n        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01,\n        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01\n    ];\n    \n    /////////////////////////color/////////////////////////\n    const APDS9960_ADDR = 0x39\n    const APDS9960_ENABLE = 0x80\n    const APDS9960_ATIME = 0x81\n    const APDS9960_CONTROL = 0x8F\n    const APDS9960_STATUS = 0x93\n    const APDS9960_CDATAL = 0x94\n    const APDS9960_CDATAH = 0x95\n    const APDS9960_RDATAL = 0x96\n    const APDS9960_RDATAH = 0x97\n    const APDS9960_GDATAL = 0x98\n    const APDS9960_GDATAH = 0x99\n    const APDS9960_BDATAL = 0x9A\n    const APDS9960_BDATAH = 0x9B\n    const APDS9960_GCONF4 = 0xAB\n    const APDS9960_AICLEAR = 0xE7\n    let color_first_init = false\n\n    function i2cwrite_color(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n    function i2cread_color(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n    function rgb2hsl(color_r: number, color_g: number, color_b: number): number {\n        let Hue = 0\n        let R = color_r * 100 / 255;\n        let G = color_g * 100 / 255;\n        let B = color_b * 100 / 255;\n        let maxVal = Math.max(R, Math.max(G, B))\n        let minVal = Math.min(R, Math.min(G, B))\n        let Delta = maxVal - minVal;\n\n        if (Delta < 0) {\n            Hue = 0;\n        }\n        else if (maxVal == R && G >= B) {\n            Hue = (60 * ((G - B) * 100 / Delta)) / 100;\n        }\n        else if (maxVal == R && G < B) {\n            Hue = (60 * ((G - B) * 100 / Delta) + 360 * 100) / 100;\n        }\n        else if (maxVal == G) {\n            Hue = (60 * ((B - R) * 100 / Delta) + 120 * 100) / 100;\n        }\n        else if (maxVal == B) {\n            Hue = (60 * ((R - G) * 100 / Delta) + 240 * 100) / 100;\n        }\n        return Hue\n    }\n    function initModule(): void {\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ATIME, 252)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_CONTROL, 0x03)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_GCONF4, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_AICLEAR, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x01)\n        color_first_init = true\n    }\n    function colorMode(): void {\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_ENABLE) | 0x2;\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, tmp);\n    }\n\n    ///////////////////////////////////////////////////////MP3\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    /*\n    * Play status selection button list\n    */\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(100)\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,        \n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum Distance_Unit_List {\n        //% block=\"cm\" \n        Distance_Unit_cm,\n\n        //% block=\"foot\"\n        Distance_Unit_foot,\n    }\n    export enum ButtonStateList {\n        //% block=\"C\"\n        C,\n        //% block=\"D\"\n        D,\n        //% block=\"C+D\"\n        CD\n    }\n    export enum GestureType {\n        //% block=\"None\"\n        None = 0,\n        //% block=\"Right\"\n        Right = 1,\n        //% block=\"Left\"\n        Left = 2,\n        //% block=\"Up\"\n        Up = 3,\n        //% block=\"Down\"\n        Down = 4,\n        //% block=\"Forward\"\n        Forward = 5,\n        //% block=\"Backward\"\n        Backward = 6,\n        //% block=\"Clockwise\"\n        Clockwise = 7,\n        //% block=\"Anticlockwise\"\n        Anticlockwise = 8,\n        //% block=\"Wave\"\n        Wave = 9\n    }\n    export enum ColorList {\n        //% block=\"Red\"\n        red,\n        //% block=\"Green\"\n        green,\n        //% block=\"Blue\"\n        blue,\n        //% block=\"Cyan\"\n        cyan,\n        //% block=\"Magenta\"\n        magenta,\n        //% block=\"Yellow\"\n        yellow,\n        //% block=\"White\"\n        white\n    }\n\n    ///////////////////////////////////blocks/////////////////////////////\n\n    //% blockId=\"readwaterLevel\" block=\"Water level sensor %Rjpin value(0~100)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function waterLevel(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let voltage = 0, waterlevel = 0;\n        voltage = pins.map(\n            pins.analogReadPin(pin),\n            50,\n            600,\n            0,\n            100\n        );\n        if (voltage < 0) {\n            voltage = 0\n        }\n        waterlevel = voltage;\n        return Math.round(waterlevel)\n    }\n\n    let distance_last = 0\n\n    //% blockId=sonarbit block=\"Ultrasonic sensor pinT %tPin pinE %ePin distance %distance_unit\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% distance_unit.fieldEditor=\"gridpicker\"\n    //% distance_unit.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function ultrasoundSensor(tPin: DigitalPin, ePin: DigitalPin, distance_unit: Distance_Unit_List): number {\n        let pinT = tPin\n        let pinE = ePin\n        pins.setPull(pinT, PinPullMode.PullNone)\n        pins.digitalWritePin(pinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(pinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(pinT, 0)\n\n        // read pulse\n        let d = pins.pulseIn(pinE, PulseValue.High, 25000)\n        let version = control.hardwareVersion()\n        let distance = d * 34 / 2 / 1000\n        if (version == \"1\") {\n            distance = distance * 3 / 2\n        }\n\n        if (distance > 430) {\n            distance = 0\n        }\n\n        if (distance == 0) {\n            distance = distance_last\n            distance_last = 0\n        }\n        else {\n            distance_last = distance\n        }\n\n        switch (distance_unit) {\n            case Distance_Unit_List.Distance_Unit_cm:\n                return Math.floor(distance)  //cm\n                break\n            case Distance_Unit_List.Distance_Unit_foot:\n                return Math.floor(distance / 30.48)   //foot\n                break\n            default:\n                return 0\n        }\n    }\n\n    export class PAJ7620 {\n        private paj7620WriteReg(addr: number, cmd: number) {\n            let buf: Buffer = pins.createBuffer(2);\n            buf[0] = addr;\n            buf[1] = cmd;\n            pins.i2cWriteBuffer(0x73, buf, false);\n        }\n        private paj7620ReadReg(addr: number): number {\n            let buf: Buffer = pins.createBuffer(1);\n            buf[0] = addr;\n            pins.i2cWriteBuffer(0x73, buf, false);\n            buf = pins.i2cReadBuffer(0x73, 1, false);\n            return buf[0];\n        }\n        private paj7620SelectBank(bank: number) {\n            if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n        }\n        private paj7620Init() {\n            let temp = 0;\n            this.paj7620SelectBank(0);\n            temp = this.paj7620ReadReg(0);\n            if (temp == 0x20) {\n                for (let i = 0; i < 438; i += 2) {\n                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n                }\n            }\n            this.paj7620SelectBank(0);\n        }\n        init() {\n            this.paj7620Init();\n            basic.pause(200);\n        }\n        read(): number {\n            let data = 0, result = 0;\n            data = this.paj7620ReadReg(0x43);\n            switch (data) {\n                case 0x01:\n                    result = GestureType.Right;\n                    break;\n                case 0x02:\n                    result = GestureType.Left;\n                    break;\n                case 0x04:\n                    result = GestureType.Up;\n                    break;\n                case 0x08:\n                    result = GestureType.Down;\n                    break;\n                case 0x10:\n                    result = GestureType.Forward;\n                    break;\n                case 0x20:\n                    result = GestureType.Backward;\n                    break;\n                case 0x40:\n                    result = GestureType.Clockwise;\n                    break;\n                case 0x80:\n                    result = GestureType.Anticlockwise;\n                    break;\n                default:\n                    data = this.paj7620ReadReg(0x44);\n                    if (data == 0x01)\n                        result = GestureType.Wave;\n                    break;\n            }\n            return result;\n        }\n    }\n    const gestureEventId = 3100;\n    let lastGesture = GestureType.None;\n    let paj7620 = new PAJ7620();\n    //% blockId= gesture_create_event block=\"Gesture sensor IIC port is %gesture\"\n    //% gesture.fieldEditor=\"gridpicker\" gesture.fieldOptions.columns=3\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function onGesture(gesture: GestureType, handler: () => void) {\n        control.onEvent(gestureEventId, gesture, handler);\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        control.inBackground(() => {\n            while (true) {\n                const gesture = paj7620.read();\n                if (gesture != lastGesture) {\n                    lastGesture = gesture;\n                    control.raiseEvent(gestureEventId, lastGesture);\n                }\n                basic.pause(200);\n            }\n        })\n    }\n\n    //% blockId= gesture_get_event block=\"Gesture sensor IIC port detects\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function getGesture(): number {\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        const gesture = paj7620.read();\n        return gesture\n    }\n\n\n\n\n    //% blockId=apds9960_readcolor block=\"Color sensor IIC port color HUE(0~360)\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readColor(): number {\n        if (color_first_init == false) {\n            initModule()\n            colorMode()\n        }\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        while (!tmp) {\n            basic.pause(5);\n            tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        }\n        let c = i2cread_color(APDS9960_ADDR, APDS9960_CDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_CDATAH) * 256;\n        let r = i2cread_color(APDS9960_ADDR, APDS9960_RDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_RDATAH) * 256;\n        let g = i2cread_color(APDS9960_ADDR, APDS9960_GDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_GDATAH) * 256;\n        let b = i2cread_color(APDS9960_ADDR, APDS9960_BDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_BDATAH) * 256;\n        // map to rgb based on clear channel\n        let avg = c / 3;\n        r = r * 255 / avg;\n        g = g * 255 / avg;\n        b = b * 255 / avg;\n        //let hue = rgb2hue(r, g, b);\n        let hue = rgb2hsl(r, g, b)\n        return hue\n    }\n    //% block=\"Color sensor IIC port detects %color\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% color.fieldEditor=\"gridpicker\" color.fieldOptions.columns=3\n    export function checkColor(color: ColorList): boolean {\n        let hue = readColor()\n        switch (color) {\n            case ColorList.red:\n                if (hue > 330 || hue < 20) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.green:\n                if (hue > 120 && 180 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.blue:\n                if (hue > 210 && 270 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.cyan:\n                if (hue > 190 && 210 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.magenta:\n                if (hue > 260 && 330 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.yellow:\n                if (hue > 30 && 120 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.white:\n                if (hue >= 180 && 190 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n        }\n    }\n\n    //% blockId=\"potentiometer\" block=\"Trimpot %Rjpin analog value\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Input color=#E2C438 group=\"Analog\"\n    export function trimpot(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        return pins.analogReadPin(pin)\n    }\n    //% blockId=buttonab block=\"Button %Rjpin %button is pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonCD(Rjpin: DigitalRJPin, button: ButtonStateList): boolean {\n        let pinC = DigitalPin.P1\n        let pinD = DigitalPin.P2\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pinC = DigitalPin.P1\n                pinD = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pinC = DigitalPin.P2\n                pinD = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pinC = DigitalPin.P13\n                pinD = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pinC = DigitalPin.P15\n                pinD = DigitalPin.P16\n                break;\n            case DigitalRJPin.P3:\n                pinC = DigitalPin.P3\n                pinD = DigitalPin.P4\n                break;\n        }\n        pins.setPull(pinC, PinPullMode.PullUp)\n        pins.setPull(pinD, PinPullMode.PullUp)\n        if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 0 && button == ButtonStateList.CD) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinC) == 0 && pins.digitalReadPin(pinD) == 1 && button == ButtonStateList.C) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 1 && button == ButtonStateList.D) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    export enum ButtonState {\n        //% block=\"on\"\n        on = 1,\n        //% block=\"off\"\n        off = 2\n    }\n\n    const buttonEventSource = 5000\n    const buttonEventValue = {\n        CD_pressed: ButtonState.on,\n        CD_unpressed: ButtonState.off\n    }\n\n    //% block=\"on button %Rjpin %button pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=4\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonEvent(Rjpin: DigitalRJPin, button: ButtonStateList, handler: () => void) {\n        let ButtonPin_C = DigitalPin.P1\n        let ButtonPin_D = DigitalPin.P2\n        let pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P0\n        let pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                ButtonPin_C = DigitalPin.P1\n                ButtonPin_D = DigitalPin.P8\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P1\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P8\n                break;\n            case DigitalRJPin.J2:\n                ButtonPin_C = DigitalPin.P2\n                ButtonPin_D = DigitalPin.P12\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P2\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P12\n                break;\n            case DigitalRJPin.J3:\n                ButtonPin_C = DigitalPin.P13\n                ButtonPin_D = DigitalPin.P14\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P13\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P14\n                break;\n            case DigitalRJPin.J4:\n                ButtonPin_C = DigitalPin.P15\n                ButtonPin_D = DigitalPin.P16\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P15\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P16\n                break;\n            case DigitalRJPin.P3:\n                ButtonPin_C = DigitalPin.P3\n                ButtonPin_D = DigitalPin.P4\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P3\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P4\n                break;\n        }\n        if (button == ButtonStateList.C) {\n            pins.setPull(ButtonPin_C, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_C, PinEventType.Edge)\n            control.onEvent(pinEventSource_C, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.D) {\n            pins.setPull(ButtonPin_D, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_D, PinEventType.Edge)\n            control.onEvent(pinEventSource_D, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.CD) {\n            loops.everyInterval(50, function () {\n                if (pins.digitalReadPin(ButtonPin_C) == 0 && pins.digitalReadPin(ButtonPin_D) == 0) {\n                    control.raiseEvent(buttonEventSource, buttonEventValue.CD_pressed)\n                }\n            })\n            control.onEvent(buttonEventSource, buttonEventValue.CD_pressed, handler)\n        }\n    }\n\n    //% blockId=fans block=\"Motor fan %Rjpin toggle to $fanstate || speed %speed \\\\%\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% fanstate.shadow=\"toggleOnOff\"\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    //% speed.min=0 speed.max=100\n    //% expandableArgumentMode=\"toggle\"\n    export function motorFan(Rjpin: DigitalRJPin, fanstate: boolean, speed: number = 100): void {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.J3:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.J4:\n                pin = AnalogPin.P15\n                break;\n        }\n        if (fanstate) {\n            pins.analogSetPeriod(pin, 100)\n            pins.analogWritePin(pin, Math.map(speed, 0, 100, 0, 1023))\n        }\n        else {\n            pins.analogWritePin(pin, 0)\n            speed = 0\n        }\n    }\n\n\n    //% blockId=\"setLoopFolder\" block=\"loop play all the MP3s in the folder:$folderNum\"\n    //% folderNum.defl=\"01\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setLoopFolder(folderNum: string): void {\n        CMD = 0x17\n        para1 = 0\n        para2 = parseInt(folderNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    //% blockId=\"folderPlay\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum || repeatList: $myAns\"\n    //% folderNum.defl=\"01\" fileNum.defl=\"001\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function folderPlay(folderNum: string, fileNum: string, myAns: boolean = false): void {\n        CMD = 0x0F\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        if (myAns)\n            execute(0x19)\n    }\n\n    //% blockId=\"playFolderFilePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFilePort(folderNum: string, fileNum: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFolderFileVolumePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum with volume:$theVolume usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" theVolume.defl=\"10\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFileVolumePort(folderNum: string, fileNum: string, theVolume: string, Rjpin: DigitalRJPin): void {\n        \n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        \n        let volume = parseInt(theVolume)\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(200)\n\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"volumePort\" \n    //% block=\"set MP3 volume:$theVolume usingPin:$Rjpin\"\n    //% theVolume.defl=\"10\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function volumePort(theVolume: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        let volume = parseInt(theVolume)\n        if (volume > 30) {\n            volume = 30\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(300)\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n\n\n    //% blockId=\"setTracking\" \n    //% block=\"play the mp3 in order of:%tracking || repeatList: $myAns\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% tracking.defl=1\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setTracking(tracking: number, myAns: boolean = false): void {\n        CMD = 0x03\n        para1 = 0x00\n        para2 = tracking\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        execute(0x0D)\n        if (myAns)\n            execute(0x19)\n    }\n    //% blockId=MP3execute block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=\"setVolume\" block=\"Set volume(0~25):%volume\"\n    //% volume.min=0 volume.max=25\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setVolume(volume: number): void {\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 0x06\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=MP3setPort block=\"Set the MP3 port to %Rjpin\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function MP3SetPort(Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        setVolume(25)\n    }\n}","notlegos.ts":"// NotLegos Blocks\n\n//% block=\"Not LEGOs\" color=#0031AF weight=1000 icon=\"\\uf3a5\"\n//% groups=['MP3\",'Display', 'Laser', 'others']\nnamespace notLegos {\n\n    // Variables for MP3 and Volume Pot\n    let isPot = false\n    let potPin = AnalogPin.P0\n    let mp3bits = 0\n    let mp3Apin = SerialPin.P0\n    let mp3Bpin = SerialPin.P0\n    let mp3Cpin = SerialPin.P0\n    let mp3Avolume = 1\n    let mp3Bvolume = 1\n    let mp3Cvolume = 1\n    let relativeCvolume = 1\n    let lastMP3bit = \"\"\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    let mp3musicPin = null\n    let mp3music = false\n    let mp3voicePin = null\n    let mp3voice = false\n    let mp3sfxPin = null\n    let mp3sfx = false\n\n    // String Arrays for Full Player Sound Sets and Shuffled Playlists Thereof\n    let PlayerAwaitingMusic: string[] = []\n    let PlayerFailure: string[] = []\n    let PlayerHurry: string[] = []\n    let PlayerIntro: string[] = []\n    let PlayerIntroMusic: string[] = []\n    let PlayerLevelMusic: string[] = []\n    let PlayerLost: string[] = []\n    let PlayerLostMusic: string[] = []\n    let PlayerName: string[] = []\n    let PlayerNay: string[] = []\n    let PlayerOuch: string[] = []\n    let PlayerReady: string[] = []\n    let PlayerSuccess: string[] = []\n    let PlayerTutorialMusic: string[] = []\n    let PlayerWon: string[] = []\n    let PlayerWonMusic: string[] = []\n    let PlayerYay: string[] = []\n    let PlaylistAwaitingMusic: string[] = []\n    let PlaylistCorrect: string[] = []\n    let PlaylistExplosion: string[] = []\n    let PlaylistFailure: string[] = []\n    let PlaylistFire: string[] = []\n    let PlaylistGhost: string[] = []\n    let PlaylistHurry: string[] = []\n    let PlaylistIncorrect: string[] = []\n    let PlaylistIntro: string[] = []\n    let PlaylistLost: string[] = []\n    let PlaylistName: string[] = []\n    let PlaylistNay: string[] = []\n    let PlaylistOuch: string[] = []\n    let PlaylistReady: string[] = []\n    let PlaylistSlash: string[] = []\n    let PlaylistSpark: string[] = []\n    let PlaylistSplash: string[] = []\n    let PlaylistSuccess: string[] = []\n    let PlaylistWon: string[] = []\n    let PlaylistYay: string[] = []\n\n    // Sound Strings - Global\n    let VoiceTracks = \"10_1_90_1.75|10_2_90_3.65|10_3_50_11.5|10_4_90_0|10_5_90_0|10_6_90_4.65|10_7_90_7.15|10_8_90_4.8|10_9_90_3.75|10_10_90_5.05|10_11_90_0|10_12_90_0|10_13_90_3|10_14_90_3|10_15_90_3|10_16_90_4|10_17_90_0|10_18_90_3|10_19_90_3|10_20_90_4|10_21_90_2|10_22_90_0|10_23_90_2|10_24_90_2|10_25_90_6|10_26_90_6|10_27_90_6|10_28_90_6|10_29_90_6|10_30_90_6|10_31_90_6|10_32_90_6|10_33_90_8|10_34_90_9|10_35_90_6|10_36_90_6|10_37_90_6|10_38_90_6|10_39_90_6|10_40_90_6\".split(\"|\")\n    let CorrectSFX = \"7_1_100_4|7_2_100_8|7_3_100_8|7_4_100_6|7_5_100_10|7_6_100_8|7_7_100_6|7_8_100_4|7_9_100_17|7_10_100_9|7_11_100_4|7_12_100_8|7_13_100_12|7_14_100_7|7_15_100_10|7_16_100_9|7_17_100_10|7_18_100_9|7_19_100_8|7_20_100_4|7_21_100_7|7_22_100_26|7_23_100_5|7_24_100_4|7_25_100_10|7_26_100_7|7_27_100_7|7_28_100_6|7_29_100_7|7_30_100_7|7_31_100_12|7_32_100_4|7_33_100_6|7_34_100_6|7_35_100_6|7_36_100_6|7_37_100_5|7_38_100_3|7_39_100_6|7_40_100_6|7_41_100_6|7_42_100_8|7_43_100_6|7_44_100_8|7_45_100_6|7_46_100_5|7_47_100_5|7_48_100_12|7_49_100_3|7_50_100_7|7_51_100_8|7_52_100_11|7_53_100_6|7_54_100_2|7_55_100_5|7_56_100_7|7_57_100_8|7_58_100_7|7_59_100_6|7_60_100_7|7_61_100_6|7_62_100_8|7_63_100_5|7_64_100_5|7_65_100_7|7_66_100_9|7_67_100_6|7_68_100_6|7_69_100_7|7_70_100_10|7_71_100_7|7_72_100_5|7_73_100_6|7_74_100_8|7_75_100_3|7_76_100_3|7_77_100_6|7_78_100_7|7_79_100_4|7_80_100_6|7_81_100_2|7_82_100_3|7_83_100_3|7_84_100_1|7_85_100_3|7_86_100_6|7_87_100_7|7_88_100_5|7_89_100_3|7_90_100_5|7_91_100_3|7_92_100_3|7_93_100_2|7_94_100_3|7_95_100_3|7_96_100_1|7_99_100_1|7_100_100_1|7_101_100_1|7_102_100_1|7_103_100_1|7_104_100_3|7_105_100_1|7_106_100_1|7_107_100_4|7_108_100_4|7_109_100_1|7_110_100_1|7_111_100_1|7_112_100_1|7_113_100_1|7_114_100_2|7_115_100_1|7_116_100_1|7_117_100_1|7_118_100_1\".split(\"|\")\n    let IncorrectSFX = \"8_1_100_6|8_2_100_5|8_3_100_3|8_4_100_5|8_5_100_7|8_6_100_6|8_7_100_4|8_8_100_1|8_9_100_3|8_10_100_4|8_11_100_3|8_12_100_3|8_13_100_6|8_14_100_3|8_15_100_1|8_16_100_1|8_17_100_1|8_18_100_1|8_19_100_0|8_20_100_0|8_21_100_5|8_22_100_4|8_23_100_3|8_24_100_7\".split(\"|\")\n    let AllSFX = \"9_1_100_4.754|9_2_100_4.336|9_3_100_5.172|9_4_100_4.806|9_5_100_4.754|9_6_100_1.536|9_7_100_2.136|9_8_100_1.896|9_9_100_2.592|9_10_100_0.936|9_11_100_1.008|9_12_100_0.312|9_13_100_1.44|9_14_100_1.8|9_15_100_1.992|9_16_100_1.104|9_17_100_1.08|9_18_100_0.912|9_19_100_0.528|9_20_100_0.72|9_21_100_0.672|9_22_100_0.696|9_23_100_0.6|9_24_100_0.576|9_25_100_1.44|9_26_100_1.8|9_27_100_1.464|9_28_100_0.432|9_29_100_0.312|9_30_100_2.112|9_31_100_0.648|9_32_100_0.384|9_33_100_2.352|9_34_100_1.8|9_35_100_1.608|9_36_100_0.648|9_37_100_0.768|9_38_100_0.552|9_39_100_0.48|9_40_100_1.032|9_41_100_0.456|9_42_100_0.384|9_43_100_0.552|9_44_100_0.432|9_45_100_0.216|9_46_100_0.624|9_47_100_1.248|9_48_100_1.104|9_49_100_1.248|9_50_100_0.648|9_51_100_0.456|9_53_100_5.256|9_54_100_2.328|9_55_100_4.992|9_56_100_1.776|9_57_100_2.28|9_58_100_0.504|9_59_100_0.984|9_60_100_0.984|9_61_100_0.504|9_62_100_1.632|9_63_100_0.288|9_64_100_0.192|9_65_100_0.168|9_66_100_0.288|9_67_100_0.288|9_68_100_0.312|9_69_100_0.72|9_70_100_0.672|9_71_100_0.648|9_72_100_0.648|9_73_100_1.632|9_74_100_1.416|9_75_100_1.248|9_76_100_0.48|9_77_100_0.36|9_78_100_0.216|9_79_100_0.576|9_80_100_0.731|9_81_100_1.128|9_82_100_2.184|9_83_100_0.744|9_84_100_0.6|9_85_100_1.152|9_86_100_1.68|9_87_100_1.32|9_88_100_0.528|9_89_100_0.36|9_90_100_0.792|9_91_100_2.496|9_92_100_1.8|9_93_100_1.8|9_94_100_0.744|9_95_100_1.776|9_96_100_5.544|9_97_100_0.432|9_98_100_2.064|9_99_100_0.744|9_100_100_0.696|9_101_100_1.776|9_102_100_0.12|9_103_100_0.168|9_104_100_0.96|9_105_100_0.96|9_106_100_2.04|9_107_100_3.984|9_108_100_1.608|9_109_100_3.528|9_110_100_0.456|9_111_100_0.696|9_112_100_1.632|9_113_100_2.232\".split(\"|\")\n    let GhostSFX = \"9_1_100_4.754|9_2_100_4.336|9_3_100_5.172|9_4_100_4.806\".split(\"|\")\n    let FireSFX = \"9_6_100_1.536|9_15_100_1.992|9_53_100_5.256|9_106_100_2.04\".split(\"|\")\n    let ExplosionSFX = \"9_77_100_0.36|9_101_100_1.776|9_109_100_3.528\".split(\"|\")\n    let SplashSFX = \"9_33_100_2.352|9_34_100_1.8\".split(\"|\")\n    let SparkSFX = \"9_5_100_4.754|9_51_100_0.456|9_85_100_1.152|9_86_100_1.68|9_111_100_0.696|9_112_100_1.632\".split(\"|\")\n    let SlashSFX = \"9_10_100_0.936|9_25_100_1.44|9_28_100_0.432|9_32_100_0.384|9_50_100_0.648|9_59_100_0.984|9_63_100_0.288|9_64_100_0.192|9_65_100_0.168|9_66_100_0.288|9_67_100_0.288|9_68_100_0.312|9_69_100_0.72|9_75_100_1.248|9_76_100_0.48|9_77_100_0.36|9_78_100_0.216|9_89_100_0.36\".split(\"|\")\n    \n    // Music Strings - Super Mario Brothers\n    let SMBIntroMusic = \"1_1_75_2.808|1_2_75_3.912|1_3_75_7.81|1_4_75_4.992|1_5_75_3.918|1_6_75_12.382|1_7_75_3.204|1_8_75_6.648|1_9_75_6.168|1_10_75_7.464|1_11_75_9.36|1_12_75_9.038|1_13_75_10.605|1_14_75_3.492|1_15_75_9.613|1_16_75_3.48|1_17_75_5.58|1_18_75_5.041|1_19_75_6.336|1_20_75_5.424|1_21_75_7.2|1_22_75_5.424|1_23_75_3.317|1_24_75_7.262|1_25_75_5.59|1_26_75_5.52|1_27_75_10.776|1_28_75_4.944|1_29_75_5.496|1_30_75_4.032|1_31_75_6.264|1_32_75_3.918|1_33_75_4.44|1_34_75_10.152|1_35_75_8.097|1_36_75_7.706|1_37_75_3.317|1_38_75_6.87|1_39_75_4.466|1_40_75_5.877|1_41_75_3.432|1_42_75_7.392|1_43_75_6.768|1_44_75_2.616|1_45_75_6.269|1_46_75_1.188|1_47_75_2.088|1_48_75_2.124|1_49_75_8.228|1_50_75_15.647|1_51_75_9.064|1_52_75_10.152|1_53_75_13.008|1_54_75_14.16|1_55_75_14.236|1_56_75_15.792|1_57_75_7.392|1_58_75_4.368|1_59_75_9.384|1_60_75_7.653|1_61_75_8.76|1_62_75_8.952|1_63_75_12.024|1_64_75_4.284|1_65_75_6.048|1_66_75_9.072|1_67_75_4.68|1_68_75_6.138|1_69_75_5.208|1_70_75_9.576|1_71_75_8.045|1_72_75_8.045|1_73_75_5.407|1_74_75_3.186\".split(\"|\")\n    let SMBTutorialMusic = \"2_1_65_36|2_2_65_40|2_3_65_41|2_4_65_46|2_5_65_50|2_6_65_51|2_7_65_59|2_8_65_63|2_9_65_64|2_10_65_65|2_11_65_66|2_12_65_67|2_13_65_68|2_14_65_69|2_15_65_76|2_16_65_80|2_17_65_84|2_18_65_90|2_19_65_92|2_20_65_100|2_21_65_103|2_22_65_105|2_23_65_112|2_24_65_113|2_25_65_123|2_26_65_138|2_27_65_142|2_28_65_144|2_29_65_156|2_30_65_158|2_31_65_120|2_32_65_120|2_33_65_120|2_34_65_120|2_35_65_120|2_36_65_120\".split(\"|\")\n    let SMBAwaitingMusic = \"3_1_100_64|3_2_100_211|3_3_100_185|3_4_100_185|3_5_100_182|3_6_100_114|3_7_100_181|3_8_100_103|3_9_100_303|3_10_100_21|3_11_100_235|3_12_100_121|3_13_100_203|3_14_100_119|3_15_100_206|3_16_100_146|3_17_100_237|3_18_100_210|3_19_100_160\".split(\"|\")\n    let SMBLevelMusic = \"4_1_100_128|4_3_100_142|4_5_100_111|4_6_100_141|4_9_100_126|4_11_100_132|4_15_100_119|4_16_100_146|4_18_100_120|4_20_100_143|4_22_100_142|4_23_100_112|4_24_100_138|4_25_100_139|4_26_100_111|4_27_100_116|4_28_100_129|4_31_100_98|4_32_100_146|4_33_100_177|4_34_100_82|4_36_100_160|4_38_100_180|4_39_100_211|4_41_100_134|4_42_100_183|4_43_100_124|4_44_100_261|4_45_100_91|4_46_100_138|4_49_100_207|4_50_100_41|4_51_100_180|4_52_100_202|4_53_100_194|4_56_100_209|4_57_100_195|4_58_100_180|4_60_100_198|4_61_100_180|4_63_100_78|4_66_100_139|4_67_100_224|4_68_100_180|4_73_100_180|4_76_100_180|4_77_100_196|4_78_100_113|4_82_100_180|4_83_100_123|4_84_100_180|4_86_100_126|4_93_100_121|4_97_100_59|4_98_100_180|4_99_100_180|4_100_100_118|4_101_100_156|4_102_100_180|4_103_100_70|4_104_100_216|4_105_100_140|4_106_100_180|4_107_100_147|4_108_100_147|4_109_100_180|4_110_100_158|4_111_100_180|4_112_100_80|4_113_100_152|4_114_100_127|4_116_100_122|4_118_100_106|4_123_100_143|4_124_100_36|4_125_100_164|4_127_100_282|4_128_100_311|4_129_100_123|4_130_100_187|4_131_100_62|4_132_100_180|4_133_100_130|4_134_100_112|4_135_100_105|4_139_100_126|4_141_100_176|4_142_100_135|4_143_100_126|4_144_100_144|4_145_100_140|4_146_100_133|4_149_100_167|4_150_100_120|4_151_100_180|4_155_100_226|4_157_100_164|4_158_100_144|4_159_100_104|4_161_100_180|4_162_100_87|4_163_100_126|4_164_100_118|4_165_100_194|4_166_100_135|4_167_100_50|4_168_100_109|4_169_100_180|4_170_100_133|4_171_100_180|4_172_100_91|4_173_100_138|4_176_100_120|4_177_100_81|4_178_100_150|4_179_100_153|4_180_100_104|4_181_100_112\".split(\"|\")\n    let SMBWonMusic = \"5_1_100_4|5_2_100_17|5_3_100_29|5_4_100_172|5_5_100_13|5_6_100_248|5_7_100_11|5_8_100_445|5_9_100_241|5_10_100_244|5_11_100_20|5_12_100_7|5_13_100_28|5_14_100_74|5_15_100_15|5_16_100_74|5_17_100_17|5_18_100_17|5_19_100_15|5_20_100_38|5_21_100_42|5_22_100_67|5_23_100_8|5_24_100_8|5_25_100_13|5_26_100_17|5_27_100_5|5_28_100_122|5_29_100_226|5_30_100_79\".split(\"|\")\n    let SMBLostMusic = \"6_1_100_87|6_2_100_31|6_3_100_196|6_4_100_65|6_5_100_4|6_6_100_23|6_7_100_65|6_8_100_62|6_9_100_78|6_10_100_6|6_11_100_162\".split(\"|\")\n    \n    // Player Strings - Mario\n    let MarioSoundString = \"A_21_1_100_1.5|A_21_2_100_1|I_21_3_100_3.3|A_21_4_100_1.9|A_21_5_100_2.1|I_21_6_100_1.8|I_21_7_100_1.8|R_21_8_100_0.6|R_21_9_100_1.3|R_21_10_100_1.1|R_21_11_100_0.6|R_21_12_100_0.8|R_21_13_100_1.6|R_21_14_100_1.3|R_21_15_100_1.2|R_21_16_100_1.1|R_21_17_100_1.3|R_21_18_100_1|Y_21_19_100_0.2|Y_21_20_100_0.2|Y_21_21_100_0.3|Y_21_22_100_0.5|Y_21_23_100_0.6|Y_21_24_100_0.6|Y_21_25_100_0.6|Y_21_26_100_0.6|Y_21_27_100_0.6|Y_21_28_100_0.6|Y_21_29_100_0.7|Y_21_30_100_0.7|Y_21_31_100_0.7|Y_21_32_100_0.7|Y_21_33_100_0.7|Y_21_34_100_0.8|Y_21_35_100_0.8|Y_21_36_100_0.8|Y_21_37_100_0.8|Y_21_38_100_0.8|Y_21_39_100_0.8|Y_21_40_100_0.9|Y_21_41_100_0.9|Y_21_42_100_0.9|Y_21_43_100_0.9|Y_21_44_100_0.9|Y_21_45_100_0.9|Y_21_46_100_0.9|Y_21_47_100_1|Y_21_48_100_1|Y_21_49_100_1|Y_21_50_100_1|Y_21_51_100_1.1|Y_21_52_100_1.1|Y_21_53_100_1.1|Y_21_54_100_1.2|Y_21_55_100_1.2|Y_21_56_100_1.2|Y_21_57_100_1.2|Y_21_58_100_1.3|Y_21_59_100_1.3|Y_21_60_100_1.3|Y_21_61_100_1.4|Y_21_62_100_1.4|S_21_63_100_1|S_21_64_100_1.6|S_21_65_100_1.7|S_21_66_100_1.7|S_21_67_100_1.9|S_21_68_100_2.1|S_21_69_100_2.2|S_21_70_100_2.4|S_21_71_100_2.4|S_21_72_100_2.5|W_21_73_100_1.8|W_21_74_100_2|W_21_75_100_2.2|W_21_76_100_2.6|W_21_77_100_2.9|O_21_78_100_0.6|O_21_79_100_0.4|O_21_80_100_0.4|O_21_81_100_1.1|O_21_82_100_1.5|O_21_83_100_0.8|O_21_84_100_0.7|O_21_85_100_0.8|O_21_86_100_0.9|O_21_87_100_1.3|O_21_88_100_0.5|O_21_89_100_1|O_21_90_100_1|O_21_91_100_0.4|O_21_92_100_0.5|O_21_93_100_0.9|O_21_94_100_0.4|O_21_95_100_0.4|N_21_96_100_1|N_21_97_100_1.1|N_21_98_100_1|N_21_99_100_0.6|N_21_100_100_0.9|N_21_101_100_1.4|N_21_102_100_1.7|N_21_103_100_1.3|N_21_104_100_0.6|N_21_105_100_1.4|N_21_106_100_0.8|N_21_107_100_1.1|N_21_108_100_1.1|N_21_109_100_0.8|N_21_110_100_1.7|N_21_111_100_2.4|I_21_112_100_0.8|I_21_113_100_0.9|F_21_114_100_1.1|F_21_115_100_2.5|F_21_116_100_2.5|F_21_117_100_1.4|L_21_118_100_3.4|L_21_119_100_3.5|L_21_120_100_4.4|L_21_121_100_1.5|H_21_122_100_44.4\"\n\n    // BLOCK - Set the Player's Sounds\n    //% blockId=nl_player_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% weight=101\n    //% block=\"Set player to $player\"\n    export function setSounds(player: string): void {\n        let theSound = \"\"\n        let thisLetter = \"\"\n        let series = \"\"\n        let soundStrings: string[] = []\n        if (player == \"Mario\") {\n            soundStrings = MarioSoundString.split(\"|\")\n            series = \"SMB\"\n        }\n        if (series == \"SMB\") {\n            PlayerIntroMusic = SMBIntroMusic\n            PlayerTutorialMusic = SMBTutorialMusic\n            PlayerAwaitingMusic = SMBAwaitingMusic\n            PlayerLevelMusic = SMBLevelMusic\n            PlayerWonMusic = SMBWonMusic\n            PlayerLostMusic = SMBLostMusic\n        }\n        for (let sString of soundStrings) {\n            thisLetter = sString.charAt(0)\n            theSound = sString.substr(2, sString.length - 2)\n            if (thisLetter == \"A\") {\n                PlayerName.push(theSound)\n            } else if (thisLetter == \"R\") {\n                PlayerReady.push(theSound)\n            } else if (thisLetter == \"Y\") {\n                PlayerYay.push(theSound)\n            } else if (thisLetter == \"I\") {\n                PlayerIntro.push(theSound)\n            } else if (thisLetter == \"N\") {\n                PlayerNay.push(theSound)\n            } else if (thisLetter == \"O\") {\n                PlayerOuch.push(theSound)\n            } else if (thisLetter == \"S\") {\n                PlayerSuccess.push(theSound)\n            } else if (thisLetter == \"F\") {\n                PlayerFailure.push(theSound)\n            } else if (thisLetter == \"W\") {\n                PlayerWon.push(theSound)\n            } else if (thisLetter == \"L\") {\n                PlayerLost.push(theSound)\n            } else if (thisLetter == \"H\") {\n                PlayerHurry.push(theSound)\n            }\n        }\n    }    \n    \n    // Internal Function - Take a Sound from a Playlist After Filling it from a Soundbank if it's Empty\n    function takeReplenish(Playlist: any[], Soundbank: any[]) {\n        let returnSound = \"\"\n        returnSound = \"\"\n        if (Playlist.length == 0) {\n            for (let index = 0; index <= Soundbank.length - 1; index++) {\n                if (index == 0) {\n                    Playlist.push(Soundbank[index])\n                } else if (index >= 1) {\n                    Playlist.insertAt(randint(0, index), Soundbank[index])\n                }\n            }\n        }\n        returnSound = Playlist.shift()\n        return returnSound\n    }\n\n    // BLOCK - Fetch a Sound of a Type from a Category\n    //% blockId=nl_get_soundstring\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% weight=101\n    //% block=\"Get $Category sound $Type\"\n    export function getSoundString(Category: string, Type: string): string {\n        let returnString = \"\"\n        if (Category == \"Voice\") {\n            returnString = VoiceTracks[parseFloat(Type)]\n        } else if (Category == \"Player\") {\n            if (Type == \"Name\") {\n                returnString = takeReplenish(PlaylistName, PlayerName)\n            } else if (Type == \"Intro\") {\n                returnString = takeReplenish(PlaylistIntro, PlayerIntro)\n            } else if (Type == \"Ready\") {\n                returnString = takeReplenish(PlaylistReady, PlayerReady)\n            } else if (Type == \"Yay\") {\n                returnString = takeReplenish(PlaylistYay, PlayerYay)\n            } else if (Type == \"Success\") {\n                returnString = takeReplenish(PlaylistSuccess, PlayerSuccess)\n            } else if (Type == \"Nay\") {\n                returnString = takeReplenish(PlaylistNay, PlayerNay)\n            } else if (Type == \"Failure\") {\n                returnString = takeReplenish(PlaylistFailure, PlayerFailure)\n            } else if (Type == \"Won\") {\n                returnString = takeReplenish(PlaylistWon, PlayerWon)\n            } else if (Type == \"Lost\") {\n                returnString = takeReplenish(PlaylistLost, PlayerLost)\n            } else if (Type == \"Hurry\") {\n                returnString = takeReplenish(PlaylistHurry, PlayerHurry)\n            }\n        } else if (Category == \"SFX\") {\n            if (Type == \"Correct\") {\n                returnString = takeReplenish(PlaylistCorrect, CorrectSFX)\n            } else if (Type == \"Incorrect\") {\n                returnString = takeReplenish(PlaylistIncorrect, IncorrectSFX)\n            } else if (Type == \"Ghost\") {\n                returnString = takeReplenish(PlaylistGhost, GhostSFX)\n            } else if (Type == \"Fire\") {\n                returnString = takeReplenish(PlaylistFire, FireSFX)\n            } else if (Type == \"Explosion\") {\n                returnString = takeReplenish(PlaylistExplosion, ExplosionSFX)\n            } else if (Type == \"Splash\") {\n                returnString = takeReplenish(PlaylistSplash, SplashSFX)\n            } else if (Type == \"Spark\") {\n                returnString = takeReplenish(PlaylistSpark, SparkSFX)\n            } else if (Type == \"Slash\") {\n                returnString = takeReplenish(PlaylistSlash, SlashSFX)\n            }\n        } else if (Category == \"Music\") {\n            if (Type == \"Intro\") {\n                let PlaylistIntroMusic: number[] = []\n                returnString = takeReplenish(PlaylistIntroMusic, PlayerIntroMusic)\n            } else if (Type == \"Tutorial\") {\n                let PlaylistTutorialMusic: number[] = []\n                returnString = takeReplenish(PlaylistTutorialMusic, PlayerTutorialMusic)\n            } else if (Type == \"Awaiting\") {\n                returnString = takeReplenish(PlaylistAwaitingMusic, PlayerAwaitingMusic)\n            } else if (Type == \"Level\") {\n                let PlaylistLevelMusic: number[] = []\n                returnString = takeReplenish(PlaylistLevelMusic, PlayerLevelMusic)\n            } else if (Type == \"Won\") {\n                let PlaylistWonMusic: number[] = []\n                returnString = takeReplenish(PlaylistWonMusic, PlayerWonMusic)\n            } else if (Type == \"Lost\") {\n                let PlaylistLostMusic: number[] = []\n                returnString = takeReplenish(PlaylistLostMusic, PlayerLostMusic)\n            }\n        }\n        return returnString\n    }\n\n\n    ///////////////////////////////////////////////////////MP3\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(20) // Was 100; problematic at 10\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n    function sendMP3volume(sPin: SerialPin): void {\n        let theVolume = 5\n        if (sPin == mp3Apin) {\n            theVolume = Math.round(potRead() * mp3Avolume)\n        } else if (sPin == mp3Bpin) {\n            theVolume = Math.round(potRead() * mp3Bvolume)\n        } else if (sPin == mp3Cpin) {\n            theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    function sendMP3volumeFast(sPin: SerialPin): void {\n        let theVolume = 5\n        if (sPin == mp3Apin) {\n            theVolume = Math.round(potRead() * mp3Avolume)\n        } else if (sPin == mp3Bpin) {\n            theVolume = Math.round(potRead() * mp3Bvolume)\n        } else if (sPin == mp3Cpin) {\n            theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    function sendMP3play(folderNum: string, fileNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    //% blockId=\"playFileNl\" \n    //% block=\"Play length of file:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n\n    export function playFile(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P16\n        stringParts = soundString.split(\"_\")\n        let theFile = stringParts[0]\n        let theVolume = stringParts[1]\n        let theLength = stringParts[2]\n        sendMP3file(theFile, theVolume, sPin)\n        return parseFloat(theLength) * 1000\n    }\n    function sendMP3file(fileNum: string, volumeNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 3\n        para1 = parseInt(fileNum)\n        para2 = parseInt(volumeNum)\n        para1 = parseInt(\"0\")\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFileNl2\" \n    //% block=\"Play2 length of file:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n\n    export function playFile2(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P16\n        stringParts = soundString.split(\"_\")\n        let theFile = stringParts[0]\n        let theVolume = stringParts[1]\n        let theLength = stringParts[2]\n        sendMP3file2(theFile, theVolume, sPin)\n        return parseFloat(theLength) * 1000\n    }\n    function sendMP3file2(fileNum: string, volumeNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 15\n        para1 = parseInt(fileNum)\n        para2 = parseInt(volumeNum)\n        para1 = parseInt(\"1\")\n        para2 = parseInt(\"1\")\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=nl_backgroundVolume\n    //% block=\"Set background volume to:%relativeVolume\"\n    //% subcategory=\"MP3\" group=\"MP3\"\n    export function sendBackgroundVolume(relativeVolume: number): void {\n        relativeCvolume = relativeVolume/100\n\n        let sPin = mp3Cpin\n        let theVolume = Math.round(potRead() * mp3Cvolume * relativeVolume / 100)\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=MP3execute2 block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n  \n    //% blockId=notlegos_pot_read\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Trimpot analog value\"\n    export function potRead() {\n        if(isPot){\n            return Math.round(pins.map(pins.analogReadPin(potPin), 0, 1023, 0, 30))\n        } else{\n            return 5\n        }\n    }\n\n    //% blockId=notlegos_relCread\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return background volume\"\n    export function getBackgroundVolume() {\n\n            return relativeCvolume\n\n    }\n    //% blockId=notlegos_mp3Avolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3A volume\"\n    export function getMP3AVolume() {\n        return potRead() * mp3Avolume\n    }\n    //% blockId=notlegos_mp3Bvolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3B volume\"\n    export function getMP3BVolume() {\n        return potRead() * mp3Bvolume\n    }\n      //% blockId=notlegos_mp3Cvolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3C volume\"\n    export function getMP3CVolume() {\n        return potRead() * mp3Cvolume * relativeCvolume\n    }\n\n    //% blockId=notlegos_pot_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Connect Volume Control Pot at pin %aPin\"\n    //% aPin.fieldEditor=\"gridpicker\"\n    export function potSet(aPin: AnalogPin): void{\n        potPin = aPin\n        isPot = true\n    }\n\n//////////////////////////////////////////////////////////\n\n    //% blockId=nl_mp3_init\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Ready MP3bit at %sPin for %type\"\n    //% dPin.fieldEditor=\"gridpicker\"\n    export function mp3setPorts(type:mp3type, sPin: SerialPin): void {\n        if (type == mp3type.music){\n            mp3musicPin = sPin\n            mp3music = true\n        } else if (type == mp3type.player){\n            mp3voicePin = sPin\n            mp3voice = true\n        } else if (type == mp3type.sfxvoice){\n            mp3sfxPin = sPin\n            mp3sfx = true\n        }\n        sendMP3volumeQuick(sPin)\n    }\n\n    function sendMP3volumeQuick(sPin: SerialPin): void {\n        let theVolume = 5\n        // if (sPin == mp3Apin) {\n        //     theVolume = Math.round(potRead() * mp3Avolume)\n        // } else if (sPin == mp3Bpin) {\n        //     theVolume = Math.round(potRead() * mp3Bvolume)\n        // } else if (sPin == mp3Cpin) {\n        //     theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        // }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    //% blockId=nl_mp3_music\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %genre music\"\n    export function mp3musicPlay(genre:musicGenre): void{\n\n    }\n\n    //% blockId=nl_mp3_say\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %saying as player\"\n    export function mp3sayPlay(saying: playerSaying): void {\n\n    }\n\n\n    //% blockId=nl_mp3_voice\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %saying as voice\"\n    export function mp3sayPlay(voice: voiceSaying): void {\n\n    }\n\n\n\n    //% blockId=\"playFolderFile\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playFolderFile(folderNum: string, fileNum: string): void {\n    \n        if (mp3bits > 0) {\n            sendMP3volume(mp3Apin)\n        }\n        if (mp3bits > 1) {\n           // sendMP3volume(mp3Bpin)\n        }\n        if (mp3bits >0) {\n            sendMP3play(folderNum, fileNum, mp3Apin)\n        }\n        if (mp3bits > 1) {\n          //  sendMP3play(folderNum, fileNum, mp3Bpin)\n        }\n    }\n\n    //% blockId=\"playsFor\" \n    //% block=\"Play length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsFor(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        if (mp3bits == 1) {\n            sPin = mp3Apin\n            mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        } else {\n            if (lastMP3bit == \"A\") {\n                    sPin = mp3Bpin\n                    mp3Bvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n                    lastMP3bit = \"B\"\n            } else {\n                sPin = mp3Apin\n                mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n            lastMP3bit = \"A\"\n            }\n        }\n        let theLength = stringParts[3]\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n        return parseFloat(theLength) * 1000 + 20\n    }\n\n    //% blockId=nl_volume_refresh\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume\"\n    export function updateVolume(): void {\n        if (mp3bits > 0) {\n            sendMP3volumeFast(mp3Apin)\n        }\n        if (mp3bits > 1) {\n            sendMP3volumeFast(mp3Bpin)\n        }\n        if (mp3bits > 2) {\n            sendMP3volumeFast(mp3Cpin)\n        }\n    }\n\n\n    //% blockId=\"nl_playsForTwo\" \n    //% block=\"Dual play length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsForTwo(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n\n        mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        mp3Bvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n\n        sendMP3volumeFast(mp3Apin)\n        sendMP3volumeFast(mp3Bpin)\n        \n        basic.pause(20)\n\n        sendMP3play(theFolder, theFile, mp3Apin)\n        sendMP3play(theFolder, theFile, mp3Bpin)\n        \n        return parseFloat(theLength) * 1000 + 20\n    }\n\n\n    //% blockId=\"nl_playsForBackground\" \n    //% block=\"Play in background length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsForBackground(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n        mp3Cvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        sPin = mp3Cpin\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n        return parseFloat(theLength) * 1000 + 20\n    }\n\n\n    //% blockId=\"nl_playBackground\" \n    //% block=\"Play in background:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playBackground(soundString: string): void {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n        mp3Cvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        sPin = mp3Cpin\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n    }\n\n\n    //% blockId=\"nl_backgroundStop\" \n    //% block=\"Stop background sound\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function stopBackgroundSound(): void {\n        serial.redirect(mp3Cpin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 0x16\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    // Nezha - Functions for Pins and Ports\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_Serial(Rjpin: DigitalRJPin): any {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = SerialPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = SerialPin.P2\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.P12:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = SerialPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = SerialPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n\n\n    export enum mp3type {\n        music,\n        player,\n        sfxvoice\n    }\n    export enum musicGenre {\n        intro,\n        tutorial,\n        awaiting,\n        level,\n        won,\n        lost\n    }\n    export enum playerSaying {\n        ready,\n        yay,\n        intro,\n        nay,\n        ouch,\n        success,\n        failure,\n        won,\n        lost,\n        hurry\n    }\n    export enum sfxType {\n        correct,\n        incorrect,\n        ghost,\n        fire,\n        explosion,\n        splash,\n        spark,\n        slash\n    }\n\n    export enum voiceSaying {\n        name,\n        begin,\n        retry,\n        next,\n        complete,\n        gameover,\n        welcome,\n        intro,\n        howto1,\n        howto2,\n        howto3,\n        howto4,\n        howto5,\n        howto6,\n        howto7,\n        howto8,\n        howto9\n    }\n\n    export enum magicianSaysSide {\n        left,\n        right\n    }\n\n    export enum magicianDifficulty {\n        easy,\n        medium,\n        hard\n    }\n\n    export enum spotName {\n        A,\n        B,\n        C,\n        D,\n        E,\n        F,\n        G,\n        H,\n        I\n    }\n\n\n\n\n\n\n    // Enum - To Support MP3\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n\n    // Enum - Nezha and Pins\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum mbPin {\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1 (Analog J1)\"\n        P1,\n        //% block=\"P2 (Analog J2)\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8 (J1)\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12 (J2)\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14 (J3)\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16 (J4)\"\n        P16,\n    }\n}\n","pxt.json":"{\n    \"name\": \"NotLegosExt\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"displaySendBuffer.asm\",\n        \"display.ts\",\n        \"planetxbasic.ts\",\n        \"notlegos.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"7.0.42\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","test.ts":""}},{"timestamp":1726873239024,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"}g^Kh@tsk|1f0]fNt=Se\">digits</variable><variable id=\"x4t~+B8#]@461X;Q^-0c\">sockLights</variable><variable id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights</variable><variable id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"Connected_oledClear\"><next><block type=\"pin_set_audio_pin_enabled\"><value name=\"enabled\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow></value><next><block type=\"device_led_enable\"><value name=\"on\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"}g^Kh@tsk|1f0]fNt=Se\">digits</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"grove_tm1637_create\"><field name=\"cPin\">DigitalPin.P7</field><field name=\"dPin\">DigitalPin.P6</field></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"x4t~+B8#]@461X;Q^-0c\">sockLights</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P11</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"x4t~+B8#]@461X;Q^-0c\">sockLights</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"x4t~+B8#]@461X;Q^-0c\">sockLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P12</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">18</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Eg1g}PwlELMuekdWY2P8\">wheelLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P13</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"*;QQG[u[F9PMmZkEKiRJ\">scoreCircle</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"device_button_event\" x=\"993\" y=\"-7\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl2\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">1_1_25_100</field></shadow></value></block></value></block></statement></block><block type=\"device_button_event\" x=\"1520\" y=\"-20\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">2_1_1</field></shadow></value></block></value></block></statement></block><block type=\"function_definition\" x=\"957\" y=\"222\"><mutation name=\"isNearly\" functionid=\"b1Q}-qv~wJN$grhC!ppp\"><arg name=\"reference\" id=\"5nona16w6rbe5o9cs7yri\" type=\"number\"></arg><arg name=\"reading\" id=\"1603v12143812bjzv2he\" type=\"number\"></arg><arg name=\"tolerance\" id=\"huqcis1hoaqr7iq5ev9lm\" type=\"number\"></arg></mutation><field name=\"function_name\">isNearly</field><value name=\"5nona16w6rbe5o9cs7yri\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reference</field></block></value><value name=\"1603v12143812bjzv2he\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reading</field></block></value><value name=\"huqcis1hoaqr7iq5ev9lm\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">tolerance</field></block></value><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_operation\"><field name=\"OP\">AND</field><value name=\"A\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value></block></value><statement name=\"DO0\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></block></value></block></statement><statement name=\"ELSE\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></block></value></block></statement></block></statement></block><block type=\"every_interval\" x=\"673\" y=\"776\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value><statement name=\"HANDLER\"><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"text_join\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P2</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P3</field></shadow></value></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">2</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">hue </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field></shadow><block type=\"apds9960_readcolor\"></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">3</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">distance </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field></shadow><block type=\"sonarbit\"><field name=\"tPin\">DigitalPin.P8</field><field name=\"ePin\">DigitalPin.P9</field><field name=\"distance_unit\">Connected.Distance_Unit_List.Distance_Unit_cm</field></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" label=\"Line\" precision=\"0\"></mutation><field name=\"SLIDER\">4</field></shadow></value><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello,ELECFREAKS</field></shadow><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">gesture </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\">World</field></shadow><block type=\"Connected_getGesture\"></block></value></block></value></block></next></block></next></block></next></block></statement></block></xml>","main.ts":"function isNearly (reference: number, reading: number, tolerance: number) {\n    if (reading >= reference - tolerance && reading <= reference + tolerance) {\n        return true\n    } else {\n        return false\n    }\n}\ninput.onButtonPressed(Button.A, function () {\n    basic.pause(notLegos.playFile2(\"1_1_25_100\"))\n})\ninput.onButtonPressed(Button.B, function () {\n    basic.pause(notLegos.playFile(\"2_1_1\"))\n})\nConnected.oledClear()\npins.setAudioPinEnabled(true)\nled.enable(false)\nbasic.pause(100)\nlet digits = Connected.tm1637Create(\nDigitalPin.P7,\nDigitalPin.P6\n)\nbasic.pause(1000)\nlet sockLights = Connected.create(Connected.DigitalRJPin.P11, 8, Connected.NeoPixelMode.RGB)\nsockLights.showColor(Connected.colors(Connected.NeoPixelColors.Blue))\nsockLights.show()\nlet wheelLights = Connected.create(Connected.DigitalRJPin.P12, 18, Connected.NeoPixelMode.RGB)\nwheelLights.showColor(Connected.colors(Connected.NeoPixelColors.Blue))\nwheelLights.show()\nlet scoreCircle = Connected.create(Connected.DigitalRJPin.P13, 8, Connected.NeoPixelMode.RGB)\nscoreCircle.showColor(Connected.colors(Connected.NeoPixelColors.Blue))\nscoreCircle.show()\nloops.everyInterval(500, function () {\n    Connected.showUserText(1, \"R\" + pins.analogReadPin(AnalogReadWritePin.P1) + \" C\" + pins.analogReadPin(AnalogReadWritePin.P2) + \" L\" + pins.analogReadPin(AnalogReadWritePin.P3))\n    Connected.showUserText(2, \"hue \" + Connected.readColor())\n    Connected.showUserText(3, \"distance \" + Connected.ultrasoundSensor(DigitalPin.P8, DigitalPin.P9, Connected.Distance_Unit_List.Distance_Unit_cm))\n    Connected.showUserText(4, \"gesture \" + Connected.getGesture())\n})\n","README.md":"\n> Open this page at [https://notlegos.github.io/castleresay/](https://notlegos.github.io/castleresay/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/castleresay** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/castleresay** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/soundbank/](https://notlegos.github.io/soundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/soundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/soundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/resoundbank/](https://notlegos.github.io/resoundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/resoundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/resoundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosext/](https://notlegos.github.io/notlegosext/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosext** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosext** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","displaySendBuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n","display.ts":"\n/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#EA5532 icon=\"\\uf110\" block=\"Connected\" blockId=\"PlanetX_Connected\" \n//% groups='[\"LED\", \"Digital\", \"Analog\", \"IIC Port\", \"OLED\", \"7-Seg 4-Dig LED Nixietube\"]'\nnamespace Connected {\n    ////////////////////////////////TM 1637/////////////////\n    let TM1637_CMD1 = 0x40;\n    let TM1637_CMD2 = 0xC0;\n    let TM1637_CMD3 = 0x80;\n    let _SEGMENTS = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];\n    /////////////////////OLED///////////////////////////////\n    let firstoledinit = true\n    const basicFont: string[] = [\n        \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", // \" \"\n        \"\\x00\\x00\\x5F\\x00\\x00\\x00\\x00\\x00\", // \"!\"\n        \"\\x00\\x00\\x07\\x00\\x07\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x14\\x7F\\x14\\x7F\\x14\\x00\\x00\", // \"#\"\n        \"\\x00\\x24\\x2A\\x7F\\x2A\\x12\\x00\\x00\", // \"$\"\n        \"\\x00\\x23\\x13\\x08\\x64\\x62\\x00\\x00\", // \"%\"\n        \"\\x00\\x36\\x49\\x55\\x22\\x50\\x00\\x00\", // \"&\"\n        \"\\x00\\x00\\x05\\x03\\x00\\x00\\x00\\x00\", // \"'\"\n        \"\\x00\\x1C\\x22\\x41\\x00\\x00\\x00\\x00\", // \"(\"\n        \"\\x00\\x41\\x22\\x1C\\x00\\x00\\x00\\x00\", // \")\"\n        \"\\x00\\x08\\x2A\\x1C\\x2A\\x08\\x00\\x00\", // \"*\"\n        \"\\x00\\x08\\x08\\x3E\\x08\\x08\\x00\\x00\", // \"+\"\n        \"\\x00\\xA0\\x60\\x00\\x00\\x00\\x00\\x00\", // \",\"\n        \"\\x00\\x08\\x08\\x08\\x08\\x08\\x00\\x00\", // \"-\"\n        \"\\x00\\x60\\x60\\x00\\x00\\x00\\x00\\x00\", // \".\"\n        \"\\x00\\x20\\x10\\x08\\x04\\x02\\x00\\x00\", // \"/\"\n        \"\\x00\\x3E\\x51\\x49\\x45\\x3E\\x00\\x00\", // \"0\"\n        \"\\x00\\x00\\x42\\x7F\\x40\\x00\\x00\\x00\", // \"1\"\n        \"\\x00\\x62\\x51\\x49\\x49\\x46\\x00\\x00\", // \"2\"\n        \"\\x00\\x22\\x41\\x49\\x49\\x36\\x00\\x00\", // \"3\"\n        \"\\x00\\x18\\x14\\x12\\x7F\\x10\\x00\\x00\", // \"4\"\n        \"\\x00\\x27\\x45\\x45\\x45\\x39\\x00\\x00\", // \"5\"\n        \"\\x00\\x3C\\x4A\\x49\\x49\\x30\\x00\\x00\", // \"6\"\n        \"\\x00\\x01\\x71\\x09\\x05\\x03\\x00\\x00\", // \"7\"\n        \"\\x00\\x36\\x49\\x49\\x49\\x36\\x00\\x00\", // \"8\"\n        \"\\x00\\x06\\x49\\x49\\x29\\x1E\\x00\\x00\", // \"9\"\n        \"\\x00\\x00\\x36\\x36\\x00\\x00\\x00\\x00\", // \":\"\n        \"\\x00\\x00\\xAC\\x6C\\x00\\x00\\x00\\x00\", // \";\"\n        \"\\x00\\x08\\x14\\x22\\x41\\x00\\x00\\x00\", // \"<\"\n        \"\\x00\\x14\\x14\\x14\\x14\\x14\\x00\\x00\", // \"=\"\n        \"\\x00\\x41\\x22\\x14\\x08\\x00\\x00\\x00\", // \">\"\n        \"\\x00\\x02\\x01\\x51\\x09\\x06\\x00\\x00\", // \"?\"\n        \"\\x00\\x32\\x49\\x79\\x41\\x3E\\x00\\x00\", // \"@\"\n        \"\\x00\\x7E\\x09\\x09\\x09\\x7E\\x00\\x00\", // \"A\"\n        \"\\x00\\x7F\\x49\\x49\\x49\\x36\\x00\\x00\", // \"B\"\n        \"\\x00\\x3E\\x41\\x41\\x41\\x22\\x00\\x00\", // \"C\"\n        \"\\x00\\x7F\\x41\\x41\\x22\\x1C\\x00\\x00\", // \"D\"\n        \"\\x00\\x7F\\x49\\x49\\x49\\x41\\x00\\x00\", // \"E\"\n        \"\\x00\\x7F\\x09\\x09\\x09\\x01\\x00\\x00\", // \"F\"\n        \"\\x00\\x3E\\x41\\x41\\x51\\x72\\x00\\x00\", // \"G\"\n        \"\\x00\\x7F\\x08\\x08\\x08\\x7F\\x00\\x00\", // \"H\"\n        \"\\x00\\x41\\x7F\\x41\\x00\\x00\\x00\\x00\", // \"I\"\n        \"\\x00\\x20\\x40\\x41\\x3F\\x01\\x00\\x00\", // \"J\"\n        \"\\x00\\x7F\\x08\\x14\\x22\\x41\\x00\\x00\", // \"K\"\n        \"\\x00\\x7F\\x40\\x40\\x40\\x40\\x00\\x00\", // \"L\"\n        \"\\x00\\x7F\\x02\\x0C\\x02\\x7F\\x00\\x00\", // \"M\"\n        \"\\x00\\x7F\\x04\\x08\\x10\\x7F\\x00\\x00\", // \"N\"\n        \"\\x00\\x3E\\x41\\x41\\x41\\x3E\\x00\\x00\", // \"O\"\n        \"\\x00\\x7F\\x09\\x09\\x09\\x06\\x00\\x00\", // \"P\"\n        \"\\x00\\x3E\\x41\\x51\\x21\\x5E\\x00\\x00\", // \"Q\"\n        \"\\x00\\x7F\\x09\\x19\\x29\\x46\\x00\\x00\", // \"R\"\n        \"\\x00\\x26\\x49\\x49\\x49\\x32\\x00\\x00\", // \"S\"\n        \"\\x00\\x01\\x01\\x7F\\x01\\x01\\x00\\x00\", // \"T\"\n        \"\\x00\\x3F\\x40\\x40\\x40\\x3F\\x00\\x00\", // \"U\"\n        \"\\x00\\x1F\\x20\\x40\\x20\\x1F\\x00\\x00\", // \"V\"\n        \"\\x00\\x3F\\x40\\x38\\x40\\x3F\\x00\\x00\", // \"W\"\n        \"\\x00\\x63\\x14\\x08\\x14\\x63\\x00\\x00\", // \"X\"\n        \"\\x00\\x03\\x04\\x78\\x04\\x03\\x00\\x00\", // \"Y\"\n        \"\\x00\\x61\\x51\\x49\\x45\\x43\\x00\\x00\", // \"Z\"\n        \"\\x00\\x7F\\x41\\x41\\x00\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x02\\x04\\x08\\x10\\x20\\x00\\x00\", // \"\\\"\n        \"\\x00\\x41\\x41\\x7F\\x00\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x04\\x02\\x01\\x02\\x04\\x00\\x00\", // \"^\"\n        \"\\x00\\x80\\x80\\x80\\x80\\x80\\x00\\x00\", // \"_\"\n        \"\\x00\\x01\\x02\\x04\\x00\\x00\\x00\\x00\", // \"`\"\n        \"\\x00\\x20\\x54\\x54\\x54\\x78\\x00\\x00\", // \"a\"\n        \"\\x00\\x7F\\x48\\x44\\x44\\x38\\x00\\x00\", // \"b\"\n        \"\\x00\\x38\\x44\\x44\\x28\\x00\\x00\\x00\", // \"c\"\n        \"\\x00\\x38\\x44\\x44\\x48\\x7F\\x00\\x00\", // \"d\"\n        \"\\x00\\x38\\x54\\x54\\x54\\x18\\x00\\x00\", // \"e\"\n        \"\\x00\\x08\\x7E\\x09\\x02\\x00\\x00\\x00\", // \"f\"\n        \"\\x00\\x18\\xA4\\xA4\\xA4\\x7C\\x00\\x00\", // \"g\"\n        \"\\x00\\x7F\\x08\\x04\\x04\\x78\\x00\\x00\", // \"h\"\n        \"\\x00\\x00\\x7D\\x00\\x00\\x00\\x00\\x00\", // \"i\"\n        \"\\x00\\x80\\x84\\x7D\\x00\\x00\\x00\\x00\", // \"j\"\n        \"\\x00\\x7F\\x10\\x28\\x44\\x00\\x00\\x00\", // \"k\"\n        \"\\x00\\x41\\x7F\\x40\\x00\\x00\\x00\\x00\", // \"l\"\n        \"\\x00\\x7C\\x04\\x18\\x04\\x78\\x00\\x00\", // \"m\"\n        \"\\x00\\x7C\\x08\\x04\\x7C\\x00\\x00\\x00\", // \"n\"\n        \"\\x00\\x38\\x44\\x44\\x38\\x00\\x00\\x00\", // \"o\"\n        \"\\x00\\xFC\\x24\\x24\\x18\\x00\\x00\\x00\", // \"p\"\n        \"\\x00\\x18\\x24\\x24\\xFC\\x00\\x00\\x00\", // \"q\"\n        \"\\x00\\x00\\x7C\\x08\\x04\\x00\\x00\\x00\", // \"r\"\n        \"\\x00\\x48\\x54\\x54\\x24\\x00\\x00\\x00\", // \"s\"\n        \"\\x00\\x04\\x7F\\x44\\x00\\x00\\x00\\x00\", // \"t\"\n        \"\\x00\\x3C\\x40\\x40\\x7C\\x00\\x00\\x00\", // \"u\"\n        \"\\x00\\x1C\\x20\\x40\\x20\\x1C\\x00\\x00\", // \"v\"\n        \"\\x00\\x3C\\x40\\x30\\x40\\x3C\\x00\\x00\", // \"w\"\n        \"\\x00\\x44\\x28\\x10\\x28\\x44\\x00\\x00\", // \"x\"\n        \"\\x00\\x1C\\xA0\\xA0\\x7C\\x00\\x00\\x00\", // \"y\"\n        \"\\x00\\x44\\x64\\x54\\x4C\\x44\\x00\\x00\", // \"z\"\n        \"\\x00\\x08\\x36\\x41\\x00\\x00\\x00\\x00\", // \"{\"\n        \"\\x00\\x00\\x7F\\x00\\x00\\x00\\x00\\x00\", // \"|\"\n        \"\\x00\\x41\\x36\\x08\\x00\\x00\\x00\\x00\", // \"}\"\n        \"\\x00\\x02\\x01\\x01\\x02\\x01\\x00\\x00\"  // \"~\"\n    ];\n    function oledcmd(c: number) {\n        pins.i2cWriteNumber(0x3c, c, NumberFormat.UInt16BE);\n    }\n    function writeData(n: number) {\n        let b = n;\n        if (n < 0) { n = 0 }\n        if (n > 255) { n = 255 }\n        pins.i2cWriteNumber(0x3c, 0x4000 + b, NumberFormat.UInt16BE);\n    }\n    function writeCustomChar(c: string) {\n        for (let i = 0; i < 8; i++) {\n            writeData(c.charCodeAt(i));\n        }\n    }\n    function setText(row: number, column: number) {\n        let r = row;\n        let c = column;\n        if (row < 0) { r = 0 }\n        if (column < 0) { c = 0 }\n        if (row > 7) { r = 7 }\n        if (column > 15) { c = 15 }\n        oledcmd(0xB0 + r);            //set page address\n        oledcmd(0x00 + (8 * c & 0x0F));  //set column lower address\n        oledcmd(0x10 + ((8 * c >> 4) & 0x0F));   //set column higher address\n    }\n    function putChar(c: string) {\n        let c1 = c.charCodeAt(0);\n        writeCustomChar(basicFont[c1 - 32]);\n    }\n    function oledinit(): void {\n        oledcmd(0xAE);  // Set display OFF\n        oledcmd(0xD5);  // Set Display Clock Divide Ratio / OSC Frequency 0xD4\n        oledcmd(0x80);  // Display Clock Divide Ratio / OSC Frequency \n        oledcmd(0xA8);  // Set Multiplex Ratio\n        oledcmd(0x3F);  // Multiplex Ratio for 128x64 (64-1)\n        oledcmd(0xD3);  // Set Display Offset\n        oledcmd(0x00);  // Display Offset\n        oledcmd(0x40);  // Set Display Start Line\n        oledcmd(0x8D);  // Set Charge Pump\n        oledcmd(0x14);  // Charge Pump (0x10 External, 0x14 Internal DC/DC)\n        oledcmd(0xA1);  // Set Segment Re-Map\n        oledcmd(0xC8);  // Set Com Output Scan Direction\n        oledcmd(0xDA);  // Set COM Hardware Configuration\n        oledcmd(0x12);  // COM Hardware Configuration\n        oledcmd(0x81);  // Set Contrast\n        oledcmd(0xCF);  // Contrast\n        oledcmd(0xD9);  // Set Pre-Charge Period\n        oledcmd(0xF1);  // Set Pre-Charge Period (0x22 External, 0xF1 Internal)\n        oledcmd(0xDB);  // Set VCOMH Deselect Level\n        oledcmd(0x40);  // VCOMH Deselect Level\n        oledcmd(0xA4);  // Set all pixels OFF\n        oledcmd(0xA6);  // Set display not inverted\n        oledcmd(0xAF);  // Set display On\n        oledClear();\n    }\n\n    ///////////////////////////////enum\n\n\n    export enum NeoPixelColors {\n        //% block=red\n        Red = 0xFF0000,\n        //% block=orange\n        Orange = 0xFFA500,\n        //% block=yellow\n        Yellow = 0xFFFF00,\n        //% block=green\n        Green = 0x00FF00,\n        //% block=blue\n        Blue = 0x0000FF,\n        //% block=indigo\n        Indigo = 0x4b0082,\n        //% block=violet\n        Violet = 0x8a2be2,\n        //% block=purple\n        Purple = 0xFF00FF,\n        //% block=white\n        White = 0xFFFFFF,\n        //% block=black\n        Black = 0x000000\n    }\n\n    /**\n     * Different modes for RGB or RGB+W NeoPixel strips\n     */\n    export enum NeoPixelMode {\n        //% block=\"RGB (GRB format)\"\n        RGB = 0,\n        //% block=\"RGB+W\"\n        RGBW = 1,\n        //% block=\"RGB (RGB format)\"\n        RGB_RGB = 2\n    }\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n    /////////////////////////////User_function//////////////////\n\n    //% line.min=1 line.max=8 line.defl=1\n    //% text.defl=\"Hello,ELECFREAKS\"\n    //% block=\"OLED show line %line|text %text\"\n    //% subcategory=Display group=\"OLED\" color=#00B1ED\n    export function showUserText(line: number, text: string) {\n        if (firstoledinit) {\n            oledinit()\n            firstoledinit = false\n        }\n        if (text.length > 16) {\n            text = text.substr(0, 16)\n        }\n        line = line - 1\n        setText(line, 0);\n        for (let c of text) {\n            putChar(c);\n        }\n\n        for (let i = text.length; i < 16; i++) {\n            setText(line, i);\n            putChar(\" \");\n        }\n    }\n    //% line.min=1 line.max=8 line.defl=2 \n    //% n.defl=20200508\n    //% block=\"OLED show line %line|number %n\"\n    //% subcategory=Display group=\"OLED\" color=#00B1ED\n    export function showUserNumber(line: number, n: number) {\n        if (firstoledinit) {\n            oledinit()\n            firstoledinit = false\n        }\n        showUserText(line, \"\" + n)\n    }\n    //% block=\"clear display\" color=#00B1ED\n    //% subcategory=Display group=\"OLED\"\n    export function oledClear() {\n        //oledcmd(DISPLAY_OFF);   //display off\n        for (let j = 0; j < 8; j++) {\n            setText(j, 0);\n            {\n                for (let i = 0; i < 16; i++)  //clear all columns\n                {\n                    putChar(' ');\n                }\n            }\n        }\n        //oledcmd(DISPLAY_ON);    //display on\n        setText(0, 0);\n    }\n    /**\n   * Create a new driver Grove - 4-Digit Display\n   * @param clkPin value of clk pin number\n   * @param dataPin value of data pin number\n   */\n    //% blockId=grove_tm1637_create block=\"connect 4-Digit cPin %cPin dPin %dPin\"\n    //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" blockSetVariable=display color=#EA5532\n    export function tm1637Create(cPin: DigitalPin, dPin: DigitalPin, intensity: number = 7, count: number = 4): TM1637LEDs {\n        let display = new TM1637LEDs();\n        display.clk = cPin\n        display.dio = dPin\n        if ((count < 1) || (count > 5)) count = 4;\n        display.count = count;\n        display.brightness = intensity;\n        display.init();\n        return display;\n    }\n    export class TM1637LEDs {\n        buf: Buffer;\n        clk: DigitalPin;\n        dio: DigitalPin;\n        _ON: number;\n        brightness: number;\n        count: number;  // number of LEDs\n        /**\n         * initial TM1637\n         */\n        init(): void {\n            pins.digitalWritePin(this.clk, 0);\n            pins.digitalWritePin(this.dio, 0);\n            this._ON = 8;\n            this.buf = pins.createBuffer(this.count);\n            this.clear();\n        }\n        /**\n         * Start \n         */\n        _start() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        /**\n         * Stop\n         */\n        _stop() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.dio, 1);\n        }\n        /**\n         * send command1\n         */\n        _write_data_cmd() {\n            this._start();\n            this._write_byte(TM1637_CMD1);\n            this._stop();\n        }\n        /**\n         * send command3\n         */\n        _write_dsp_ctrl() {\n            this._start();\n            this._write_byte(TM1637_CMD3 | this._ON | this.brightness);\n            this._stop();\n        }\n        /**\n         * send a byte to 2-wire interface\n         */\n        _write_byte(b: number) {\n            for (let i = 0; i < 8; i++) {\n                pins.digitalWritePin(this.dio, (b >> i) & 1);\n                pins.digitalWritePin(this.clk, 1);\n                pins.digitalWritePin(this.clk, 0);\n            }\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _intensity(val: number = 7) {\n            this._ON = 8;\n            this.brightness = val - 1;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n        /**\n         * set data to TM1637, with given bit\n         */\n        _dat(bit: number, dat: number) {\n            this._write_data_cmd();\n            this._start();\n            this._write_byte(TM1637_CMD2 | (bit % this.count))\n            this._write_byte(dat);\n            this._stop();\n            this._write_dsp_ctrl();\n        }\n        /**\n         * Show a single number from 0 to 9 at a specified digit of Grove - 4-Digit Display\n         * @param dispData value of number\n         * @param bitAddr value of bit number\n         */\n        //% blockId=grove_tm1637_display_bit block=\"%display|show single number|%num|at digit|%bit\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        //% bit.defl=1 bit.min=0 bit.max=9\n        showbit(num: number = 5, bit: number = 0) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            this.buf[bit % this.count] = _SEGMENTS[num % 16]\n            this._dat(bit, _SEGMENTS[num % 16])\n        }\n        /**\n         * Show a 4 digits number on display\n         * @param dispData value of number\n         */\n        //% blockId=grove_tm1637_display_number block=\"%display|show number|%num\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        showNumber(num: number) {\n            if (num < 0) {\n                num = -num\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n                this._dat(0, 0x40) // '-'\n            }\n            else {\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n            }\n        }\n        /**\n         * show or hide dot point. \n         * @param bit is the position, eg: 1\n         * @param show is show/hide dp, eg: true\n         */\n        //% blockId=\"TM1637_showDP\" block=\"%display|DotPoint at %bit|show $show\"\n        //% show.shadow=\"toggleOnOff\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        showDP(bit: number = 1, show: boolean = true) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            bit = bit % this.count\n            if (show) this._dat(bit, this.buf[bit] | 0x80)\n            else this._dat(bit, this.buf[bit] & 0x7F)\n        }\n        /**\n         * clear LED. \n         */\n        //% blockId=\"TM1637_clear\" block=\"clear display %display\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        clear() {\n            for (let i = 0; i < this.count; i++) {\n                this._dat(i, 0)\n                this.buf[i] = 0\n            }\n        }\n    }\n    //% shim=sendBufferAsm\n    function sendBuffer(buf: Buffer, pin: DigitalPin) {\n    }\n    export class Strip {\n        buf: Buffer;\n        pin: DigitalPin;\n        // TODO: encode as bytes instead of 32bit\n        brightness: number;\n        start: number; // start offset in LED strip\n        _length: number; // number of LEDs\n        _mode: NeoPixelMode;\n        _matrixWidth: number; // number of leds in a matrix - if any\n\n        /**\n         * Shows all LEDs to a given color (range 0-255 for r, g, b).\n         * @param rgb RGB color of the LED\n         */\n        //% blockId=\"neopixel_set_strip_color\" block=\"%strip|show color %rgb=neopixel_colors\"\n        //% weight=85 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        showColor(rgb: number) {\n            rgb = rgb >> 0;\n            this.setAllRGB(rgb);\n            this.show();\n        }\n\n        /**\n         * Shows a rainbow pattern on all LEDs.\n         * @param startHue the start hue value for the rainbow, eg: 1\n         * @param endHue the end hue value for the rainbow, eg: 360\n         */\n        //% blockId=\"neopixel_set_strip_rainbow\" block=\"%strip|show rainbow from %startHue|to %endHue\"\n        //% weight=85 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        showRainbow(startHue: number = 1, endHue: number = 360) {\n            if (this._length <= 0) return;\n\n            startHue = startHue >> 0;\n            endHue = endHue >> 0;\n            const saturation = 100;\n            const luminance = 50;\n            const steps = this._length;\n            const direction = HueInterpolationDirection.Clockwise;\n\n            //hue\n            const h1 = startHue;\n            const h2 = endHue;\n            const hDistCW = ((h2 + 360) - h1) % 360;\n            const hStepCW = Math.idiv((hDistCW * 100), steps);\n            const hDistCCW = ((h1 + 360) - h2) % 360;\n            const hStepCCW = Math.idiv(-(hDistCCW * 100), steps);\n            let hStep: number;\n            if (direction === HueInterpolationDirection.Clockwise) {\n                hStep = hStepCW;\n            } else if (direction === HueInterpolationDirection.CounterClockwise) {\n                hStep = hStepCCW;\n            } else {\n                hStep = hDistCW < hDistCCW ? hStepCW : hStepCCW;\n            }\n            const h1_100 = h1 * 100; //we multiply by 100 so we keep more accurate results while doing interpolation\n\n            //sat\n            const s1 = saturation;\n            const s2 = saturation;\n            const sDist = s2 - s1;\n            const sStep = Math.idiv(sDist, steps);\n            const s1_100 = s1 * 100;\n\n            //lum\n            const l1 = luminance;\n            const l2 = luminance;\n            const lDist = l2 - l1;\n            const lStep = Math.idiv(lDist, steps);\n            const l1_100 = l1 * 100\n\n            //interpolate\n            if (steps === 1) {\n                this.setPixelColor(0, hsl(h1 + hStep, s1 + sStep, l1 + lStep))\n            } else {\n                this.setPixelColor(0, hsl(startHue, saturation, luminance));\n                for (let i = 1; i < steps - 1; i++) {\n                    const h = Math.idiv((h1_100 + i * hStep), 100) + 360;\n                    const s = Math.idiv((s1_100 + i * sStep), 100);\n                    const l = Math.idiv((l1_100 + i * lStep), 100);\n                    this.setPixelColor(i, hsl(h, s, l));\n                }\n                this.setPixelColor(steps - 1, hsl(endHue, saturation, luminance));\n            }\n            this.show();\n        }\n\n        /**\n         * Set LED to a given color (range 0-255 for r, g, b).\n         * You need to call ``show`` to make the changes visible.\n         * @param pixeloffset position of the NeoPixel in the strip\n         * @param rgb RGB color of the LED\n         */\n        //% blockId=\"neopixel_set_pixel_color\" block=\"%strip|set pixel color at %pixeloffset|to %rgb=neopixel_colors\"\n        //% weight=80 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setPixelColor(pixeloffset: number, rgb: number): void {\n            this.setPixelRGB(pixeloffset >> 0, rgb >> 0);\n        }\n\n        /**\n         * Send all the changes to the strip.\n         */\n        //% blockId=\"neopixel_show\" block=\"%strip|show\" \n        //% weight=79\n        //% parts=\"neopixel\" subcategory=Neopixel\n        show() {\n            sendBuffer(this.buf, this.pin);\n        }\n\n        /**\n         * Turn off all LEDs.\n         * You need to call ``show`` to make the changes visible.\n         */\n        //% blockId=\"neopixel_clear\" block=\"%strip|clear\"\n        //% weight=76 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        clear(): void {\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.fill(0, this.start * stride, this._length * stride);\n        }\n\n        /**\n         * Set the brightness of the strip. This flag only applies to future operation.\n         * @param brightness a measure of LED brightness in 0-255. eg: 255\n         */\n        //% blockId=\"neopixel_set_brightness\" block=\"%strip|set brightness %brightness\" \n        //% weight=59 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setBrightness(brightness: number): void {\n            this.brightness = brightness & 0xff;\n        }\n        /**\n         * Gets the number of pixels declared on the strip\n         */\n        //% blockId=\"neopixel_length\" block=\"%strip|length\" blockGap=8\n        //% subcategory=\"Neopixel\"\n        //% weight=60 advanced=true\n        length() {\n            return this._length;\n        }\n        /**\n         * Create a range of LEDs.\n         * @param start offset in the LED strip to start the range\n         * @param length number of LEDs in the range. eg: 4\n         */\n        //% weight=89 color=#EA5532\n        //% blockId=\"neopixel_range\" block=\"%strip|range from %start|with %length|leds\"\n        //% parts=\"neopixel\"\n        //% blockSetVariable=range subcategory=Neopixel\n        range(start: number, length: number): Strip {\n            start = start >> 0;\n            length = length >> 0;\n            let strip = new Strip();\n            strip.buf = this.buf;\n            strip.pin = this.pin;\n            strip.brightness = this.brightness;\n            strip.start = this.start + Math.clamp(0, this._length - 1, start);\n            strip._length = Math.clamp(0, this._length - (strip.start - this.start), length);\n            strip._matrixWidth = 0;\n            strip._mode = this._mode;\n            return strip;\n        }\n\n        /**\n         * Shift LEDs forward and clear with zeros.\n         * You need to call ``show`` to make the changes visible.\n         * @param offset number of pixels to shift forward, eg: 1\n         */\n        //% blockId=\"neopixel_shift\" block=\"%strip|shift pixels by %offset\" \n        //% weight=40 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        shift(offset: number = 1): void {\n            offset = offset >> 0;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.shift(-offset * stride, this.start * stride, this._length * stride)\n        }\n\n        /**\n         * Rotate LEDs forward.\n         * You need to call ``show`` to make the changes visible.\n         * @param offset number of pixels to rotate forward, eg: 1\n         */\n        //% blockId=\"neopixel_rotate\" block=\"%strip|rotate pixels by %offset\" \n        //% weight=39 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        rotate(offset: number = 1): void {\n            offset = offset >> 0;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.rotate(-offset * stride, this.start * stride, this._length * stride)\n        }\n\n        /**\n         * Set the pin where the neopixel is connected, defaults to P0.\n         */\n        //% weight=10 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setPin(pin: DigitalPin): void {\n            this.pin = pin;\n            pins.digitalWritePin(this.pin, 0);\n            // don't yield to avoid races on initialization\n        }\n\n        private setBufferRGB(offset: number, red: number, green: number, blue: number): void {\n            if (this._mode === NeoPixelMode.RGB_RGB) {\n                this.buf[offset + 0] = red;\n                this.buf[offset + 1] = green;\n            } else {\n                this.buf[offset + 0] = green;\n                this.buf[offset + 1] = red;\n            }\n            this.buf[offset + 2] = blue;\n        }\n\n        private setAllRGB(rgb: number) {\n            let red = unpackR(rgb);\n            let green = unpackG(rgb);\n            let blue = unpackB(rgb);\n\n            const br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            const end = this.start + this._length;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            for (let i = this.start; i < end; ++i) {\n                this.setBufferRGB(i * stride, red, green, blue)\n            }\n        }\n        private setPixelRGB(pixeloffset: number, rgb: number): void {\n            if (pixeloffset < 0\n                || pixeloffset >= this._length)\n                return;\n\n            let stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            pixeloffset = (pixeloffset + this.start) * stride;\n\n            let red = unpackR(rgb);\n            let green = unpackG(rgb);\n            let blue = unpackB(rgb);\n\n            let br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            this.setBufferRGB(pixeloffset, red, green, blue)\n        }\n\n    }\n\n    /**\n     * Create a new NeoPixel driver for `numleds` LEDs.\n     * @param pin the pin where the neopixel is connected.\n     * @param numleds number of leds in the strip, eg: 24,30,60,64\n     */\n    //% blockId=\"neopixel_create\" block=\"NeoPixel at pin %Rjpin|with %numleds|leds as %mode\"\n    //% weight=90 color=#EA5532\n    //% parts=\"neopixel\"\n    //% trackArgs=0,2\n    //% blockSetVariable=strip subcategory=Neopixel\n    export function create(Rjpin: DigitalRJPin, numleds: number, mode: NeoPixelMode): Strip {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        let strip = new Strip();\n        let stride = mode === NeoPixelMode.RGBW ? 4 : 3;\n        strip.buf = pins.createBuffer(numleds * stride);\n        strip.start = 0;\n        strip._length = numleds;\n        strip._mode = mode;\n        strip._matrixWidth = 0;\n        strip.setBrightness(50)\n        strip.setPin(pin)\n        return strip;\n    }\n\n    /**\n     * Converts red, green, blue channels into a RGB color\n     * @param red value of the red channel between 0 and 255. eg: 255\n     * @param green value of the green channel between 0 and 255. eg: 255\n     * @param blue value of the blue channel between 0 and 255. eg: 255\n     */\n    //% weight=1 subcategory=Neopixel color=#EA5532\n    //% blockId=\"neopixel_rgb\" block=\"red %red|green %green|blue %blue\"\n    export function rgb(red: number, green: number, blue: number): number {\n        return packRGB(red, green, blue);\n    }\n\n    /**\n     * Gets the RGB value of a known color\n    */\n    //% weight=2 subcategory=Neopixel color=#EA5532\n    //% blockId=\"neopixel_colors\" block=\"%color\"\n    export function colors(color: NeoPixelColors): number {\n        return color;\n    }\n\n    function packRGB(a: number, b: number, c: number): number {\n        return ((a & 0xFF) << 16) | ((b & 0xFF) << 8) | (c & 0xFF);\n    }\n    function unpackR(rgb: number): number {\n        let r = (rgb >> 16) & 0xFF;\n        return r;\n    }\n    function unpackG(rgb: number): number {\n        let g = (rgb >> 8) & 0xFF;\n        return g;\n    }\n    function unpackB(rgb: number): number {\n        let b = (rgb) & 0xFF;\n        return b;\n    }\n\n    /**\n     * Converts a hue saturation luminosity value into a RGB color\n     * @param h hue from 0 to 360\n     * @param s saturation from 0 to 99\n     * @param l luminosity from 0 to 99\n     */\n    //% blockId=neopixelHSL block=\"hue %h|saturation %s|luminosity %l\" subcategory=Neopixel color=#EA5532\n    export function hsl(h: number, s: number, l: number): number {\n        h = Math.round(h);\n        s = Math.round(s);\n        l = Math.round(l);\n\n        h = h % 360;\n        s = Math.clamp(0, 99, s);\n        l = Math.clamp(0, 99, l);\n        let c = Math.idiv((((100 - Math.abs(2 * l - 100)) * s) << 8), 10000); //chroma, [0,255]\n        let h1 = Math.idiv(h, 60);//[0,6]\n        let h2 = Math.idiv((h - h1 * 60) * 256, 60);//[0,255]\n        let temp = Math.abs((((h1 % 2) << 8) + h2) - 256);\n        let x = (c * (256 - (temp))) >> 8;//[0,255], second largest component of this color\n        let r$:\n            number;\n        let g$:\n            number;\n        let b$:\n            number;\n        if (h1 == 0) {\n            r$ = c;\n            g$ = x;\n            b$ = 0;\n        }\n        else if (h1 == 1) {\n            r$ = x;\n            g$ = c;\n            b$ = 0;\n        }\n        else if (h1 == 2) {\n            r$ = 0;\n            g$ = c;\n            b$ = x;\n        }\n        else if (h1 == 3) {\n            r$ = 0;\n            g$ = x;\n            b$ = c;\n        }\n        else if (h1 == 4) {\n            r$ = x;\n            g$ = 0;\n            b$ = c;\n        }\n        else if (h1 == 5) {\n            r$ = c;\n            g$ = 0;\n            b$ = x;\n        }\n        let m = Math.idiv((Math.idiv((l * 2 << 8), 100) - c), 2);\n        let r = r$ + m;\n        let g = g$ + m;\n        let b = b$ + m;\n        return packRGB(r, g, b);\n    }\n\n    export enum HueInterpolationDirection {\n        Clockwise,\n        CounterClockwise,\n        Shortest\n    }\n}\n","planetxbasic.ts":"/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#00B1ED  icon=\"\\uf005\" block=\"Connected\" blockId=\"PlanetX_Connected\"\n//% groups='[\"Digital\", \"Analog\", \"IIC Port\"]'\nnamespace Connected {\n    \n    ////////////////////////paj7620//////////////////////\n    let gesture_first_init = true\n    const initRegisterArray: number[] = [\n        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17,\n        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F,\n        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14,\n        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27,\n        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01,\n        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00,\n        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20,\n        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37,\n        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A,\n        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F,\n        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30,\n        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19,\n        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04,\n        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00,\n        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00,\n        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F,\n        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07,\n        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01,\n        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F,\n        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01,\n        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40,\n        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E,\n        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00,\n        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08,\n        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00,\n        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01,\n        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01,\n        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01\n    ];\n    \n    /////////////////////////color/////////////////////////\n    const APDS9960_ADDR = 0x39\n    const APDS9960_ENABLE = 0x80\n    const APDS9960_ATIME = 0x81\n    const APDS9960_CONTROL = 0x8F\n    const APDS9960_STATUS = 0x93\n    const APDS9960_CDATAL = 0x94\n    const APDS9960_CDATAH = 0x95\n    const APDS9960_RDATAL = 0x96\n    const APDS9960_RDATAH = 0x97\n    const APDS9960_GDATAL = 0x98\n    const APDS9960_GDATAH = 0x99\n    const APDS9960_BDATAL = 0x9A\n    const APDS9960_BDATAH = 0x9B\n    const APDS9960_GCONF4 = 0xAB\n    const APDS9960_AICLEAR = 0xE7\n    let color_first_init = false\n\n    function i2cwrite_color(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n    function i2cread_color(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n    function rgb2hsl(color_r: number, color_g: number, color_b: number): number {\n        let Hue = 0\n        let R = color_r * 100 / 255;\n        let G = color_g * 100 / 255;\n        let B = color_b * 100 / 255;\n        let maxVal = Math.max(R, Math.max(G, B))\n        let minVal = Math.min(R, Math.min(G, B))\n        let Delta = maxVal - minVal;\n\n        if (Delta < 0) {\n            Hue = 0;\n        }\n        else if (maxVal == R && G >= B) {\n            Hue = (60 * ((G - B) * 100 / Delta)) / 100;\n        }\n        else if (maxVal == R && G < B) {\n            Hue = (60 * ((G - B) * 100 / Delta) + 360 * 100) / 100;\n        }\n        else if (maxVal == G) {\n            Hue = (60 * ((B - R) * 100 / Delta) + 120 * 100) / 100;\n        }\n        else if (maxVal == B) {\n            Hue = (60 * ((R - G) * 100 / Delta) + 240 * 100) / 100;\n        }\n        return Hue\n    }\n    function initModule(): void {\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ATIME, 252)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_CONTROL, 0x03)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_GCONF4, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_AICLEAR, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x01)\n        color_first_init = true\n    }\n    function colorMode(): void {\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_ENABLE) | 0x2;\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, tmp);\n    }\n\n    ///////////////////////////////////////////////////////MP3\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    /*\n    * Play status selection button list\n    */\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(100)\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,        \n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum Distance_Unit_List {\n        //% block=\"cm\" \n        Distance_Unit_cm,\n\n        //% block=\"foot\"\n        Distance_Unit_foot,\n    }\n    export enum ButtonStateList {\n        //% block=\"C\"\n        C,\n        //% block=\"D\"\n        D,\n        //% block=\"C+D\"\n        CD\n    }\n    export enum GestureType {\n        //% block=\"None\"\n        None = 0,\n        //% block=\"Right\"\n        Right = 1,\n        //% block=\"Left\"\n        Left = 2,\n        //% block=\"Up\"\n        Up = 3,\n        //% block=\"Down\"\n        Down = 4,\n        //% block=\"Forward\"\n        Forward = 5,\n        //% block=\"Backward\"\n        Backward = 6,\n        //% block=\"Clockwise\"\n        Clockwise = 7,\n        //% block=\"Anticlockwise\"\n        Anticlockwise = 8,\n        //% block=\"Wave\"\n        Wave = 9\n    }\n    export enum ColorList {\n        //% block=\"Red\"\n        red,\n        //% block=\"Green\"\n        green,\n        //% block=\"Blue\"\n        blue,\n        //% block=\"Cyan\"\n        cyan,\n        //% block=\"Magenta\"\n        magenta,\n        //% block=\"Yellow\"\n        yellow,\n        //% block=\"White\"\n        white\n    }\n\n    ///////////////////////////////////blocks/////////////////////////////\n\n    //% blockId=\"readwaterLevel\" block=\"Water level sensor %Rjpin value(0~100)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function waterLevel(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let voltage = 0, waterlevel = 0;\n        voltage = pins.map(\n            pins.analogReadPin(pin),\n            50,\n            600,\n            0,\n            100\n        );\n        if (voltage < 0) {\n            voltage = 0\n        }\n        waterlevel = voltage;\n        return Math.round(waterlevel)\n    }\n\n    let distance_last = 0\n\n    //% blockId=sonarbit block=\"Ultrasonic sensor pinT %tPin pinE %ePin distance %distance_unit\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% distance_unit.fieldEditor=\"gridpicker\"\n    //% distance_unit.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function ultrasoundSensor(tPin: DigitalPin, ePin: DigitalPin, distance_unit: Distance_Unit_List): number {\n        let pinT = tPin\n        let pinE = ePin\n        pins.setPull(pinT, PinPullMode.PullNone)\n        pins.digitalWritePin(pinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(pinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(pinT, 0)\n\n        // read pulse\n        let d = pins.pulseIn(pinE, PulseValue.High, 25000)\n        let version = control.hardwareVersion()\n        let distance = d * 34 / 2 / 1000\n        if (version == \"1\") {\n            distance = distance * 3 / 2\n        }\n\n        if (distance > 430) {\n            distance = 0\n        }\n\n        if (distance == 0) {\n            distance = distance_last\n            distance_last = 0\n        }\n        else {\n            distance_last = distance\n        }\n\n        switch (distance_unit) {\n            case Distance_Unit_List.Distance_Unit_cm:\n                return Math.floor(distance)  //cm\n                break\n            case Distance_Unit_List.Distance_Unit_foot:\n                return Math.floor(distance / 30.48)   //foot\n                break\n            default:\n                return 0\n        }\n    }\n\n    export class PAJ7620 {\n        private paj7620WriteReg(addr: number, cmd: number) {\n            let buf: Buffer = pins.createBuffer(2);\n            buf[0] = addr;\n            buf[1] = cmd;\n            pins.i2cWriteBuffer(0x73, buf, false);\n        }\n        private paj7620ReadReg(addr: number): number {\n            let buf: Buffer = pins.createBuffer(1);\n            buf[0] = addr;\n            pins.i2cWriteBuffer(0x73, buf, false);\n            buf = pins.i2cReadBuffer(0x73, 1, false);\n            return buf[0];\n        }\n        private paj7620SelectBank(bank: number) {\n            if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n        }\n        private paj7620Init() {\n            let temp = 0;\n            this.paj7620SelectBank(0);\n            temp = this.paj7620ReadReg(0);\n            if (temp == 0x20) {\n                for (let i = 0; i < 438; i += 2) {\n                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n                }\n            }\n            this.paj7620SelectBank(0);\n        }\n        init() {\n            this.paj7620Init();\n            basic.pause(200);\n        }\n        read(): number {\n            let data = 0, result = 0;\n            data = this.paj7620ReadReg(0x43);\n            switch (data) {\n                case 0x01:\n                    result = GestureType.Right;\n                    break;\n                case 0x02:\n                    result = GestureType.Left;\n                    break;\n                case 0x04:\n                    result = GestureType.Up;\n                    break;\n                case 0x08:\n                    result = GestureType.Down;\n                    break;\n                case 0x10:\n                    result = GestureType.Forward;\n                    break;\n                case 0x20:\n                    result = GestureType.Backward;\n                    break;\n                case 0x40:\n                    result = GestureType.Clockwise;\n                    break;\n                case 0x80:\n                    result = GestureType.Anticlockwise;\n                    break;\n                default:\n                    data = this.paj7620ReadReg(0x44);\n                    if (data == 0x01)\n                        result = GestureType.Wave;\n                    break;\n            }\n            return result;\n        }\n    }\n    const gestureEventId = 3100;\n    let lastGesture = GestureType.None;\n    let paj7620 = new PAJ7620();\n    //% blockId= gesture_create_event block=\"Gesture sensor IIC port is %gesture\"\n    //% gesture.fieldEditor=\"gridpicker\" gesture.fieldOptions.columns=3\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function onGesture(gesture: GestureType, handler: () => void) {\n        control.onEvent(gestureEventId, gesture, handler);\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        control.inBackground(() => {\n            while (true) {\n                const gesture = paj7620.read();\n                if (gesture != lastGesture) {\n                    lastGesture = gesture;\n                    control.raiseEvent(gestureEventId, lastGesture);\n                }\n                basic.pause(200);\n            }\n        })\n    }\n\n    //% blockId= gesture_get_event block=\"Gesture sensor IIC port detects\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function getGesture(): number {\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        const gesture = paj7620.read();\n        return gesture\n    }\n\n\n\n\n    //% blockId=apds9960_readcolor block=\"Color sensor IIC port color HUE(0~360)\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readColor(): number {\n        if (color_first_init == false) {\n            initModule()\n            colorMode()\n        }\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        while (!tmp) {\n            basic.pause(5);\n            tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        }\n        let c = i2cread_color(APDS9960_ADDR, APDS9960_CDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_CDATAH) * 256;\n        let r = i2cread_color(APDS9960_ADDR, APDS9960_RDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_RDATAH) * 256;\n        let g = i2cread_color(APDS9960_ADDR, APDS9960_GDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_GDATAH) * 256;\n        let b = i2cread_color(APDS9960_ADDR, APDS9960_BDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_BDATAH) * 256;\n        // map to rgb based on clear channel\n        let avg = c / 3;\n        r = r * 255 / avg;\n        g = g * 255 / avg;\n        b = b * 255 / avg;\n        //let hue = rgb2hue(r, g, b);\n        let hue = rgb2hsl(r, g, b)\n        return hue\n    }\n    //% block=\"Color sensor IIC port detects %color\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% color.fieldEditor=\"gridpicker\" color.fieldOptions.columns=3\n    export function checkColor(color: ColorList): boolean {\n        let hue = readColor()\n        switch (color) {\n            case ColorList.red:\n                if (hue > 330 || hue < 20) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.green:\n                if (hue > 120 && 180 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.blue:\n                if (hue > 210 && 270 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.cyan:\n                if (hue > 190 && 210 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.magenta:\n                if (hue > 260 && 330 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.yellow:\n                if (hue > 30 && 120 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.white:\n                if (hue >= 180 && 190 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n        }\n    }\n\n    //% blockId=\"potentiometer\" block=\"Trimpot %Rjpin analog value\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Input color=#E2C438 group=\"Analog\"\n    export function trimpot(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        return pins.analogReadPin(pin)\n    }\n    //% blockId=buttonab block=\"Button %Rjpin %button is pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonCD(Rjpin: DigitalRJPin, button: ButtonStateList): boolean {\n        let pinC = DigitalPin.P1\n        let pinD = DigitalPin.P2\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pinC = DigitalPin.P1\n                pinD = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pinC = DigitalPin.P2\n                pinD = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pinC = DigitalPin.P13\n                pinD = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pinC = DigitalPin.P15\n                pinD = DigitalPin.P16\n                break;\n            case DigitalRJPin.P3:\n                pinC = DigitalPin.P3\n                pinD = DigitalPin.P4\n                break;\n        }\n        pins.setPull(pinC, PinPullMode.PullUp)\n        pins.setPull(pinD, PinPullMode.PullUp)\n        if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 0 && button == ButtonStateList.CD) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinC) == 0 && pins.digitalReadPin(pinD) == 1 && button == ButtonStateList.C) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 1 && button == ButtonStateList.D) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    export enum ButtonState {\n        //% block=\"on\"\n        on = 1,\n        //% block=\"off\"\n        off = 2\n    }\n\n    const buttonEventSource = 5000\n    const buttonEventValue = {\n        CD_pressed: ButtonState.on,\n        CD_unpressed: ButtonState.off\n    }\n\n    //% block=\"on button %Rjpin %button pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=4\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonEvent(Rjpin: DigitalRJPin, button: ButtonStateList, handler: () => void) {\n        let ButtonPin_C = DigitalPin.P1\n        let ButtonPin_D = DigitalPin.P2\n        let pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P0\n        let pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                ButtonPin_C = DigitalPin.P1\n                ButtonPin_D = DigitalPin.P8\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P1\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P8\n                break;\n            case DigitalRJPin.J2:\n                ButtonPin_C = DigitalPin.P2\n                ButtonPin_D = DigitalPin.P12\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P2\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P12\n                break;\n            case DigitalRJPin.J3:\n                ButtonPin_C = DigitalPin.P13\n                ButtonPin_D = DigitalPin.P14\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P13\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P14\n                break;\n            case DigitalRJPin.J4:\n                ButtonPin_C = DigitalPin.P15\n                ButtonPin_D = DigitalPin.P16\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P15\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P16\n                break;\n            case DigitalRJPin.P3:\n                ButtonPin_C = DigitalPin.P3\n                ButtonPin_D = DigitalPin.P4\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P3\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P4\n                break;\n        }\n        if (button == ButtonStateList.C) {\n            pins.setPull(ButtonPin_C, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_C, PinEventType.Edge)\n            control.onEvent(pinEventSource_C, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.D) {\n            pins.setPull(ButtonPin_D, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_D, PinEventType.Edge)\n            control.onEvent(pinEventSource_D, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.CD) {\n            loops.everyInterval(50, function () {\n                if (pins.digitalReadPin(ButtonPin_C) == 0 && pins.digitalReadPin(ButtonPin_D) == 0) {\n                    control.raiseEvent(buttonEventSource, buttonEventValue.CD_pressed)\n                }\n            })\n            control.onEvent(buttonEventSource, buttonEventValue.CD_pressed, handler)\n        }\n    }\n\n    //% blockId=fans block=\"Motor fan %Rjpin toggle to $fanstate || speed %speed \\\\%\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% fanstate.shadow=\"toggleOnOff\"\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    //% speed.min=0 speed.max=100\n    //% expandableArgumentMode=\"toggle\"\n    export function motorFan(Rjpin: DigitalRJPin, fanstate: boolean, speed: number = 100): void {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.J3:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.J4:\n                pin = AnalogPin.P15\n                break;\n        }\n        if (fanstate) {\n            pins.analogSetPeriod(pin, 100)\n            pins.analogWritePin(pin, Math.map(speed, 0, 100, 0, 1023))\n        }\n        else {\n            pins.analogWritePin(pin, 0)\n            speed = 0\n        }\n    }\n\n\n    //% blockId=\"setLoopFolder\" block=\"loop play all the MP3s in the folder:$folderNum\"\n    //% folderNum.defl=\"01\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setLoopFolder(folderNum: string): void {\n        CMD = 0x17\n        para1 = 0\n        para2 = parseInt(folderNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    //% blockId=\"folderPlay\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum || repeatList: $myAns\"\n    //% folderNum.defl=\"01\" fileNum.defl=\"001\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function folderPlay(folderNum: string, fileNum: string, myAns: boolean = false): void {\n        CMD = 0x0F\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        if (myAns)\n            execute(0x19)\n    }\n\n    //% blockId=\"playFolderFilePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFilePort(folderNum: string, fileNum: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFolderFileVolumePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum with volume:$theVolume usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" theVolume.defl=\"10\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFileVolumePort(folderNum: string, fileNum: string, theVolume: string, Rjpin: DigitalRJPin): void {\n        \n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        \n        let volume = parseInt(theVolume)\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(200)\n\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"volumePort\" \n    //% block=\"set MP3 volume:$theVolume usingPin:$Rjpin\"\n    //% theVolume.defl=\"10\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function volumePort(theVolume: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        let volume = parseInt(theVolume)\n        if (volume > 30) {\n            volume = 30\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(300)\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n\n\n    //% blockId=\"setTracking\" \n    //% block=\"play the mp3 in order of:%tracking || repeatList: $myAns\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% tracking.defl=1\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setTracking(tracking: number, myAns: boolean = false): void {\n        CMD = 0x03\n        para1 = 0x00\n        para2 = tracking\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        execute(0x0D)\n        if (myAns)\n            execute(0x19)\n    }\n    //% blockId=MP3execute block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=\"setVolume\" block=\"Set volume(0~25):%volume\"\n    //% volume.min=0 volume.max=25\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setVolume(volume: number): void {\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 0x06\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=MP3setPort block=\"Set the MP3 port to %Rjpin\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function MP3SetPort(Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        setVolume(25)\n    }\n}","notlegos.ts":"// NotLegos Blocks\n\n//% block=\"Not LEGOs\" color=#0031AF weight=1000 icon=\"\\uf3a5\"\n//% groups=['MP3\",'Display', 'Laser', 'others']\nnamespace notLegos {\n\n    // Variables for MP3 and Volume Pot\n    let isPot = false\n    let potPin = AnalogPin.P0\n    let mp3bits = 0\n    let mp3Apin = SerialPin.P0\n    let mp3Bpin = SerialPin.P0\n    let mp3Cpin = SerialPin.P0\n    let mp3Avolume = 1\n    let mp3Bvolume = 1\n    let mp3Cvolume = 1\n    let relativeCvolume = 1\n    let lastMP3bit = \"\"\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    let mp3musicPin:SerialPin\n    let mp3music = false\n    let mp3player = false\n    let mp3sfxPin = null\n    let mp3sfx = false\n    let mp3musicVol = 0\n    let mp3playerPin = null\n    let mp3playerVol = 0\n    let mp3sfxVol = 0\n\n    // String Arrays for Full Player Sound Sets and Shuffled Playlists Thereof\n    let PlayerAwaitingMusic: string[] = []\n    let PlayerFailure: string[] = []\n    let PlayerHurry: string[] = []\n    let PlayerIntro: string[] = []\n    let PlayerIntroMusic: string[] = []\n    let PlayerLevelMusic: string[] = []\n    let PlayerLost: string[] = []\n    let PlayerLostMusic: string[] = []\n    let PlayerName: string[] = []\n    let PlayerNay: string[] = []\n    let PlayerOuch: string[] = []\n    let PlayerReady: string[] = []\n    let PlayerSuccess: string[] = []\n    let PlayerTutorialMusic: string[] = []\n    let PlayerWon: string[] = []\n    let PlayerWonMusic: string[] = []\n    let PlayerYay: string[] = []\n    let PlaylistAwaitingMusic: string[] = []\n    let PlaylistCorrect: string[] = []\n    let PlaylistExplosion: string[] = []\n    let PlaylistFailure: string[] = []\n    let PlaylistFire: string[] = []\n    let PlaylistGhost: string[] = []\n    let PlaylistHurry: string[] = []\n    let PlaylistIncorrect: string[] = []\n    let PlaylistIntro: string[] = []\n    let PlaylistLost: string[] = []\n    let PlaylistName: string[] = []\n    let PlaylistNay: string[] = []\n    let PlaylistOuch: string[] = []\n    let PlaylistReady: string[] = []\n    let PlaylistSlash: string[] = []\n    let PlaylistSpark: string[] = []\n    let PlaylistSplash: string[] = []\n    let PlaylistSuccess: string[] = []\n    let PlaylistWon: string[] = []\n    let PlaylistYay: string[] = []\n\n    // Sound Strings - Global\n    let VoiceTracks = \"10_1_90_1.75|10_2_90_3.65|10_3_50_11.5|10_4_90_0|10_5_90_0|10_6_90_4.65|10_7_90_7.15|10_8_90_4.8|10_9_90_3.75|10_10_90_5.05|10_11_90_0|10_12_90_0|10_13_90_3|10_14_90_3|10_15_90_3|10_16_90_4|10_17_90_0|10_18_90_3|10_19_90_3|10_20_90_4|10_21_90_2|10_22_90_0|10_23_90_2|10_24_90_2|10_25_90_6|10_26_90_6|10_27_90_6|10_28_90_6|10_29_90_6|10_30_90_6|10_31_90_6|10_32_90_6|10_33_90_8|10_34_90_9|10_35_90_6|10_36_90_6|10_37_90_6|10_38_90_6|10_39_90_6|10_40_90_6\".split(\"|\")\n    let CorrectSFX = \"7_1_100_4|7_2_100_8|7_3_100_8|7_4_100_6|7_5_100_10|7_6_100_8|7_7_100_6|7_8_100_4|7_9_100_17|7_10_100_9|7_11_100_4|7_12_100_8|7_13_100_12|7_14_100_7|7_15_100_10|7_16_100_9|7_17_100_10|7_18_100_9|7_19_100_8|7_20_100_4|7_21_100_7|7_22_100_26|7_23_100_5|7_24_100_4|7_25_100_10|7_26_100_7|7_27_100_7|7_28_100_6|7_29_100_7|7_30_100_7|7_31_100_12|7_32_100_4|7_33_100_6|7_34_100_6|7_35_100_6|7_36_100_6|7_37_100_5|7_38_100_3|7_39_100_6|7_40_100_6|7_41_100_6|7_42_100_8|7_43_100_6|7_44_100_8|7_45_100_6|7_46_100_5|7_47_100_5|7_48_100_12|7_49_100_3|7_50_100_7|7_51_100_8|7_52_100_11|7_53_100_6|7_54_100_2|7_55_100_5|7_56_100_7|7_57_100_8|7_58_100_7|7_59_100_6|7_60_100_7|7_61_100_6|7_62_100_8|7_63_100_5|7_64_100_5|7_65_100_7|7_66_100_9|7_67_100_6|7_68_100_6|7_69_100_7|7_70_100_10|7_71_100_7|7_72_100_5|7_73_100_6|7_74_100_8|7_75_100_3|7_76_100_3|7_77_100_6|7_78_100_7|7_79_100_4|7_80_100_6|7_81_100_2|7_82_100_3|7_83_100_3|7_84_100_1|7_85_100_3|7_86_100_6|7_87_100_7|7_88_100_5|7_89_100_3|7_90_100_5|7_91_100_3|7_92_100_3|7_93_100_2|7_94_100_3|7_95_100_3|7_96_100_1|7_99_100_1|7_100_100_1|7_101_100_1|7_102_100_1|7_103_100_1|7_104_100_3|7_105_100_1|7_106_100_1|7_107_100_4|7_108_100_4|7_109_100_1|7_110_100_1|7_111_100_1|7_112_100_1|7_113_100_1|7_114_100_2|7_115_100_1|7_116_100_1|7_117_100_1|7_118_100_1\".split(\"|\")\n    let IncorrectSFX = \"8_1_100_6|8_2_100_5|8_3_100_3|8_4_100_5|8_5_100_7|8_6_100_6|8_7_100_4|8_8_100_1|8_9_100_3|8_10_100_4|8_11_100_3|8_12_100_3|8_13_100_6|8_14_100_3|8_15_100_1|8_16_100_1|8_17_100_1|8_18_100_1|8_19_100_0|8_20_100_0|8_21_100_5|8_22_100_4|8_23_100_3|8_24_100_7\".split(\"|\")\n    let AllSFX = \"9_1_100_4.754|9_2_100_4.336|9_3_100_5.172|9_4_100_4.806|9_5_100_4.754|9_6_100_1.536|9_7_100_2.136|9_8_100_1.896|9_9_100_2.592|9_10_100_0.936|9_11_100_1.008|9_12_100_0.312|9_13_100_1.44|9_14_100_1.8|9_15_100_1.992|9_16_100_1.104|9_17_100_1.08|9_18_100_0.912|9_19_100_0.528|9_20_100_0.72|9_21_100_0.672|9_22_100_0.696|9_23_100_0.6|9_24_100_0.576|9_25_100_1.44|9_26_100_1.8|9_27_100_1.464|9_28_100_0.432|9_29_100_0.312|9_30_100_2.112|9_31_100_0.648|9_32_100_0.384|9_33_100_2.352|9_34_100_1.8|9_35_100_1.608|9_36_100_0.648|9_37_100_0.768|9_38_100_0.552|9_39_100_0.48|9_40_100_1.032|9_41_100_0.456|9_42_100_0.384|9_43_100_0.552|9_44_100_0.432|9_45_100_0.216|9_46_100_0.624|9_47_100_1.248|9_48_100_1.104|9_49_100_1.248|9_50_100_0.648|9_51_100_0.456|9_53_100_5.256|9_54_100_2.328|9_55_100_4.992|9_56_100_1.776|9_57_100_2.28|9_58_100_0.504|9_59_100_0.984|9_60_100_0.984|9_61_100_0.504|9_62_100_1.632|9_63_100_0.288|9_64_100_0.192|9_65_100_0.168|9_66_100_0.288|9_67_100_0.288|9_68_100_0.312|9_69_100_0.72|9_70_100_0.672|9_71_100_0.648|9_72_100_0.648|9_73_100_1.632|9_74_100_1.416|9_75_100_1.248|9_76_100_0.48|9_77_100_0.36|9_78_100_0.216|9_79_100_0.576|9_80_100_0.731|9_81_100_1.128|9_82_100_2.184|9_83_100_0.744|9_84_100_0.6|9_85_100_1.152|9_86_100_1.68|9_87_100_1.32|9_88_100_0.528|9_89_100_0.36|9_90_100_0.792|9_91_100_2.496|9_92_100_1.8|9_93_100_1.8|9_94_100_0.744|9_95_100_1.776|9_96_100_5.544|9_97_100_0.432|9_98_100_2.064|9_99_100_0.744|9_100_100_0.696|9_101_100_1.776|9_102_100_0.12|9_103_100_0.168|9_104_100_0.96|9_105_100_0.96|9_106_100_2.04|9_107_100_3.984|9_108_100_1.608|9_109_100_3.528|9_110_100_0.456|9_111_100_0.696|9_112_100_1.632|9_113_100_2.232\".split(\"|\")\n    let GhostSFX = \"9_1_100_4.754|9_2_100_4.336|9_3_100_5.172|9_4_100_4.806\".split(\"|\")\n    let FireSFX = \"9_6_100_1.536|9_15_100_1.992|9_53_100_5.256|9_106_100_2.04\".split(\"|\")\n    let ExplosionSFX = \"9_77_100_0.36|9_101_100_1.776|9_109_100_3.528\".split(\"|\")\n    let SplashSFX = \"9_33_100_2.352|9_34_100_1.8\".split(\"|\")\n    let SparkSFX = \"9_5_100_4.754|9_51_100_0.456|9_85_100_1.152|9_86_100_1.68|9_111_100_0.696|9_112_100_1.632\".split(\"|\")\n    let SlashSFX = \"9_10_100_0.936|9_25_100_1.44|9_28_100_0.432|9_32_100_0.384|9_50_100_0.648|9_59_100_0.984|9_63_100_0.288|9_64_100_0.192|9_65_100_0.168|9_66_100_0.288|9_67_100_0.288|9_68_100_0.312|9_69_100_0.72|9_75_100_1.248|9_76_100_0.48|9_77_100_0.36|9_78_100_0.216|9_89_100_0.36\".split(\"|\")\n    \n    // Music Strings - Super Mario Brothers\n    let SMBIntroMusic = \"1_1_75_2.808|1_2_75_3.912|1_3_75_7.81|1_4_75_4.992|1_5_75_3.918|1_6_75_12.382|1_7_75_3.204|1_8_75_6.648|1_9_75_6.168|1_10_75_7.464|1_11_75_9.36|1_12_75_9.038|1_13_75_10.605|1_14_75_3.492|1_15_75_9.613|1_16_75_3.48|1_17_75_5.58|1_18_75_5.041|1_19_75_6.336|1_20_75_5.424|1_21_75_7.2|1_22_75_5.424|1_23_75_3.317|1_24_75_7.262|1_25_75_5.59|1_26_75_5.52|1_27_75_10.776|1_28_75_4.944|1_29_75_5.496|1_30_75_4.032|1_31_75_6.264|1_32_75_3.918|1_33_75_4.44|1_34_75_10.152|1_35_75_8.097|1_36_75_7.706|1_37_75_3.317|1_38_75_6.87|1_39_75_4.466|1_40_75_5.877|1_41_75_3.432|1_42_75_7.392|1_43_75_6.768|1_44_75_2.616|1_45_75_6.269|1_46_75_1.188|1_47_75_2.088|1_48_75_2.124|1_49_75_8.228|1_50_75_15.647|1_51_75_9.064|1_52_75_10.152|1_53_75_13.008|1_54_75_14.16|1_55_75_14.236|1_56_75_15.792|1_57_75_7.392|1_58_75_4.368|1_59_75_9.384|1_60_75_7.653|1_61_75_8.76|1_62_75_8.952|1_63_75_12.024|1_64_75_4.284|1_65_75_6.048|1_66_75_9.072|1_67_75_4.68|1_68_75_6.138|1_69_75_5.208|1_70_75_9.576|1_71_75_8.045|1_72_75_8.045|1_73_75_5.407|1_74_75_3.186\".split(\"|\")\n    let SMBTutorialMusic = \"2_1_65_36|2_2_65_40|2_3_65_41|2_4_65_46|2_5_65_50|2_6_65_51|2_7_65_59|2_8_65_63|2_9_65_64|2_10_65_65|2_11_65_66|2_12_65_67|2_13_65_68|2_14_65_69|2_15_65_76|2_16_65_80|2_17_65_84|2_18_65_90|2_19_65_92|2_20_65_100|2_21_65_103|2_22_65_105|2_23_65_112|2_24_65_113|2_25_65_123|2_26_65_138|2_27_65_142|2_28_65_144|2_29_65_156|2_30_65_158|2_31_65_120|2_32_65_120|2_33_65_120|2_34_65_120|2_35_65_120|2_36_65_120\".split(\"|\")\n    let SMBAwaitingMusic = \"3_1_100_64|3_2_100_211|3_3_100_185|3_4_100_185|3_5_100_182|3_6_100_114|3_7_100_181|3_8_100_103|3_9_100_303|3_10_100_21|3_11_100_235|3_12_100_121|3_13_100_203|3_14_100_119|3_15_100_206|3_16_100_146|3_17_100_237|3_18_100_210|3_19_100_160\".split(\"|\")\n    let SMBLevelMusic = \"4_1_100_128|4_3_100_142|4_5_100_111|4_6_100_141|4_9_100_126|4_11_100_132|4_15_100_119|4_16_100_146|4_18_100_120|4_20_100_143|4_22_100_142|4_23_100_112|4_24_100_138|4_25_100_139|4_26_100_111|4_27_100_116|4_28_100_129|4_31_100_98|4_32_100_146|4_33_100_177|4_34_100_82|4_36_100_160|4_38_100_180|4_39_100_211|4_41_100_134|4_42_100_183|4_43_100_124|4_44_100_261|4_45_100_91|4_46_100_138|4_49_100_207|4_50_100_41|4_51_100_180|4_52_100_202|4_53_100_194|4_56_100_209|4_57_100_195|4_58_100_180|4_60_100_198|4_61_100_180|4_63_100_78|4_66_100_139|4_67_100_224|4_68_100_180|4_73_100_180|4_76_100_180|4_77_100_196|4_78_100_113|4_82_100_180|4_83_100_123|4_84_100_180|4_86_100_126|4_93_100_121|4_97_100_59|4_98_100_180|4_99_100_180|4_100_100_118|4_101_100_156|4_102_100_180|4_103_100_70|4_104_100_216|4_105_100_140|4_106_100_180|4_107_100_147|4_108_100_147|4_109_100_180|4_110_100_158|4_111_100_180|4_112_100_80|4_113_100_152|4_114_100_127|4_116_100_122|4_118_100_106|4_123_100_143|4_124_100_36|4_125_100_164|4_127_100_282|4_128_100_311|4_129_100_123|4_130_100_187|4_131_100_62|4_132_100_180|4_133_100_130|4_134_100_112|4_135_100_105|4_139_100_126|4_141_100_176|4_142_100_135|4_143_100_126|4_144_100_144|4_145_100_140|4_146_100_133|4_149_100_167|4_150_100_120|4_151_100_180|4_155_100_226|4_157_100_164|4_158_100_144|4_159_100_104|4_161_100_180|4_162_100_87|4_163_100_126|4_164_100_118|4_165_100_194|4_166_100_135|4_167_100_50|4_168_100_109|4_169_100_180|4_170_100_133|4_171_100_180|4_172_100_91|4_173_100_138|4_176_100_120|4_177_100_81|4_178_100_150|4_179_100_153|4_180_100_104|4_181_100_112\".split(\"|\")\n    let SMBWonMusic = \"5_1_100_4|5_2_100_17|5_3_100_29|5_4_100_172|5_5_100_13|5_6_100_248|5_7_100_11|5_8_100_445|5_9_100_241|5_10_100_244|5_11_100_20|5_12_100_7|5_13_100_28|5_14_100_74|5_15_100_15|5_16_100_74|5_17_100_17|5_18_100_17|5_19_100_15|5_20_100_38|5_21_100_42|5_22_100_67|5_23_100_8|5_24_100_8|5_25_100_13|5_26_100_17|5_27_100_5|5_28_100_122|5_29_100_226|5_30_100_79\".split(\"|\")\n    let SMBLostMusic = \"6_1_100_87|6_2_100_31|6_3_100_196|6_4_100_65|6_5_100_4|6_6_100_23|6_7_100_65|6_8_100_62|6_9_100_78|6_10_100_6|6_11_100_162\".split(\"|\")\n    \n    // Player Strings - Mario\n    let MarioSoundString = \"A_21_1_100_1.5|A_21_2_100_1|I_21_3_100_3.3|A_21_4_100_1.9|A_21_5_100_2.1|I_21_6_100_1.8|I_21_7_100_1.8|R_21_8_100_0.6|R_21_9_100_1.3|R_21_10_100_1.1|R_21_11_100_0.6|R_21_12_100_0.8|R_21_13_100_1.6|R_21_14_100_1.3|R_21_15_100_1.2|R_21_16_100_1.1|R_21_17_100_1.3|R_21_18_100_1|Y_21_19_100_0.2|Y_21_20_100_0.2|Y_21_21_100_0.3|Y_21_22_100_0.5|Y_21_23_100_0.6|Y_21_24_100_0.6|Y_21_25_100_0.6|Y_21_26_100_0.6|Y_21_27_100_0.6|Y_21_28_100_0.6|Y_21_29_100_0.7|Y_21_30_100_0.7|Y_21_31_100_0.7|Y_21_32_100_0.7|Y_21_33_100_0.7|Y_21_34_100_0.8|Y_21_35_100_0.8|Y_21_36_100_0.8|Y_21_37_100_0.8|Y_21_38_100_0.8|Y_21_39_100_0.8|Y_21_40_100_0.9|Y_21_41_100_0.9|Y_21_42_100_0.9|Y_21_43_100_0.9|Y_21_44_100_0.9|Y_21_45_100_0.9|Y_21_46_100_0.9|Y_21_47_100_1|Y_21_48_100_1|Y_21_49_100_1|Y_21_50_100_1|Y_21_51_100_1.1|Y_21_52_100_1.1|Y_21_53_100_1.1|Y_21_54_100_1.2|Y_21_55_100_1.2|Y_21_56_100_1.2|Y_21_57_100_1.2|Y_21_58_100_1.3|Y_21_59_100_1.3|Y_21_60_100_1.3|Y_21_61_100_1.4|Y_21_62_100_1.4|S_21_63_100_1|S_21_64_100_1.6|S_21_65_100_1.7|S_21_66_100_1.7|S_21_67_100_1.9|S_21_68_100_2.1|S_21_69_100_2.2|S_21_70_100_2.4|S_21_71_100_2.4|S_21_72_100_2.5|W_21_73_100_1.8|W_21_74_100_2|W_21_75_100_2.2|W_21_76_100_2.6|W_21_77_100_2.9|O_21_78_100_0.6|O_21_79_100_0.4|O_21_80_100_0.4|O_21_81_100_1.1|O_21_82_100_1.5|O_21_83_100_0.8|O_21_84_100_0.7|O_21_85_100_0.8|O_21_86_100_0.9|O_21_87_100_1.3|O_21_88_100_0.5|O_21_89_100_1|O_21_90_100_1|O_21_91_100_0.4|O_21_92_100_0.5|O_21_93_100_0.9|O_21_94_100_0.4|O_21_95_100_0.4|N_21_96_100_1|N_21_97_100_1.1|N_21_98_100_1|N_21_99_100_0.6|N_21_100_100_0.9|N_21_101_100_1.4|N_21_102_100_1.7|N_21_103_100_1.3|N_21_104_100_0.6|N_21_105_100_1.4|N_21_106_100_0.8|N_21_107_100_1.1|N_21_108_100_1.1|N_21_109_100_0.8|N_21_110_100_1.7|N_21_111_100_2.4|I_21_112_100_0.8|I_21_113_100_0.9|F_21_114_100_1.1|F_21_115_100_2.5|F_21_116_100_2.5|F_21_117_100_1.4|L_21_118_100_3.4|L_21_119_100_3.5|L_21_120_100_4.4|L_21_121_100_1.5|H_21_122_100_44.4\"\n\n    // BLOCK - Set the Player's Sounds\n    //% blockId=nl_player_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% weight=101\n    //% block=\"Set player to $player\"\n    export function setSounds(player: string): void {\n        let theSound = \"\"\n        let thisLetter = \"\"\n        let series = \"\"\n        let soundStrings: string[] = []\n        if (player == \"Mario\") {\n            soundStrings = MarioSoundString.split(\"|\")\n            series = \"SMB\"\n        }\n        if (series == \"SMB\") {\n            PlayerIntroMusic = SMBIntroMusic\n            PlayerTutorialMusic = SMBTutorialMusic\n            PlayerAwaitingMusic = SMBAwaitingMusic\n            PlayerLevelMusic = SMBLevelMusic\n            PlayerWonMusic = SMBWonMusic\n            PlayerLostMusic = SMBLostMusic\n        }\n        for (let sString of soundStrings) {\n            thisLetter = sString.charAt(0)\n            theSound = sString.substr(2, sString.length - 2)\n            if (thisLetter == \"A\") {\n                PlayerName.push(theSound)\n            } else if (thisLetter == \"R\") {\n                PlayerReady.push(theSound)\n            } else if (thisLetter == \"Y\") {\n                PlayerYay.push(theSound)\n            } else if (thisLetter == \"I\") {\n                PlayerIntro.push(theSound)\n            } else if (thisLetter == \"N\") {\n                PlayerNay.push(theSound)\n            } else if (thisLetter == \"O\") {\n                PlayerOuch.push(theSound)\n            } else if (thisLetter == \"S\") {\n                PlayerSuccess.push(theSound)\n            } else if (thisLetter == \"F\") {\n                PlayerFailure.push(theSound)\n            } else if (thisLetter == \"W\") {\n                PlayerWon.push(theSound)\n            } else if (thisLetter == \"L\") {\n                PlayerLost.push(theSound)\n            } else if (thisLetter == \"H\") {\n                PlayerHurry.push(theSound)\n            }\n        }\n    }    \n    \n    // Internal Function - Take a Sound from a Playlist After Filling it from a Soundbank if it's Empty\n    function takeReplenish(Playlist: any[], Soundbank: any[]) {\n        let returnSound = \"\"\n        returnSound = \"\"\n        if (Playlist.length == 0) {\n            for (let index = 0; index <= Soundbank.length - 1; index++) {\n                if (index == 0) {\n                    Playlist.push(Soundbank[index])\n                } else if (index >= 1) {\n                    Playlist.insertAt(randint(0, index), Soundbank[index])\n                }\n            }\n        }\n        returnSound = Playlist.shift()\n        return returnSound\n    }\n\n    // BLOCK - Fetch a Sound of a Type from a Category\n    //% blockId=nl_get_soundstring\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% weight=101\n    //% block=\"Get $Category sound $Type\"\n    export function getSoundString(Category: string, Type: string): string {\n        let returnString = \"\"\n        if (Category == \"Voice\") {\n            returnString = VoiceTracks[parseFloat(Type)]\n        } else if (Category == \"Player\") {\n            if (Type == \"Name\") {\n                returnString = takeReplenish(PlaylistName, PlayerName)\n            } else if (Type == \"Intro\") {\n                returnString = takeReplenish(PlaylistIntro, PlayerIntro)\n            } else if (Type == \"Ready\") {\n                returnString = takeReplenish(PlaylistReady, PlayerReady)\n            } else if (Type == \"Yay\") {\n                returnString = takeReplenish(PlaylistYay, PlayerYay)\n            } else if (Type == \"Success\") {\n                returnString = takeReplenish(PlaylistSuccess, PlayerSuccess)\n            } else if (Type == \"Nay\") {\n                returnString = takeReplenish(PlaylistNay, PlayerNay)\n            } else if (Type == \"Failure\") {\n                returnString = takeReplenish(PlaylistFailure, PlayerFailure)\n            } else if (Type == \"Won\") {\n                returnString = takeReplenish(PlaylistWon, PlayerWon)\n            } else if (Type == \"Lost\") {\n                returnString = takeReplenish(PlaylistLost, PlayerLost)\n            } else if (Type == \"Hurry\") {\n                returnString = takeReplenish(PlaylistHurry, PlayerHurry)\n            }\n        } else if (Category == \"SFX\") {\n            if (Type == \"Correct\") {\n                returnString = takeReplenish(PlaylistCorrect, CorrectSFX)\n            } else if (Type == \"Incorrect\") {\n                returnString = takeReplenish(PlaylistIncorrect, IncorrectSFX)\n            } else if (Type == \"Ghost\") {\n                returnString = takeReplenish(PlaylistGhost, GhostSFX)\n            } else if (Type == \"Fire\") {\n                returnString = takeReplenish(PlaylistFire, FireSFX)\n            } else if (Type == \"Explosion\") {\n                returnString = takeReplenish(PlaylistExplosion, ExplosionSFX)\n            } else if (Type == \"Splash\") {\n                returnString = takeReplenish(PlaylistSplash, SplashSFX)\n            } else if (Type == \"Spark\") {\n                returnString = takeReplenish(PlaylistSpark, SparkSFX)\n            } else if (Type == \"Slash\") {\n                returnString = takeReplenish(PlaylistSlash, SlashSFX)\n            }\n        } else if (Category == \"Music\") {\n            if (Type == \"Intro\") {\n                let PlaylistIntroMusic: number[] = []\n                returnString = takeReplenish(PlaylistIntroMusic, PlayerIntroMusic)\n            } else if (Type == \"Tutorial\") {\n                let PlaylistTutorialMusic: number[] = []\n                returnString = takeReplenish(PlaylistTutorialMusic, PlayerTutorialMusic)\n            } else if (Type == \"Awaiting\") {\n                returnString = takeReplenish(PlaylistAwaitingMusic, PlayerAwaitingMusic)\n            } else if (Type == \"Level\") {\n                let PlaylistLevelMusic: number[] = []\n                returnString = takeReplenish(PlaylistLevelMusic, PlayerLevelMusic)\n            } else if (Type == \"Won\") {\n                let PlaylistWonMusic: number[] = []\n                returnString = takeReplenish(PlaylistWonMusic, PlayerWonMusic)\n            } else if (Type == \"Lost\") {\n                let PlaylistLostMusic: number[] = []\n                returnString = takeReplenish(PlaylistLostMusic, PlayerLostMusic)\n            }\n        }\n        return returnString\n    }\n\n\n    ///////////////////////////////////////////////////////MP3\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(20) // Was 100; problematic at 10\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n    function sendMP3volume(sPin: SerialPin): void {\n        let theVolume = 5\n        if (sPin == mp3Apin) {\n            theVolume = Math.round(potRead() * mp3Avolume)\n        } else if (sPin == mp3Bpin) {\n            theVolume = Math.round(potRead() * mp3Bvolume)\n        } else if (sPin == mp3Cpin) {\n            theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    function sendMP3volumeFast(sPin: SerialPin): void {\n        let theVolume = 5\n        if (sPin == mp3Apin) {\n            theVolume = Math.round(potRead() * mp3Avolume)\n        } else if (sPin == mp3Bpin) {\n            theVolume = Math.round(potRead() * mp3Bvolume)\n        } else if (sPin == mp3Cpin) {\n            theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    function sendMP3play(folderNum: string, fileNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    //% blockId=\"playFileNl\" \n    //% block=\"Play length of file:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n\n    export function playFile(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P16\n        stringParts = soundString.split(\"_\")\n        let theFile = stringParts[0]\n        let theVolume = stringParts[1]\n        let theLength = stringParts[2]\n        sendMP3file(theFile, theVolume, sPin)\n        return parseFloat(theLength) * 1000\n    }\n    function sendMP3file(fileNum: string, volumeNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 3\n        para1 = parseInt(fileNum)\n        para2 = parseInt(volumeNum)\n        para1 = parseInt(\"0\")\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFileNl2\" \n    //% block=\"Play2 length of file:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n\n    export function playFile2(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P16\n        stringParts = soundString.split(\"_\")\n        let theFile = stringParts[0]\n        let theVolume = stringParts[1]\n        let theLength = stringParts[2]\n        sendMP3file2(theFile, theVolume, sPin)\n        return parseFloat(theLength) * 1000\n    }\n    function sendMP3file2(fileNum: string, volumeNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 15\n        para1 = parseInt(fileNum)\n        para2 = parseInt(volumeNum)\n        para1 = parseInt(\"1\")\n        para2 = parseInt(\"1\")\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=nl_backgroundVolume\n    //% block=\"Set background volume to:%relativeVolume\"\n    //% subcategory=\"MP3\" group=\"MP3\"\n    export function sendBackgroundVolume(relativeVolume: number): void {\n        relativeCvolume = relativeVolume/100\n\n        let sPin = mp3Cpin\n        let theVolume = Math.round(potRead() * mp3Cvolume * relativeVolume / 100)\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=MP3execute2 block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n  \n    //% blockId=notlegos_pot_read\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Trimpot analog value\"\n    export function potRead() {\n        if(isPot){\n            return Math.round(pins.map(pins.analogReadPin(potPin), 0, 1023, 0, 30))\n        } else{\n            return 5\n        }\n    }\n\n    //% blockId=notlegos_relCread\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return background volume\"\n    export function getBackgroundVolume() {\n\n            return relativeCvolume\n\n    }\n    //% blockId=notlegos_mp3Avolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3A volume\"\n    export function getMP3AVolume() {\n        return potRead() * mp3Avolume\n    }\n    //% blockId=notlegos_mp3Bvolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3B volume\"\n    export function getMP3BVolume() {\n        return potRead() * mp3Bvolume\n    }\n      //% blockId=notlegos_mp3Cvolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3C volume\"\n    export function getMP3CVolume() {\n        return potRead() * mp3Cvolume * relativeCvolume\n    }\n\n    //% blockId=notlegos_pot_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Connect Volume Control Pot at pin %aPin\"\n    //% aPin.fieldEditor=\"gridpicker\"\n    export function potSet(aPin: AnalogPin): void{\n        potPin = aPin\n        isPot = true\n    }\n\n//////////////////////////////////////////////////////////\n\n    //% blockId=nl_mp3_init\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Ready MP3bit at %sPin for %type\"\n    //% dPin.fieldEditor=\"gridpicker\"\n    export function mp3setPorts(type:mp3type, sPin: SerialPin): void {\n        if (type == mp3type.music){\n            mp3musicPin = sPin\n            mp3music = true\n            mp3musicVol = 60\n        } else if (type == mp3type.player){\n            mp3playerPin = sPin\n            mp3player = true\n            mp3playerVol = 100\n        } else if (type == mp3type.sfxvoice){\n            mp3sfxPin = sPin\n            mp3sfx = true\n            mp3sfxVol = 80\n        }\n        sendMP3volumeQuick(type)\n    }\n\n    function sendMP3volumeQuick(bit:mp3type): void {\n        if (bit == mp3type.music){\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        }\n\n        let theVolume = 15\n        // if (sPin == mp3Apin) {\n        //     theVolume = Math.round(potRead() * mp3Avolume)\n        // } else if (sPin == mp3Bpin) {\n        //     theVolume = Math.round(potRead() * mp3Bvolume)\n        // } else if (sPin == mp3Cpin) {\n        //     theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        // }\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n\n    //% blockId=nl_mp3_music\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %genre music\"\n    export function mp3musicPlay(genre:musicGenre): void{\n\n    }\n\n    //% blockId=nl_mp3_say\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %saying as player\"\n    export function mp3sayPlay(saying: playerSaying): void {\n\n    }\n\n\n    //% blockId=nl_mp3_voice\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %voice as voice\"\n    export function mp3voicePlay(voice: voiceSaying): void {\n\n    }\n\n    //% blockId=nl_mp3_voice\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Magician says on the %side difficulty %difficulty\"\n    export function mp3magician(side:magicianSaysSide, difficulty:magicianDifficulty): void {\n\n    }\n\n    //% blockId=nl_mp3_voice\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %sfx sound effect\"\n    export function mp3sfxPlay(sfx: sfxType): void {\n\n    }\n\n\n    //% blockId=\"playFolderFile\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playFolderFile(folderNum: string, fileNum: string): void {\n    \n        if (mp3bits > 0) {\n            sendMP3volume(mp3Apin)\n        }\n        if (mp3bits > 1) {\n           // sendMP3volume(mp3Bpin)\n        }\n        if (mp3bits >0) {\n            sendMP3play(folderNum, fileNum, mp3Apin)\n        }\n        if (mp3bits > 1) {\n          //  sendMP3play(folderNum, fileNum, mp3Bpin)\n        }\n    }\n\n    //% blockId=\"playsFor\" \n    //% block=\"Play length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsFor(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        if (mp3bits == 1) {\n            sPin = mp3Apin\n            mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        } else {\n            if (lastMP3bit == \"A\") {\n                    sPin = mp3Bpin\n                    mp3Bvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n                    lastMP3bit = \"B\"\n            } else {\n                sPin = mp3Apin\n                mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n            lastMP3bit = \"A\"\n            }\n        }\n        let theLength = stringParts[3]\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n        return parseFloat(theLength) * 1000 + 20\n    }\n\n    //% blockId=nl_volume_refresh\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume\"\n    export function updateVolume(): void {\n        if (mp3bits > 0) {\n            sendMP3volumeFast(mp3Apin)\n        }\n        if (mp3bits > 1) {\n            sendMP3volumeFast(mp3Bpin)\n        }\n        if (mp3bits > 2) {\n            sendMP3volumeFast(mp3Cpin)\n        }\n    }\n\n\n    //% blockId=\"nl_playsForTwo\" \n    //% block=\"Dual play length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsForTwo(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n\n        mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        mp3Bvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n\n        sendMP3volumeFast(mp3Apin)\n        sendMP3volumeFast(mp3Bpin)\n        \n        basic.pause(20)\n\n        sendMP3play(theFolder, theFile, mp3Apin)\n        sendMP3play(theFolder, theFile, mp3Bpin)\n        \n        return parseFloat(theLength) * 1000 + 20\n    }\n\n\n    //% blockId=\"nl_playsForBackground\" \n    //% block=\"Play in background length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsForBackground(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n        mp3Cvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        sPin = mp3Cpin\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n        return parseFloat(theLength) * 1000 + 20\n    }\n\n\n    //% blockId=\"nl_playBackground\" \n    //% block=\"Play in background:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playBackground(soundString: string): void {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n        mp3Cvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        sPin = mp3Cpin\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n    }\n\n\n    //% blockId=\"nl_backgroundStop\" \n    //% block=\"Stop background sound\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function stopBackgroundSound(): void {\n        serial.redirect(mp3Cpin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 0x16\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    // Nezha - Functions for Pins and Ports\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_Serial(Rjpin: DigitalRJPin): any {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = SerialPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = SerialPin.P2\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.P12:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = SerialPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = SerialPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n\n\n    export enum mp3type {\n        music,\n        player,\n        sfxvoice\n    }\n\n    export enum musicGenre {\n        intro,\n        tutorial,\n        awaiting,\n        level,\n        won,\n        lost\n    }\n\n    export enum playerSaying {\n        ready,\n        yay,\n        intro,\n        nay,\n        ouch,\n        success,\n        failure,\n        won,\n        lost,\n        hurry\n    }\n\n    export enum sfxType {\n        correct,\n        incorrect,\n        ghost,\n        fire,\n        explosion,\n        splash,\n        spark,\n        slash\n    }\n\n    export enum voiceSaying {\n        name,\n        begin,\n        retry,\n        next,\n        complete,\n        gameover,\n        welcome,\n        intro,\n        howto1,\n        howto2,\n        howto3,\n        howto4,\n        howto5,\n        howto6,\n        howto7,\n        howto8,\n        howto9\n    }\n\n    export enum magicianSaysSide {\n        left,\n        right\n    }\n\n    export enum magicianDifficulty {\n        easy,\n        medium,\n        hard\n    }\n\n    export enum spotName {\n        A,\n        B,\n        C,\n        D,\n        E,\n        F,\n        G,\n        H,\n        I\n    }\n\n    export enum playerChar {\n        mario,\n        luigi,\n        peach,\n        daisy,\n        toad,\n        wario\n    }\n\n\n\n\n\n    // Enum - To Support MP3\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n\n    // Enum - Nezha and Pins\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum mbPin {\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1 (Analog J1)\"\n        P1,\n        //% block=\"P2 (Analog J2)\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8 (J1)\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12 (J2)\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14 (J3)\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16 (J4)\"\n        P16,\n    }\n}\n","pxt.json":"{\n    \"name\": \"NotLegosExt\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"displaySendBuffer.asm\",\n        \"display.ts\",\n        \"planetxbasic.ts\",\n        \"notlegos.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"7.0.42\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","test.ts":""}},{"timestamp":1726875120418,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"gX}3[UJe6C9wl9p+Uoj=\">digits</variable><variable id=\"vSl89nNM7#y}HO_i4w8g\">sockLights</variable><variable id=\"kx-+|q2cYu;$^R?pYwdZ\">wheelLights</variable><variable id=\"zVo^^v6=8Jgq7FyFiNOV\">scoreCircle</variable></variables><block type=\"device_button_event\" x=\"855\" y=\"-84\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl2\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">1_1_25_100</field></shadow></value></block></value></block></statement></block><block type=\"device_button_event\" x=\"1396\" y=\"-84\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">2_1_1</field></shadow></value></block></value></block></statement></block><block type=\"every_interval\" x=\"1879\" y=\"-84\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value><statement name=\"HANDLER\"><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P2</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P3</field></shadow></value></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation><field name=\"SLIDER\">2</field></shadow></value><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">hue </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"apds9960_readcolor\"></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation><field name=\"SLIDER\">3</field></shadow></value><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">distance </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"sonarbit\"><field name=\"tPin\">DigitalPin.P8</field><field name=\"ePin\">DigitalPin.P9</field><field name=\"distance_unit\">Connected.Distance_Unit_List.Distance_Unit_cm</field></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation><field name=\"SLIDER\">4</field></shadow></value><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">gesture </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"Connected_getGesture\"></block></value></block></value></block></next></block></next></block></next></block></statement></block><block type=\"pxt-on-start\" x=\"34\" y=\"54\"><statement name=\"HANDLER\"><block type=\"Connected_oledClear\"><next><block type=\"pin_set_audio_pin_enabled\"><value name=\"enabled\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow></value><next><block type=\"device_led_enable\"><value name=\"on\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"gX}3[UJe6C9wl9p+Uoj=\">digits</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"grove_tm1637_create\"><field name=\"cPin\">DigitalPin.P7</field><field name=\"dPin\">DigitalPin.P6</field></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"vSl89nNM7#y}HO_i4w8g\">sockLights</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P11</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"vSl89nNM7#y}HO_i4w8g\">sockLights</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"vSl89nNM7#y}HO_i4w8g\">sockLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"kx-+|q2cYu;$^R?pYwdZ\">wheelLights</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P12</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">18</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"kx-+|q2cYu;$^R?pYwdZ\">wheelLights</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"kx-+|q2cYu;$^R?pYwdZ\">wheelLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"zVo^^v6=8Jgq7FyFiNOV\">scoreCircle</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P13</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"zVo^^v6=8Jgq7FyFiNOV\">scoreCircle</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"zVo^^v6=8Jgq7FyFiNOV\">scoreCircle</field></block></value><next><block type=\"nl_testfast\"></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"893\" y=\"764\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow><block type=\"playFileNl2\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"soundString\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">1_1_25_100</field></shadow></value></block></value></block><block type=\"nl_mp3_init\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"340\" y=\"828\"><field name=\"sPin\">notLegos.mp3type.music</field><field name=\"type\">SerialPin.P16</field><next><block type=\"nl_mp3_music\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"genre\">notLegos.musicGenre.intro</field></block></next></block><block type=\"MP3execute\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"530\" y=\"888\"><field name=\"myType\">Connected.playType.Play</field></block><block type=\"MP3setPort\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1457\" y=\"930\"><field name=\"Rjpin\">Connected.DigitalRJPin.P16</field><next><block type=\"setTracking\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"tracking\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value><value name=\"myAns\"><shadow type=\"toggleYesNo\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"yes\">false</field></shadow></value></block></next></block><block type=\"function_definition\" x=\"60\" y=\"1026\"><mutation name=\"isNearly\" functionid=\"F!?G,}0W~mK0q6yxa@)+\"><arg name=\"reference\" id=\"askt0gw7ps42l4j5s8lq\" type=\"number\"></arg><arg name=\"reading\" id=\"pvzp6d6plvrvf0vwcgka\" type=\"number\"></arg><arg name=\"tolerance\" id=\"ai8znl3rpzvjckud4rk3\" type=\"number\"></arg></mutation><field name=\"function_name\">isNearly</field><value name=\"askt0gw7ps42l4j5s8lq\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reference</field></block></value><value name=\"pvzp6d6plvrvf0vwcgka\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reading</field></block></value><value name=\"ai8znl3rpzvjckud4rk3\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">tolerance</field></block></value><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_operation\"><field name=\"OP\">AND</field><value name=\"A\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value></block></value><statement name=\"DO0\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></block></value></block></statement><statement name=\"ELSE\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></block></value></block></statement></block></statement></block></xml>","main.ts":"function isNearly (reference: number, reading: number, tolerance: number) {\n    if (reading >= reference - tolerance && reading <= reference + tolerance) {\n        return true\n    } else {\n        return false\n    }\n}\ninput.onButtonPressed(Button.A, function () {\n    basic.pause(notLegos.playFile2(\"1_1_25_100\"))\n})\ninput.onButtonPressed(Button.B, function () {\n    basic.pause(notLegos.playFile(\"2_1_1\"))\n})\nConnected.oledClear()\npins.setAudioPinEnabled(true)\nled.enable(false)\nbasic.pause(100)\nlet digits = Connected.tm1637Create(\nDigitalPin.P7,\nDigitalPin.P6\n)\nbasic.pause(1000)\nlet sockLights = Connected.create(Connected.DigitalRJPin.P11, 8, Connected.NeoPixelMode.RGB)\nsockLights.showColor(Connected.colors(Connected.NeoPixelColors.Blue))\nsockLights.show()\nlet wheelLights = Connected.create(Connected.DigitalRJPin.P12, 18, Connected.NeoPixelMode.RGB)\nwheelLights.showColor(Connected.colors(Connected.NeoPixelColors.Blue))\nwheelLights.show()\nlet scoreCircle = Connected.create(Connected.DigitalRJPin.P13, 8, Connected.NeoPixelMode.RGB)\nscoreCircle.showColor(Connected.colors(Connected.NeoPixelColors.Blue))\nscoreCircle.show()\nnotLegos.sendMP3testFast()\nloops.everyInterval(500, function () {\n    Connected.showUserText(1, \"R\" + pins.analogReadPin(AnalogReadWritePin.P1) + \" C\" + pins.analogReadPin(AnalogReadWritePin.P2) + \" L\" + pins.analogReadPin(AnalogReadWritePin.P3))\n    Connected.showUserText(2, \"hue \" + Connected.readColor())\n    Connected.showUserText(3, \"distance \" + Connected.ultrasoundSensor(DigitalPin.P8, DigitalPin.P9, Connected.Distance_Unit_List.Distance_Unit_cm))\n    Connected.showUserText(4, \"gesture \" + Connected.getGesture())\n})\n","README.md":"\n> Open this page at [https://notlegos.github.io/castleresay/](https://notlegos.github.io/castleresay/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/castleresay** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/castleresay** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/soundbank/](https://notlegos.github.io/soundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/soundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/soundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/resoundbank/](https://notlegos.github.io/resoundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/resoundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/resoundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosext/](https://notlegos.github.io/notlegosext/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosext** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosext** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","displaySendBuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n","display.ts":"\n/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#EA5532 icon=\"\\uf110\" block=\"Connected\" blockId=\"PlanetX_Connected\" \n//% groups='[\"LED\", \"Digital\", \"Analog\", \"IIC Port\", \"OLED\", \"7-Seg 4-Dig LED Nixietube\"]'\nnamespace Connected {\n    ////////////////////////////////TM 1637/////////////////\n    let TM1637_CMD1 = 0x40;\n    let TM1637_CMD2 = 0xC0;\n    let TM1637_CMD3 = 0x80;\n    let _SEGMENTS = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];\n    /////////////////////OLED///////////////////////////////\n    let firstoledinit = true\n    const basicFont: string[] = [\n        \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", // \" \"\n        \"\\x00\\x00\\x5F\\x00\\x00\\x00\\x00\\x00\", // \"!\"\n        \"\\x00\\x00\\x07\\x00\\x07\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x14\\x7F\\x14\\x7F\\x14\\x00\\x00\", // \"#\"\n        \"\\x00\\x24\\x2A\\x7F\\x2A\\x12\\x00\\x00\", // \"$\"\n        \"\\x00\\x23\\x13\\x08\\x64\\x62\\x00\\x00\", // \"%\"\n        \"\\x00\\x36\\x49\\x55\\x22\\x50\\x00\\x00\", // \"&\"\n        \"\\x00\\x00\\x05\\x03\\x00\\x00\\x00\\x00\", // \"'\"\n        \"\\x00\\x1C\\x22\\x41\\x00\\x00\\x00\\x00\", // \"(\"\n        \"\\x00\\x41\\x22\\x1C\\x00\\x00\\x00\\x00\", // \")\"\n        \"\\x00\\x08\\x2A\\x1C\\x2A\\x08\\x00\\x00\", // \"*\"\n        \"\\x00\\x08\\x08\\x3E\\x08\\x08\\x00\\x00\", // \"+\"\n        \"\\x00\\xA0\\x60\\x00\\x00\\x00\\x00\\x00\", // \",\"\n        \"\\x00\\x08\\x08\\x08\\x08\\x08\\x00\\x00\", // \"-\"\n        \"\\x00\\x60\\x60\\x00\\x00\\x00\\x00\\x00\", // \".\"\n        \"\\x00\\x20\\x10\\x08\\x04\\x02\\x00\\x00\", // \"/\"\n        \"\\x00\\x3E\\x51\\x49\\x45\\x3E\\x00\\x00\", // \"0\"\n        \"\\x00\\x00\\x42\\x7F\\x40\\x00\\x00\\x00\", // \"1\"\n        \"\\x00\\x62\\x51\\x49\\x49\\x46\\x00\\x00\", // \"2\"\n        \"\\x00\\x22\\x41\\x49\\x49\\x36\\x00\\x00\", // \"3\"\n        \"\\x00\\x18\\x14\\x12\\x7F\\x10\\x00\\x00\", // \"4\"\n        \"\\x00\\x27\\x45\\x45\\x45\\x39\\x00\\x00\", // \"5\"\n        \"\\x00\\x3C\\x4A\\x49\\x49\\x30\\x00\\x00\", // \"6\"\n        \"\\x00\\x01\\x71\\x09\\x05\\x03\\x00\\x00\", // \"7\"\n        \"\\x00\\x36\\x49\\x49\\x49\\x36\\x00\\x00\", // \"8\"\n        \"\\x00\\x06\\x49\\x49\\x29\\x1E\\x00\\x00\", // \"9\"\n        \"\\x00\\x00\\x36\\x36\\x00\\x00\\x00\\x00\", // \":\"\n        \"\\x00\\x00\\xAC\\x6C\\x00\\x00\\x00\\x00\", // \";\"\n        \"\\x00\\x08\\x14\\x22\\x41\\x00\\x00\\x00\", // \"<\"\n        \"\\x00\\x14\\x14\\x14\\x14\\x14\\x00\\x00\", // \"=\"\n        \"\\x00\\x41\\x22\\x14\\x08\\x00\\x00\\x00\", // \">\"\n        \"\\x00\\x02\\x01\\x51\\x09\\x06\\x00\\x00\", // \"?\"\n        \"\\x00\\x32\\x49\\x79\\x41\\x3E\\x00\\x00\", // \"@\"\n        \"\\x00\\x7E\\x09\\x09\\x09\\x7E\\x00\\x00\", // \"A\"\n        \"\\x00\\x7F\\x49\\x49\\x49\\x36\\x00\\x00\", // \"B\"\n        \"\\x00\\x3E\\x41\\x41\\x41\\x22\\x00\\x00\", // \"C\"\n        \"\\x00\\x7F\\x41\\x41\\x22\\x1C\\x00\\x00\", // \"D\"\n        \"\\x00\\x7F\\x49\\x49\\x49\\x41\\x00\\x00\", // \"E\"\n        \"\\x00\\x7F\\x09\\x09\\x09\\x01\\x00\\x00\", // \"F\"\n        \"\\x00\\x3E\\x41\\x41\\x51\\x72\\x00\\x00\", // \"G\"\n        \"\\x00\\x7F\\x08\\x08\\x08\\x7F\\x00\\x00\", // \"H\"\n        \"\\x00\\x41\\x7F\\x41\\x00\\x00\\x00\\x00\", // \"I\"\n        \"\\x00\\x20\\x40\\x41\\x3F\\x01\\x00\\x00\", // \"J\"\n        \"\\x00\\x7F\\x08\\x14\\x22\\x41\\x00\\x00\", // \"K\"\n        \"\\x00\\x7F\\x40\\x40\\x40\\x40\\x00\\x00\", // \"L\"\n        \"\\x00\\x7F\\x02\\x0C\\x02\\x7F\\x00\\x00\", // \"M\"\n        \"\\x00\\x7F\\x04\\x08\\x10\\x7F\\x00\\x00\", // \"N\"\n        \"\\x00\\x3E\\x41\\x41\\x41\\x3E\\x00\\x00\", // \"O\"\n        \"\\x00\\x7F\\x09\\x09\\x09\\x06\\x00\\x00\", // \"P\"\n        \"\\x00\\x3E\\x41\\x51\\x21\\x5E\\x00\\x00\", // \"Q\"\n        \"\\x00\\x7F\\x09\\x19\\x29\\x46\\x00\\x00\", // \"R\"\n        \"\\x00\\x26\\x49\\x49\\x49\\x32\\x00\\x00\", // \"S\"\n        \"\\x00\\x01\\x01\\x7F\\x01\\x01\\x00\\x00\", // \"T\"\n        \"\\x00\\x3F\\x40\\x40\\x40\\x3F\\x00\\x00\", // \"U\"\n        \"\\x00\\x1F\\x20\\x40\\x20\\x1F\\x00\\x00\", // \"V\"\n        \"\\x00\\x3F\\x40\\x38\\x40\\x3F\\x00\\x00\", // \"W\"\n        \"\\x00\\x63\\x14\\x08\\x14\\x63\\x00\\x00\", // \"X\"\n        \"\\x00\\x03\\x04\\x78\\x04\\x03\\x00\\x00\", // \"Y\"\n        \"\\x00\\x61\\x51\\x49\\x45\\x43\\x00\\x00\", // \"Z\"\n        \"\\x00\\x7F\\x41\\x41\\x00\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x02\\x04\\x08\\x10\\x20\\x00\\x00\", // \"\\\"\n        \"\\x00\\x41\\x41\\x7F\\x00\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x04\\x02\\x01\\x02\\x04\\x00\\x00\", // \"^\"\n        \"\\x00\\x80\\x80\\x80\\x80\\x80\\x00\\x00\", // \"_\"\n        \"\\x00\\x01\\x02\\x04\\x00\\x00\\x00\\x00\", // \"`\"\n        \"\\x00\\x20\\x54\\x54\\x54\\x78\\x00\\x00\", // \"a\"\n        \"\\x00\\x7F\\x48\\x44\\x44\\x38\\x00\\x00\", // \"b\"\n        \"\\x00\\x38\\x44\\x44\\x28\\x00\\x00\\x00\", // \"c\"\n        \"\\x00\\x38\\x44\\x44\\x48\\x7F\\x00\\x00\", // \"d\"\n        \"\\x00\\x38\\x54\\x54\\x54\\x18\\x00\\x00\", // \"e\"\n        \"\\x00\\x08\\x7E\\x09\\x02\\x00\\x00\\x00\", // \"f\"\n        \"\\x00\\x18\\xA4\\xA4\\xA4\\x7C\\x00\\x00\", // \"g\"\n        \"\\x00\\x7F\\x08\\x04\\x04\\x78\\x00\\x00\", // \"h\"\n        \"\\x00\\x00\\x7D\\x00\\x00\\x00\\x00\\x00\", // \"i\"\n        \"\\x00\\x80\\x84\\x7D\\x00\\x00\\x00\\x00\", // \"j\"\n        \"\\x00\\x7F\\x10\\x28\\x44\\x00\\x00\\x00\", // \"k\"\n        \"\\x00\\x41\\x7F\\x40\\x00\\x00\\x00\\x00\", // \"l\"\n        \"\\x00\\x7C\\x04\\x18\\x04\\x78\\x00\\x00\", // \"m\"\n        \"\\x00\\x7C\\x08\\x04\\x7C\\x00\\x00\\x00\", // \"n\"\n        \"\\x00\\x38\\x44\\x44\\x38\\x00\\x00\\x00\", // \"o\"\n        \"\\x00\\xFC\\x24\\x24\\x18\\x00\\x00\\x00\", // \"p\"\n        \"\\x00\\x18\\x24\\x24\\xFC\\x00\\x00\\x00\", // \"q\"\n        \"\\x00\\x00\\x7C\\x08\\x04\\x00\\x00\\x00\", // \"r\"\n        \"\\x00\\x48\\x54\\x54\\x24\\x00\\x00\\x00\", // \"s\"\n        \"\\x00\\x04\\x7F\\x44\\x00\\x00\\x00\\x00\", // \"t\"\n        \"\\x00\\x3C\\x40\\x40\\x7C\\x00\\x00\\x00\", // \"u\"\n        \"\\x00\\x1C\\x20\\x40\\x20\\x1C\\x00\\x00\", // \"v\"\n        \"\\x00\\x3C\\x40\\x30\\x40\\x3C\\x00\\x00\", // \"w\"\n        \"\\x00\\x44\\x28\\x10\\x28\\x44\\x00\\x00\", // \"x\"\n        \"\\x00\\x1C\\xA0\\xA0\\x7C\\x00\\x00\\x00\", // \"y\"\n        \"\\x00\\x44\\x64\\x54\\x4C\\x44\\x00\\x00\", // \"z\"\n        \"\\x00\\x08\\x36\\x41\\x00\\x00\\x00\\x00\", // \"{\"\n        \"\\x00\\x00\\x7F\\x00\\x00\\x00\\x00\\x00\", // \"|\"\n        \"\\x00\\x41\\x36\\x08\\x00\\x00\\x00\\x00\", // \"}\"\n        \"\\x00\\x02\\x01\\x01\\x02\\x01\\x00\\x00\"  // \"~\"\n    ];\n    function oledcmd(c: number) {\n        pins.i2cWriteNumber(0x3c, c, NumberFormat.UInt16BE);\n    }\n    function writeData(n: number) {\n        let b = n;\n        if (n < 0) { n = 0 }\n        if (n > 255) { n = 255 }\n        pins.i2cWriteNumber(0x3c, 0x4000 + b, NumberFormat.UInt16BE);\n    }\n    function writeCustomChar(c: string) {\n        for (let i = 0; i < 8; i++) {\n            writeData(c.charCodeAt(i));\n        }\n    }\n    function setText(row: number, column: number) {\n        let r = row;\n        let c = column;\n        if (row < 0) { r = 0 }\n        if (column < 0) { c = 0 }\n        if (row > 7) { r = 7 }\n        if (column > 15) { c = 15 }\n        oledcmd(0xB0 + r);            //set page address\n        oledcmd(0x00 + (8 * c & 0x0F));  //set column lower address\n        oledcmd(0x10 + ((8 * c >> 4) & 0x0F));   //set column higher address\n    }\n    function putChar(c: string) {\n        let c1 = c.charCodeAt(0);\n        writeCustomChar(basicFont[c1 - 32]);\n    }\n    function oledinit(): void {\n        oledcmd(0xAE);  // Set display OFF\n        oledcmd(0xD5);  // Set Display Clock Divide Ratio / OSC Frequency 0xD4\n        oledcmd(0x80);  // Display Clock Divide Ratio / OSC Frequency \n        oledcmd(0xA8);  // Set Multiplex Ratio\n        oledcmd(0x3F);  // Multiplex Ratio for 128x64 (64-1)\n        oledcmd(0xD3);  // Set Display Offset\n        oledcmd(0x00);  // Display Offset\n        oledcmd(0x40);  // Set Display Start Line\n        oledcmd(0x8D);  // Set Charge Pump\n        oledcmd(0x14);  // Charge Pump (0x10 External, 0x14 Internal DC/DC)\n        oledcmd(0xA1);  // Set Segment Re-Map\n        oledcmd(0xC8);  // Set Com Output Scan Direction\n        oledcmd(0xDA);  // Set COM Hardware Configuration\n        oledcmd(0x12);  // COM Hardware Configuration\n        oledcmd(0x81);  // Set Contrast\n        oledcmd(0xCF);  // Contrast\n        oledcmd(0xD9);  // Set Pre-Charge Period\n        oledcmd(0xF1);  // Set Pre-Charge Period (0x22 External, 0xF1 Internal)\n        oledcmd(0xDB);  // Set VCOMH Deselect Level\n        oledcmd(0x40);  // VCOMH Deselect Level\n        oledcmd(0xA4);  // Set all pixels OFF\n        oledcmd(0xA6);  // Set display not inverted\n        oledcmd(0xAF);  // Set display On\n        oledClear();\n    }\n\n    ///////////////////////////////enum\n\n\n    export enum NeoPixelColors {\n        //% block=red\n        Red = 0xFF0000,\n        //% block=orange\n        Orange = 0xFFA500,\n        //% block=yellow\n        Yellow = 0xFFFF00,\n        //% block=green\n        Green = 0x00FF00,\n        //% block=blue\n        Blue = 0x0000FF,\n        //% block=indigo\n        Indigo = 0x4b0082,\n        //% block=violet\n        Violet = 0x8a2be2,\n        //% block=purple\n        Purple = 0xFF00FF,\n        //% block=white\n        White = 0xFFFFFF,\n        //% block=black\n        Black = 0x000000\n    }\n\n    /**\n     * Different modes for RGB or RGB+W NeoPixel strips\n     */\n    export enum NeoPixelMode {\n        //% block=\"RGB (GRB format)\"\n        RGB = 0,\n        //% block=\"RGB+W\"\n        RGBW = 1,\n        //% block=\"RGB (RGB format)\"\n        RGB_RGB = 2\n    }\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n    /////////////////////////////User_function//////////////////\n\n    //% line.min=1 line.max=8 line.defl=1\n    //% text.defl=\"Hello,ELECFREAKS\"\n    //% block=\"OLED show line %line|text %text\"\n    //% subcategory=Display group=\"OLED\" color=#00B1ED\n    export function showUserText(line: number, text: string) {\n        if (firstoledinit) {\n            oledinit()\n            firstoledinit = false\n        }\n        if (text.length > 16) {\n            text = text.substr(0, 16)\n        }\n        line = line - 1\n        setText(line, 0);\n        for (let c of text) {\n            putChar(c);\n        }\n\n        for (let i = text.length; i < 16; i++) {\n            setText(line, i);\n            putChar(\" \");\n        }\n    }\n    //% line.min=1 line.max=8 line.defl=2 \n    //% n.defl=20200508\n    //% block=\"OLED show line %line|number %n\"\n    //% subcategory=Display group=\"OLED\" color=#00B1ED\n    export function showUserNumber(line: number, n: number) {\n        if (firstoledinit) {\n            oledinit()\n            firstoledinit = false\n        }\n        showUserText(line, \"\" + n)\n    }\n    //% block=\"clear display\" color=#00B1ED\n    //% subcategory=Display group=\"OLED\"\n    export function oledClear() {\n        //oledcmd(DISPLAY_OFF);   //display off\n        for (let j = 0; j < 8; j++) {\n            setText(j, 0);\n            {\n                for (let i = 0; i < 16; i++)  //clear all columns\n                {\n                    putChar(' ');\n                }\n            }\n        }\n        //oledcmd(DISPLAY_ON);    //display on\n        setText(0, 0);\n    }\n    /**\n   * Create a new driver Grove - 4-Digit Display\n   * @param clkPin value of clk pin number\n   * @param dataPin value of data pin number\n   */\n    //% blockId=grove_tm1637_create block=\"connect 4-Digit cPin %cPin dPin %dPin\"\n    //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" blockSetVariable=display color=#EA5532\n    export function tm1637Create(cPin: DigitalPin, dPin: DigitalPin, intensity: number = 7, count: number = 4): TM1637LEDs {\n        let display = new TM1637LEDs();\n        display.clk = cPin\n        display.dio = dPin\n        if ((count < 1) || (count > 5)) count = 4;\n        display.count = count;\n        display.brightness = intensity;\n        display.init();\n        return display;\n    }\n    export class TM1637LEDs {\n        buf: Buffer;\n        clk: DigitalPin;\n        dio: DigitalPin;\n        _ON: number;\n        brightness: number;\n        count: number;  // number of LEDs\n        /**\n         * initial TM1637\n         */\n        init(): void {\n            pins.digitalWritePin(this.clk, 0);\n            pins.digitalWritePin(this.dio, 0);\n            this._ON = 8;\n            this.buf = pins.createBuffer(this.count);\n            this.clear();\n        }\n        /**\n         * Start \n         */\n        _start() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        /**\n         * Stop\n         */\n        _stop() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.dio, 1);\n        }\n        /**\n         * send command1\n         */\n        _write_data_cmd() {\n            this._start();\n            this._write_byte(TM1637_CMD1);\n            this._stop();\n        }\n        /**\n         * send command3\n         */\n        _write_dsp_ctrl() {\n            this._start();\n            this._write_byte(TM1637_CMD3 | this._ON | this.brightness);\n            this._stop();\n        }\n        /**\n         * send a byte to 2-wire interface\n         */\n        _write_byte(b: number) {\n            for (let i = 0; i < 8; i++) {\n                pins.digitalWritePin(this.dio, (b >> i) & 1);\n                pins.digitalWritePin(this.clk, 1);\n                pins.digitalWritePin(this.clk, 0);\n            }\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _intensity(val: number = 7) {\n            this._ON = 8;\n            this.brightness = val - 1;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n        /**\n         * set data to TM1637, with given bit\n         */\n        _dat(bit: number, dat: number) {\n            this._write_data_cmd();\n            this._start();\n            this._write_byte(TM1637_CMD2 | (bit % this.count))\n            this._write_byte(dat);\n            this._stop();\n            this._write_dsp_ctrl();\n        }\n        /**\n         * Show a single number from 0 to 9 at a specified digit of Grove - 4-Digit Display\n         * @param dispData value of number\n         * @param bitAddr value of bit number\n         */\n        //% blockId=grove_tm1637_display_bit block=\"%display|show single number|%num|at digit|%bit\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        //% bit.defl=1 bit.min=0 bit.max=9\n        showbit(num: number = 5, bit: number = 0) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            this.buf[bit % this.count] = _SEGMENTS[num % 16]\n            this._dat(bit, _SEGMENTS[num % 16])\n        }\n        /**\n         * Show a 4 digits number on display\n         * @param dispData value of number\n         */\n        //% blockId=grove_tm1637_display_number block=\"%display|show number|%num\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        showNumber(num: number) {\n            if (num < 0) {\n                num = -num\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n                this._dat(0, 0x40) // '-'\n            }\n            else {\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n            }\n        }\n        /**\n         * show or hide dot point. \n         * @param bit is the position, eg: 1\n         * @param show is show/hide dp, eg: true\n         */\n        //% blockId=\"TM1637_showDP\" block=\"%display|DotPoint at %bit|show $show\"\n        //% show.shadow=\"toggleOnOff\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        showDP(bit: number = 1, show: boolean = true) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            bit = bit % this.count\n            if (show) this._dat(bit, this.buf[bit] | 0x80)\n            else this._dat(bit, this.buf[bit] & 0x7F)\n        }\n        /**\n         * clear LED. \n         */\n        //% blockId=\"TM1637_clear\" block=\"clear display %display\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        clear() {\n            for (let i = 0; i < this.count; i++) {\n                this._dat(i, 0)\n                this.buf[i] = 0\n            }\n        }\n    }\n    //% shim=sendBufferAsm\n    function sendBuffer(buf: Buffer, pin: DigitalPin) {\n    }\n    export class Strip {\n        buf: Buffer;\n        pin: DigitalPin;\n        // TODO: encode as bytes instead of 32bit\n        brightness: number;\n        start: number; // start offset in LED strip\n        _length: number; // number of LEDs\n        _mode: NeoPixelMode;\n        _matrixWidth: number; // number of leds in a matrix - if any\n\n        /**\n         * Shows all LEDs to a given color (range 0-255 for r, g, b).\n         * @param rgb RGB color of the LED\n         */\n        //% blockId=\"neopixel_set_strip_color\" block=\"%strip|show color %rgb=neopixel_colors\"\n        //% weight=85 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        showColor(rgb: number) {\n            rgb = rgb >> 0;\n            this.setAllRGB(rgb);\n            this.show();\n        }\n\n        /**\n         * Shows a rainbow pattern on all LEDs.\n         * @param startHue the start hue value for the rainbow, eg: 1\n         * @param endHue the end hue value for the rainbow, eg: 360\n         */\n        //% blockId=\"neopixel_set_strip_rainbow\" block=\"%strip|show rainbow from %startHue|to %endHue\"\n        //% weight=85 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        showRainbow(startHue: number = 1, endHue: number = 360) {\n            if (this._length <= 0) return;\n\n            startHue = startHue >> 0;\n            endHue = endHue >> 0;\n            const saturation = 100;\n            const luminance = 50;\n            const steps = this._length;\n            const direction = HueInterpolationDirection.Clockwise;\n\n            //hue\n            const h1 = startHue;\n            const h2 = endHue;\n            const hDistCW = ((h2 + 360) - h1) % 360;\n            const hStepCW = Math.idiv((hDistCW * 100), steps);\n            const hDistCCW = ((h1 + 360) - h2) % 360;\n            const hStepCCW = Math.idiv(-(hDistCCW * 100), steps);\n            let hStep: number;\n            if (direction === HueInterpolationDirection.Clockwise) {\n                hStep = hStepCW;\n            } else if (direction === HueInterpolationDirection.CounterClockwise) {\n                hStep = hStepCCW;\n            } else {\n                hStep = hDistCW < hDistCCW ? hStepCW : hStepCCW;\n            }\n            const h1_100 = h1 * 100; //we multiply by 100 so we keep more accurate results while doing interpolation\n\n            //sat\n            const s1 = saturation;\n            const s2 = saturation;\n            const sDist = s2 - s1;\n            const sStep = Math.idiv(sDist, steps);\n            const s1_100 = s1 * 100;\n\n            //lum\n            const l1 = luminance;\n            const l2 = luminance;\n            const lDist = l2 - l1;\n            const lStep = Math.idiv(lDist, steps);\n            const l1_100 = l1 * 100\n\n            //interpolate\n            if (steps === 1) {\n                this.setPixelColor(0, hsl(h1 + hStep, s1 + sStep, l1 + lStep))\n            } else {\n                this.setPixelColor(0, hsl(startHue, saturation, luminance));\n                for (let i = 1; i < steps - 1; i++) {\n                    const h = Math.idiv((h1_100 + i * hStep), 100) + 360;\n                    const s = Math.idiv((s1_100 + i * sStep), 100);\n                    const l = Math.idiv((l1_100 + i * lStep), 100);\n                    this.setPixelColor(i, hsl(h, s, l));\n                }\n                this.setPixelColor(steps - 1, hsl(endHue, saturation, luminance));\n            }\n            this.show();\n        }\n\n        /**\n         * Set LED to a given color (range 0-255 for r, g, b).\n         * You need to call ``show`` to make the changes visible.\n         * @param pixeloffset position of the NeoPixel in the strip\n         * @param rgb RGB color of the LED\n         */\n        //% blockId=\"neopixel_set_pixel_color\" block=\"%strip|set pixel color at %pixeloffset|to %rgb=neopixel_colors\"\n        //% weight=80 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setPixelColor(pixeloffset: number, rgb: number): void {\n            this.setPixelRGB(pixeloffset >> 0, rgb >> 0);\n        }\n\n        /**\n         * Send all the changes to the strip.\n         */\n        //% blockId=\"neopixel_show\" block=\"%strip|show\" \n        //% weight=79\n        //% parts=\"neopixel\" subcategory=Neopixel\n        show() {\n            sendBuffer(this.buf, this.pin);\n        }\n\n        /**\n         * Turn off all LEDs.\n         * You need to call ``show`` to make the changes visible.\n         */\n        //% blockId=\"neopixel_clear\" block=\"%strip|clear\"\n        //% weight=76 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        clear(): void {\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.fill(0, this.start * stride, this._length * stride);\n        }\n\n        /**\n         * Set the brightness of the strip. This flag only applies to future operation.\n         * @param brightness a measure of LED brightness in 0-255. eg: 255\n         */\n        //% blockId=\"neopixel_set_brightness\" block=\"%strip|set brightness %brightness\" \n        //% weight=59 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setBrightness(brightness: number): void {\n            this.brightness = brightness & 0xff;\n        }\n        /**\n         * Gets the number of pixels declared on the strip\n         */\n        //% blockId=\"neopixel_length\" block=\"%strip|length\" blockGap=8\n        //% subcategory=\"Neopixel\"\n        //% weight=60 advanced=true\n        length() {\n            return this._length;\n        }\n        /**\n         * Create a range of LEDs.\n         * @param start offset in the LED strip to start the range\n         * @param length number of LEDs in the range. eg: 4\n         */\n        //% weight=89 color=#EA5532\n        //% blockId=\"neopixel_range\" block=\"%strip|range from %start|with %length|leds\"\n        //% parts=\"neopixel\"\n        //% blockSetVariable=range subcategory=Neopixel\n        range(start: number, length: number): Strip {\n            start = start >> 0;\n            length = length >> 0;\n            let strip = new Strip();\n            strip.buf = this.buf;\n            strip.pin = this.pin;\n            strip.brightness = this.brightness;\n            strip.start = this.start + Math.clamp(0, this._length - 1, start);\n            strip._length = Math.clamp(0, this._length - (strip.start - this.start), length);\n            strip._matrixWidth = 0;\n            strip._mode = this._mode;\n            return strip;\n        }\n\n        /**\n         * Shift LEDs forward and clear with zeros.\n         * You need to call ``show`` to make the changes visible.\n         * @param offset number of pixels to shift forward, eg: 1\n         */\n        //% blockId=\"neopixel_shift\" block=\"%strip|shift pixels by %offset\" \n        //% weight=40 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        shift(offset: number = 1): void {\n            offset = offset >> 0;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.shift(-offset * stride, this.start * stride, this._length * stride)\n        }\n\n        /**\n         * Rotate LEDs forward.\n         * You need to call ``show`` to make the changes visible.\n         * @param offset number of pixels to rotate forward, eg: 1\n         */\n        //% blockId=\"neopixel_rotate\" block=\"%strip|rotate pixels by %offset\" \n        //% weight=39 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        rotate(offset: number = 1): void {\n            offset = offset >> 0;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.rotate(-offset * stride, this.start * stride, this._length * stride)\n        }\n\n        /**\n         * Set the pin where the neopixel is connected, defaults to P0.\n         */\n        //% weight=10 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setPin(pin: DigitalPin): void {\n            this.pin = pin;\n            pins.digitalWritePin(this.pin, 0);\n            // don't yield to avoid races on initialization\n        }\n\n        private setBufferRGB(offset: number, red: number, green: number, blue: number): void {\n            if (this._mode === NeoPixelMode.RGB_RGB) {\n                this.buf[offset + 0] = red;\n                this.buf[offset + 1] = green;\n            } else {\n                this.buf[offset + 0] = green;\n                this.buf[offset + 1] = red;\n            }\n            this.buf[offset + 2] = blue;\n        }\n\n        private setAllRGB(rgb: number) {\n            let red = unpackR(rgb);\n            let green = unpackG(rgb);\n            let blue = unpackB(rgb);\n\n            const br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            const end = this.start + this._length;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            for (let i = this.start; i < end; ++i) {\n                this.setBufferRGB(i * stride, red, green, blue)\n            }\n        }\n        private setPixelRGB(pixeloffset: number, rgb: number): void {\n            if (pixeloffset < 0\n                || pixeloffset >= this._length)\n                return;\n\n            let stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            pixeloffset = (pixeloffset + this.start) * stride;\n\n            let red = unpackR(rgb);\n            let green = unpackG(rgb);\n            let blue = unpackB(rgb);\n\n            let br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            this.setBufferRGB(pixeloffset, red, green, blue)\n        }\n\n    }\n\n    /**\n     * Create a new NeoPixel driver for `numleds` LEDs.\n     * @param pin the pin where the neopixel is connected.\n     * @param numleds number of leds in the strip, eg: 24,30,60,64\n     */\n    //% blockId=\"neopixel_create\" block=\"NeoPixel at pin %Rjpin|with %numleds|leds as %mode\"\n    //% weight=90 color=#EA5532\n    //% parts=\"neopixel\"\n    //% trackArgs=0,2\n    //% blockSetVariable=strip subcategory=Neopixel\n    export function create(Rjpin: DigitalRJPin, numleds: number, mode: NeoPixelMode): Strip {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        let strip = new Strip();\n        let stride = mode === NeoPixelMode.RGBW ? 4 : 3;\n        strip.buf = pins.createBuffer(numleds * stride);\n        strip.start = 0;\n        strip._length = numleds;\n        strip._mode = mode;\n        strip._matrixWidth = 0;\n        strip.setBrightness(50)\n        strip.setPin(pin)\n        return strip;\n    }\n\n    /**\n     * Converts red, green, blue channels into a RGB color\n     * @param red value of the red channel between 0 and 255. eg: 255\n     * @param green value of the green channel between 0 and 255. eg: 255\n     * @param blue value of the blue channel between 0 and 255. eg: 255\n     */\n    //% weight=1 subcategory=Neopixel color=#EA5532\n    //% blockId=\"neopixel_rgb\" block=\"red %red|green %green|blue %blue\"\n    export function rgb(red: number, green: number, blue: number): number {\n        return packRGB(red, green, blue);\n    }\n\n    /**\n     * Gets the RGB value of a known color\n    */\n    //% weight=2 subcategory=Neopixel color=#EA5532\n    //% blockId=\"neopixel_colors\" block=\"%color\"\n    export function colors(color: NeoPixelColors): number {\n        return color;\n    }\n\n    function packRGB(a: number, b: number, c: number): number {\n        return ((a & 0xFF) << 16) | ((b & 0xFF) << 8) | (c & 0xFF);\n    }\n    function unpackR(rgb: number): number {\n        let r = (rgb >> 16) & 0xFF;\n        return r;\n    }\n    function unpackG(rgb: number): number {\n        let g = (rgb >> 8) & 0xFF;\n        return g;\n    }\n    function unpackB(rgb: number): number {\n        let b = (rgb) & 0xFF;\n        return b;\n    }\n\n    /**\n     * Converts a hue saturation luminosity value into a RGB color\n     * @param h hue from 0 to 360\n     * @param s saturation from 0 to 99\n     * @param l luminosity from 0 to 99\n     */\n    //% blockId=neopixelHSL block=\"hue %h|saturation %s|luminosity %l\" subcategory=Neopixel color=#EA5532\n    export function hsl(h: number, s: number, l: number): number {\n        h = Math.round(h);\n        s = Math.round(s);\n        l = Math.round(l);\n\n        h = h % 360;\n        s = Math.clamp(0, 99, s);\n        l = Math.clamp(0, 99, l);\n        let c = Math.idiv((((100 - Math.abs(2 * l - 100)) * s) << 8), 10000); //chroma, [0,255]\n        let h1 = Math.idiv(h, 60);//[0,6]\n        let h2 = Math.idiv((h - h1 * 60) * 256, 60);//[0,255]\n        let temp = Math.abs((((h1 % 2) << 8) + h2) - 256);\n        let x = (c * (256 - (temp))) >> 8;//[0,255], second largest component of this color\n        let r$:\n            number;\n        let g$:\n            number;\n        let b$:\n            number;\n        if (h1 == 0) {\n            r$ = c;\n            g$ = x;\n            b$ = 0;\n        }\n        else if (h1 == 1) {\n            r$ = x;\n            g$ = c;\n            b$ = 0;\n        }\n        else if (h1 == 2) {\n            r$ = 0;\n            g$ = c;\n            b$ = x;\n        }\n        else if (h1 == 3) {\n            r$ = 0;\n            g$ = x;\n            b$ = c;\n        }\n        else if (h1 == 4) {\n            r$ = x;\n            g$ = 0;\n            b$ = c;\n        }\n        else if (h1 == 5) {\n            r$ = c;\n            g$ = 0;\n            b$ = x;\n        }\n        let m = Math.idiv((Math.idiv((l * 2 << 8), 100) - c), 2);\n        let r = r$ + m;\n        let g = g$ + m;\n        let b = b$ + m;\n        return packRGB(r, g, b);\n    }\n\n    export enum HueInterpolationDirection {\n        Clockwise,\n        CounterClockwise,\n        Shortest\n    }\n}\n","planetxbasic.ts":"/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#00B1ED  icon=\"\\uf005\" block=\"Connected\" blockId=\"PlanetX_Connected\"\n//% groups='[\"Digital\", \"Analog\", \"IIC Port\"]'\nnamespace Connected {\n    \n    ////////////////////////paj7620//////////////////////\n    let gesture_first_init = true\n    const initRegisterArray: number[] = [\n        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17,\n        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F,\n        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14,\n        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27,\n        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01,\n        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00,\n        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20,\n        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37,\n        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A,\n        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F,\n        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30,\n        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19,\n        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04,\n        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00,\n        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00,\n        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F,\n        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07,\n        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01,\n        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F,\n        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01,\n        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40,\n        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E,\n        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00,\n        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08,\n        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00,\n        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01,\n        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01,\n        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01\n    ];\n    \n    /////////////////////////color/////////////////////////\n    const APDS9960_ADDR = 0x39\n    const APDS9960_ENABLE = 0x80\n    const APDS9960_ATIME = 0x81\n    const APDS9960_CONTROL = 0x8F\n    const APDS9960_STATUS = 0x93\n    const APDS9960_CDATAL = 0x94\n    const APDS9960_CDATAH = 0x95\n    const APDS9960_RDATAL = 0x96\n    const APDS9960_RDATAH = 0x97\n    const APDS9960_GDATAL = 0x98\n    const APDS9960_GDATAH = 0x99\n    const APDS9960_BDATAL = 0x9A\n    const APDS9960_BDATAH = 0x9B\n    const APDS9960_GCONF4 = 0xAB\n    const APDS9960_AICLEAR = 0xE7\n    let color_first_init = false\n\n    function i2cwrite_color(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n    function i2cread_color(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n    function rgb2hsl(color_r: number, color_g: number, color_b: number): number {\n        let Hue = 0\n        let R = color_r * 100 / 255;\n        let G = color_g * 100 / 255;\n        let B = color_b * 100 / 255;\n        let maxVal = Math.max(R, Math.max(G, B))\n        let minVal = Math.min(R, Math.min(G, B))\n        let Delta = maxVal - minVal;\n\n        if (Delta < 0) {\n            Hue = 0;\n        }\n        else if (maxVal == R && G >= B) {\n            Hue = (60 * ((G - B) * 100 / Delta)) / 100;\n        }\n        else if (maxVal == R && G < B) {\n            Hue = (60 * ((G - B) * 100 / Delta) + 360 * 100) / 100;\n        }\n        else if (maxVal == G) {\n            Hue = (60 * ((B - R) * 100 / Delta) + 120 * 100) / 100;\n        }\n        else if (maxVal == B) {\n            Hue = (60 * ((R - G) * 100 / Delta) + 240 * 100) / 100;\n        }\n        return Hue\n    }\n    function initModule(): void {\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ATIME, 252)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_CONTROL, 0x03)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_GCONF4, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_AICLEAR, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x01)\n        color_first_init = true\n    }\n    function colorMode(): void {\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_ENABLE) | 0x2;\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, tmp);\n    }\n\n    ///////////////////////////////////////////////////////MP3\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    /*\n    * Play status selection button list\n    */\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(100)\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,        \n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum Distance_Unit_List {\n        //% block=\"cm\" \n        Distance_Unit_cm,\n\n        //% block=\"foot\"\n        Distance_Unit_foot,\n    }\n    export enum ButtonStateList {\n        //% block=\"C\"\n        C,\n        //% block=\"D\"\n        D,\n        //% block=\"C+D\"\n        CD\n    }\n    export enum GestureType {\n        //% block=\"None\"\n        None = 0,\n        //% block=\"Right\"\n        Right = 1,\n        //% block=\"Left\"\n        Left = 2,\n        //% block=\"Up\"\n        Up = 3,\n        //% block=\"Down\"\n        Down = 4,\n        //% block=\"Forward\"\n        Forward = 5,\n        //% block=\"Backward\"\n        Backward = 6,\n        //% block=\"Clockwise\"\n        Clockwise = 7,\n        //% block=\"Anticlockwise\"\n        Anticlockwise = 8,\n        //% block=\"Wave\"\n        Wave = 9\n    }\n    export enum ColorList {\n        //% block=\"Red\"\n        red,\n        //% block=\"Green\"\n        green,\n        //% block=\"Blue\"\n        blue,\n        //% block=\"Cyan\"\n        cyan,\n        //% block=\"Magenta\"\n        magenta,\n        //% block=\"Yellow\"\n        yellow,\n        //% block=\"White\"\n        white\n    }\n\n    ///////////////////////////////////blocks/////////////////////////////\n\n    //% blockId=\"readwaterLevel\" block=\"Water level sensor %Rjpin value(0~100)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function waterLevel(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let voltage = 0, waterlevel = 0;\n        voltage = pins.map(\n            pins.analogReadPin(pin),\n            50,\n            600,\n            0,\n            100\n        );\n        if (voltage < 0) {\n            voltage = 0\n        }\n        waterlevel = voltage;\n        return Math.round(waterlevel)\n    }\n\n    let distance_last = 0\n\n    //% blockId=sonarbit block=\"Ultrasonic sensor pinT %tPin pinE %ePin distance %distance_unit\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% distance_unit.fieldEditor=\"gridpicker\"\n    //% distance_unit.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function ultrasoundSensor(tPin: DigitalPin, ePin: DigitalPin, distance_unit: Distance_Unit_List): number {\n        let pinT = tPin\n        let pinE = ePin\n        pins.setPull(pinT, PinPullMode.PullNone)\n        pins.digitalWritePin(pinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(pinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(pinT, 0)\n\n        // read pulse\n        let d = pins.pulseIn(pinE, PulseValue.High, 25000)\n        let version = control.hardwareVersion()\n        let distance = d * 34 / 2 / 1000\n        if (version == \"1\") {\n            distance = distance * 3 / 2\n        }\n\n        if (distance > 430) {\n            distance = 0\n        }\n\n        if (distance == 0) {\n            distance = distance_last\n            distance_last = 0\n        }\n        else {\n            distance_last = distance\n        }\n\n        switch (distance_unit) {\n            case Distance_Unit_List.Distance_Unit_cm:\n                return Math.floor(distance)  //cm\n                break\n            case Distance_Unit_List.Distance_Unit_foot:\n                return Math.floor(distance / 30.48)   //foot\n                break\n            default:\n                return 0\n        }\n    }\n\n    export class PAJ7620 {\n        private paj7620WriteReg(addr: number, cmd: number) {\n            let buf: Buffer = pins.createBuffer(2);\n            buf[0] = addr;\n            buf[1] = cmd;\n            pins.i2cWriteBuffer(0x73, buf, false);\n        }\n        private paj7620ReadReg(addr: number): number {\n            let buf: Buffer = pins.createBuffer(1);\n            buf[0] = addr;\n            pins.i2cWriteBuffer(0x73, buf, false);\n            buf = pins.i2cReadBuffer(0x73, 1, false);\n            return buf[0];\n        }\n        private paj7620SelectBank(bank: number) {\n            if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n        }\n        private paj7620Init() {\n            let temp = 0;\n            this.paj7620SelectBank(0);\n            temp = this.paj7620ReadReg(0);\n            if (temp == 0x20) {\n                for (let i = 0; i < 438; i += 2) {\n                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n                }\n            }\n            this.paj7620SelectBank(0);\n        }\n        init() {\n            this.paj7620Init();\n            basic.pause(200);\n        }\n        read(): number {\n            let data = 0, result = 0;\n            data = this.paj7620ReadReg(0x43);\n            switch (data) {\n                case 0x01:\n                    result = GestureType.Right;\n                    break;\n                case 0x02:\n                    result = GestureType.Left;\n                    break;\n                case 0x04:\n                    result = GestureType.Up;\n                    break;\n                case 0x08:\n                    result = GestureType.Down;\n                    break;\n                case 0x10:\n                    result = GestureType.Forward;\n                    break;\n                case 0x20:\n                    result = GestureType.Backward;\n                    break;\n                case 0x40:\n                    result = GestureType.Clockwise;\n                    break;\n                case 0x80:\n                    result = GestureType.Anticlockwise;\n                    break;\n                default:\n                    data = this.paj7620ReadReg(0x44);\n                    if (data == 0x01)\n                        result = GestureType.Wave;\n                    break;\n            }\n            return result;\n        }\n    }\n    const gestureEventId = 3100;\n    let lastGesture = GestureType.None;\n    let paj7620 = new PAJ7620();\n    //% blockId= gesture_create_event block=\"Gesture sensor IIC port is %gesture\"\n    //% gesture.fieldEditor=\"gridpicker\" gesture.fieldOptions.columns=3\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function onGesture(gesture: GestureType, handler: () => void) {\n        control.onEvent(gestureEventId, gesture, handler);\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        control.inBackground(() => {\n            while (true) {\n                const gesture = paj7620.read();\n                if (gesture != lastGesture) {\n                    lastGesture = gesture;\n                    control.raiseEvent(gestureEventId, lastGesture);\n                }\n                basic.pause(200);\n            }\n        })\n    }\n\n    //% blockId= gesture_get_event block=\"Gesture sensor IIC port detects\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function getGesture(): number {\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        const gesture = paj7620.read();\n        return gesture\n    }\n\n\n\n\n    //% blockId=apds9960_readcolor block=\"Color sensor IIC port color HUE(0~360)\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readColor(): number {\n        if (color_first_init == false) {\n            initModule()\n            colorMode()\n        }\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        while (!tmp) {\n            basic.pause(5);\n            tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        }\n        let c = i2cread_color(APDS9960_ADDR, APDS9960_CDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_CDATAH) * 256;\n        let r = i2cread_color(APDS9960_ADDR, APDS9960_RDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_RDATAH) * 256;\n        let g = i2cread_color(APDS9960_ADDR, APDS9960_GDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_GDATAH) * 256;\n        let b = i2cread_color(APDS9960_ADDR, APDS9960_BDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_BDATAH) * 256;\n        // map to rgb based on clear channel\n        let avg = c / 3;\n        r = r * 255 / avg;\n        g = g * 255 / avg;\n        b = b * 255 / avg;\n        //let hue = rgb2hue(r, g, b);\n        let hue = rgb2hsl(r, g, b)\n        return hue\n    }\n    //% block=\"Color sensor IIC port detects %color\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% color.fieldEditor=\"gridpicker\" color.fieldOptions.columns=3\n    export function checkColor(color: ColorList): boolean {\n        let hue = readColor()\n        switch (color) {\n            case ColorList.red:\n                if (hue > 330 || hue < 20) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.green:\n                if (hue > 120 && 180 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.blue:\n                if (hue > 210 && 270 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.cyan:\n                if (hue > 190 && 210 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.magenta:\n                if (hue > 260 && 330 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.yellow:\n                if (hue > 30 && 120 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.white:\n                if (hue >= 180 && 190 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n        }\n    }\n\n    //% blockId=\"potentiometer\" block=\"Trimpot %Rjpin analog value\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Input color=#E2C438 group=\"Analog\"\n    export function trimpot(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        return pins.analogReadPin(pin)\n    }\n    //% blockId=buttonab block=\"Button %Rjpin %button is pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonCD(Rjpin: DigitalRJPin, button: ButtonStateList): boolean {\n        let pinC = DigitalPin.P1\n        let pinD = DigitalPin.P2\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pinC = DigitalPin.P1\n                pinD = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pinC = DigitalPin.P2\n                pinD = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pinC = DigitalPin.P13\n                pinD = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pinC = DigitalPin.P15\n                pinD = DigitalPin.P16\n                break;\n            case DigitalRJPin.P3:\n                pinC = DigitalPin.P3\n                pinD = DigitalPin.P4\n                break;\n        }\n        pins.setPull(pinC, PinPullMode.PullUp)\n        pins.setPull(pinD, PinPullMode.PullUp)\n        if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 0 && button == ButtonStateList.CD) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinC) == 0 && pins.digitalReadPin(pinD) == 1 && button == ButtonStateList.C) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 1 && button == ButtonStateList.D) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    export enum ButtonState {\n        //% block=\"on\"\n        on = 1,\n        //% block=\"off\"\n        off = 2\n    }\n\n    const buttonEventSource = 5000\n    const buttonEventValue = {\n        CD_pressed: ButtonState.on,\n        CD_unpressed: ButtonState.off\n    }\n\n    //% block=\"on button %Rjpin %button pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=4\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonEvent(Rjpin: DigitalRJPin, button: ButtonStateList, handler: () => void) {\n        let ButtonPin_C = DigitalPin.P1\n        let ButtonPin_D = DigitalPin.P2\n        let pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P0\n        let pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                ButtonPin_C = DigitalPin.P1\n                ButtonPin_D = DigitalPin.P8\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P1\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P8\n                break;\n            case DigitalRJPin.J2:\n                ButtonPin_C = DigitalPin.P2\n                ButtonPin_D = DigitalPin.P12\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P2\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P12\n                break;\n            case DigitalRJPin.J3:\n                ButtonPin_C = DigitalPin.P13\n                ButtonPin_D = DigitalPin.P14\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P13\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P14\n                break;\n            case DigitalRJPin.J4:\n                ButtonPin_C = DigitalPin.P15\n                ButtonPin_D = DigitalPin.P16\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P15\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P16\n                break;\n            case DigitalRJPin.P3:\n                ButtonPin_C = DigitalPin.P3\n                ButtonPin_D = DigitalPin.P4\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P3\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P4\n                break;\n        }\n        if (button == ButtonStateList.C) {\n            pins.setPull(ButtonPin_C, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_C, PinEventType.Edge)\n            control.onEvent(pinEventSource_C, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.D) {\n            pins.setPull(ButtonPin_D, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_D, PinEventType.Edge)\n            control.onEvent(pinEventSource_D, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.CD) {\n            loops.everyInterval(50, function () {\n                if (pins.digitalReadPin(ButtonPin_C) == 0 && pins.digitalReadPin(ButtonPin_D) == 0) {\n                    control.raiseEvent(buttonEventSource, buttonEventValue.CD_pressed)\n                }\n            })\n            control.onEvent(buttonEventSource, buttonEventValue.CD_pressed, handler)\n        }\n    }\n\n    //% blockId=fans block=\"Motor fan %Rjpin toggle to $fanstate || speed %speed \\\\%\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% fanstate.shadow=\"toggleOnOff\"\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    //% speed.min=0 speed.max=100\n    //% expandableArgumentMode=\"toggle\"\n    export function motorFan(Rjpin: DigitalRJPin, fanstate: boolean, speed: number = 100): void {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.J3:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.J4:\n                pin = AnalogPin.P15\n                break;\n        }\n        if (fanstate) {\n            pins.analogSetPeriod(pin, 100)\n            pins.analogWritePin(pin, Math.map(speed, 0, 100, 0, 1023))\n        }\n        else {\n            pins.analogWritePin(pin, 0)\n            speed = 0\n        }\n    }\n\n\n    //% blockId=\"setLoopFolder\" block=\"loop play all the MP3s in the folder:$folderNum\"\n    //% folderNum.defl=\"01\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setLoopFolder(folderNum: string): void {\n        CMD = 0x17\n        para1 = 0\n        para2 = parseInt(folderNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    //% blockId=\"folderPlay\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum || repeatList: $myAns\"\n    //% folderNum.defl=\"01\" fileNum.defl=\"001\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function folderPlay(folderNum: string, fileNum: string, myAns: boolean = false): void {\n        CMD = 0x0F\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        if (myAns)\n            execute(0x19)\n    }\n\n    //% blockId=\"playFolderFilePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFilePort(folderNum: string, fileNum: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFolderFileVolumePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum with volume:$theVolume usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" theVolume.defl=\"10\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFileVolumePort(folderNum: string, fileNum: string, theVolume: string, Rjpin: DigitalRJPin): void {\n        \n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        \n        let volume = parseInt(theVolume)\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(200)\n\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"volumePort\" \n    //% block=\"set MP3 volume:$theVolume usingPin:$Rjpin\"\n    //% theVolume.defl=\"10\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function volumePort(theVolume: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        let volume = parseInt(theVolume)\n        if (volume > 30) {\n            volume = 30\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(300)\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n\n\n    //% blockId=\"setTracking\" \n    //% block=\"play the mp3 in order of:%tracking || repeatList: $myAns\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% tracking.defl=1\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setTracking(tracking: number, myAns: boolean = false): void {\n        CMD = 0x03\n        para1 = 0x00\n        para2 = tracking\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        execute(0x0D)\n        if (myAns)\n            execute(0x19)\n    }\n    //% blockId=MP3execute block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=\"setVolume\" block=\"Set volume(0~25):%volume\"\n    //% volume.min=0 volume.max=25\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setVolume(volume: number): void {\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 0x06\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=MP3setPort block=\"Set the MP3 port to %Rjpin\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function MP3SetPort(Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        setVolume(25)\n    }\n}","notlegos.ts":"// NotLegos Blocks\n\n//% block=\"Not LEGOs\" color=#0031AF weight=1000 icon=\"\\uf3a5\"\n//% groups=['MP3\",'Display', 'Laser', 'others']\nnamespace notLegos {\n\n    // Variables for MP3 and Volume Pot\n    let isPot = false\n    let potPin = AnalogPin.P0\n    let mp3bits = 0\n    let mp3Apin = SerialPin.P0\n    let mp3Bpin = SerialPin.P0\n    let mp3Cpin = SerialPin.P0\n    let mp3Avolume = 1\n    let mp3Bvolume = 1\n    let mp3Cvolume = 1\n    let relativeCvolume = 1\n    let lastMP3bit = \"\"\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    let mp3musicPin:SerialPin\n    let mp3music = false\n    let mp3player = false\n    let mp3sfxPin = null\n    let mp3sfx = false\n    let mp3musicVol = 0\n    let mp3playerPin = null\n    let mp3playerVol = 0\n    let mp3sfxVol = 0\n\n    // String Arrays for Full Player Sound Sets and Shuffled Playlists Thereof\n    let PlayerAwaitingMusic: string[] = []\n    let PlayerFailure: string[] = []\n    let PlayerHurry: string[] = []\n    let PlayerIntro: string[] = []\n    let PlayerIntroMusic: string[] = []\n    let PlayerLevelMusic: string[] = []\n    let PlayerLost: string[] = []\n    let PlayerLostMusic: string[] = []\n    let PlayerName: string[] = []\n    let PlayerNay: string[] = []\n    let PlayerOuch: string[] = []\n    let PlayerReady: string[] = []\n    let PlayerSuccess: string[] = []\n    let PlayerTutorialMusic: string[] = []\n    let PlayerWon: string[] = []\n    let PlayerWonMusic: string[] = []\n    let PlayerYay: string[] = []\n    let PlaylistAwaitingMusic: string[] = []\n    let PlaylistCorrect: string[] = []\n    let PlaylistExplosion: string[] = []\n    let PlaylistFailure: string[] = []\n    let PlaylistFire: string[] = []\n    let PlaylistGhost: string[] = []\n    let PlaylistHurry: string[] = []\n    let PlaylistIncorrect: string[] = []\n    let PlaylistIntro: string[] = []\n    let PlaylistLost: string[] = []\n    let PlaylistName: string[] = []\n    let PlaylistNay: string[] = []\n    let PlaylistOuch: string[] = []\n    let PlaylistReady: string[] = []\n    let PlaylistSlash: string[] = []\n    let PlaylistSpark: string[] = []\n    let PlaylistSplash: string[] = []\n    let PlaylistSuccess: string[] = []\n    let PlaylistWon: string[] = []\n    let PlaylistYay: string[] = []\n\n    // Sound Strings - Global\n    let VoiceTracks = \"10_1_90_1.75|10_2_90_3.65|10_3_50_11.5|10_4_90_0|10_5_90_0|10_6_90_4.65|10_7_90_7.15|10_8_90_4.8|10_9_90_3.75|10_10_90_5.05|10_11_90_0|10_12_90_0|10_13_90_3|10_14_90_3|10_15_90_3|10_16_90_4|10_17_90_0|10_18_90_3|10_19_90_3|10_20_90_4|10_21_90_2|10_22_90_0|10_23_90_2|10_24_90_2|10_25_90_6|10_26_90_6|10_27_90_6|10_28_90_6|10_29_90_6|10_30_90_6|10_31_90_6|10_32_90_6|10_33_90_8|10_34_90_9|10_35_90_6|10_36_90_6|10_37_90_6|10_38_90_6|10_39_90_6|10_40_90_6\".split(\"|\")\n    let CorrectSFX = \"7_1_100_4|7_2_100_8|7_3_100_8|7_4_100_6|7_5_100_10|7_6_100_8|7_7_100_6|7_8_100_4|7_9_100_17|7_10_100_9|7_11_100_4|7_12_100_8|7_13_100_12|7_14_100_7|7_15_100_10|7_16_100_9|7_17_100_10|7_18_100_9|7_19_100_8|7_20_100_4|7_21_100_7|7_22_100_26|7_23_100_5|7_24_100_4|7_25_100_10|7_26_100_7|7_27_100_7|7_28_100_6|7_29_100_7|7_30_100_7|7_31_100_12|7_32_100_4|7_33_100_6|7_34_100_6|7_35_100_6|7_36_100_6|7_37_100_5|7_38_100_3|7_39_100_6|7_40_100_6|7_41_100_6|7_42_100_8|7_43_100_6|7_44_100_8|7_45_100_6|7_46_100_5|7_47_100_5|7_48_100_12|7_49_100_3|7_50_100_7|7_51_100_8|7_52_100_11|7_53_100_6|7_54_100_2|7_55_100_5|7_56_100_7|7_57_100_8|7_58_100_7|7_59_100_6|7_60_100_7|7_61_100_6|7_62_100_8|7_63_100_5|7_64_100_5|7_65_100_7|7_66_100_9|7_67_100_6|7_68_100_6|7_69_100_7|7_70_100_10|7_71_100_7|7_72_100_5|7_73_100_6|7_74_100_8|7_75_100_3|7_76_100_3|7_77_100_6|7_78_100_7|7_79_100_4|7_80_100_6|7_81_100_2|7_82_100_3|7_83_100_3|7_84_100_1|7_85_100_3|7_86_100_6|7_87_100_7|7_88_100_5|7_89_100_3|7_90_100_5|7_91_100_3|7_92_100_3|7_93_100_2|7_94_100_3|7_95_100_3|7_96_100_1|7_99_100_1|7_100_100_1|7_101_100_1|7_102_100_1|7_103_100_1|7_104_100_3|7_105_100_1|7_106_100_1|7_107_100_4|7_108_100_4|7_109_100_1|7_110_100_1|7_111_100_1|7_112_100_1|7_113_100_1|7_114_100_2|7_115_100_1|7_116_100_1|7_117_100_1|7_118_100_1\".split(\"|\")\n    let IncorrectSFX = \"8_1_100_6|8_2_100_5|8_3_100_3|8_4_100_5|8_5_100_7|8_6_100_6|8_7_100_4|8_8_100_1|8_9_100_3|8_10_100_4|8_11_100_3|8_12_100_3|8_13_100_6|8_14_100_3|8_15_100_1|8_16_100_1|8_17_100_1|8_18_100_1|8_19_100_0|8_20_100_0|8_21_100_5|8_22_100_4|8_23_100_3|8_24_100_7\".split(\"|\")\n    let AllSFX = \"9_1_100_4.754|9_2_100_4.336|9_3_100_5.172|9_4_100_4.806|9_5_100_4.754|9_6_100_1.536|9_7_100_2.136|9_8_100_1.896|9_9_100_2.592|9_10_100_0.936|9_11_100_1.008|9_12_100_0.312|9_13_100_1.44|9_14_100_1.8|9_15_100_1.992|9_16_100_1.104|9_17_100_1.08|9_18_100_0.912|9_19_100_0.528|9_20_100_0.72|9_21_100_0.672|9_22_100_0.696|9_23_100_0.6|9_24_100_0.576|9_25_100_1.44|9_26_100_1.8|9_27_100_1.464|9_28_100_0.432|9_29_100_0.312|9_30_100_2.112|9_31_100_0.648|9_32_100_0.384|9_33_100_2.352|9_34_100_1.8|9_35_100_1.608|9_36_100_0.648|9_37_100_0.768|9_38_100_0.552|9_39_100_0.48|9_40_100_1.032|9_41_100_0.456|9_42_100_0.384|9_43_100_0.552|9_44_100_0.432|9_45_100_0.216|9_46_100_0.624|9_47_100_1.248|9_48_100_1.104|9_49_100_1.248|9_50_100_0.648|9_51_100_0.456|9_53_100_5.256|9_54_100_2.328|9_55_100_4.992|9_56_100_1.776|9_57_100_2.28|9_58_100_0.504|9_59_100_0.984|9_60_100_0.984|9_61_100_0.504|9_62_100_1.632|9_63_100_0.288|9_64_100_0.192|9_65_100_0.168|9_66_100_0.288|9_67_100_0.288|9_68_100_0.312|9_69_100_0.72|9_70_100_0.672|9_71_100_0.648|9_72_100_0.648|9_73_100_1.632|9_74_100_1.416|9_75_100_1.248|9_76_100_0.48|9_77_100_0.36|9_78_100_0.216|9_79_100_0.576|9_80_100_0.731|9_81_100_1.128|9_82_100_2.184|9_83_100_0.744|9_84_100_0.6|9_85_100_1.152|9_86_100_1.68|9_87_100_1.32|9_88_100_0.528|9_89_100_0.36|9_90_100_0.792|9_91_100_2.496|9_92_100_1.8|9_93_100_1.8|9_94_100_0.744|9_95_100_1.776|9_96_100_5.544|9_97_100_0.432|9_98_100_2.064|9_99_100_0.744|9_100_100_0.696|9_101_100_1.776|9_102_100_0.12|9_103_100_0.168|9_104_100_0.96|9_105_100_0.96|9_106_100_2.04|9_107_100_3.984|9_108_100_1.608|9_109_100_3.528|9_110_100_0.456|9_111_100_0.696|9_112_100_1.632|9_113_100_2.232\".split(\"|\")\n    let GhostSFX = \"9_1_100_4.754|9_2_100_4.336|9_3_100_5.172|9_4_100_4.806\".split(\"|\")\n    let FireSFX = \"9_6_100_1.536|9_15_100_1.992|9_53_100_5.256|9_106_100_2.04\".split(\"|\")\n    let ExplosionSFX = \"9_77_100_0.36|9_101_100_1.776|9_109_100_3.528\".split(\"|\")\n    let SplashSFX = \"9_33_100_2.352|9_34_100_1.8\".split(\"|\")\n    let SparkSFX = \"9_5_100_4.754|9_51_100_0.456|9_85_100_1.152|9_86_100_1.68|9_111_100_0.696|9_112_100_1.632\".split(\"|\")\n    let SlashSFX = \"9_10_100_0.936|9_25_100_1.44|9_28_100_0.432|9_32_100_0.384|9_50_100_0.648|9_59_100_0.984|9_63_100_0.288|9_64_100_0.192|9_65_100_0.168|9_66_100_0.288|9_67_100_0.288|9_68_100_0.312|9_69_100_0.72|9_75_100_1.248|9_76_100_0.48|9_77_100_0.36|9_78_100_0.216|9_89_100_0.36\".split(\"|\")\n    \n    // Music Strings - Super Mario Brothers\n    let SMBIntroMusic = \"1_1_75_2.808|1_2_75_3.912|1_3_75_7.81|1_4_75_4.992|1_5_75_3.918|1_6_75_12.382|1_7_75_3.204|1_8_75_6.648|1_9_75_6.168|1_10_75_7.464|1_11_75_9.36|1_12_75_9.038|1_13_75_10.605|1_14_75_3.492|1_15_75_9.613|1_16_75_3.48|1_17_75_5.58|1_18_75_5.041|1_19_75_6.336|1_20_75_5.424|1_21_75_7.2|1_22_75_5.424|1_23_75_3.317|1_24_75_7.262|1_25_75_5.59|1_26_75_5.52|1_27_75_10.776|1_28_75_4.944|1_29_75_5.496|1_30_75_4.032|1_31_75_6.264|1_32_75_3.918|1_33_75_4.44|1_34_75_10.152|1_35_75_8.097|1_36_75_7.706|1_37_75_3.317|1_38_75_6.87|1_39_75_4.466|1_40_75_5.877|1_41_75_3.432|1_42_75_7.392|1_43_75_6.768|1_44_75_2.616|1_45_75_6.269|1_46_75_1.188|1_47_75_2.088|1_48_75_2.124|1_49_75_8.228|1_50_75_15.647|1_51_75_9.064|1_52_75_10.152|1_53_75_13.008|1_54_75_14.16|1_55_75_14.236|1_56_75_15.792|1_57_75_7.392|1_58_75_4.368|1_59_75_9.384|1_60_75_7.653|1_61_75_8.76|1_62_75_8.952|1_63_75_12.024|1_64_75_4.284|1_65_75_6.048|1_66_75_9.072|1_67_75_4.68|1_68_75_6.138|1_69_75_5.208|1_70_75_9.576|1_71_75_8.045|1_72_75_8.045|1_73_75_5.407|1_74_75_3.186\".split(\"|\")\n    let SMBTutorialMusic = \"2_1_65_36|2_2_65_40|2_3_65_41|2_4_65_46|2_5_65_50|2_6_65_51|2_7_65_59|2_8_65_63|2_9_65_64|2_10_65_65|2_11_65_66|2_12_65_67|2_13_65_68|2_14_65_69|2_15_65_76|2_16_65_80|2_17_65_84|2_18_65_90|2_19_65_92|2_20_65_100|2_21_65_103|2_22_65_105|2_23_65_112|2_24_65_113|2_25_65_123|2_26_65_138|2_27_65_142|2_28_65_144|2_29_65_156|2_30_65_158|2_31_65_120|2_32_65_120|2_33_65_120|2_34_65_120|2_35_65_120|2_36_65_120\".split(\"|\")\n    let SMBAwaitingMusic = \"3_1_100_64|3_2_100_211|3_3_100_185|3_4_100_185|3_5_100_182|3_6_100_114|3_7_100_181|3_8_100_103|3_9_100_303|3_10_100_21|3_11_100_235|3_12_100_121|3_13_100_203|3_14_100_119|3_15_100_206|3_16_100_146|3_17_100_237|3_18_100_210|3_19_100_160\".split(\"|\")\n    let SMBLevelMusic = \"4_1_100_128|4_3_100_142|4_5_100_111|4_6_100_141|4_9_100_126|4_11_100_132|4_15_100_119|4_16_100_146|4_18_100_120|4_20_100_143|4_22_100_142|4_23_100_112|4_24_100_138|4_25_100_139|4_26_100_111|4_27_100_116|4_28_100_129|4_31_100_98|4_32_100_146|4_33_100_177|4_34_100_82|4_36_100_160|4_38_100_180|4_39_100_211|4_41_100_134|4_42_100_183|4_43_100_124|4_44_100_261|4_45_100_91|4_46_100_138|4_49_100_207|4_50_100_41|4_51_100_180|4_52_100_202|4_53_100_194|4_56_100_209|4_57_100_195|4_58_100_180|4_60_100_198|4_61_100_180|4_63_100_78|4_66_100_139|4_67_100_224|4_68_100_180|4_73_100_180|4_76_100_180|4_77_100_196|4_78_100_113|4_82_100_180|4_83_100_123|4_84_100_180|4_86_100_126|4_93_100_121|4_97_100_59|4_98_100_180|4_99_100_180|4_100_100_118|4_101_100_156|4_102_100_180|4_103_100_70|4_104_100_216|4_105_100_140|4_106_100_180|4_107_100_147|4_108_100_147|4_109_100_180|4_110_100_158|4_111_100_180|4_112_100_80|4_113_100_152|4_114_100_127|4_116_100_122|4_118_100_106|4_123_100_143|4_124_100_36|4_125_100_164|4_127_100_282|4_128_100_311|4_129_100_123|4_130_100_187|4_131_100_62|4_132_100_180|4_133_100_130|4_134_100_112|4_135_100_105|4_139_100_126|4_141_100_176|4_142_100_135|4_143_100_126|4_144_100_144|4_145_100_140|4_146_100_133|4_149_100_167|4_150_100_120|4_151_100_180|4_155_100_226|4_157_100_164|4_158_100_144|4_159_100_104|4_161_100_180|4_162_100_87|4_163_100_126|4_164_100_118|4_165_100_194|4_166_100_135|4_167_100_50|4_168_100_109|4_169_100_180|4_170_100_133|4_171_100_180|4_172_100_91|4_173_100_138|4_176_100_120|4_177_100_81|4_178_100_150|4_179_100_153|4_180_100_104|4_181_100_112\".split(\"|\")\n    let SMBWonMusic = \"5_1_100_4|5_2_100_17|5_3_100_29|5_4_100_172|5_5_100_13|5_6_100_248|5_7_100_11|5_8_100_445|5_9_100_241|5_10_100_244|5_11_100_20|5_12_100_7|5_13_100_28|5_14_100_74|5_15_100_15|5_16_100_74|5_17_100_17|5_18_100_17|5_19_100_15|5_20_100_38|5_21_100_42|5_22_100_67|5_23_100_8|5_24_100_8|5_25_100_13|5_26_100_17|5_27_100_5|5_28_100_122|5_29_100_226|5_30_100_79\".split(\"|\")\n    let SMBLostMusic = \"6_1_100_87|6_2_100_31|6_3_100_196|6_4_100_65|6_5_100_4|6_6_100_23|6_7_100_65|6_8_100_62|6_9_100_78|6_10_100_6|6_11_100_162\".split(\"|\")\n    \n    // Player Strings - Mario\n    let MarioSoundString = \"A_21_1_100_1.5|A_21_2_100_1|I_21_3_100_3.3|A_21_4_100_1.9|A_21_5_100_2.1|I_21_6_100_1.8|I_21_7_100_1.8|R_21_8_100_0.6|R_21_9_100_1.3|R_21_10_100_1.1|R_21_11_100_0.6|R_21_12_100_0.8|R_21_13_100_1.6|R_21_14_100_1.3|R_21_15_100_1.2|R_21_16_100_1.1|R_21_17_100_1.3|R_21_18_100_1|Y_21_19_100_0.2|Y_21_20_100_0.2|Y_21_21_100_0.3|Y_21_22_100_0.5|Y_21_23_100_0.6|Y_21_24_100_0.6|Y_21_25_100_0.6|Y_21_26_100_0.6|Y_21_27_100_0.6|Y_21_28_100_0.6|Y_21_29_100_0.7|Y_21_30_100_0.7|Y_21_31_100_0.7|Y_21_32_100_0.7|Y_21_33_100_0.7|Y_21_34_100_0.8|Y_21_35_100_0.8|Y_21_36_100_0.8|Y_21_37_100_0.8|Y_21_38_100_0.8|Y_21_39_100_0.8|Y_21_40_100_0.9|Y_21_41_100_0.9|Y_21_42_100_0.9|Y_21_43_100_0.9|Y_21_44_100_0.9|Y_21_45_100_0.9|Y_21_46_100_0.9|Y_21_47_100_1|Y_21_48_100_1|Y_21_49_100_1|Y_21_50_100_1|Y_21_51_100_1.1|Y_21_52_100_1.1|Y_21_53_100_1.1|Y_21_54_100_1.2|Y_21_55_100_1.2|Y_21_56_100_1.2|Y_21_57_100_1.2|Y_21_58_100_1.3|Y_21_59_100_1.3|Y_21_60_100_1.3|Y_21_61_100_1.4|Y_21_62_100_1.4|S_21_63_100_1|S_21_64_100_1.6|S_21_65_100_1.7|S_21_66_100_1.7|S_21_67_100_1.9|S_21_68_100_2.1|S_21_69_100_2.2|S_21_70_100_2.4|S_21_71_100_2.4|S_21_72_100_2.5|W_21_73_100_1.8|W_21_74_100_2|W_21_75_100_2.2|W_21_76_100_2.6|W_21_77_100_2.9|O_21_78_100_0.6|O_21_79_100_0.4|O_21_80_100_0.4|O_21_81_100_1.1|O_21_82_100_1.5|O_21_83_100_0.8|O_21_84_100_0.7|O_21_85_100_0.8|O_21_86_100_0.9|O_21_87_100_1.3|O_21_88_100_0.5|O_21_89_100_1|O_21_90_100_1|O_21_91_100_0.4|O_21_92_100_0.5|O_21_93_100_0.9|O_21_94_100_0.4|O_21_95_100_0.4|N_21_96_100_1|N_21_97_100_1.1|N_21_98_100_1|N_21_99_100_0.6|N_21_100_100_0.9|N_21_101_100_1.4|N_21_102_100_1.7|N_21_103_100_1.3|N_21_104_100_0.6|N_21_105_100_1.4|N_21_106_100_0.8|N_21_107_100_1.1|N_21_108_100_1.1|N_21_109_100_0.8|N_21_110_100_1.7|N_21_111_100_2.4|I_21_112_100_0.8|I_21_113_100_0.9|F_21_114_100_1.1|F_21_115_100_2.5|F_21_116_100_2.5|F_21_117_100_1.4|L_21_118_100_3.4|L_21_119_100_3.5|L_21_120_100_4.4|L_21_121_100_1.5|H_21_122_100_44.4\"\n\n    // BLOCK - Set the Player's Sounds\n    //% blockId=nl_player_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% weight=101\n    //% block=\"Set player to $player\"\n    export function setSounds(player: string): void {\n        let theSound = \"\"\n        let thisLetter = \"\"\n        let series = \"\"\n        let soundStrings: string[] = []\n        if (player == \"Mario\") {\n            soundStrings = MarioSoundString.split(\"|\")\n            series = \"SMB\"\n        }\n        if (series == \"SMB\") {\n            PlayerIntroMusic = SMBIntroMusic\n            PlayerTutorialMusic = SMBTutorialMusic\n            PlayerAwaitingMusic = SMBAwaitingMusic\n            PlayerLevelMusic = SMBLevelMusic\n            PlayerWonMusic = SMBWonMusic\n            PlayerLostMusic = SMBLostMusic\n        }\n        for (let sString of soundStrings) {\n            thisLetter = sString.charAt(0)\n            theSound = sString.substr(2, sString.length - 2)\n            if (thisLetter == \"A\") {\n                PlayerName.push(theSound)\n            } else if (thisLetter == \"R\") {\n                PlayerReady.push(theSound)\n            } else if (thisLetter == \"Y\") {\n                PlayerYay.push(theSound)\n            } else if (thisLetter == \"I\") {\n                PlayerIntro.push(theSound)\n            } else if (thisLetter == \"N\") {\n                PlayerNay.push(theSound)\n            } else if (thisLetter == \"O\") {\n                PlayerOuch.push(theSound)\n            } else if (thisLetter == \"S\") {\n                PlayerSuccess.push(theSound)\n            } else if (thisLetter == \"F\") {\n                PlayerFailure.push(theSound)\n            } else if (thisLetter == \"W\") {\n                PlayerWon.push(theSound)\n            } else if (thisLetter == \"L\") {\n                PlayerLost.push(theSound)\n            } else if (thisLetter == \"H\") {\n                PlayerHurry.push(theSound)\n            }\n        }\n    }    \n    \n    // Internal Function - Take a Sound from a Playlist After Filling it from a Soundbank if it's Empty\n    function takeReplenish(Playlist: any[], Soundbank: any[]) {\n        let returnSound = \"\"\n        returnSound = \"\"\n        if (Playlist.length == 0) {\n            for (let index = 0; index <= Soundbank.length - 1; index++) {\n                if (index == 0) {\n                    Playlist.push(Soundbank[index])\n                } else if (index >= 1) {\n                    Playlist.insertAt(randint(0, index), Soundbank[index])\n                }\n            }\n        }\n        returnSound = Playlist.shift()\n        return returnSound\n    }\n\n    // BLOCK - Fetch a Sound of a Type from a Category\n    //% blockId=nl_get_soundstring\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% weight=101\n    //% block=\"Get $Category sound $Type\"\n    export function getSoundString(Category: string, Type: string): string {\n        let returnString = \"\"\n        if (Category == \"Voice\") {\n            returnString = VoiceTracks[parseFloat(Type)]\n        } else if (Category == \"Player\") {\n            if (Type == \"Name\") {\n                returnString = takeReplenish(PlaylistName, PlayerName)\n            } else if (Type == \"Intro\") {\n                returnString = takeReplenish(PlaylistIntro, PlayerIntro)\n            } else if (Type == \"Ready\") {\n                returnString = takeReplenish(PlaylistReady, PlayerReady)\n            } else if (Type == \"Yay\") {\n                returnString = takeReplenish(PlaylistYay, PlayerYay)\n            } else if (Type == \"Success\") {\n                returnString = takeReplenish(PlaylistSuccess, PlayerSuccess)\n            } else if (Type == \"Nay\") {\n                returnString = takeReplenish(PlaylistNay, PlayerNay)\n            } else if (Type == \"Failure\") {\n                returnString = takeReplenish(PlaylistFailure, PlayerFailure)\n            } else if (Type == \"Won\") {\n                returnString = takeReplenish(PlaylistWon, PlayerWon)\n            } else if (Type == \"Lost\") {\n                returnString = takeReplenish(PlaylistLost, PlayerLost)\n            } else if (Type == \"Hurry\") {\n                returnString = takeReplenish(PlaylistHurry, PlayerHurry)\n            }\n        } else if (Category == \"SFX\") {\n            if (Type == \"Correct\") {\n                returnString = takeReplenish(PlaylistCorrect, CorrectSFX)\n            } else if (Type == \"Incorrect\") {\n                returnString = takeReplenish(PlaylistIncorrect, IncorrectSFX)\n            } else if (Type == \"Ghost\") {\n                returnString = takeReplenish(PlaylistGhost, GhostSFX)\n            } else if (Type == \"Fire\") {\n                returnString = takeReplenish(PlaylistFire, FireSFX)\n            } else if (Type == \"Explosion\") {\n                returnString = takeReplenish(PlaylistExplosion, ExplosionSFX)\n            } else if (Type == \"Splash\") {\n                returnString = takeReplenish(PlaylistSplash, SplashSFX)\n            } else if (Type == \"Spark\") {\n                returnString = takeReplenish(PlaylistSpark, SparkSFX)\n            } else if (Type == \"Slash\") {\n                returnString = takeReplenish(PlaylistSlash, SlashSFX)\n            }\n        } else if (Category == \"Music\") {\n            if (Type == \"Intro\") {\n                let PlaylistIntroMusic: number[] = []\n                returnString = takeReplenish(PlaylistIntroMusic, PlayerIntroMusic)\n            } else if (Type == \"Tutorial\") {\n                let PlaylistTutorialMusic: number[] = []\n                returnString = takeReplenish(PlaylistTutorialMusic, PlayerTutorialMusic)\n            } else if (Type == \"Awaiting\") {\n                returnString = takeReplenish(PlaylistAwaitingMusic, PlayerAwaitingMusic)\n            } else if (Type == \"Level\") {\n                let PlaylistLevelMusic: number[] = []\n                returnString = takeReplenish(PlaylistLevelMusic, PlayerLevelMusic)\n            } else if (Type == \"Won\") {\n                let PlaylistWonMusic: number[] = []\n                returnString = takeReplenish(PlaylistWonMusic, PlayerWonMusic)\n            } else if (Type == \"Lost\") {\n                let PlaylistLostMusic: number[] = []\n                returnString = takeReplenish(PlaylistLostMusic, PlayerLostMusic)\n            }\n        }\n        return returnString\n    }\n\n\n    ///////////////////////////////////////////////////////MP3\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(20) // Was 100; problematic at 10\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n    function sendMP3volume(sPin: SerialPin): void {\n        let theVolume = 5\n        if (sPin == mp3Apin) {\n            theVolume = Math.round(potRead() * mp3Avolume)\n        } else if (sPin == mp3Bpin) {\n            theVolume = Math.round(potRead() * mp3Bvolume)\n        } else if (sPin == mp3Cpin) {\n            theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    function sendMP3volumeFast(sPin: SerialPin): void {\n        let theVolume = 5\n        if (sPin == mp3Apin) {\n            theVolume = Math.round(potRead() * mp3Avolume)\n        } else if (sPin == mp3Bpin) {\n            theVolume = Math.round(potRead() * mp3Bvolume)\n        } else if (sPin == mp3Cpin) {\n            theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    function sendMP3play(folderNum: string, fileNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    //% blockId=\"playFileNl\" \n    //% block=\"Play length of file:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n\n    export function playFile(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P16\n        stringParts = soundString.split(\"_\")\n        let theFile = stringParts[0]\n        let theVolume = stringParts[1]\n        let theLength = stringParts[2]\n        //sendMP3file(theFile, theVolume, sPin)\n        return parseFloat(theLength) * 1000\n    }\n\n        //% blockId=\"nl_testfast\" \n    //% block=\"TEST PLAY FAST\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3testFast(): void {\n        serial.redirect(SerialPin.P16, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 3\n        para1 = parseInt(\"0\")\n        para2 = parseInt(\"001\")\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFileNl2\" \n    //% block=\"Play2 length of file:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n\n    export function playFile2(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P16\n        stringParts = soundString.split(\"_\")\n        let theFile = stringParts[0]\n        let theVolume = stringParts[1]\n        let theLength = stringParts[2]\n        sendMP3file2(theFile, theVolume, sPin)\n        return parseFloat(theLength) * 1000\n    }\n    function sendMP3file2(fileNum: string, volumeNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 15\n        para1 = parseInt(fileNum)\n        para2 = parseInt(volumeNum)\n        para1 = parseInt(\"1\")\n        para2 = parseInt(\"1\")\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=nl_backgroundVolume\n    //% block=\"Set background volume to:%relativeVolume\"\n    //% subcategory=\"MP3\" group=\"MP3\"\n    export function sendBackgroundVolume(relativeVolume: number): void {\n        relativeCvolume = relativeVolume/100\n\n        let sPin = mp3Cpin\n        let theVolume = Math.round(potRead() * mp3Cvolume * relativeVolume / 100)\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=MP3execute2 block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n  \n    //% blockId=notlegos_pot_read\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Trimpot analog value\"\n    export function potRead() {\n        if(isPot){\n            return Math.round(pins.map(pins.analogReadPin(potPin), 0, 1023, 0, 30))\n        } else{\n            return 5\n        }\n    }\n\n    //% blockId=notlegos_relCread\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return background volume\"\n    export function getBackgroundVolume() {\n\n            return relativeCvolume\n\n    }\n    //% blockId=notlegos_mp3Avolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3A volume\"\n    export function getMP3AVolume() {\n        return potRead() * mp3Avolume\n    }\n    //% blockId=notlegos_mp3Bvolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3B volume\"\n    export function getMP3BVolume() {\n        return potRead() * mp3Bvolume\n    }\n      //% blockId=notlegos_mp3Cvolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3C volume\"\n    export function getMP3CVolume() {\n        return potRead() * mp3Cvolume * relativeCvolume\n    }\n\n    //% blockId=notlegos_pot_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Connect Volume Control Pot at pin %aPin\"\n    //% aPin.fieldEditor=\"gridpicker\"\n    export function potSet(aPin: AnalogPin): void{\n        potPin = aPin\n        isPot = true\n    }\n\n//////////////////////////////////////////////////////////\n\n    //% blockId=nl_mp3_init\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Ready MP3bit at %sPin for %type\"\n    //% dPin.fieldEditor=\"gridpicker\"\n    export function mp3setPorts(type:mp3type, sPin: SerialPin): void {\n        if (type == mp3type.music){\n            mp3musicPin = sPin\n            mp3music = true\n            mp3musicVol = 60\n        } else if (type == mp3type.player){\n            mp3playerPin = sPin\n            mp3player = true\n            mp3playerVol = 100\n        } else if (type == mp3type.sfxvoice){\n            mp3sfxPin = sPin\n            mp3sfx = true\n            mp3sfxVol = 80\n        }\n        sendMP3volumeQuick(type)\n    }\n\n    function sendMP3volumeQuick(bit:mp3type): void {\n        if (bit == mp3type.music){\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        }\n\n        let theVolume = 15\n        // if (sPin == mp3Apin) {\n        //     theVolume = Math.round(potRead() * mp3Avolume)\n        // } else if (sPin == mp3Bpin) {\n        //     theVolume = Math.round(potRead() * mp3Bvolume)\n        // } else if (sPin == mp3Cpin) {\n        //     theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        // }\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n\n    //% blockId=nl_mp3_music\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %genre music\"\n    export function mp3musicPlay(genre:musicGenre): void{\n        serial.redirect(SerialPin.P16, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 3\n        para1 = parseInt(\"0\")\n        para2 = parseInt(\"1\")\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n\n\n    \n\n    //% blockId=nl_mp3_say\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %saying as player\"\n    export function mp3sayPlay(saying: playerSaying): void {\n\n    }\n\n\n    //% blockId=nl_mp3_voice\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %voice as voice\"\n    export function mp3voicePlay(voice: voiceSaying): void {\n\n    }\n\n    //% blockId=nl_mp3_voice\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Magician says on the %side difficulty %difficulty\"\n    export function mp3magician(side:magicianSaysSide, difficulty:magicianDifficulty): void {\n\n    }\n\n    //% blockId=nl_mp3_voice\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %sfx sound effect\"\n    export function mp3sfxPlay(sfx: sfxType): void {\n\n    }\n\n\n    //% blockId=\"playFolderFile\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playFolderFile(folderNum: string, fileNum: string): void {\n    \n        if (mp3bits > 0) {\n            sendMP3volume(mp3Apin)\n        }\n        if (mp3bits > 1) {\n           // sendMP3volume(mp3Bpin)\n        }\n        if (mp3bits >0) {\n            sendMP3play(folderNum, fileNum, mp3Apin)\n        }\n        if (mp3bits > 1) {\n          //  sendMP3play(folderNum, fileNum, mp3Bpin)\n        }\n    }\n\n    //% blockId=\"playsFor\" \n    //% block=\"Play length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsFor(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        if (mp3bits == 1) {\n            sPin = mp3Apin\n            mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        } else {\n            if (lastMP3bit == \"A\") {\n                    sPin = mp3Bpin\n                    mp3Bvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n                    lastMP3bit = \"B\"\n            } else {\n                sPin = mp3Apin\n                mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n            lastMP3bit = \"A\"\n            }\n        }\n        let theLength = stringParts[3]\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n        return parseFloat(theLength) * 1000 + 20\n    }\n\n    //% blockId=nl_volume_refresh\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume\"\n    export function updateVolume(): void {\n        if (mp3bits > 0) {\n            sendMP3volumeFast(mp3Apin)\n        }\n        if (mp3bits > 1) {\n            sendMP3volumeFast(mp3Bpin)\n        }\n        if (mp3bits > 2) {\n            sendMP3volumeFast(mp3Cpin)\n        }\n    }\n\n\n    //% blockId=\"nl_playsForTwo\" \n    //% block=\"Dual play length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsForTwo(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n\n        mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        mp3Bvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n\n        sendMP3volumeFast(mp3Apin)\n        sendMP3volumeFast(mp3Bpin)\n        \n        basic.pause(20)\n\n        sendMP3play(theFolder, theFile, mp3Apin)\n        sendMP3play(theFolder, theFile, mp3Bpin)\n        \n        return parseFloat(theLength) * 1000 + 20\n    }\n\n\n    //% blockId=\"nl_playsForBackground\" \n    //% block=\"Play in background length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsForBackground(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n        mp3Cvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        sPin = mp3Cpin\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n        return parseFloat(theLength) * 1000 + 20\n    }\n\n\n    //% blockId=\"nl_playBackground\" \n    //% block=\"Play in background:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playBackground(soundString: string): void {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n        mp3Cvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        sPin = mp3Cpin\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n    }\n\n\n    //% blockId=\"nl_backgroundStop\" \n    //% block=\"Stop background sound\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function stopBackgroundSound(): void {\n        serial.redirect(mp3Cpin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 0x16\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    // Nezha - Functions for Pins and Ports\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_Serial(Rjpin: DigitalRJPin): any {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = SerialPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = SerialPin.P2\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.P12:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = SerialPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = SerialPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n\n\n    export enum mp3type {\n        music,\n        player,\n        sfxvoice\n    }\n\n    export enum musicGenre {\n        intro,\n        tutorial,\n        awaiting,\n        level,\n        won,\n        lost\n    }\n\n    export enum playerSaying {\n        ready,\n        yay,\n        intro,\n        nay,\n        ouch,\n        success,\n        failure,\n        won,\n        lost,\n        hurry\n    }\n\n    export enum sfxType {\n        correct,\n        incorrect,\n        ghost,\n        fire,\n        explosion,\n        splash,\n        spark,\n        slash\n    }\n\n    export enum voiceSaying {\n        name,\n        begin,\n        retry,\n        next,\n        complete,\n        gameover,\n        welcome,\n        intro,\n        howto1,\n        howto2,\n        howto3,\n        howto4,\n        howto5,\n        howto6,\n        howto7,\n        howto8,\n        howto9\n    }\n\n    export enum magicianSaysSide {\n        left,\n        right\n    }\n\n    export enum magicianDifficulty {\n        easy,\n        medium,\n        hard\n    }\n\n    export enum spotName {\n        A,\n        B,\n        C,\n        D,\n        E,\n        F,\n        G,\n        H,\n        I\n    }\n\n    export enum playerChar {\n        mario,\n        luigi,\n        peach,\n        daisy,\n        toad,\n        wario\n    }\n\n\n\n\n\n    // Enum - To Support MP3\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n\n    // Enum - Nezha and Pins\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum mbPin {\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1 (Analog J1)\"\n        P1,\n        //% block=\"P2 (Analog J2)\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8 (J1)\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12 (J2)\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14 (J3)\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16 (J4)\"\n        P16,\n    }\n}\n","pxt.json":"{\n    \"name\": \"NotLegosExt\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"displaySendBuffer.asm\",\n        \"display.ts\",\n        \"planetxbasic.ts\",\n        \"notlegos.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"7.0.42\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","test.ts":""}},{"timestamp":1726877248873,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"gX}3[UJe6C9wl9p+Uoj=\">digits</variable><variable id=\"vSl89nNM7#y}HO_i4w8g\">sockLights</variable><variable id=\"kx-+|q2cYu;$^R?pYwdZ\">wheelLights</variable><variable id=\"zVo^^v6=8Jgq7FyFiNOV\">scoreCircle</variable></variables><block type=\"device_button_event\" x=\"788\" y=\"-195\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl2\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">1_1_25_100</field></shadow></value></block></value></block></statement></block><block type=\"device_button_event\" x=\"1329\" y=\"-195\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">2_1_1</field></shadow></value></block></value></block></statement></block><block type=\"every_interval\" x=\"1812\" y=\"-195\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value><statement name=\"HANDLER\"><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P2</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P3</field></shadow></value></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation><field name=\"SLIDER\">2</field></shadow></value><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">hue </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"apds9960_readcolor\"></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation><field name=\"SLIDER\">3</field></shadow></value><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">distance </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"sonarbit\"><field name=\"tPin\">DigitalPin.P8</field><field name=\"ePin\">DigitalPin.P9</field><field name=\"distance_unit\">Connected.Distance_Unit_List.Distance_Unit_cm</field></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation><field name=\"SLIDER\">4</field></shadow></value><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">gesture </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"Connected_getGesture\"></block></value></block></value></block></next></block></next></block></next></block></statement></block><block type=\"pxt-on-start\" x=\"39\" y=\"51\"><statement name=\"HANDLER\"><block type=\"Connected_oledClear\"><next><block type=\"pin_set_audio_pin_enabled\"><value name=\"enabled\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow></value><next><block type=\"device_led_enable\"><value name=\"on\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"gX}3[UJe6C9wl9p+Uoj=\">digits</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"grove_tm1637_create\"><field name=\"cPin\">DigitalPin.P7</field><field name=\"dPin\">DigitalPin.P6</field></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"vSl89nNM7#y}HO_i4w8g\">sockLights</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P11</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"vSl89nNM7#y}HO_i4w8g\">sockLights</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"vSl89nNM7#y}HO_i4w8g\">sockLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"kx-+|q2cYu;$^R?pYwdZ\">wheelLights</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P12</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">18</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"kx-+|q2cYu;$^R?pYwdZ\">wheelLights</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"kx-+|q2cYu;$^R?pYwdZ\">wheelLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"zVo^^v6=8Jgq7FyFiNOV\">scoreCircle</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P13</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"zVo^^v6=8Jgq7FyFiNOV\">scoreCircle</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"zVo^^v6=8Jgq7FyFiNOV\">scoreCircle</field></block></value><next><block type=\"nl_mp3_init\"><field name=\"type\">notLegos.mp3type.music</field><field name=\"sPin\">SerialPin.P15</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"nl_testfast\"><field name=\"bit\">notLegos.mp3type.music</field><value name=\"track\"><block type=\"math_number\"><field name=\"NUM\">2</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"826\" y=\"653\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow><block type=\"playFileNl2\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"soundString\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">1_1_25_100</field></shadow></value></block></value></block><block type=\"MP3setPort\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1390\" y=\"819\"><field name=\"Rjpin\">Connected.DigitalRJPin.P16</field><next><block type=\"setTracking\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"tracking\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value><value name=\"myAns\"><shadow type=\"toggleYesNo\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"yes\">false</field></shadow></value></block></next></block><block type=\"MP3execute\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"581\" y=\"893\"><field name=\"myType\">Connected.playType.Play</field></block><block type=\"nl_mp3_music\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"141\" y=\"1080\"><field name=\"genre\">notLegos.musicGenre.intro</field></block><block type=\"function_definition\" x=\"359\" y=\"1373\"><mutation name=\"isNearly\" functionid=\"F!?G,}0W~mK0q6yxa@)+\"><arg name=\"reference\" id=\"askt0gw7ps42l4j5s8lq\" type=\"number\"></arg><arg name=\"reading\" id=\"pvzp6d6plvrvf0vwcgka\" type=\"number\"></arg><arg name=\"tolerance\" id=\"ai8znl3rpzvjckud4rk3\" type=\"number\"></arg></mutation><field name=\"function_name\">isNearly</field><value name=\"askt0gw7ps42l4j5s8lq\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reference</field></block></value><value name=\"pvzp6d6plvrvf0vwcgka\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reading</field></block></value><value name=\"ai8znl3rpzvjckud4rk3\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">tolerance</field></block></value><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_operation\"><field name=\"OP\">AND</field><value name=\"A\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value></block></value><statement name=\"DO0\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></block></value></block></statement><statement name=\"ELSE\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></block></value></block></statement></block></statement></block></xml>","main.ts":"","README.md":"\n> Open this page at [https://notlegos.github.io/castleresay/](https://notlegos.github.io/castleresay/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/castleresay** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/castleresay** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/soundbank/](https://notlegos.github.io/soundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/soundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/soundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/resoundbank/](https://notlegos.github.io/resoundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/resoundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/resoundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosext/](https://notlegos.github.io/notlegosext/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosext** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosext** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","displaySendBuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n","display.ts":"\n/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#EA5532 icon=\"\\uf110\" block=\"Connected\" blockId=\"PlanetX_Connected\" \n//% groups='[\"LED\", \"Digital\", \"Analog\", \"IIC Port\", \"OLED\", \"7-Seg 4-Dig LED Nixietube\"]'\nnamespace Connected {\n    ////////////////////////////////TM 1637/////////////////\n    let TM1637_CMD1 = 0x40;\n    let TM1637_CMD2 = 0xC0;\n    let TM1637_CMD3 = 0x80;\n    let _SEGMENTS = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];\n    /////////////////////OLED///////////////////////////////\n    let firstoledinit = true\n    const basicFont: string[] = [\n        \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", // \" \"\n        \"\\x00\\x00\\x5F\\x00\\x00\\x00\\x00\\x00\", // \"!\"\n        \"\\x00\\x00\\x07\\x00\\x07\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x14\\x7F\\x14\\x7F\\x14\\x00\\x00\", // \"#\"\n        \"\\x00\\x24\\x2A\\x7F\\x2A\\x12\\x00\\x00\", // \"$\"\n        \"\\x00\\x23\\x13\\x08\\x64\\x62\\x00\\x00\", // \"%\"\n        \"\\x00\\x36\\x49\\x55\\x22\\x50\\x00\\x00\", // \"&\"\n        \"\\x00\\x00\\x05\\x03\\x00\\x00\\x00\\x00\", // \"'\"\n        \"\\x00\\x1C\\x22\\x41\\x00\\x00\\x00\\x00\", // \"(\"\n        \"\\x00\\x41\\x22\\x1C\\x00\\x00\\x00\\x00\", // \")\"\n        \"\\x00\\x08\\x2A\\x1C\\x2A\\x08\\x00\\x00\", // \"*\"\n        \"\\x00\\x08\\x08\\x3E\\x08\\x08\\x00\\x00\", // \"+\"\n        \"\\x00\\xA0\\x60\\x00\\x00\\x00\\x00\\x00\", // \",\"\n        \"\\x00\\x08\\x08\\x08\\x08\\x08\\x00\\x00\", // \"-\"\n        \"\\x00\\x60\\x60\\x00\\x00\\x00\\x00\\x00\", // \".\"\n        \"\\x00\\x20\\x10\\x08\\x04\\x02\\x00\\x00\", // \"/\"\n        \"\\x00\\x3E\\x51\\x49\\x45\\x3E\\x00\\x00\", // \"0\"\n        \"\\x00\\x00\\x42\\x7F\\x40\\x00\\x00\\x00\", // \"1\"\n        \"\\x00\\x62\\x51\\x49\\x49\\x46\\x00\\x00\", // \"2\"\n        \"\\x00\\x22\\x41\\x49\\x49\\x36\\x00\\x00\", // \"3\"\n        \"\\x00\\x18\\x14\\x12\\x7F\\x10\\x00\\x00\", // \"4\"\n        \"\\x00\\x27\\x45\\x45\\x45\\x39\\x00\\x00\", // \"5\"\n        \"\\x00\\x3C\\x4A\\x49\\x49\\x30\\x00\\x00\", // \"6\"\n        \"\\x00\\x01\\x71\\x09\\x05\\x03\\x00\\x00\", // \"7\"\n        \"\\x00\\x36\\x49\\x49\\x49\\x36\\x00\\x00\", // \"8\"\n        \"\\x00\\x06\\x49\\x49\\x29\\x1E\\x00\\x00\", // \"9\"\n        \"\\x00\\x00\\x36\\x36\\x00\\x00\\x00\\x00\", // \":\"\n        \"\\x00\\x00\\xAC\\x6C\\x00\\x00\\x00\\x00\", // \";\"\n        \"\\x00\\x08\\x14\\x22\\x41\\x00\\x00\\x00\", // \"<\"\n        \"\\x00\\x14\\x14\\x14\\x14\\x14\\x00\\x00\", // \"=\"\n        \"\\x00\\x41\\x22\\x14\\x08\\x00\\x00\\x00\", // \">\"\n        \"\\x00\\x02\\x01\\x51\\x09\\x06\\x00\\x00\", // \"?\"\n        \"\\x00\\x32\\x49\\x79\\x41\\x3E\\x00\\x00\", // \"@\"\n        \"\\x00\\x7E\\x09\\x09\\x09\\x7E\\x00\\x00\", // \"A\"\n        \"\\x00\\x7F\\x49\\x49\\x49\\x36\\x00\\x00\", // \"B\"\n        \"\\x00\\x3E\\x41\\x41\\x41\\x22\\x00\\x00\", // \"C\"\n        \"\\x00\\x7F\\x41\\x41\\x22\\x1C\\x00\\x00\", // \"D\"\n        \"\\x00\\x7F\\x49\\x49\\x49\\x41\\x00\\x00\", // \"E\"\n        \"\\x00\\x7F\\x09\\x09\\x09\\x01\\x00\\x00\", // \"F\"\n        \"\\x00\\x3E\\x41\\x41\\x51\\x72\\x00\\x00\", // \"G\"\n        \"\\x00\\x7F\\x08\\x08\\x08\\x7F\\x00\\x00\", // \"H\"\n        \"\\x00\\x41\\x7F\\x41\\x00\\x00\\x00\\x00\", // \"I\"\n        \"\\x00\\x20\\x40\\x41\\x3F\\x01\\x00\\x00\", // \"J\"\n        \"\\x00\\x7F\\x08\\x14\\x22\\x41\\x00\\x00\", // \"K\"\n        \"\\x00\\x7F\\x40\\x40\\x40\\x40\\x00\\x00\", // \"L\"\n        \"\\x00\\x7F\\x02\\x0C\\x02\\x7F\\x00\\x00\", // \"M\"\n        \"\\x00\\x7F\\x04\\x08\\x10\\x7F\\x00\\x00\", // \"N\"\n        \"\\x00\\x3E\\x41\\x41\\x41\\x3E\\x00\\x00\", // \"O\"\n        \"\\x00\\x7F\\x09\\x09\\x09\\x06\\x00\\x00\", // \"P\"\n        \"\\x00\\x3E\\x41\\x51\\x21\\x5E\\x00\\x00\", // \"Q\"\n        \"\\x00\\x7F\\x09\\x19\\x29\\x46\\x00\\x00\", // \"R\"\n        \"\\x00\\x26\\x49\\x49\\x49\\x32\\x00\\x00\", // \"S\"\n        \"\\x00\\x01\\x01\\x7F\\x01\\x01\\x00\\x00\", // \"T\"\n        \"\\x00\\x3F\\x40\\x40\\x40\\x3F\\x00\\x00\", // \"U\"\n        \"\\x00\\x1F\\x20\\x40\\x20\\x1F\\x00\\x00\", // \"V\"\n        \"\\x00\\x3F\\x40\\x38\\x40\\x3F\\x00\\x00\", // \"W\"\n        \"\\x00\\x63\\x14\\x08\\x14\\x63\\x00\\x00\", // \"X\"\n        \"\\x00\\x03\\x04\\x78\\x04\\x03\\x00\\x00\", // \"Y\"\n        \"\\x00\\x61\\x51\\x49\\x45\\x43\\x00\\x00\", // \"Z\"\n        \"\\x00\\x7F\\x41\\x41\\x00\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x02\\x04\\x08\\x10\\x20\\x00\\x00\", // \"\\\"\n        \"\\x00\\x41\\x41\\x7F\\x00\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x04\\x02\\x01\\x02\\x04\\x00\\x00\", // \"^\"\n        \"\\x00\\x80\\x80\\x80\\x80\\x80\\x00\\x00\", // \"_\"\n        \"\\x00\\x01\\x02\\x04\\x00\\x00\\x00\\x00\", // \"`\"\n        \"\\x00\\x20\\x54\\x54\\x54\\x78\\x00\\x00\", // \"a\"\n        \"\\x00\\x7F\\x48\\x44\\x44\\x38\\x00\\x00\", // \"b\"\n        \"\\x00\\x38\\x44\\x44\\x28\\x00\\x00\\x00\", // \"c\"\n        \"\\x00\\x38\\x44\\x44\\x48\\x7F\\x00\\x00\", // \"d\"\n        \"\\x00\\x38\\x54\\x54\\x54\\x18\\x00\\x00\", // \"e\"\n        \"\\x00\\x08\\x7E\\x09\\x02\\x00\\x00\\x00\", // \"f\"\n        \"\\x00\\x18\\xA4\\xA4\\xA4\\x7C\\x00\\x00\", // \"g\"\n        \"\\x00\\x7F\\x08\\x04\\x04\\x78\\x00\\x00\", // \"h\"\n        \"\\x00\\x00\\x7D\\x00\\x00\\x00\\x00\\x00\", // \"i\"\n        \"\\x00\\x80\\x84\\x7D\\x00\\x00\\x00\\x00\", // \"j\"\n        \"\\x00\\x7F\\x10\\x28\\x44\\x00\\x00\\x00\", // \"k\"\n        \"\\x00\\x41\\x7F\\x40\\x00\\x00\\x00\\x00\", // \"l\"\n        \"\\x00\\x7C\\x04\\x18\\x04\\x78\\x00\\x00\", // \"m\"\n        \"\\x00\\x7C\\x08\\x04\\x7C\\x00\\x00\\x00\", // \"n\"\n        \"\\x00\\x38\\x44\\x44\\x38\\x00\\x00\\x00\", // \"o\"\n        \"\\x00\\xFC\\x24\\x24\\x18\\x00\\x00\\x00\", // \"p\"\n        \"\\x00\\x18\\x24\\x24\\xFC\\x00\\x00\\x00\", // \"q\"\n        \"\\x00\\x00\\x7C\\x08\\x04\\x00\\x00\\x00\", // \"r\"\n        \"\\x00\\x48\\x54\\x54\\x24\\x00\\x00\\x00\", // \"s\"\n        \"\\x00\\x04\\x7F\\x44\\x00\\x00\\x00\\x00\", // \"t\"\n        \"\\x00\\x3C\\x40\\x40\\x7C\\x00\\x00\\x00\", // \"u\"\n        \"\\x00\\x1C\\x20\\x40\\x20\\x1C\\x00\\x00\", // \"v\"\n        \"\\x00\\x3C\\x40\\x30\\x40\\x3C\\x00\\x00\", // \"w\"\n        \"\\x00\\x44\\x28\\x10\\x28\\x44\\x00\\x00\", // \"x\"\n        \"\\x00\\x1C\\xA0\\xA0\\x7C\\x00\\x00\\x00\", // \"y\"\n        \"\\x00\\x44\\x64\\x54\\x4C\\x44\\x00\\x00\", // \"z\"\n        \"\\x00\\x08\\x36\\x41\\x00\\x00\\x00\\x00\", // \"{\"\n        \"\\x00\\x00\\x7F\\x00\\x00\\x00\\x00\\x00\", // \"|\"\n        \"\\x00\\x41\\x36\\x08\\x00\\x00\\x00\\x00\", // \"}\"\n        \"\\x00\\x02\\x01\\x01\\x02\\x01\\x00\\x00\"  // \"~\"\n    ];\n    function oledcmd(c: number) {\n        pins.i2cWriteNumber(0x3c, c, NumberFormat.UInt16BE);\n    }\n    function writeData(n: number) {\n        let b = n;\n        if (n < 0) { n = 0 }\n        if (n > 255) { n = 255 }\n        pins.i2cWriteNumber(0x3c, 0x4000 + b, NumberFormat.UInt16BE);\n    }\n    function writeCustomChar(c: string) {\n        for (let i = 0; i < 8; i++) {\n            writeData(c.charCodeAt(i));\n        }\n    }\n    function setText(row: number, column: number) {\n        let r = row;\n        let c = column;\n        if (row < 0) { r = 0 }\n        if (column < 0) { c = 0 }\n        if (row > 7) { r = 7 }\n        if (column > 15) { c = 15 }\n        oledcmd(0xB0 + r);            //set page address\n        oledcmd(0x00 + (8 * c & 0x0F));  //set column lower address\n        oledcmd(0x10 + ((8 * c >> 4) & 0x0F));   //set column higher address\n    }\n    function putChar(c: string) {\n        let c1 = c.charCodeAt(0);\n        writeCustomChar(basicFont[c1 - 32]);\n    }\n    function oledinit(): void {\n        oledcmd(0xAE);  // Set display OFF\n        oledcmd(0xD5);  // Set Display Clock Divide Ratio / OSC Frequency 0xD4\n        oledcmd(0x80);  // Display Clock Divide Ratio / OSC Frequency \n        oledcmd(0xA8);  // Set Multiplex Ratio\n        oledcmd(0x3F);  // Multiplex Ratio for 128x64 (64-1)\n        oledcmd(0xD3);  // Set Display Offset\n        oledcmd(0x00);  // Display Offset\n        oledcmd(0x40);  // Set Display Start Line\n        oledcmd(0x8D);  // Set Charge Pump\n        oledcmd(0x14);  // Charge Pump (0x10 External, 0x14 Internal DC/DC)\n        oledcmd(0xA1);  // Set Segment Re-Map\n        oledcmd(0xC8);  // Set Com Output Scan Direction\n        oledcmd(0xDA);  // Set COM Hardware Configuration\n        oledcmd(0x12);  // COM Hardware Configuration\n        oledcmd(0x81);  // Set Contrast\n        oledcmd(0xCF);  // Contrast\n        oledcmd(0xD9);  // Set Pre-Charge Period\n        oledcmd(0xF1);  // Set Pre-Charge Period (0x22 External, 0xF1 Internal)\n        oledcmd(0xDB);  // Set VCOMH Deselect Level\n        oledcmd(0x40);  // VCOMH Deselect Level\n        oledcmd(0xA4);  // Set all pixels OFF\n        oledcmd(0xA6);  // Set display not inverted\n        oledcmd(0xAF);  // Set display On\n        oledClear();\n    }\n\n    ///////////////////////////////enum\n\n\n    export enum NeoPixelColors {\n        //% block=red\n        Red = 0xFF0000,\n        //% block=orange\n        Orange = 0xFFA500,\n        //% block=yellow\n        Yellow = 0xFFFF00,\n        //% block=green\n        Green = 0x00FF00,\n        //% block=blue\n        Blue = 0x0000FF,\n        //% block=indigo\n        Indigo = 0x4b0082,\n        //% block=violet\n        Violet = 0x8a2be2,\n        //% block=purple\n        Purple = 0xFF00FF,\n        //% block=white\n        White = 0xFFFFFF,\n        //% block=black\n        Black = 0x000000\n    }\n\n    /**\n     * Different modes for RGB or RGB+W NeoPixel strips\n     */\n    export enum NeoPixelMode {\n        //% block=\"RGB (GRB format)\"\n        RGB = 0,\n        //% block=\"RGB+W\"\n        RGBW = 1,\n        //% block=\"RGB (RGB format)\"\n        RGB_RGB = 2\n    }\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n    /////////////////////////////User_function//////////////////\n\n    //% line.min=1 line.max=8 line.defl=1\n    //% text.defl=\"Hello,ELECFREAKS\"\n    //% block=\"OLED show line %line|text %text\"\n    //% subcategory=Display group=\"OLED\" color=#00B1ED\n    export function showUserText(line: number, text: string) {\n        if (firstoledinit) {\n            oledinit()\n            firstoledinit = false\n        }\n        if (text.length > 16) {\n            text = text.substr(0, 16)\n        }\n        line = line - 1\n        setText(line, 0);\n        for (let c of text) {\n            putChar(c);\n        }\n\n        for (let i = text.length; i < 16; i++) {\n            setText(line, i);\n            putChar(\" \");\n        }\n    }\n    //% line.min=1 line.max=8 line.defl=2 \n    //% n.defl=20200508\n    //% block=\"OLED show line %line|number %n\"\n    //% subcategory=Display group=\"OLED\" color=#00B1ED\n    export function showUserNumber(line: number, n: number) {\n        if (firstoledinit) {\n            oledinit()\n            firstoledinit = false\n        }\n        showUserText(line, \"\" + n)\n    }\n    //% block=\"clear display\" color=#00B1ED\n    //% subcategory=Display group=\"OLED\"\n    export function oledClear() {\n        //oledcmd(DISPLAY_OFF);   //display off\n        for (let j = 0; j < 8; j++) {\n            setText(j, 0);\n            {\n                for (let i = 0; i < 16; i++)  //clear all columns\n                {\n                    putChar(' ');\n                }\n            }\n        }\n        //oledcmd(DISPLAY_ON);    //display on\n        setText(0, 0);\n    }\n    /**\n   * Create a new driver Grove - 4-Digit Display\n   * @param clkPin value of clk pin number\n   * @param dataPin value of data pin number\n   */\n    //% blockId=grove_tm1637_create block=\"connect 4-Digit cPin %cPin dPin %dPin\"\n    //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" blockSetVariable=display color=#EA5532\n    export function tm1637Create(cPin: DigitalPin, dPin: DigitalPin, intensity: number = 7, count: number = 4): TM1637LEDs {\n        let display = new TM1637LEDs();\n        display.clk = cPin\n        display.dio = dPin\n        if ((count < 1) || (count > 5)) count = 4;\n        display.count = count;\n        display.brightness = intensity;\n        display.init();\n        return display;\n    }\n    export class TM1637LEDs {\n        buf: Buffer;\n        clk: DigitalPin;\n        dio: DigitalPin;\n        _ON: number;\n        brightness: number;\n        count: number;  // number of LEDs\n        /**\n         * initial TM1637\n         */\n        init(): void {\n            pins.digitalWritePin(this.clk, 0);\n            pins.digitalWritePin(this.dio, 0);\n            this._ON = 8;\n            this.buf = pins.createBuffer(this.count);\n            this.clear();\n        }\n        /**\n         * Start \n         */\n        _start() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        /**\n         * Stop\n         */\n        _stop() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.dio, 1);\n        }\n        /**\n         * send command1\n         */\n        _write_data_cmd() {\n            this._start();\n            this._write_byte(TM1637_CMD1);\n            this._stop();\n        }\n        /**\n         * send command3\n         */\n        _write_dsp_ctrl() {\n            this._start();\n            this._write_byte(TM1637_CMD3 | this._ON | this.brightness);\n            this._stop();\n        }\n        /**\n         * send a byte to 2-wire interface\n         */\n        _write_byte(b: number) {\n            for (let i = 0; i < 8; i++) {\n                pins.digitalWritePin(this.dio, (b >> i) & 1);\n                pins.digitalWritePin(this.clk, 1);\n                pins.digitalWritePin(this.clk, 0);\n            }\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _intensity(val: number = 7) {\n            this._ON = 8;\n            this.brightness = val - 1;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n        /**\n         * set data to TM1637, with given bit\n         */\n        _dat(bit: number, dat: number) {\n            this._write_data_cmd();\n            this._start();\n            this._write_byte(TM1637_CMD2 | (bit % this.count))\n            this._write_byte(dat);\n            this._stop();\n            this._write_dsp_ctrl();\n        }\n        /**\n         * Show a single number from 0 to 9 at a specified digit of Grove - 4-Digit Display\n         * @param dispData value of number\n         * @param bitAddr value of bit number\n         */\n        //% blockId=grove_tm1637_display_bit block=\"%display|show single number|%num|at digit|%bit\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        //% bit.defl=1 bit.min=0 bit.max=9\n        showbit(num: number = 5, bit: number = 0) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            this.buf[bit % this.count] = _SEGMENTS[num % 16]\n            this._dat(bit, _SEGMENTS[num % 16])\n        }\n        /**\n         * Show a 4 digits number on display\n         * @param dispData value of number\n         */\n        //% blockId=grove_tm1637_display_number block=\"%display|show number|%num\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        showNumber(num: number) {\n            if (num < 0) {\n                num = -num\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n                this._dat(0, 0x40) // '-'\n            }\n            else {\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n            }\n        }\n        /**\n         * show or hide dot point. \n         * @param bit is the position, eg: 1\n         * @param show is show/hide dp, eg: true\n         */\n        //% blockId=\"TM1637_showDP\" block=\"%display|DotPoint at %bit|show $show\"\n        //% show.shadow=\"toggleOnOff\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        showDP(bit: number = 1, show: boolean = true) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            bit = bit % this.count\n            if (show) this._dat(bit, this.buf[bit] | 0x80)\n            else this._dat(bit, this.buf[bit] & 0x7F)\n        }\n        /**\n         * clear LED. \n         */\n        //% blockId=\"TM1637_clear\" block=\"clear display %display\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        clear() {\n            for (let i = 0; i < this.count; i++) {\n                this._dat(i, 0)\n                this.buf[i] = 0\n            }\n        }\n    }\n    //% shim=sendBufferAsm\n    function sendBuffer(buf: Buffer, pin: DigitalPin) {\n    }\n    export class Strip {\n        buf: Buffer;\n        pin: DigitalPin;\n        // TODO: encode as bytes instead of 32bit\n        brightness: number;\n        start: number; // start offset in LED strip\n        _length: number; // number of LEDs\n        _mode: NeoPixelMode;\n        _matrixWidth: number; // number of leds in a matrix - if any\n\n        /**\n         * Shows all LEDs to a given color (range 0-255 for r, g, b).\n         * @param rgb RGB color of the LED\n         */\n        //% blockId=\"neopixel_set_strip_color\" block=\"%strip|show color %rgb=neopixel_colors\"\n        //% weight=85 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        showColor(rgb: number) {\n            rgb = rgb >> 0;\n            this.setAllRGB(rgb);\n            this.show();\n        }\n\n        /**\n         * Shows a rainbow pattern on all LEDs.\n         * @param startHue the start hue value for the rainbow, eg: 1\n         * @param endHue the end hue value for the rainbow, eg: 360\n         */\n        //% blockId=\"neopixel_set_strip_rainbow\" block=\"%strip|show rainbow from %startHue|to %endHue\"\n        //% weight=85 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        showRainbow(startHue: number = 1, endHue: number = 360) {\n            if (this._length <= 0) return;\n\n            startHue = startHue >> 0;\n            endHue = endHue >> 0;\n            const saturation = 100;\n            const luminance = 50;\n            const steps = this._length;\n            const direction = HueInterpolationDirection.Clockwise;\n\n            //hue\n            const h1 = startHue;\n            const h2 = endHue;\n            const hDistCW = ((h2 + 360) - h1) % 360;\n            const hStepCW = Math.idiv((hDistCW * 100), steps);\n            const hDistCCW = ((h1 + 360) - h2) % 360;\n            const hStepCCW = Math.idiv(-(hDistCCW * 100), steps);\n            let hStep: number;\n            if (direction === HueInterpolationDirection.Clockwise) {\n                hStep = hStepCW;\n            } else if (direction === HueInterpolationDirection.CounterClockwise) {\n                hStep = hStepCCW;\n            } else {\n                hStep = hDistCW < hDistCCW ? hStepCW : hStepCCW;\n            }\n            const h1_100 = h1 * 100; //we multiply by 100 so we keep more accurate results while doing interpolation\n\n            //sat\n            const s1 = saturation;\n            const s2 = saturation;\n            const sDist = s2 - s1;\n            const sStep = Math.idiv(sDist, steps);\n            const s1_100 = s1 * 100;\n\n            //lum\n            const l1 = luminance;\n            const l2 = luminance;\n            const lDist = l2 - l1;\n            const lStep = Math.idiv(lDist, steps);\n            const l1_100 = l1 * 100\n\n            //interpolate\n            if (steps === 1) {\n                this.setPixelColor(0, hsl(h1 + hStep, s1 + sStep, l1 + lStep))\n            } else {\n                this.setPixelColor(0, hsl(startHue, saturation, luminance));\n                for (let i = 1; i < steps - 1; i++) {\n                    const h = Math.idiv((h1_100 + i * hStep), 100) + 360;\n                    const s = Math.idiv((s1_100 + i * sStep), 100);\n                    const l = Math.idiv((l1_100 + i * lStep), 100);\n                    this.setPixelColor(i, hsl(h, s, l));\n                }\n                this.setPixelColor(steps - 1, hsl(endHue, saturation, luminance));\n            }\n            this.show();\n        }\n\n        /**\n         * Set LED to a given color (range 0-255 for r, g, b).\n         * You need to call ``show`` to make the changes visible.\n         * @param pixeloffset position of the NeoPixel in the strip\n         * @param rgb RGB color of the LED\n         */\n        //% blockId=\"neopixel_set_pixel_color\" block=\"%strip|set pixel color at %pixeloffset|to %rgb=neopixel_colors\"\n        //% weight=80 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setPixelColor(pixeloffset: number, rgb: number): void {\n            this.setPixelRGB(pixeloffset >> 0, rgb >> 0);\n        }\n\n        /**\n         * Send all the changes to the strip.\n         */\n        //% blockId=\"neopixel_show\" block=\"%strip|show\" \n        //% weight=79\n        //% parts=\"neopixel\" subcategory=Neopixel\n        show() {\n            sendBuffer(this.buf, this.pin);\n        }\n\n        /**\n         * Turn off all LEDs.\n         * You need to call ``show`` to make the changes visible.\n         */\n        //% blockId=\"neopixel_clear\" block=\"%strip|clear\"\n        //% weight=76 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        clear(): void {\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.fill(0, this.start * stride, this._length * stride);\n        }\n\n        /**\n         * Set the brightness of the strip. This flag only applies to future operation.\n         * @param brightness a measure of LED brightness in 0-255. eg: 255\n         */\n        //% blockId=\"neopixel_set_brightness\" block=\"%strip|set brightness %brightness\" \n        //% weight=59 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setBrightness(brightness: number): void {\n            this.brightness = brightness & 0xff;\n        }\n        /**\n         * Gets the number of pixels declared on the strip\n         */\n        //% blockId=\"neopixel_length\" block=\"%strip|length\" blockGap=8\n        //% subcategory=\"Neopixel\"\n        //% weight=60 advanced=true\n        length() {\n            return this._length;\n        }\n        /**\n         * Create a range of LEDs.\n         * @param start offset in the LED strip to start the range\n         * @param length number of LEDs in the range. eg: 4\n         */\n        //% weight=89 color=#EA5532\n        //% blockId=\"neopixel_range\" block=\"%strip|range from %start|with %length|leds\"\n        //% parts=\"neopixel\"\n        //% blockSetVariable=range subcategory=Neopixel\n        range(start: number, length: number): Strip {\n            start = start >> 0;\n            length = length >> 0;\n            let strip = new Strip();\n            strip.buf = this.buf;\n            strip.pin = this.pin;\n            strip.brightness = this.brightness;\n            strip.start = this.start + Math.clamp(0, this._length - 1, start);\n            strip._length = Math.clamp(0, this._length - (strip.start - this.start), length);\n            strip._matrixWidth = 0;\n            strip._mode = this._mode;\n            return strip;\n        }\n\n        /**\n         * Shift LEDs forward and clear with zeros.\n         * You need to call ``show`` to make the changes visible.\n         * @param offset number of pixels to shift forward, eg: 1\n         */\n        //% blockId=\"neopixel_shift\" block=\"%strip|shift pixels by %offset\" \n        //% weight=40 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        shift(offset: number = 1): void {\n            offset = offset >> 0;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.shift(-offset * stride, this.start * stride, this._length * stride)\n        }\n\n        /**\n         * Rotate LEDs forward.\n         * You need to call ``show`` to make the changes visible.\n         * @param offset number of pixels to rotate forward, eg: 1\n         */\n        //% blockId=\"neopixel_rotate\" block=\"%strip|rotate pixels by %offset\" \n        //% weight=39 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        rotate(offset: number = 1): void {\n            offset = offset >> 0;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.rotate(-offset * stride, this.start * stride, this._length * stride)\n        }\n\n        /**\n         * Set the pin where the neopixel is connected, defaults to P0.\n         */\n        //% weight=10 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setPin(pin: DigitalPin): void {\n            this.pin = pin;\n            pins.digitalWritePin(this.pin, 0);\n            // don't yield to avoid races on initialization\n        }\n\n        private setBufferRGB(offset: number, red: number, green: number, blue: number): void {\n            if (this._mode === NeoPixelMode.RGB_RGB) {\n                this.buf[offset + 0] = red;\n                this.buf[offset + 1] = green;\n            } else {\n                this.buf[offset + 0] = green;\n                this.buf[offset + 1] = red;\n            }\n            this.buf[offset + 2] = blue;\n        }\n\n        private setAllRGB(rgb: number) {\n            let red = unpackR(rgb);\n            let green = unpackG(rgb);\n            let blue = unpackB(rgb);\n\n            const br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            const end = this.start + this._length;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            for (let i = this.start; i < end; ++i) {\n                this.setBufferRGB(i * stride, red, green, blue)\n            }\n        }\n        private setPixelRGB(pixeloffset: number, rgb: number): void {\n            if (pixeloffset < 0\n                || pixeloffset >= this._length)\n                return;\n\n            let stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            pixeloffset = (pixeloffset + this.start) * stride;\n\n            let red = unpackR(rgb);\n            let green = unpackG(rgb);\n            let blue = unpackB(rgb);\n\n            let br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            this.setBufferRGB(pixeloffset, red, green, blue)\n        }\n\n    }\n\n    /**\n     * Create a new NeoPixel driver for `numleds` LEDs.\n     * @param pin the pin where the neopixel is connected.\n     * @param numleds number of leds in the strip, eg: 24,30,60,64\n     */\n    //% blockId=\"neopixel_create\" block=\"NeoPixel at pin %Rjpin|with %numleds|leds as %mode\"\n    //% weight=90 color=#EA5532\n    //% parts=\"neopixel\"\n    //% trackArgs=0,2\n    //% blockSetVariable=strip subcategory=Neopixel\n    export function create(Rjpin: DigitalRJPin, numleds: number, mode: NeoPixelMode): Strip {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        let strip = new Strip();\n        let stride = mode === NeoPixelMode.RGBW ? 4 : 3;\n        strip.buf = pins.createBuffer(numleds * stride);\n        strip.start = 0;\n        strip._length = numleds;\n        strip._mode = mode;\n        strip._matrixWidth = 0;\n        strip.setBrightness(50)\n        strip.setPin(pin)\n        return strip;\n    }\n\n    /**\n     * Converts red, green, blue channels into a RGB color\n     * @param red value of the red channel between 0 and 255. eg: 255\n     * @param green value of the green channel between 0 and 255. eg: 255\n     * @param blue value of the blue channel between 0 and 255. eg: 255\n     */\n    //% weight=1 subcategory=Neopixel color=#EA5532\n    //% blockId=\"neopixel_rgb\" block=\"red %red|green %green|blue %blue\"\n    export function rgb(red: number, green: number, blue: number): number {\n        return packRGB(red, green, blue);\n    }\n\n    /**\n     * Gets the RGB value of a known color\n    */\n    //% weight=2 subcategory=Neopixel color=#EA5532\n    //% blockId=\"neopixel_colors\" block=\"%color\"\n    export function colors(color: NeoPixelColors): number {\n        return color;\n    }\n\n    function packRGB(a: number, b: number, c: number): number {\n        return ((a & 0xFF) << 16) | ((b & 0xFF) << 8) | (c & 0xFF);\n    }\n    function unpackR(rgb: number): number {\n        let r = (rgb >> 16) & 0xFF;\n        return r;\n    }\n    function unpackG(rgb: number): number {\n        let g = (rgb >> 8) & 0xFF;\n        return g;\n    }\n    function unpackB(rgb: number): number {\n        let b = (rgb) & 0xFF;\n        return b;\n    }\n\n    /**\n     * Converts a hue saturation luminosity value into a RGB color\n     * @param h hue from 0 to 360\n     * @param s saturation from 0 to 99\n     * @param l luminosity from 0 to 99\n     */\n    //% blockId=neopixelHSL block=\"hue %h|saturation %s|luminosity %l\" subcategory=Neopixel color=#EA5532\n    export function hsl(h: number, s: number, l: number): number {\n        h = Math.round(h);\n        s = Math.round(s);\n        l = Math.round(l);\n\n        h = h % 360;\n        s = Math.clamp(0, 99, s);\n        l = Math.clamp(0, 99, l);\n        let c = Math.idiv((((100 - Math.abs(2 * l - 100)) * s) << 8), 10000); //chroma, [0,255]\n        let h1 = Math.idiv(h, 60);//[0,6]\n        let h2 = Math.idiv((h - h1 * 60) * 256, 60);//[0,255]\n        let temp = Math.abs((((h1 % 2) << 8) + h2) - 256);\n        let x = (c * (256 - (temp))) >> 8;//[0,255], second largest component of this color\n        let r$:\n            number;\n        let g$:\n            number;\n        let b$:\n            number;\n        if (h1 == 0) {\n            r$ = c;\n            g$ = x;\n            b$ = 0;\n        }\n        else if (h1 == 1) {\n            r$ = x;\n            g$ = c;\n            b$ = 0;\n        }\n        else if (h1 == 2) {\n            r$ = 0;\n            g$ = c;\n            b$ = x;\n        }\n        else if (h1 == 3) {\n            r$ = 0;\n            g$ = x;\n            b$ = c;\n        }\n        else if (h1 == 4) {\n            r$ = x;\n            g$ = 0;\n            b$ = c;\n        }\n        else if (h1 == 5) {\n            r$ = c;\n            g$ = 0;\n            b$ = x;\n        }\n        let m = Math.idiv((Math.idiv((l * 2 << 8), 100) - c), 2);\n        let r = r$ + m;\n        let g = g$ + m;\n        let b = b$ + m;\n        return packRGB(r, g, b);\n    }\n\n    export enum HueInterpolationDirection {\n        Clockwise,\n        CounterClockwise,\n        Shortest\n    }\n}\n","planetxbasic.ts":"/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#00B1ED  icon=\"\\uf005\" block=\"Connected\" blockId=\"PlanetX_Connected\"\n//% groups='[\"Digital\", \"Analog\", \"IIC Port\"]'\nnamespace Connected {\n    \n    ////////////////////////paj7620//////////////////////\n    let gesture_first_init = true\n    const initRegisterArray: number[] = [\n        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17,\n        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F,\n        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14,\n        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27,\n        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01,\n        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00,\n        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20,\n        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37,\n        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A,\n        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F,\n        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30,\n        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19,\n        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04,\n        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00,\n        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00,\n        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F,\n        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07,\n        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01,\n        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F,\n        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01,\n        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40,\n        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E,\n        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00,\n        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08,\n        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00,\n        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01,\n        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01,\n        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01\n    ];\n    \n    /////////////////////////color/////////////////////////\n    const APDS9960_ADDR = 0x39\n    const APDS9960_ENABLE = 0x80\n    const APDS9960_ATIME = 0x81\n    const APDS9960_CONTROL = 0x8F\n    const APDS9960_STATUS = 0x93\n    const APDS9960_CDATAL = 0x94\n    const APDS9960_CDATAH = 0x95\n    const APDS9960_RDATAL = 0x96\n    const APDS9960_RDATAH = 0x97\n    const APDS9960_GDATAL = 0x98\n    const APDS9960_GDATAH = 0x99\n    const APDS9960_BDATAL = 0x9A\n    const APDS9960_BDATAH = 0x9B\n    const APDS9960_GCONF4 = 0xAB\n    const APDS9960_AICLEAR = 0xE7\n    let color_first_init = false\n\n    function i2cwrite_color(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n    function i2cread_color(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n    function rgb2hsl(color_r: number, color_g: number, color_b: number): number {\n        let Hue = 0\n        let R = color_r * 100 / 255;\n        let G = color_g * 100 / 255;\n        let B = color_b * 100 / 255;\n        let maxVal = Math.max(R, Math.max(G, B))\n        let minVal = Math.min(R, Math.min(G, B))\n        let Delta = maxVal - minVal;\n\n        if (Delta < 0) {\n            Hue = 0;\n        }\n        else if (maxVal == R && G >= B) {\n            Hue = (60 * ((G - B) * 100 / Delta)) / 100;\n        }\n        else if (maxVal == R && G < B) {\n            Hue = (60 * ((G - B) * 100 / Delta) + 360 * 100) / 100;\n        }\n        else if (maxVal == G) {\n            Hue = (60 * ((B - R) * 100 / Delta) + 120 * 100) / 100;\n        }\n        else if (maxVal == B) {\n            Hue = (60 * ((R - G) * 100 / Delta) + 240 * 100) / 100;\n        }\n        return Hue\n    }\n    function initModule(): void {\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ATIME, 252)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_CONTROL, 0x03)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_GCONF4, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_AICLEAR, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x01)\n        color_first_init = true\n    }\n    function colorMode(): void {\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_ENABLE) | 0x2;\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, tmp);\n    }\n\n    ///////////////////////////////////////////////////////MP3\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    /*\n    * Play status selection button list\n    */\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(100)\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,        \n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum Distance_Unit_List {\n        //% block=\"cm\" \n        Distance_Unit_cm,\n\n        //% block=\"foot\"\n        Distance_Unit_foot,\n    }\n    export enum ButtonStateList {\n        //% block=\"C\"\n        C,\n        //% block=\"D\"\n        D,\n        //% block=\"C+D\"\n        CD\n    }\n    export enum GestureType {\n        //% block=\"None\"\n        None = 0,\n        //% block=\"Right\"\n        Right = 1,\n        //% block=\"Left\"\n        Left = 2,\n        //% block=\"Up\"\n        Up = 3,\n        //% block=\"Down\"\n        Down = 4,\n        //% block=\"Forward\"\n        Forward = 5,\n        //% block=\"Backward\"\n        Backward = 6,\n        //% block=\"Clockwise\"\n        Clockwise = 7,\n        //% block=\"Anticlockwise\"\n        Anticlockwise = 8,\n        //% block=\"Wave\"\n        Wave = 9\n    }\n    export enum ColorList {\n        //% block=\"Red\"\n        red,\n        //% block=\"Green\"\n        green,\n        //% block=\"Blue\"\n        blue,\n        //% block=\"Cyan\"\n        cyan,\n        //% block=\"Magenta\"\n        magenta,\n        //% block=\"Yellow\"\n        yellow,\n        //% block=\"White\"\n        white\n    }\n\n    ///////////////////////////////////blocks/////////////////////////////\n\n    //% blockId=\"readwaterLevel\" block=\"Water level sensor %Rjpin value(0~100)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function waterLevel(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let voltage = 0, waterlevel = 0;\n        voltage = pins.map(\n            pins.analogReadPin(pin),\n            50,\n            600,\n            0,\n            100\n        );\n        if (voltage < 0) {\n            voltage = 0\n        }\n        waterlevel = voltage;\n        return Math.round(waterlevel)\n    }\n\n    let distance_last = 0\n\n    //% blockId=sonarbit block=\"Ultrasonic sensor pinT %tPin pinE %ePin distance %distance_unit\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% distance_unit.fieldEditor=\"gridpicker\"\n    //% distance_unit.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function ultrasoundSensor(tPin: DigitalPin, ePin: DigitalPin, distance_unit: Distance_Unit_List): number {\n        let pinT = tPin\n        let pinE = ePin\n        pins.setPull(pinT, PinPullMode.PullNone)\n        pins.digitalWritePin(pinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(pinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(pinT, 0)\n\n        // read pulse\n        let d = pins.pulseIn(pinE, PulseValue.High, 25000)\n        let version = control.hardwareVersion()\n        let distance = d * 34 / 2 / 1000\n        if (version == \"1\") {\n            distance = distance * 3 / 2\n        }\n\n        if (distance > 430) {\n            distance = 0\n        }\n\n        if (distance == 0) {\n            distance = distance_last\n            distance_last = 0\n        }\n        else {\n            distance_last = distance\n        }\n\n        switch (distance_unit) {\n            case Distance_Unit_List.Distance_Unit_cm:\n                return Math.floor(distance)  //cm\n                break\n            case Distance_Unit_List.Distance_Unit_foot:\n                return Math.floor(distance / 30.48)   //foot\n                break\n            default:\n                return 0\n        }\n    }\n\n    export class PAJ7620 {\n        private paj7620WriteReg(addr: number, cmd: number) {\n            let buf: Buffer = pins.createBuffer(2);\n            buf[0] = addr;\n            buf[1] = cmd;\n            pins.i2cWriteBuffer(0x73, buf, false);\n        }\n        private paj7620ReadReg(addr: number): number {\n            let buf: Buffer = pins.createBuffer(1);\n            buf[0] = addr;\n            pins.i2cWriteBuffer(0x73, buf, false);\n            buf = pins.i2cReadBuffer(0x73, 1, false);\n            return buf[0];\n        }\n        private paj7620SelectBank(bank: number) {\n            if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n        }\n        private paj7620Init() {\n            let temp = 0;\n            this.paj7620SelectBank(0);\n            temp = this.paj7620ReadReg(0);\n            if (temp == 0x20) {\n                for (let i = 0; i < 438; i += 2) {\n                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n                }\n            }\n            this.paj7620SelectBank(0);\n        }\n        init() {\n            this.paj7620Init();\n            basic.pause(200);\n        }\n        read(): number {\n            let data = 0, result = 0;\n            data = this.paj7620ReadReg(0x43);\n            switch (data) {\n                case 0x01:\n                    result = GestureType.Right;\n                    break;\n                case 0x02:\n                    result = GestureType.Left;\n                    break;\n                case 0x04:\n                    result = GestureType.Up;\n                    break;\n                case 0x08:\n                    result = GestureType.Down;\n                    break;\n                case 0x10:\n                    result = GestureType.Forward;\n                    break;\n                case 0x20:\n                    result = GestureType.Backward;\n                    break;\n                case 0x40:\n                    result = GestureType.Clockwise;\n                    break;\n                case 0x80:\n                    result = GestureType.Anticlockwise;\n                    break;\n                default:\n                    data = this.paj7620ReadReg(0x44);\n                    if (data == 0x01)\n                        result = GestureType.Wave;\n                    break;\n            }\n            return result;\n        }\n    }\n    const gestureEventId = 3100;\n    let lastGesture = GestureType.None;\n    let paj7620 = new PAJ7620();\n    //% blockId= gesture_create_event block=\"Gesture sensor IIC port is %gesture\"\n    //% gesture.fieldEditor=\"gridpicker\" gesture.fieldOptions.columns=3\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function onGesture(gesture: GestureType, handler: () => void) {\n        control.onEvent(gestureEventId, gesture, handler);\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        control.inBackground(() => {\n            while (true) {\n                const gesture = paj7620.read();\n                if (gesture != lastGesture) {\n                    lastGesture = gesture;\n                    control.raiseEvent(gestureEventId, lastGesture);\n                }\n                basic.pause(200);\n            }\n        })\n    }\n\n    //% blockId= gesture_get_event block=\"Gesture sensor IIC port detects\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function getGesture(): number {\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        const gesture = paj7620.read();\n        return gesture\n    }\n\n\n\n\n    //% blockId=apds9960_readcolor block=\"Color sensor IIC port color HUE(0~360)\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readColor(): number {\n        if (color_first_init == false) {\n            initModule()\n            colorMode()\n        }\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        while (!tmp) {\n            basic.pause(5);\n            tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        }\n        let c = i2cread_color(APDS9960_ADDR, APDS9960_CDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_CDATAH) * 256;\n        let r = i2cread_color(APDS9960_ADDR, APDS9960_RDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_RDATAH) * 256;\n        let g = i2cread_color(APDS9960_ADDR, APDS9960_GDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_GDATAH) * 256;\n        let b = i2cread_color(APDS9960_ADDR, APDS9960_BDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_BDATAH) * 256;\n        // map to rgb based on clear channel\n        let avg = c / 3;\n        r = r * 255 / avg;\n        g = g * 255 / avg;\n        b = b * 255 / avg;\n        //let hue = rgb2hue(r, g, b);\n        let hue = rgb2hsl(r, g, b)\n        return hue\n    }\n    //% block=\"Color sensor IIC port detects %color\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% color.fieldEditor=\"gridpicker\" color.fieldOptions.columns=3\n    export function checkColor(color: ColorList): boolean {\n        let hue = readColor()\n        switch (color) {\n            case ColorList.red:\n                if (hue > 330 || hue < 20) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.green:\n                if (hue > 120 && 180 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.blue:\n                if (hue > 210 && 270 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.cyan:\n                if (hue > 190 && 210 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.magenta:\n                if (hue > 260 && 330 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.yellow:\n                if (hue > 30 && 120 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.white:\n                if (hue >= 180 && 190 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n        }\n    }\n\n    //% blockId=\"potentiometer\" block=\"Trimpot %Rjpin analog value\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Input color=#E2C438 group=\"Analog\"\n    export function trimpot(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        return pins.analogReadPin(pin)\n    }\n    //% blockId=buttonab block=\"Button %Rjpin %button is pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonCD(Rjpin: DigitalRJPin, button: ButtonStateList): boolean {\n        let pinC = DigitalPin.P1\n        let pinD = DigitalPin.P2\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pinC = DigitalPin.P1\n                pinD = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pinC = DigitalPin.P2\n                pinD = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pinC = DigitalPin.P13\n                pinD = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pinC = DigitalPin.P15\n                pinD = DigitalPin.P16\n                break;\n            case DigitalRJPin.P3:\n                pinC = DigitalPin.P3\n                pinD = DigitalPin.P4\n                break;\n        }\n        pins.setPull(pinC, PinPullMode.PullUp)\n        pins.setPull(pinD, PinPullMode.PullUp)\n        if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 0 && button == ButtonStateList.CD) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinC) == 0 && pins.digitalReadPin(pinD) == 1 && button == ButtonStateList.C) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 1 && button == ButtonStateList.D) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    export enum ButtonState {\n        //% block=\"on\"\n        on = 1,\n        //% block=\"off\"\n        off = 2\n    }\n\n    const buttonEventSource = 5000\n    const buttonEventValue = {\n        CD_pressed: ButtonState.on,\n        CD_unpressed: ButtonState.off\n    }\n\n    //% block=\"on button %Rjpin %button pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=4\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonEvent(Rjpin: DigitalRJPin, button: ButtonStateList, handler: () => void) {\n        let ButtonPin_C = DigitalPin.P1\n        let ButtonPin_D = DigitalPin.P2\n        let pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P0\n        let pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                ButtonPin_C = DigitalPin.P1\n                ButtonPin_D = DigitalPin.P8\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P1\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P8\n                break;\n            case DigitalRJPin.J2:\n                ButtonPin_C = DigitalPin.P2\n                ButtonPin_D = DigitalPin.P12\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P2\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P12\n                break;\n            case DigitalRJPin.J3:\n                ButtonPin_C = DigitalPin.P13\n                ButtonPin_D = DigitalPin.P14\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P13\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P14\n                break;\n            case DigitalRJPin.J4:\n                ButtonPin_C = DigitalPin.P15\n                ButtonPin_D = DigitalPin.P16\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P15\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P16\n                break;\n            case DigitalRJPin.P3:\n                ButtonPin_C = DigitalPin.P3\n                ButtonPin_D = DigitalPin.P4\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P3\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P4\n                break;\n        }\n        if (button == ButtonStateList.C) {\n            pins.setPull(ButtonPin_C, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_C, PinEventType.Edge)\n            control.onEvent(pinEventSource_C, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.D) {\n            pins.setPull(ButtonPin_D, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_D, PinEventType.Edge)\n            control.onEvent(pinEventSource_D, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.CD) {\n            loops.everyInterval(50, function () {\n                if (pins.digitalReadPin(ButtonPin_C) == 0 && pins.digitalReadPin(ButtonPin_D) == 0) {\n                    control.raiseEvent(buttonEventSource, buttonEventValue.CD_pressed)\n                }\n            })\n            control.onEvent(buttonEventSource, buttonEventValue.CD_pressed, handler)\n        }\n    }\n\n    //% blockId=fans block=\"Motor fan %Rjpin toggle to $fanstate || speed %speed \\\\%\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% fanstate.shadow=\"toggleOnOff\"\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    //% speed.min=0 speed.max=100\n    //% expandableArgumentMode=\"toggle\"\n    export function motorFan(Rjpin: DigitalRJPin, fanstate: boolean, speed: number = 100): void {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.J3:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.J4:\n                pin = AnalogPin.P15\n                break;\n        }\n        if (fanstate) {\n            pins.analogSetPeriod(pin, 100)\n            pins.analogWritePin(pin, Math.map(speed, 0, 100, 0, 1023))\n        }\n        else {\n            pins.analogWritePin(pin, 0)\n            speed = 0\n        }\n    }\n\n\n    //% blockId=\"setLoopFolder\" block=\"loop play all the MP3s in the folder:$folderNum\"\n    //% folderNum.defl=\"01\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setLoopFolder(folderNum: string): void {\n        CMD = 0x17\n        para1 = 0\n        para2 = parseInt(folderNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    //% blockId=\"folderPlay\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum || repeatList: $myAns\"\n    //% folderNum.defl=\"01\" fileNum.defl=\"001\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function folderPlay(folderNum: string, fileNum: string, myAns: boolean = false): void {\n        CMD = 0x0F\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        if (myAns)\n            execute(0x19)\n    }\n\n    //% blockId=\"playFolderFilePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFilePort(folderNum: string, fileNum: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFolderFileVolumePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum with volume:$theVolume usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" theVolume.defl=\"10\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFileVolumePort(folderNum: string, fileNum: string, theVolume: string, Rjpin: DigitalRJPin): void {\n        \n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        \n        let volume = parseInt(theVolume)\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(200)\n\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"volumePort\" \n    //% block=\"set MP3 volume:$theVolume usingPin:$Rjpin\"\n    //% theVolume.defl=\"10\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function volumePort(theVolume: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        let volume = parseInt(theVolume)\n        if (volume > 30) {\n            volume = 30\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(300)\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n\n\n    //% blockId=\"setTracking\" \n    //% block=\"play the mp3 in order of:%tracking || repeatList: $myAns\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% tracking.defl=1\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setTracking(tracking: number, myAns: boolean = false): void {\n        CMD = 0x03\n        para1 = 0x00\n        para2 = tracking\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        execute(0x0D)\n        if (myAns)\n            execute(0x19)\n    }\n    //% blockId=MP3execute block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=\"setVolume\" block=\"Set volume(0~25):%volume\"\n    //% volume.min=0 volume.max=25\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setVolume(volume: number): void {\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 0x06\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=MP3setPort block=\"Set the MP3 port to %Rjpin\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function MP3SetPort(Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        setVolume(25)\n    }\n}","notlegos.ts":"// NotLegos Blocks\n\n//% block=\"Not LEGOs\" color=#0031AF weight=1000 icon=\"\\uf3a5\"\n//% groups=['MP3\",'Display', 'Laser', 'others']\nnamespace notLegos {\n\n    // Variables for MP3 and Volume Pot\n    let isPot = false\n    let potPin = AnalogPin.P0\n    let mp3bits = 0\n    let mp3Apin = SerialPin.P0\n    let mp3Bpin = SerialPin.P0\n    let mp3Cpin = SerialPin.P0\n    let mp3Avolume = 1\n    let mp3Bvolume = 1\n    let mp3Cvolume = 1\n    let relativeCvolume = 1\n    let lastMP3bit = \"\"\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    let mp3musicPin:SerialPin\n    let mp3music = false\n    let mp3player = false\n    let mp3sfxPin = null\n    let mp3sfx = false\n    let mp3musicVol = 0\n    let mp3playerPin = null\n    let mp3playerVol = 0\n    let mp3sfxVol = 0\n\n    // String Arrays for Full Player Sound Sets and Shuffled Playlists Thereof\n    let PlayerAwaitingMusic: string[] = []\n    let PlayerFailure: string[] = []\n    let PlayerHurry: string[] = []\n    let PlayerIntro: string[] = []\n    let PlayerIntroMusic: string[] = []\n    let PlayerLevelMusic: string[] = []\n    let PlayerLost: string[] = []\n    let PlayerLostMusic: string[] = []\n    let PlayerName: string[] = []\n    let PlayerNay: string[] = []\n    let PlayerOuch: string[] = []\n    let PlayerReady: string[] = []\n    let PlayerSuccess: string[] = []\n    let PlayerTutorialMusic: string[] = []\n    let PlayerWon: string[] = []\n    let PlayerWonMusic: string[] = []\n    let PlayerYay: string[] = []\n    let PlaylistAwaitingMusic: string[] = []\n    let PlaylistCorrect: string[] = []\n    let PlaylistExplosion: string[] = []\n    let PlaylistFailure: string[] = []\n    let PlaylistFire: string[] = []\n    let PlaylistGhost: string[] = []\n    let PlaylistHurry: string[] = []\n    let PlaylistIncorrect: string[] = []\n    let PlaylistIntro: string[] = []\n    let PlaylistLost: string[] = []\n    let PlaylistName: string[] = []\n    let PlaylistNay: string[] = []\n    let PlaylistOuch: string[] = []\n    let PlaylistReady: string[] = []\n    let PlaylistSlash: string[] = []\n    let PlaylistSpark: string[] = []\n    let PlaylistSplash: string[] = []\n    let PlaylistSuccess: string[] = []\n    let PlaylistWon: string[] = []\n    let PlaylistYay: string[] = []\n\n    // Sound Strings - Global\n    let VoiceTracks = \"10_1_90_1.75|10_2_90_3.65|10_3_50_11.5|10_4_90_0|10_5_90_0|10_6_90_4.65|10_7_90_7.15|10_8_90_4.8|10_9_90_3.75|10_10_90_5.05|10_11_90_0|10_12_90_0|10_13_90_3|10_14_90_3|10_15_90_3|10_16_90_4|10_17_90_0|10_18_90_3|10_19_90_3|10_20_90_4|10_21_90_2|10_22_90_0|10_23_90_2|10_24_90_2|10_25_90_6|10_26_90_6|10_27_90_6|10_28_90_6|10_29_90_6|10_30_90_6|10_31_90_6|10_32_90_6|10_33_90_8|10_34_90_9|10_35_90_6|10_36_90_6|10_37_90_6|10_38_90_6|10_39_90_6|10_40_90_6\".split(\"|\")\n    let CorrectSFX = \"7_1_100_4|7_2_100_8|7_3_100_8|7_4_100_6|7_5_100_10|7_6_100_8|7_7_100_6|7_8_100_4|7_9_100_17|7_10_100_9|7_11_100_4|7_12_100_8|7_13_100_12|7_14_100_7|7_15_100_10|7_16_100_9|7_17_100_10|7_18_100_9|7_19_100_8|7_20_100_4|7_21_100_7|7_22_100_26|7_23_100_5|7_24_100_4|7_25_100_10|7_26_100_7|7_27_100_7|7_28_100_6|7_29_100_7|7_30_100_7|7_31_100_12|7_32_100_4|7_33_100_6|7_34_100_6|7_35_100_6|7_36_100_6|7_37_100_5|7_38_100_3|7_39_100_6|7_40_100_6|7_41_100_6|7_42_100_8|7_43_100_6|7_44_100_8|7_45_100_6|7_46_100_5|7_47_100_5|7_48_100_12|7_49_100_3|7_50_100_7|7_51_100_8|7_52_100_11|7_53_100_6|7_54_100_2|7_55_100_5|7_56_100_7|7_57_100_8|7_58_100_7|7_59_100_6|7_60_100_7|7_61_100_6|7_62_100_8|7_63_100_5|7_64_100_5|7_65_100_7|7_66_100_9|7_67_100_6|7_68_100_6|7_69_100_7|7_70_100_10|7_71_100_7|7_72_100_5|7_73_100_6|7_74_100_8|7_75_100_3|7_76_100_3|7_77_100_6|7_78_100_7|7_79_100_4|7_80_100_6|7_81_100_2|7_82_100_3|7_83_100_3|7_84_100_1|7_85_100_3|7_86_100_6|7_87_100_7|7_88_100_5|7_89_100_3|7_90_100_5|7_91_100_3|7_92_100_3|7_93_100_2|7_94_100_3|7_95_100_3|7_96_100_1|7_99_100_1|7_100_100_1|7_101_100_1|7_102_100_1|7_103_100_1|7_104_100_3|7_105_100_1|7_106_100_1|7_107_100_4|7_108_100_4|7_109_100_1|7_110_100_1|7_111_100_1|7_112_100_1|7_113_100_1|7_114_100_2|7_115_100_1|7_116_100_1|7_117_100_1|7_118_100_1\".split(\"|\")\n    let IncorrectSFX = \"8_1_100_6|8_2_100_5|8_3_100_3|8_4_100_5|8_5_100_7|8_6_100_6|8_7_100_4|8_8_100_1|8_9_100_3|8_10_100_4|8_11_100_3|8_12_100_3|8_13_100_6|8_14_100_3|8_15_100_1|8_16_100_1|8_17_100_1|8_18_100_1|8_19_100_0|8_20_100_0|8_21_100_5|8_22_100_4|8_23_100_3|8_24_100_7\".split(\"|\")\n    let AllSFX = \"9_1_100_4.754|9_2_100_4.336|9_3_100_5.172|9_4_100_4.806|9_5_100_4.754|9_6_100_1.536|9_7_100_2.136|9_8_100_1.896|9_9_100_2.592|9_10_100_0.936|9_11_100_1.008|9_12_100_0.312|9_13_100_1.44|9_14_100_1.8|9_15_100_1.992|9_16_100_1.104|9_17_100_1.08|9_18_100_0.912|9_19_100_0.528|9_20_100_0.72|9_21_100_0.672|9_22_100_0.696|9_23_100_0.6|9_24_100_0.576|9_25_100_1.44|9_26_100_1.8|9_27_100_1.464|9_28_100_0.432|9_29_100_0.312|9_30_100_2.112|9_31_100_0.648|9_32_100_0.384|9_33_100_2.352|9_34_100_1.8|9_35_100_1.608|9_36_100_0.648|9_37_100_0.768|9_38_100_0.552|9_39_100_0.48|9_40_100_1.032|9_41_100_0.456|9_42_100_0.384|9_43_100_0.552|9_44_100_0.432|9_45_100_0.216|9_46_100_0.624|9_47_100_1.248|9_48_100_1.104|9_49_100_1.248|9_50_100_0.648|9_51_100_0.456|9_53_100_5.256|9_54_100_2.328|9_55_100_4.992|9_56_100_1.776|9_57_100_2.28|9_58_100_0.504|9_59_100_0.984|9_60_100_0.984|9_61_100_0.504|9_62_100_1.632|9_63_100_0.288|9_64_100_0.192|9_65_100_0.168|9_66_100_0.288|9_67_100_0.288|9_68_100_0.312|9_69_100_0.72|9_70_100_0.672|9_71_100_0.648|9_72_100_0.648|9_73_100_1.632|9_74_100_1.416|9_75_100_1.248|9_76_100_0.48|9_77_100_0.36|9_78_100_0.216|9_79_100_0.576|9_80_100_0.731|9_81_100_1.128|9_82_100_2.184|9_83_100_0.744|9_84_100_0.6|9_85_100_1.152|9_86_100_1.68|9_87_100_1.32|9_88_100_0.528|9_89_100_0.36|9_90_100_0.792|9_91_100_2.496|9_92_100_1.8|9_93_100_1.8|9_94_100_0.744|9_95_100_1.776|9_96_100_5.544|9_97_100_0.432|9_98_100_2.064|9_99_100_0.744|9_100_100_0.696|9_101_100_1.776|9_102_100_0.12|9_103_100_0.168|9_104_100_0.96|9_105_100_0.96|9_106_100_2.04|9_107_100_3.984|9_108_100_1.608|9_109_100_3.528|9_110_100_0.456|9_111_100_0.696|9_112_100_1.632|9_113_100_2.232\".split(\"|\")\n    let GhostSFX = \"9_1_100_4.754|9_2_100_4.336|9_3_100_5.172|9_4_100_4.806\".split(\"|\")\n    let FireSFX = \"9_6_100_1.536|9_15_100_1.992|9_53_100_5.256|9_106_100_2.04\".split(\"|\")\n    let ExplosionSFX = \"9_77_100_0.36|9_101_100_1.776|9_109_100_3.528\".split(\"|\")\n    let SplashSFX = \"9_33_100_2.352|9_34_100_1.8\".split(\"|\")\n    let SparkSFX = \"9_5_100_4.754|9_51_100_0.456|9_85_100_1.152|9_86_100_1.68|9_111_100_0.696|9_112_100_1.632\".split(\"|\")\n    let SlashSFX = \"9_10_100_0.936|9_25_100_1.44|9_28_100_0.432|9_32_100_0.384|9_50_100_0.648|9_59_100_0.984|9_63_100_0.288|9_64_100_0.192|9_65_100_0.168|9_66_100_0.288|9_67_100_0.288|9_68_100_0.312|9_69_100_0.72|9_75_100_1.248|9_76_100_0.48|9_77_100_0.36|9_78_100_0.216|9_89_100_0.36\".split(\"|\")\n    \n    // Music Strings - Super Mario Brothers\n    let SMBIntroMusic = \"1_1_75_2.808|1_2_75_3.912|1_3_75_7.81|1_4_75_4.992|1_5_75_3.918|1_6_75_12.382|1_7_75_3.204|1_8_75_6.648|1_9_75_6.168|1_10_75_7.464|1_11_75_9.36|1_12_75_9.038|1_13_75_10.605|1_14_75_3.492|1_15_75_9.613|1_16_75_3.48|1_17_75_5.58|1_18_75_5.041|1_19_75_6.336|1_20_75_5.424|1_21_75_7.2|1_22_75_5.424|1_23_75_3.317|1_24_75_7.262|1_25_75_5.59|1_26_75_5.52|1_27_75_10.776|1_28_75_4.944|1_29_75_5.496|1_30_75_4.032|1_31_75_6.264|1_32_75_3.918|1_33_75_4.44|1_34_75_10.152|1_35_75_8.097|1_36_75_7.706|1_37_75_3.317|1_38_75_6.87|1_39_75_4.466|1_40_75_5.877|1_41_75_3.432|1_42_75_7.392|1_43_75_6.768|1_44_75_2.616|1_45_75_6.269|1_46_75_1.188|1_47_75_2.088|1_48_75_2.124|1_49_75_8.228|1_50_75_15.647|1_51_75_9.064|1_52_75_10.152|1_53_75_13.008|1_54_75_14.16|1_55_75_14.236|1_56_75_15.792|1_57_75_7.392|1_58_75_4.368|1_59_75_9.384|1_60_75_7.653|1_61_75_8.76|1_62_75_8.952|1_63_75_12.024|1_64_75_4.284|1_65_75_6.048|1_66_75_9.072|1_67_75_4.68|1_68_75_6.138|1_69_75_5.208|1_70_75_9.576|1_71_75_8.045|1_72_75_8.045|1_73_75_5.407|1_74_75_3.186\".split(\"|\")\n    let SMBTutorialMusic = \"2_1_65_36|2_2_65_40|2_3_65_41|2_4_65_46|2_5_65_50|2_6_65_51|2_7_65_59|2_8_65_63|2_9_65_64|2_10_65_65|2_11_65_66|2_12_65_67|2_13_65_68|2_14_65_69|2_15_65_76|2_16_65_80|2_17_65_84|2_18_65_90|2_19_65_92|2_20_65_100|2_21_65_103|2_22_65_105|2_23_65_112|2_24_65_113|2_25_65_123|2_26_65_138|2_27_65_142|2_28_65_144|2_29_65_156|2_30_65_158|2_31_65_120|2_32_65_120|2_33_65_120|2_34_65_120|2_35_65_120|2_36_65_120\".split(\"|\")\n    let SMBAwaitingMusic = \"3_1_100_64|3_2_100_211|3_3_100_185|3_4_100_185|3_5_100_182|3_6_100_114|3_7_100_181|3_8_100_103|3_9_100_303|3_10_100_21|3_11_100_235|3_12_100_121|3_13_100_203|3_14_100_119|3_15_100_206|3_16_100_146|3_17_100_237|3_18_100_210|3_19_100_160\".split(\"|\")\n    let SMBLevelMusic = \"4_1_100_128|4_3_100_142|4_5_100_111|4_6_100_141|4_9_100_126|4_11_100_132|4_15_100_119|4_16_100_146|4_18_100_120|4_20_100_143|4_22_100_142|4_23_100_112|4_24_100_138|4_25_100_139|4_26_100_111|4_27_100_116|4_28_100_129|4_31_100_98|4_32_100_146|4_33_100_177|4_34_100_82|4_36_100_160|4_38_100_180|4_39_100_211|4_41_100_134|4_42_100_183|4_43_100_124|4_44_100_261|4_45_100_91|4_46_100_138|4_49_100_207|4_50_100_41|4_51_100_180|4_52_100_202|4_53_100_194|4_56_100_209|4_57_100_195|4_58_100_180|4_60_100_198|4_61_100_180|4_63_100_78|4_66_100_139|4_67_100_224|4_68_100_180|4_73_100_180|4_76_100_180|4_77_100_196|4_78_100_113|4_82_100_180|4_83_100_123|4_84_100_180|4_86_100_126|4_93_100_121|4_97_100_59|4_98_100_180|4_99_100_180|4_100_100_118|4_101_100_156|4_102_100_180|4_103_100_70|4_104_100_216|4_105_100_140|4_106_100_180|4_107_100_147|4_108_100_147|4_109_100_180|4_110_100_158|4_111_100_180|4_112_100_80|4_113_100_152|4_114_100_127|4_116_100_122|4_118_100_106|4_123_100_143|4_124_100_36|4_125_100_164|4_127_100_282|4_128_100_311|4_129_100_123|4_130_100_187|4_131_100_62|4_132_100_180|4_133_100_130|4_134_100_112|4_135_100_105|4_139_100_126|4_141_100_176|4_142_100_135|4_143_100_126|4_144_100_144|4_145_100_140|4_146_100_133|4_149_100_167|4_150_100_120|4_151_100_180|4_155_100_226|4_157_100_164|4_158_100_144|4_159_100_104|4_161_100_180|4_162_100_87|4_163_100_126|4_164_100_118|4_165_100_194|4_166_100_135|4_167_100_50|4_168_100_109|4_169_100_180|4_170_100_133|4_171_100_180|4_172_100_91|4_173_100_138|4_176_100_120|4_177_100_81|4_178_100_150|4_179_100_153|4_180_100_104|4_181_100_112\".split(\"|\")\n    let SMBWonMusic = \"5_1_100_4|5_2_100_17|5_3_100_29|5_4_100_172|5_5_100_13|5_6_100_248|5_7_100_11|5_8_100_445|5_9_100_241|5_10_100_244|5_11_100_20|5_12_100_7|5_13_100_28|5_14_100_74|5_15_100_15|5_16_100_74|5_17_100_17|5_18_100_17|5_19_100_15|5_20_100_38|5_21_100_42|5_22_100_67|5_23_100_8|5_24_100_8|5_25_100_13|5_26_100_17|5_27_100_5|5_28_100_122|5_29_100_226|5_30_100_79\".split(\"|\")\n    let SMBLostMusic = \"6_1_100_87|6_2_100_31|6_3_100_196|6_4_100_65|6_5_100_4|6_6_100_23|6_7_100_65|6_8_100_62|6_9_100_78|6_10_100_6|6_11_100_162\".split(\"|\")\n    \n    // Player Strings - Mario\n    let MarioSoundString = \"A_21_1_100_1.5|A_21_2_100_1|I_21_3_100_3.3|A_21_4_100_1.9|A_21_5_100_2.1|I_21_6_100_1.8|I_21_7_100_1.8|R_21_8_100_0.6|R_21_9_100_1.3|R_21_10_100_1.1|R_21_11_100_0.6|R_21_12_100_0.8|R_21_13_100_1.6|R_21_14_100_1.3|R_21_15_100_1.2|R_21_16_100_1.1|R_21_17_100_1.3|R_21_18_100_1|Y_21_19_100_0.2|Y_21_20_100_0.2|Y_21_21_100_0.3|Y_21_22_100_0.5|Y_21_23_100_0.6|Y_21_24_100_0.6|Y_21_25_100_0.6|Y_21_26_100_0.6|Y_21_27_100_0.6|Y_21_28_100_0.6|Y_21_29_100_0.7|Y_21_30_100_0.7|Y_21_31_100_0.7|Y_21_32_100_0.7|Y_21_33_100_0.7|Y_21_34_100_0.8|Y_21_35_100_0.8|Y_21_36_100_0.8|Y_21_37_100_0.8|Y_21_38_100_0.8|Y_21_39_100_0.8|Y_21_40_100_0.9|Y_21_41_100_0.9|Y_21_42_100_0.9|Y_21_43_100_0.9|Y_21_44_100_0.9|Y_21_45_100_0.9|Y_21_46_100_0.9|Y_21_47_100_1|Y_21_48_100_1|Y_21_49_100_1|Y_21_50_100_1|Y_21_51_100_1.1|Y_21_52_100_1.1|Y_21_53_100_1.1|Y_21_54_100_1.2|Y_21_55_100_1.2|Y_21_56_100_1.2|Y_21_57_100_1.2|Y_21_58_100_1.3|Y_21_59_100_1.3|Y_21_60_100_1.3|Y_21_61_100_1.4|Y_21_62_100_1.4|S_21_63_100_1|S_21_64_100_1.6|S_21_65_100_1.7|S_21_66_100_1.7|S_21_67_100_1.9|S_21_68_100_2.1|S_21_69_100_2.2|S_21_70_100_2.4|S_21_71_100_2.4|S_21_72_100_2.5|W_21_73_100_1.8|W_21_74_100_2|W_21_75_100_2.2|W_21_76_100_2.6|W_21_77_100_2.9|O_21_78_100_0.6|O_21_79_100_0.4|O_21_80_100_0.4|O_21_81_100_1.1|O_21_82_100_1.5|O_21_83_100_0.8|O_21_84_100_0.7|O_21_85_100_0.8|O_21_86_100_0.9|O_21_87_100_1.3|O_21_88_100_0.5|O_21_89_100_1|O_21_90_100_1|O_21_91_100_0.4|O_21_92_100_0.5|O_21_93_100_0.9|O_21_94_100_0.4|O_21_95_100_0.4|N_21_96_100_1|N_21_97_100_1.1|N_21_98_100_1|N_21_99_100_0.6|N_21_100_100_0.9|N_21_101_100_1.4|N_21_102_100_1.7|N_21_103_100_1.3|N_21_104_100_0.6|N_21_105_100_1.4|N_21_106_100_0.8|N_21_107_100_1.1|N_21_108_100_1.1|N_21_109_100_0.8|N_21_110_100_1.7|N_21_111_100_2.4|I_21_112_100_0.8|I_21_113_100_0.9|F_21_114_100_1.1|F_21_115_100_2.5|F_21_116_100_2.5|F_21_117_100_1.4|L_21_118_100_3.4|L_21_119_100_3.5|L_21_120_100_4.4|L_21_121_100_1.5|H_21_122_100_44.4\"\n\n    // BLOCK - Set the Player's Sounds\n    //% blockId=nl_player_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% weight=101\n    //% block=\"Set player to $player\"\n    export function setSounds(player: string): void {\n        let theSound = \"\"\n        let thisLetter = \"\"\n        let series = \"\"\n        let soundStrings: string[] = []\n        if (player == \"Mario\") {\n            soundStrings = MarioSoundString.split(\"|\")\n            series = \"SMB\"\n        }\n        if (series == \"SMB\") {\n            PlayerIntroMusic = SMBIntroMusic\n            PlayerTutorialMusic = SMBTutorialMusic\n            PlayerAwaitingMusic = SMBAwaitingMusic\n            PlayerLevelMusic = SMBLevelMusic\n            PlayerWonMusic = SMBWonMusic\n            PlayerLostMusic = SMBLostMusic\n        }\n        for (let sString of soundStrings) {\n            thisLetter = sString.charAt(0)\n            theSound = sString.substr(2, sString.length - 2)\n            if (thisLetter == \"A\") {\n                PlayerName.push(theSound)\n            } else if (thisLetter == \"R\") {\n                PlayerReady.push(theSound)\n            } else if (thisLetter == \"Y\") {\n                PlayerYay.push(theSound)\n            } else if (thisLetter == \"I\") {\n                PlayerIntro.push(theSound)\n            } else if (thisLetter == \"N\") {\n                PlayerNay.push(theSound)\n            } else if (thisLetter == \"O\") {\n                PlayerOuch.push(theSound)\n            } else if (thisLetter == \"S\") {\n                PlayerSuccess.push(theSound)\n            } else if (thisLetter == \"F\") {\n                PlayerFailure.push(theSound)\n            } else if (thisLetter == \"W\") {\n                PlayerWon.push(theSound)\n            } else if (thisLetter == \"L\") {\n                PlayerLost.push(theSound)\n            } else if (thisLetter == \"H\") {\n                PlayerHurry.push(theSound)\n            }\n        }\n    }    \n    \n    // Internal Function - Take a Sound from a Playlist After Filling it from a Soundbank if it's Empty\n    function takeReplenish(Playlist: any[], Soundbank: any[]) {\n        let returnSound = \"\"\n        returnSound = \"\"\n        if (Playlist.length == 0) {\n            for (let index = 0; index <= Soundbank.length - 1; index++) {\n                if (index == 0) {\n                    Playlist.push(Soundbank[index])\n                } else if (index >= 1) {\n                    Playlist.insertAt(randint(0, index), Soundbank[index])\n                }\n            }\n        }\n        returnSound = Playlist.shift()\n        return returnSound\n    }\n\n    // BLOCK - Fetch a Sound of a Type from a Category\n    //% blockId=nl_get_soundstring\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% weight=101\n    //% block=\"Get $Category sound $Type\"\n    export function getSoundString(Category: string, Type: string): string {\n        let returnString = \"\"\n        if (Category == \"Voice\") {\n            returnString = VoiceTracks[parseFloat(Type)]\n        } else if (Category == \"Player\") {\n            if (Type == \"Name\") {\n                returnString = takeReplenish(PlaylistName, PlayerName)\n            } else if (Type == \"Intro\") {\n                returnString = takeReplenish(PlaylistIntro, PlayerIntro)\n            } else if (Type == \"Ready\") {\n                returnString = takeReplenish(PlaylistReady, PlayerReady)\n            } else if (Type == \"Yay\") {\n                returnString = takeReplenish(PlaylistYay, PlayerYay)\n            } else if (Type == \"Success\") {\n                returnString = takeReplenish(PlaylistSuccess, PlayerSuccess)\n            } else if (Type == \"Nay\") {\n                returnString = takeReplenish(PlaylistNay, PlayerNay)\n            } else if (Type == \"Failure\") {\n                returnString = takeReplenish(PlaylistFailure, PlayerFailure)\n            } else if (Type == \"Won\") {\n                returnString = takeReplenish(PlaylistWon, PlayerWon)\n            } else if (Type == \"Lost\") {\n                returnString = takeReplenish(PlaylistLost, PlayerLost)\n            } else if (Type == \"Hurry\") {\n                returnString = takeReplenish(PlaylistHurry, PlayerHurry)\n            }\n        } else if (Category == \"SFX\") {\n            if (Type == \"Correct\") {\n                returnString = takeReplenish(PlaylistCorrect, CorrectSFX)\n            } else if (Type == \"Incorrect\") {\n                returnString = takeReplenish(PlaylistIncorrect, IncorrectSFX)\n            } else if (Type == \"Ghost\") {\n                returnString = takeReplenish(PlaylistGhost, GhostSFX)\n            } else if (Type == \"Fire\") {\n                returnString = takeReplenish(PlaylistFire, FireSFX)\n            } else if (Type == \"Explosion\") {\n                returnString = takeReplenish(PlaylistExplosion, ExplosionSFX)\n            } else if (Type == \"Splash\") {\n                returnString = takeReplenish(PlaylistSplash, SplashSFX)\n            } else if (Type == \"Spark\") {\n                returnString = takeReplenish(PlaylistSpark, SparkSFX)\n            } else if (Type == \"Slash\") {\n                returnString = takeReplenish(PlaylistSlash, SlashSFX)\n            }\n        } else if (Category == \"Music\") {\n            if (Type == \"Intro\") {\n                let PlaylistIntroMusic: number[] = []\n                returnString = takeReplenish(PlaylistIntroMusic, PlayerIntroMusic)\n            } else if (Type == \"Tutorial\") {\n                let PlaylistTutorialMusic: number[] = []\n                returnString = takeReplenish(PlaylistTutorialMusic, PlayerTutorialMusic)\n            } else if (Type == \"Awaiting\") {\n                returnString = takeReplenish(PlaylistAwaitingMusic, PlayerAwaitingMusic)\n            } else if (Type == \"Level\") {\n                let PlaylistLevelMusic: number[] = []\n                returnString = takeReplenish(PlaylistLevelMusic, PlayerLevelMusic)\n            } else if (Type == \"Won\") {\n                let PlaylistWonMusic: number[] = []\n                returnString = takeReplenish(PlaylistWonMusic, PlayerWonMusic)\n            } else if (Type == \"Lost\") {\n                let PlaylistLostMusic: number[] = []\n                returnString = takeReplenish(PlaylistLostMusic, PlayerLostMusic)\n            }\n        }\n        return returnString\n    }\n\n\n    ///////////////////////////////////////////////////////MP3\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(20) // Was 100; problematic at 10\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n    function sendMP3volume(sPin: SerialPin): void {\n        let theVolume = 5\n        if (sPin == mp3Apin) {\n            theVolume = Math.round(potRead() * mp3Avolume)\n        } else if (sPin == mp3Bpin) {\n            theVolume = Math.round(potRead() * mp3Bvolume)\n        } else if (sPin == mp3Cpin) {\n            theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    function sendMP3volumeFast(sPin: SerialPin): void {\n        let theVolume = 5\n        if (sPin == mp3Apin) {\n            theVolume = Math.round(potRead() * mp3Avolume)\n        } else if (sPin == mp3Bpin) {\n            theVolume = Math.round(potRead() * mp3Bvolume)\n        } else if (sPin == mp3Cpin) {\n            theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    function sendMP3play(folderNum: string, fileNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    //% blockId=\"playFileNl\" \n    //% block=\"Play length of file:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n\n    export function playFile(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P16\n        stringParts = soundString.split(\"_\")\n        let theFile = stringParts[0]\n        let theVolume = stringParts[1]\n        let theLength = stringParts[2]\n        //sendMP3file(theFile, theVolume, sPin)\n        return parseFloat(theLength) * 1000\n    }\n\n\n\n    //% blockId=\"playFileNl2\" \n    //% block=\"Play2 length of file:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n\n    export function playFile2(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P16\n        stringParts = soundString.split(\"_\")\n        let theFile = stringParts[0]\n        let theVolume = stringParts[1]\n        let theLength = stringParts[2]\n        sendMP3file2(theFile, theVolume, sPin)\n        return parseFloat(theLength) * 1000\n    }\n    function sendMP3file2(fileNum: string, volumeNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 15\n        para1 = parseInt(fileNum)\n        para2 = parseInt(volumeNum)\n        para1 = parseInt(\"1\")\n        para2 = parseInt(\"1\")\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=nl_backgroundVolume\n    //% block=\"Set background volume to:%relativeVolume\"\n    //% subcategory=\"MP3\" group=\"MP3\"\n    export function sendBackgroundVolume(relativeVolume: number): void {\n        relativeCvolume = relativeVolume/100\n\n        let sPin = mp3Cpin\n        let theVolume = Math.round(potRead() * mp3Cvolume * relativeVolume / 100)\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=MP3execute2 block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n  \n    //% blockId=notlegos_pot_read\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Trimpot analog value\"\n    export function potRead() {\n        if(isPot){\n            return Math.round(pins.map(pins.analogReadPin(potPin), 0, 1023, 0, 30))\n        } else{\n            return 5\n        }\n    }\n\n    //% blockId=notlegos_relCread\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return background volume\"\n    export function getBackgroundVolume() {\n\n            return relativeCvolume\n\n    }\n    //% blockId=notlegos_mp3Avolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3A volume\"\n    export function getMP3AVolume() {\n        return potRead() * mp3Avolume\n    }\n    //% blockId=notlegos_mp3Bvolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3B volume\"\n    export function getMP3BVolume() {\n        return potRead() * mp3Bvolume\n    }\n      //% blockId=notlegos_mp3Cvolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3C volume\"\n    export function getMP3CVolume() {\n        return potRead() * mp3Cvolume * relativeCvolume\n    }\n\n    //% blockId=notlegos_pot_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Connect Volume Control Pot at pin %aPin\"\n    //% aPin.fieldEditor=\"gridpicker\"\n    export function potSet(aPin: AnalogPin): void{\n        potPin = aPin\n        isPot = true\n    }\n\n//////////////////////////////////////////////////////////\n\n    //% blockId=nl_mp3_init\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Ready MP3bit for %type at %sPin\"\n    //% dPin.fieldEditor=\"gridpicker\"\n    export function mp3setPorts(type:mp3type, sPin: SerialPin): void {\n        if (type == mp3type.music){\n            mp3musicPin = sPin\n            mp3music = true\n            mp3musicVol = 60\n        } else if (type == mp3type.player){\n            mp3playerPin = sPin\n            mp3player = true\n            mp3playerVol = 100\n        } else if (type == mp3type.sfxvoice){\n            mp3sfxPin = sPin\n            mp3sfx = true\n            mp3sfxVol = 80\n        }\n        sendMP3volumeQuick(type)\n    }\n\n    function sendMP3volumeQuick(bit:mp3type): void {\n        if (bit == mp3type.music){\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        }\n\n        let theVolume = 10\n        // if (sPin == mp3Apin) {\n        //     theVolume = Math.round(potRead() * mp3Avolume)\n        // } else if (sPin == mp3Bpin) {\n        //     theVolume = Math.round(potRead() * mp3Bvolume)\n        // } else if (sPin == mp3Cpin) {\n        //     theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        // }\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=\"nl_testfast\" \n    //% block=\"Execute track %track on %bit\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3testFast(track: number, bit:mp3type): void {\n        if (bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        }\n        CMD = 3\n        dataArr[3] = CMD\n        dataArr[5] = 0\n        dataArr[6] = track\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n\n    \n    //% blockId=nl_mp3_music\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %genre music\"\n    export function mp3musicPlay(genre:musicGenre): void{\n        serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 3\n        para1 = parseInt(\"0\")\n        para2 = parseInt(\"1\")\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n\n\n    \n\n    //% blockId=nl_mp3_say\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %saying as player\"\n    export function mp3sayPlay(saying: playerSaying): void {\n\n    }\n\n\n    //% blockId=nl_mp3_voice\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %voice as voice\"\n    export function mp3voicePlay(voice: voiceSaying): void {\n\n    }\n\n    //% blockId=nl_mp3_voice\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Magician says on the %side difficulty %difficulty\"\n    export function mp3magician(side:magicianSaysSide, difficulty:magicianDifficulty): void {\n\n    }\n\n    //% blockId=nl_mp3_voice\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %sfx sound effect\"\n    export function mp3sfxPlay(sfx: sfxType): void {\n\n    }\n\n\n    //% blockId=\"playFolderFile\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playFolderFile(folderNum: string, fileNum: string): void {\n    \n        if (mp3bits > 0) {\n            sendMP3volume(mp3Apin)\n        }\n        if (mp3bits > 1) {\n           // sendMP3volume(mp3Bpin)\n        }\n        if (mp3bits >0) {\n            sendMP3play(folderNum, fileNum, mp3Apin)\n        }\n        if (mp3bits > 1) {\n          //  sendMP3play(folderNum, fileNum, mp3Bpin)\n        }\n    }\n\n    //% blockId=\"playsFor\" \n    //% block=\"Play length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsFor(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        if (mp3bits == 1) {\n            sPin = mp3Apin\n            mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        } else {\n            if (lastMP3bit == \"A\") {\n                    sPin = mp3Bpin\n                    mp3Bvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n                    lastMP3bit = \"B\"\n            } else {\n                sPin = mp3Apin\n                mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n            lastMP3bit = \"A\"\n            }\n        }\n        let theLength = stringParts[3]\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n        return parseFloat(theLength) * 1000 + 20\n    }\n\n    //% blockId=nl_volume_refresh\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume\"\n    export function updateVolume(): void {\n        if (mp3bits > 0) {\n            sendMP3volumeFast(mp3Apin)\n        }\n        if (mp3bits > 1) {\n            sendMP3volumeFast(mp3Bpin)\n        }\n        if (mp3bits > 2) {\n            sendMP3volumeFast(mp3Cpin)\n        }\n    }\n\n\n    //% blockId=\"nl_playsForTwo\" \n    //% block=\"Dual play length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsForTwo(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n\n        mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        mp3Bvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n\n        sendMP3volumeFast(mp3Apin)\n        sendMP3volumeFast(mp3Bpin)\n        \n        basic.pause(20)\n\n        sendMP3play(theFolder, theFile, mp3Apin)\n        sendMP3play(theFolder, theFile, mp3Bpin)\n        \n        return parseFloat(theLength) * 1000 + 20\n    }\n\n\n    //% blockId=\"nl_playsForBackground\" \n    //% block=\"Play in background length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsForBackground(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n        mp3Cvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        sPin = mp3Cpin\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n        return parseFloat(theLength) * 1000 + 20\n    }\n\n\n    //% blockId=\"nl_playBackground\" \n    //% block=\"Play in background:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playBackground(soundString: string): void {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n        mp3Cvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        sPin = mp3Cpin\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n    }\n\n\n    //% blockId=\"nl_backgroundStop\" \n    //% block=\"Stop background sound\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function stopBackgroundSound(): void {\n        serial.redirect(mp3Cpin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 0x16\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    // Nezha - Functions for Pins and Ports\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_Serial(Rjpin: DigitalRJPin): any {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = SerialPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = SerialPin.P2\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.P12:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = SerialPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = SerialPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n\n\n    export enum mp3type {\n        music,\n        player,\n        sfxvoice\n    }\n\n    export enum musicGenre {\n        intro,\n        tutorial,\n        awaiting,\n        level,\n        won,\n        lost\n    }\n\n    export enum playerSaying {\n        ready,\n        yay,\n        intro,\n        nay,\n        ouch,\n        success,\n        failure,\n        won,\n        lost,\n        hurry\n    }\n\n    export enum sfxType {\n        correct,\n        incorrect,\n        ghost,\n        fire,\n        explosion,\n        splash,\n        spark,\n        slash\n    }\n\n    export enum voiceSaying {\n        name,\n        begin,\n        retry,\n        next,\n        complete,\n        gameover,\n        welcome,\n        intro,\n        howto1,\n        howto2,\n        howto3,\n        howto4,\n        howto5,\n        howto6,\n        howto7,\n        howto8,\n        howto9\n    }\n\n    export enum magicianSaysSide {\n        left,\n        right\n    }\n\n    export enum magicianDifficulty {\n        easy,\n        medium,\n        hard\n    }\n\n    export enum spotName {\n        A,\n        B,\n        C,\n        D,\n        E,\n        F,\n        G,\n        H,\n        I\n    }\n\n    export enum playerChar {\n        mario,\n        luigi,\n        peach,\n        daisy,\n        toad,\n        wario\n    }\n\n\n\n\n\n    // Enum - To Support MP3\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n\n    // Enum - Nezha and Pins\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum mbPin {\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1 (Analog J1)\"\n        P1,\n        //% block=\"P2 (Analog J2)\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8 (J1)\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12 (J2)\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14 (J3)\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16 (J4)\"\n        P16,\n    }\n}\n","pxt.json":"{\n    \"name\": \"NotLegosExt\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"displaySendBuffer.asm\",\n        \"display.ts\",\n        \"planetxbasic.ts\",\n        \"notlegos.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"7.0.42\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n","test.ts":""}},{"timestamp":1726879060038,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"gX}3[UJe6C9wl9p+Uoj=\">digits</variable><variable id=\"vSl89nNM7#y}HO_i4w8g\">sockLights</variable><variable id=\"kx-+|q2cYu;$^R?pYwdZ\">wheelLights</variable><variable id=\"zVo^^v6=8Jgq7FyFiNOV\">scoreCircle</variable></variables><block type=\"device_button_event\" x=\"788\" y=\"-195\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl2\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">1_1_25_100</field></shadow></value></block></value></block></statement></block><block type=\"device_button_event\" x=\"1329\" y=\"-195\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">2_1_1</field></shadow></value></block></value></block></statement></block><block type=\"every_interval\" x=\"1812\" y=\"-195\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value><statement name=\"HANDLER\"><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P2</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P3</field></shadow></value></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation><field name=\"SLIDER\">2</field></shadow></value><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">hue </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"apds9960_readcolor\"></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation><field name=\"SLIDER\">3</field></shadow></value><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">distance </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"sonarbit\"><field name=\"tPin\">DigitalPin.P8</field><field name=\"ePin\">DigitalPin.P9</field><field name=\"distance_unit\">Connected.Distance_Unit_List.Distance_Unit_cm</field></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation><field name=\"SLIDER\">4</field></shadow></value><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">gesture </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"Connected_getGesture\"></block></value></block></value></block></next></block></next></block></next></block></statement></block><block type=\"pxt-on-start\" x=\"39\" y=\"51\"><statement name=\"HANDLER\"><block type=\"Connected_oledClear\"><next><block type=\"pin_set_audio_pin_enabled\"><value name=\"enabled\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow></value><next><block type=\"device_led_enable\"><value name=\"on\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"gX}3[UJe6C9wl9p+Uoj=\">digits</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"grove_tm1637_create\"><field name=\"cPin\">DigitalPin.P7</field><field name=\"dPin\">DigitalPin.P6</field></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"vSl89nNM7#y}HO_i4w8g\">sockLights</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P11</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"vSl89nNM7#y}HO_i4w8g\">sockLights</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"vSl89nNM7#y}HO_i4w8g\">sockLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"kx-+|q2cYu;$^R?pYwdZ\">wheelLights</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P12</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">18</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"kx-+|q2cYu;$^R?pYwdZ\">wheelLights</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"kx-+|q2cYu;$^R?pYwdZ\">wheelLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"zVo^^v6=8Jgq7FyFiNOV\">scoreCircle</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P13</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"zVo^^v6=8Jgq7FyFiNOV\">scoreCircle</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"zVo^^v6=8Jgq7FyFiNOV\">scoreCircle</field></block></value><next><block type=\"nl_mp3_init\"><field name=\"type\">notLegos.mp3type.music</field><field name=\"sPin\">SerialPin.P15</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"nl_testfast\"><field name=\"bit\">notLegos.mp3type.music</field><value name=\"track\"><block type=\"math_number\"><field name=\"NUM\">2</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"826\" y=\"653\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow><block type=\"playFileNl2\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"soundString\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">1_1_25_100</field></shadow></value></block></value></block><block type=\"MP3setPort\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1390\" y=\"819\"><field name=\"Rjpin\">Connected.DigitalRJPin.P16</field><next><block type=\"setTracking\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"tracking\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value><value name=\"myAns\"><shadow type=\"toggleYesNo\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"yes\">false</field></shadow></value></block></next></block><block type=\"MP3execute\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"581\" y=\"893\"><field name=\"myType\">Connected.playType.Play</field></block><block type=\"nl_mp3_music\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"141\" y=\"1080\"><field name=\"genre\">notLegos.musicGenre.intro</field></block><block type=\"function_definition\" x=\"359\" y=\"1373\"><mutation name=\"isNearly\" functionid=\"F!?G,}0W~mK0q6yxa@)+\"><arg name=\"reference\" id=\"askt0gw7ps42l4j5s8lq\" type=\"number\"></arg><arg name=\"reading\" id=\"pvzp6d6plvrvf0vwcgka\" type=\"number\"></arg><arg name=\"tolerance\" id=\"ai8znl3rpzvjckud4rk3\" type=\"number\"></arg></mutation><field name=\"function_name\">isNearly</field><value name=\"askt0gw7ps42l4j5s8lq\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reference</field></block></value><value name=\"pvzp6d6plvrvf0vwcgka\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reading</field></block></value><value name=\"ai8znl3rpzvjckud4rk3\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">tolerance</field></block></value><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_operation\"><field name=\"OP\">AND</field><value name=\"A\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value></block></value><statement name=\"DO0\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></block></value></block></statement><statement name=\"ELSE\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></block></value></block></statement></block></statement></block></xml>","main.ts":"","README.md":"\n> Open this page at [https://notlegos.github.io/castleresay/](https://notlegos.github.io/castleresay/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/castleresay** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/castleresay** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/soundbank/](https://notlegos.github.io/soundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/soundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/soundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/resoundbank/](https://notlegos.github.io/resoundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/resoundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/resoundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosext/](https://notlegos.github.io/notlegosext/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosext** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosext** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","displaySendBuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n","display.ts":"\n/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#EA5532 icon=\"\\uf110\" block=\"Connected\" blockId=\"PlanetX_Connected\" \n//% groups='[\"LED\", \"Digital\", \"Analog\", \"IIC Port\", \"OLED\", \"7-Seg 4-Dig LED Nixietube\"]'\nnamespace Connected {\n    ////////////////////////////////TM 1637/////////////////\n    let TM1637_CMD1 = 0x40;\n    let TM1637_CMD2 = 0xC0;\n    let TM1637_CMD3 = 0x80;\n    let _SEGMENTS = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];\n    /////////////////////OLED///////////////////////////////\n    let firstoledinit = true\n    const basicFont: string[] = [\n        \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", // \" \"\n        \"\\x00\\x00\\x5F\\x00\\x00\\x00\\x00\\x00\", // \"!\"\n        \"\\x00\\x00\\x07\\x00\\x07\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x14\\x7F\\x14\\x7F\\x14\\x00\\x00\", // \"#\"\n        \"\\x00\\x24\\x2A\\x7F\\x2A\\x12\\x00\\x00\", // \"$\"\n        \"\\x00\\x23\\x13\\x08\\x64\\x62\\x00\\x00\", // \"%\"\n        \"\\x00\\x36\\x49\\x55\\x22\\x50\\x00\\x00\", // \"&\"\n        \"\\x00\\x00\\x05\\x03\\x00\\x00\\x00\\x00\", // \"'\"\n        \"\\x00\\x1C\\x22\\x41\\x00\\x00\\x00\\x00\", // \"(\"\n        \"\\x00\\x41\\x22\\x1C\\x00\\x00\\x00\\x00\", // \")\"\n        \"\\x00\\x08\\x2A\\x1C\\x2A\\x08\\x00\\x00\", // \"*\"\n        \"\\x00\\x08\\x08\\x3E\\x08\\x08\\x00\\x00\", // \"+\"\n        \"\\x00\\xA0\\x60\\x00\\x00\\x00\\x00\\x00\", // \",\"\n        \"\\x00\\x08\\x08\\x08\\x08\\x08\\x00\\x00\", // \"-\"\n        \"\\x00\\x60\\x60\\x00\\x00\\x00\\x00\\x00\", // \".\"\n        \"\\x00\\x20\\x10\\x08\\x04\\x02\\x00\\x00\", // \"/\"\n        \"\\x00\\x3E\\x51\\x49\\x45\\x3E\\x00\\x00\", // \"0\"\n        \"\\x00\\x00\\x42\\x7F\\x40\\x00\\x00\\x00\", // \"1\"\n        \"\\x00\\x62\\x51\\x49\\x49\\x46\\x00\\x00\", // \"2\"\n        \"\\x00\\x22\\x41\\x49\\x49\\x36\\x00\\x00\", // \"3\"\n        \"\\x00\\x18\\x14\\x12\\x7F\\x10\\x00\\x00\", // \"4\"\n        \"\\x00\\x27\\x45\\x45\\x45\\x39\\x00\\x00\", // \"5\"\n        \"\\x00\\x3C\\x4A\\x49\\x49\\x30\\x00\\x00\", // \"6\"\n        \"\\x00\\x01\\x71\\x09\\x05\\x03\\x00\\x00\", // \"7\"\n        \"\\x00\\x36\\x49\\x49\\x49\\x36\\x00\\x00\", // \"8\"\n        \"\\x00\\x06\\x49\\x49\\x29\\x1E\\x00\\x00\", // \"9\"\n        \"\\x00\\x00\\x36\\x36\\x00\\x00\\x00\\x00\", // \":\"\n        \"\\x00\\x00\\xAC\\x6C\\x00\\x00\\x00\\x00\", // \";\"\n        \"\\x00\\x08\\x14\\x22\\x41\\x00\\x00\\x00\", // \"<\"\n        \"\\x00\\x14\\x14\\x14\\x14\\x14\\x00\\x00\", // \"=\"\n        \"\\x00\\x41\\x22\\x14\\x08\\x00\\x00\\x00\", // \">\"\n        \"\\x00\\x02\\x01\\x51\\x09\\x06\\x00\\x00\", // \"?\"\n        \"\\x00\\x32\\x49\\x79\\x41\\x3E\\x00\\x00\", // \"@\"\n        \"\\x00\\x7E\\x09\\x09\\x09\\x7E\\x00\\x00\", // \"A\"\n        \"\\x00\\x7F\\x49\\x49\\x49\\x36\\x00\\x00\", // \"B\"\n        \"\\x00\\x3E\\x41\\x41\\x41\\x22\\x00\\x00\", // \"C\"\n        \"\\x00\\x7F\\x41\\x41\\x22\\x1C\\x00\\x00\", // \"D\"\n        \"\\x00\\x7F\\x49\\x49\\x49\\x41\\x00\\x00\", // \"E\"\n        \"\\x00\\x7F\\x09\\x09\\x09\\x01\\x00\\x00\", // \"F\"\n        \"\\x00\\x3E\\x41\\x41\\x51\\x72\\x00\\x00\", // \"G\"\n        \"\\x00\\x7F\\x08\\x08\\x08\\x7F\\x00\\x00\", // \"H\"\n        \"\\x00\\x41\\x7F\\x41\\x00\\x00\\x00\\x00\", // \"I\"\n        \"\\x00\\x20\\x40\\x41\\x3F\\x01\\x00\\x00\", // \"J\"\n        \"\\x00\\x7F\\x08\\x14\\x22\\x41\\x00\\x00\", // \"K\"\n        \"\\x00\\x7F\\x40\\x40\\x40\\x40\\x00\\x00\", // \"L\"\n        \"\\x00\\x7F\\x02\\x0C\\x02\\x7F\\x00\\x00\", // \"M\"\n        \"\\x00\\x7F\\x04\\x08\\x10\\x7F\\x00\\x00\", // \"N\"\n        \"\\x00\\x3E\\x41\\x41\\x41\\x3E\\x00\\x00\", // \"O\"\n        \"\\x00\\x7F\\x09\\x09\\x09\\x06\\x00\\x00\", // \"P\"\n        \"\\x00\\x3E\\x41\\x51\\x21\\x5E\\x00\\x00\", // \"Q\"\n        \"\\x00\\x7F\\x09\\x19\\x29\\x46\\x00\\x00\", // \"R\"\n        \"\\x00\\x26\\x49\\x49\\x49\\x32\\x00\\x00\", // \"S\"\n        \"\\x00\\x01\\x01\\x7F\\x01\\x01\\x00\\x00\", // \"T\"\n        \"\\x00\\x3F\\x40\\x40\\x40\\x3F\\x00\\x00\", // \"U\"\n        \"\\x00\\x1F\\x20\\x40\\x20\\x1F\\x00\\x00\", // \"V\"\n        \"\\x00\\x3F\\x40\\x38\\x40\\x3F\\x00\\x00\", // \"W\"\n        \"\\x00\\x63\\x14\\x08\\x14\\x63\\x00\\x00\", // \"X\"\n        \"\\x00\\x03\\x04\\x78\\x04\\x03\\x00\\x00\", // \"Y\"\n        \"\\x00\\x61\\x51\\x49\\x45\\x43\\x00\\x00\", // \"Z\"\n        \"\\x00\\x7F\\x41\\x41\\x00\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x02\\x04\\x08\\x10\\x20\\x00\\x00\", // \"\\\"\n        \"\\x00\\x41\\x41\\x7F\\x00\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x04\\x02\\x01\\x02\\x04\\x00\\x00\", // \"^\"\n        \"\\x00\\x80\\x80\\x80\\x80\\x80\\x00\\x00\", // \"_\"\n        \"\\x00\\x01\\x02\\x04\\x00\\x00\\x00\\x00\", // \"`\"\n        \"\\x00\\x20\\x54\\x54\\x54\\x78\\x00\\x00\", // \"a\"\n        \"\\x00\\x7F\\x48\\x44\\x44\\x38\\x00\\x00\", // \"b\"\n        \"\\x00\\x38\\x44\\x44\\x28\\x00\\x00\\x00\", // \"c\"\n        \"\\x00\\x38\\x44\\x44\\x48\\x7F\\x00\\x00\", // \"d\"\n        \"\\x00\\x38\\x54\\x54\\x54\\x18\\x00\\x00\", // \"e\"\n        \"\\x00\\x08\\x7E\\x09\\x02\\x00\\x00\\x00\", // \"f\"\n        \"\\x00\\x18\\xA4\\xA4\\xA4\\x7C\\x00\\x00\", // \"g\"\n        \"\\x00\\x7F\\x08\\x04\\x04\\x78\\x00\\x00\", // \"h\"\n        \"\\x00\\x00\\x7D\\x00\\x00\\x00\\x00\\x00\", // \"i\"\n        \"\\x00\\x80\\x84\\x7D\\x00\\x00\\x00\\x00\", // \"j\"\n        \"\\x00\\x7F\\x10\\x28\\x44\\x00\\x00\\x00\", // \"k\"\n        \"\\x00\\x41\\x7F\\x40\\x00\\x00\\x00\\x00\", // \"l\"\n        \"\\x00\\x7C\\x04\\x18\\x04\\x78\\x00\\x00\", // \"m\"\n        \"\\x00\\x7C\\x08\\x04\\x7C\\x00\\x00\\x00\", // \"n\"\n        \"\\x00\\x38\\x44\\x44\\x38\\x00\\x00\\x00\", // \"o\"\n        \"\\x00\\xFC\\x24\\x24\\x18\\x00\\x00\\x00\", // \"p\"\n        \"\\x00\\x18\\x24\\x24\\xFC\\x00\\x00\\x00\", // \"q\"\n        \"\\x00\\x00\\x7C\\x08\\x04\\x00\\x00\\x00\", // \"r\"\n        \"\\x00\\x48\\x54\\x54\\x24\\x00\\x00\\x00\", // \"s\"\n        \"\\x00\\x04\\x7F\\x44\\x00\\x00\\x00\\x00\", // \"t\"\n        \"\\x00\\x3C\\x40\\x40\\x7C\\x00\\x00\\x00\", // \"u\"\n        \"\\x00\\x1C\\x20\\x40\\x20\\x1C\\x00\\x00\", // \"v\"\n        \"\\x00\\x3C\\x40\\x30\\x40\\x3C\\x00\\x00\", // \"w\"\n        \"\\x00\\x44\\x28\\x10\\x28\\x44\\x00\\x00\", // \"x\"\n        \"\\x00\\x1C\\xA0\\xA0\\x7C\\x00\\x00\\x00\", // \"y\"\n        \"\\x00\\x44\\x64\\x54\\x4C\\x44\\x00\\x00\", // \"z\"\n        \"\\x00\\x08\\x36\\x41\\x00\\x00\\x00\\x00\", // \"{\"\n        \"\\x00\\x00\\x7F\\x00\\x00\\x00\\x00\\x00\", // \"|\"\n        \"\\x00\\x41\\x36\\x08\\x00\\x00\\x00\\x00\", // \"}\"\n        \"\\x00\\x02\\x01\\x01\\x02\\x01\\x00\\x00\"  // \"~\"\n    ];\n    function oledcmd(c: number) {\n        pins.i2cWriteNumber(0x3c, c, NumberFormat.UInt16BE);\n    }\n    function writeData(n: number) {\n        let b = n;\n        if (n < 0) { n = 0 }\n        if (n > 255) { n = 255 }\n        pins.i2cWriteNumber(0x3c, 0x4000 + b, NumberFormat.UInt16BE);\n    }\n    function writeCustomChar(c: string) {\n        for (let i = 0; i < 8; i++) {\n            writeData(c.charCodeAt(i));\n        }\n    }\n    function setText(row: number, column: number) {\n        let r = row;\n        let c = column;\n        if (row < 0) { r = 0 }\n        if (column < 0) { c = 0 }\n        if (row > 7) { r = 7 }\n        if (column > 15) { c = 15 }\n        oledcmd(0xB0 + r);            //set page address\n        oledcmd(0x00 + (8 * c & 0x0F));  //set column lower address\n        oledcmd(0x10 + ((8 * c >> 4) & 0x0F));   //set column higher address\n    }\n    function putChar(c: string) {\n        let c1 = c.charCodeAt(0);\n        writeCustomChar(basicFont[c1 - 32]);\n    }\n    function oledinit(): void {\n        oledcmd(0xAE);  // Set display OFF\n        oledcmd(0xD5);  // Set Display Clock Divide Ratio / OSC Frequency 0xD4\n        oledcmd(0x80);  // Display Clock Divide Ratio / OSC Frequency \n        oledcmd(0xA8);  // Set Multiplex Ratio\n        oledcmd(0x3F);  // Multiplex Ratio for 128x64 (64-1)\n        oledcmd(0xD3);  // Set Display Offset\n        oledcmd(0x00);  // Display Offset\n        oledcmd(0x40);  // Set Display Start Line\n        oledcmd(0x8D);  // Set Charge Pump\n        oledcmd(0x14);  // Charge Pump (0x10 External, 0x14 Internal DC/DC)\n        oledcmd(0xA1);  // Set Segment Re-Map\n        oledcmd(0xC8);  // Set Com Output Scan Direction\n        oledcmd(0xDA);  // Set COM Hardware Configuration\n        oledcmd(0x12);  // COM Hardware Configuration\n        oledcmd(0x81);  // Set Contrast\n        oledcmd(0xCF);  // Contrast\n        oledcmd(0xD9);  // Set Pre-Charge Period\n        oledcmd(0xF1);  // Set Pre-Charge Period (0x22 External, 0xF1 Internal)\n        oledcmd(0xDB);  // Set VCOMH Deselect Level\n        oledcmd(0x40);  // VCOMH Deselect Level\n        oledcmd(0xA4);  // Set all pixels OFF\n        oledcmd(0xA6);  // Set display not inverted\n        oledcmd(0xAF);  // Set display On\n        oledClear();\n    }\n\n    ///////////////////////////////enum\n\n\n    export enum NeoPixelColors {\n        //% block=red\n        Red = 0xFF0000,\n        //% block=orange\n        Orange = 0xFFA500,\n        //% block=yellow\n        Yellow = 0xFFFF00,\n        //% block=green\n        Green = 0x00FF00,\n        //% block=blue\n        Blue = 0x0000FF,\n        //% block=indigo\n        Indigo = 0x4b0082,\n        //% block=violet\n        Violet = 0x8a2be2,\n        //% block=purple\n        Purple = 0xFF00FF,\n        //% block=white\n        White = 0xFFFFFF,\n        //% block=black\n        Black = 0x000000\n    }\n\n    /**\n     * Different modes for RGB or RGB+W NeoPixel strips\n     */\n    export enum NeoPixelMode {\n        //% block=\"RGB (GRB format)\"\n        RGB = 0,\n        //% block=\"RGB+W\"\n        RGBW = 1,\n        //% block=\"RGB (RGB format)\"\n        RGB_RGB = 2\n    }\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n    /////////////////////////////User_function//////////////////\n\n    //% line.min=1 line.max=8 line.defl=1\n    //% text.defl=\"Hello,ELECFREAKS\"\n    //% block=\"OLED show line %line|text %text\"\n    //% subcategory=Display group=\"OLED\" color=#00B1ED\n    export function showUserText(line: number, text: string) {\n        if (firstoledinit) {\n            oledinit()\n            firstoledinit = false\n        }\n        if (text.length > 16) {\n            text = text.substr(0, 16)\n        }\n        line = line - 1\n        setText(line, 0);\n        for (let c of text) {\n            putChar(c);\n        }\n\n        for (let i = text.length; i < 16; i++) {\n            setText(line, i);\n            putChar(\" \");\n        }\n    }\n    //% line.min=1 line.max=8 line.defl=2 \n    //% n.defl=20200508\n    //% block=\"OLED show line %line|number %n\"\n    //% subcategory=Display group=\"OLED\" color=#00B1ED\n    export function showUserNumber(line: number, n: number) {\n        if (firstoledinit) {\n            oledinit()\n            firstoledinit = false\n        }\n        showUserText(line, \"\" + n)\n    }\n    //% block=\"clear display\" color=#00B1ED\n    //% subcategory=Display group=\"OLED\"\n    export function oledClear() {\n        //oledcmd(DISPLAY_OFF);   //display off\n        for (let j = 0; j < 8; j++) {\n            setText(j, 0);\n            {\n                for (let i = 0; i < 16; i++)  //clear all columns\n                {\n                    putChar(' ');\n                }\n            }\n        }\n        //oledcmd(DISPLAY_ON);    //display on\n        setText(0, 0);\n    }\n    /**\n   * Create a new driver Grove - 4-Digit Display\n   * @param clkPin value of clk pin number\n   * @param dataPin value of data pin number\n   */\n    //% blockId=grove_tm1637_create block=\"connect 4-Digit cPin %cPin dPin %dPin\"\n    //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" blockSetVariable=display color=#EA5532\n    export function tm1637Create(cPin: DigitalPin, dPin: DigitalPin, intensity: number = 7, count: number = 4): TM1637LEDs {\n        let display = new TM1637LEDs();\n        display.clk = cPin\n        display.dio = dPin\n        if ((count < 1) || (count > 5)) count = 4;\n        display.count = count;\n        display.brightness = intensity;\n        display.init();\n        return display;\n    }\n    export class TM1637LEDs {\n        buf: Buffer;\n        clk: DigitalPin;\n        dio: DigitalPin;\n        _ON: number;\n        brightness: number;\n        count: number;  // number of LEDs\n        /**\n         * initial TM1637\n         */\n        init(): void {\n            pins.digitalWritePin(this.clk, 0);\n            pins.digitalWritePin(this.dio, 0);\n            this._ON = 8;\n            this.buf = pins.createBuffer(this.count);\n            this.clear();\n        }\n        /**\n         * Start \n         */\n        _start() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        /**\n         * Stop\n         */\n        _stop() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.dio, 1);\n        }\n        /**\n         * send command1\n         */\n        _write_data_cmd() {\n            this._start();\n            this._write_byte(TM1637_CMD1);\n            this._stop();\n        }\n        /**\n         * send command3\n         */\n        _write_dsp_ctrl() {\n            this._start();\n            this._write_byte(TM1637_CMD3 | this._ON | this.brightness);\n            this._stop();\n        }\n        /**\n         * send a byte to 2-wire interface\n         */\n        _write_byte(b: number) {\n            for (let i = 0; i < 8; i++) {\n                pins.digitalWritePin(this.dio, (b >> i) & 1);\n                pins.digitalWritePin(this.clk, 1);\n                pins.digitalWritePin(this.clk, 0);\n            }\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _intensity(val: number = 7) {\n            this._ON = 8;\n            this.brightness = val - 1;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n        /**\n         * set data to TM1637, with given bit\n         */\n        _dat(bit: number, dat: number) {\n            this._write_data_cmd();\n            this._start();\n            this._write_byte(TM1637_CMD2 | (bit % this.count))\n            this._write_byte(dat);\n            this._stop();\n            this._write_dsp_ctrl();\n        }\n        /**\n         * Show a single number from 0 to 9 at a specified digit of Grove - 4-Digit Display\n         * @param dispData value of number\n         * @param bitAddr value of bit number\n         */\n        //% blockId=grove_tm1637_display_bit block=\"%display|show single number|%num|at digit|%bit\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        //% bit.defl=1 bit.min=0 bit.max=9\n        showbit(num: number = 5, bit: number = 0) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            this.buf[bit % this.count] = _SEGMENTS[num % 16]\n            this._dat(bit, _SEGMENTS[num % 16])\n        }\n        /**\n         * Show a 4 digits number on display\n         * @param dispData value of number\n         */\n        //% blockId=grove_tm1637_display_number block=\"%display|show number|%num\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        showNumber(num: number) {\n            if (num < 0) {\n                num = -num\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n                this._dat(0, 0x40) // '-'\n            }\n            else {\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n            }\n        }\n        /**\n         * show or hide dot point. \n         * @param bit is the position, eg: 1\n         * @param show is show/hide dp, eg: true\n         */\n        //% blockId=\"TM1637_showDP\" block=\"%display|DotPoint at %bit|show $show\"\n        //% show.shadow=\"toggleOnOff\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        showDP(bit: number = 1, show: boolean = true) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            bit = bit % this.count\n            if (show) this._dat(bit, this.buf[bit] | 0x80)\n            else this._dat(bit, this.buf[bit] & 0x7F)\n        }\n        /**\n         * clear LED. \n         */\n        //% blockId=\"TM1637_clear\" block=\"clear display %display\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        clear() {\n            for (let i = 0; i < this.count; i++) {\n                this._dat(i, 0)\n                this.buf[i] = 0\n            }\n        }\n    }\n    //% shim=sendBufferAsm\n    function sendBuffer(buf: Buffer, pin: DigitalPin) {\n    }\n    export class Strip {\n        buf: Buffer;\n        pin: DigitalPin;\n        // TODO: encode as bytes instead of 32bit\n        brightness: number;\n        start: number; // start offset in LED strip\n        _length: number; // number of LEDs\n        _mode: NeoPixelMode;\n        _matrixWidth: number; // number of leds in a matrix - if any\n\n        /**\n         * Shows all LEDs to a given color (range 0-255 for r, g, b).\n         * @param rgb RGB color of the LED\n         */\n        //% blockId=\"neopixel_set_strip_color\" block=\"%strip|show color %rgb=neopixel_colors\"\n        //% weight=85 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        showColor(rgb: number) {\n            rgb = rgb >> 0;\n            this.setAllRGB(rgb);\n            this.show();\n        }\n\n        /**\n         * Shows a rainbow pattern on all LEDs.\n         * @param startHue the start hue value for the rainbow, eg: 1\n         * @param endHue the end hue value for the rainbow, eg: 360\n         */\n        //% blockId=\"neopixel_set_strip_rainbow\" block=\"%strip|show rainbow from %startHue|to %endHue\"\n        //% weight=85 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        showRainbow(startHue: number = 1, endHue: number = 360) {\n            if (this._length <= 0) return;\n\n            startHue = startHue >> 0;\n            endHue = endHue >> 0;\n            const saturation = 100;\n            const luminance = 50;\n            const steps = this._length;\n            const direction = HueInterpolationDirection.Clockwise;\n\n            //hue\n            const h1 = startHue;\n            const h2 = endHue;\n            const hDistCW = ((h2 + 360) - h1) % 360;\n            const hStepCW = Math.idiv((hDistCW * 100), steps);\n            const hDistCCW = ((h1 + 360) - h2) % 360;\n            const hStepCCW = Math.idiv(-(hDistCCW * 100), steps);\n            let hStep: number;\n            if (direction === HueInterpolationDirection.Clockwise) {\n                hStep = hStepCW;\n            } else if (direction === HueInterpolationDirection.CounterClockwise) {\n                hStep = hStepCCW;\n            } else {\n                hStep = hDistCW < hDistCCW ? hStepCW : hStepCCW;\n            }\n            const h1_100 = h1 * 100; //we multiply by 100 so we keep more accurate results while doing interpolation\n\n            //sat\n            const s1 = saturation;\n            const s2 = saturation;\n            const sDist = s2 - s1;\n            const sStep = Math.idiv(sDist, steps);\n            const s1_100 = s1 * 100;\n\n            //lum\n            const l1 = luminance;\n            const l2 = luminance;\n            const lDist = l2 - l1;\n            const lStep = Math.idiv(lDist, steps);\n            const l1_100 = l1 * 100\n\n            //interpolate\n            if (steps === 1) {\n                this.setPixelColor(0, hsl(h1 + hStep, s1 + sStep, l1 + lStep))\n            } else {\n                this.setPixelColor(0, hsl(startHue, saturation, luminance));\n                for (let i = 1; i < steps - 1; i++) {\n                    const h = Math.idiv((h1_100 + i * hStep), 100) + 360;\n                    const s = Math.idiv((s1_100 + i * sStep), 100);\n                    const l = Math.idiv((l1_100 + i * lStep), 100);\n                    this.setPixelColor(i, hsl(h, s, l));\n                }\n                this.setPixelColor(steps - 1, hsl(endHue, saturation, luminance));\n            }\n            this.show();\n        }\n\n        /**\n         * Set LED to a given color (range 0-255 for r, g, b).\n         * You need to call ``show`` to make the changes visible.\n         * @param pixeloffset position of the NeoPixel in the strip\n         * @param rgb RGB color of the LED\n         */\n        //% blockId=\"neopixel_set_pixel_color\" block=\"%strip|set pixel color at %pixeloffset|to %rgb=neopixel_colors\"\n        //% weight=80 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setPixelColor(pixeloffset: number, rgb: number): void {\n            this.setPixelRGB(pixeloffset >> 0, rgb >> 0);\n        }\n\n        /**\n         * Send all the changes to the strip.\n         */\n        //% blockId=\"neopixel_show\" block=\"%strip|show\" \n        //% weight=79\n        //% parts=\"neopixel\" subcategory=Neopixel\n        show() {\n            sendBuffer(this.buf, this.pin);\n        }\n\n        /**\n         * Turn off all LEDs.\n         * You need to call ``show`` to make the changes visible.\n         */\n        //% blockId=\"neopixel_clear\" block=\"%strip|clear\"\n        //% weight=76 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        clear(): void {\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.fill(0, this.start * stride, this._length * stride);\n        }\n\n        /**\n         * Set the brightness of the strip. This flag only applies to future operation.\n         * @param brightness a measure of LED brightness in 0-255. eg: 255\n         */\n        //% blockId=\"neopixel_set_brightness\" block=\"%strip|set brightness %brightness\" \n        //% weight=59 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setBrightness(brightness: number): void {\n            this.brightness = brightness & 0xff;\n        }\n        /**\n         * Gets the number of pixels declared on the strip\n         */\n        //% blockId=\"neopixel_length\" block=\"%strip|length\" blockGap=8\n        //% subcategory=\"Neopixel\"\n        //% weight=60 advanced=true\n        length() {\n            return this._length;\n        }\n        /**\n         * Create a range of LEDs.\n         * @param start offset in the LED strip to start the range\n         * @param length number of LEDs in the range. eg: 4\n         */\n        //% weight=89 color=#EA5532\n        //% blockId=\"neopixel_range\" block=\"%strip|range from %start|with %length|leds\"\n        //% parts=\"neopixel\"\n        //% blockSetVariable=range subcategory=Neopixel\n        range(start: number, length: number): Strip {\n            start = start >> 0;\n            length = length >> 0;\n            let strip = new Strip();\n            strip.buf = this.buf;\n            strip.pin = this.pin;\n            strip.brightness = this.brightness;\n            strip.start = this.start + Math.clamp(0, this._length - 1, start);\n            strip._length = Math.clamp(0, this._length - (strip.start - this.start), length);\n            strip._matrixWidth = 0;\n            strip._mode = this._mode;\n            return strip;\n        }\n\n        /**\n         * Shift LEDs forward and clear with zeros.\n         * You need to call ``show`` to make the changes visible.\n         * @param offset number of pixels to shift forward, eg: 1\n         */\n        //% blockId=\"neopixel_shift\" block=\"%strip|shift pixels by %offset\" \n        //% weight=40 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        shift(offset: number = 1): void {\n            offset = offset >> 0;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.shift(-offset * stride, this.start * stride, this._length * stride)\n        }\n\n        /**\n         * Rotate LEDs forward.\n         * You need to call ``show`` to make the changes visible.\n         * @param offset number of pixels to rotate forward, eg: 1\n         */\n        //% blockId=\"neopixel_rotate\" block=\"%strip|rotate pixels by %offset\" \n        //% weight=39 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        rotate(offset: number = 1): void {\n            offset = offset >> 0;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.rotate(-offset * stride, this.start * stride, this._length * stride)\n        }\n\n        /**\n         * Set the pin where the neopixel is connected, defaults to P0.\n         */\n        //% weight=10 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setPin(pin: DigitalPin): void {\n            this.pin = pin;\n            pins.digitalWritePin(this.pin, 0);\n            // don't yield to avoid races on initialization\n        }\n\n        private setBufferRGB(offset: number, red: number, green: number, blue: number): void {\n            if (this._mode === NeoPixelMode.RGB_RGB) {\n                this.buf[offset + 0] = red;\n                this.buf[offset + 1] = green;\n            } else {\n                this.buf[offset + 0] = green;\n                this.buf[offset + 1] = red;\n            }\n            this.buf[offset + 2] = blue;\n        }\n\n        private setAllRGB(rgb: number) {\n            let red = unpackR(rgb);\n            let green = unpackG(rgb);\n            let blue = unpackB(rgb);\n\n            const br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            const end = this.start + this._length;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            for (let i = this.start; i < end; ++i) {\n                this.setBufferRGB(i * stride, red, green, blue)\n            }\n        }\n        private setPixelRGB(pixeloffset: number, rgb: number): void {\n            if (pixeloffset < 0\n                || pixeloffset >= this._length)\n                return;\n\n            let stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            pixeloffset = (pixeloffset + this.start) * stride;\n\n            let red = unpackR(rgb);\n            let green = unpackG(rgb);\n            let blue = unpackB(rgb);\n\n            let br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            this.setBufferRGB(pixeloffset, red, green, blue)\n        }\n\n    }\n\n    /**\n     * Create a new NeoPixel driver for `numleds` LEDs.\n     * @param pin the pin where the neopixel is connected.\n     * @param numleds number of leds in the strip, eg: 24,30,60,64\n     */\n    //% blockId=\"neopixel_create\" block=\"NeoPixel at pin %Rjpin|with %numleds|leds as %mode\"\n    //% weight=90 color=#EA5532\n    //% parts=\"neopixel\"\n    //% trackArgs=0,2\n    //% blockSetVariable=strip subcategory=Neopixel\n    export function create(Rjpin: DigitalRJPin, numleds: number, mode: NeoPixelMode): Strip {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        let strip = new Strip();\n        let stride = mode === NeoPixelMode.RGBW ? 4 : 3;\n        strip.buf = pins.createBuffer(numleds * stride);\n        strip.start = 0;\n        strip._length = numleds;\n        strip._mode = mode;\n        strip._matrixWidth = 0;\n        strip.setBrightness(50)\n        strip.setPin(pin)\n        return strip;\n    }\n\n    /**\n     * Converts red, green, blue channels into a RGB color\n     * @param red value of the red channel between 0 and 255. eg: 255\n     * @param green value of the green channel between 0 and 255. eg: 255\n     * @param blue value of the blue channel between 0 and 255. eg: 255\n     */\n    //% weight=1 subcategory=Neopixel color=#EA5532\n    //% blockId=\"neopixel_rgb\" block=\"red %red|green %green|blue %blue\"\n    export function rgb(red: number, green: number, blue: number): number {\n        return packRGB(red, green, blue);\n    }\n\n    /**\n     * Gets the RGB value of a known color\n    */\n    //% weight=2 subcategory=Neopixel color=#EA5532\n    //% blockId=\"neopixel_colors\" block=\"%color\"\n    export function colors(color: NeoPixelColors): number {\n        return color;\n    }\n\n    function packRGB(a: number, b: number, c: number): number {\n        return ((a & 0xFF) << 16) | ((b & 0xFF) << 8) | (c & 0xFF);\n    }\n    function unpackR(rgb: number): number {\n        let r = (rgb >> 16) & 0xFF;\n        return r;\n    }\n    function unpackG(rgb: number): number {\n        let g = (rgb >> 8) & 0xFF;\n        return g;\n    }\n    function unpackB(rgb: number): number {\n        let b = (rgb) & 0xFF;\n        return b;\n    }\n\n    /**\n     * Converts a hue saturation luminosity value into a RGB color\n     * @param h hue from 0 to 360\n     * @param s saturation from 0 to 99\n     * @param l luminosity from 0 to 99\n     */\n    //% blockId=neopixelHSL block=\"hue %h|saturation %s|luminosity %l\" subcategory=Neopixel color=#EA5532\n    export function hsl(h: number, s: number, l: number): number {\n        h = Math.round(h);\n        s = Math.round(s);\n        l = Math.round(l);\n\n        h = h % 360;\n        s = Math.clamp(0, 99, s);\n        l = Math.clamp(0, 99, l);\n        let c = Math.idiv((((100 - Math.abs(2 * l - 100)) * s) << 8), 10000); //chroma, [0,255]\n        let h1 = Math.idiv(h, 60);//[0,6]\n        let h2 = Math.idiv((h - h1 * 60) * 256, 60);//[0,255]\n        let temp = Math.abs((((h1 % 2) << 8) + h2) - 256);\n        let x = (c * (256 - (temp))) >> 8;//[0,255], second largest component of this color\n        let r$:\n            number;\n        let g$:\n            number;\n        let b$:\n            number;\n        if (h1 == 0) {\n            r$ = c;\n            g$ = x;\n            b$ = 0;\n        }\n        else if (h1 == 1) {\n            r$ = x;\n            g$ = c;\n            b$ = 0;\n        }\n        else if (h1 == 2) {\n            r$ = 0;\n            g$ = c;\n            b$ = x;\n        }\n        else if (h1 == 3) {\n            r$ = 0;\n            g$ = x;\n            b$ = c;\n        }\n        else if (h1 == 4) {\n            r$ = x;\n            g$ = 0;\n            b$ = c;\n        }\n        else if (h1 == 5) {\n            r$ = c;\n            g$ = 0;\n            b$ = x;\n        }\n        let m = Math.idiv((Math.idiv((l * 2 << 8), 100) - c), 2);\n        let r = r$ + m;\n        let g = g$ + m;\n        let b = b$ + m;\n        return packRGB(r, g, b);\n    }\n\n    export enum HueInterpolationDirection {\n        Clockwise,\n        CounterClockwise,\n        Shortest\n    }\n}\n","planetxbasic.ts":"/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#00B1ED  icon=\"\\uf005\" block=\"Connected\" blockId=\"PlanetX_Connected\"\n//% groups='[\"Digital\", \"Analog\", \"IIC Port\"]'\nnamespace Connected {\n    \n    ////////////////////////paj7620//////////////////////\n    let gesture_first_init = true\n    const initRegisterArray: number[] = [\n        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17,\n        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F,\n        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14,\n        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27,\n        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01,\n        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00,\n        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20,\n        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37,\n        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A,\n        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F,\n        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30,\n        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19,\n        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04,\n        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00,\n        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00,\n        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F,\n        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07,\n        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01,\n        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F,\n        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01,\n        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40,\n        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E,\n        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00,\n        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08,\n        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00,\n        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01,\n        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01,\n        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01\n    ];\n    \n    /////////////////////////color/////////////////////////\n    const APDS9960_ADDR = 0x39\n    const APDS9960_ENABLE = 0x80\n    const APDS9960_ATIME = 0x81\n    const APDS9960_CONTROL = 0x8F\n    const APDS9960_STATUS = 0x93\n    const APDS9960_CDATAL = 0x94\n    const APDS9960_CDATAH = 0x95\n    const APDS9960_RDATAL = 0x96\n    const APDS9960_RDATAH = 0x97\n    const APDS9960_GDATAL = 0x98\n    const APDS9960_GDATAH = 0x99\n    const APDS9960_BDATAL = 0x9A\n    const APDS9960_BDATAH = 0x9B\n    const APDS9960_GCONF4 = 0xAB\n    const APDS9960_AICLEAR = 0xE7\n    let color_first_init = false\n\n    function i2cwrite_color(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n    function i2cread_color(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n    function rgb2hsl(color_r: number, color_g: number, color_b: number): number {\n        let Hue = 0\n        let R = color_r * 100 / 255;\n        let G = color_g * 100 / 255;\n        let B = color_b * 100 / 255;\n        let maxVal = Math.max(R, Math.max(G, B))\n        let minVal = Math.min(R, Math.min(G, B))\n        let Delta = maxVal - minVal;\n\n        if (Delta < 0) {\n            Hue = 0;\n        }\n        else if (maxVal == R && G >= B) {\n            Hue = (60 * ((G - B) * 100 / Delta)) / 100;\n        }\n        else if (maxVal == R && G < B) {\n            Hue = (60 * ((G - B) * 100 / Delta) + 360 * 100) / 100;\n        }\n        else if (maxVal == G) {\n            Hue = (60 * ((B - R) * 100 / Delta) + 120 * 100) / 100;\n        }\n        else if (maxVal == B) {\n            Hue = (60 * ((R - G) * 100 / Delta) + 240 * 100) / 100;\n        }\n        return Hue\n    }\n    function initModule(): void {\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ATIME, 252)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_CONTROL, 0x03)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_GCONF4, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_AICLEAR, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x01)\n        color_first_init = true\n    }\n    function colorMode(): void {\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_ENABLE) | 0x2;\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, tmp);\n    }\n\n    ///////////////////////////////////////////////////////MP3\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    /*\n    * Play status selection button list\n    */\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(100)\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,        \n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum Distance_Unit_List {\n        //% block=\"cm\" \n        Distance_Unit_cm,\n\n        //% block=\"foot\"\n        Distance_Unit_foot,\n    }\n    export enum ButtonStateList {\n        //% block=\"C\"\n        C,\n        //% block=\"D\"\n        D,\n        //% block=\"C+D\"\n        CD\n    }\n    export enum GestureType {\n        //% block=\"None\"\n        None = 0,\n        //% block=\"Right\"\n        Right = 1,\n        //% block=\"Left\"\n        Left = 2,\n        //% block=\"Up\"\n        Up = 3,\n        //% block=\"Down\"\n        Down = 4,\n        //% block=\"Forward\"\n        Forward = 5,\n        //% block=\"Backward\"\n        Backward = 6,\n        //% block=\"Clockwise\"\n        Clockwise = 7,\n        //% block=\"Anticlockwise\"\n        Anticlockwise = 8,\n        //% block=\"Wave\"\n        Wave = 9\n    }\n    export enum ColorList {\n        //% block=\"Red\"\n        red,\n        //% block=\"Green\"\n        green,\n        //% block=\"Blue\"\n        blue,\n        //% block=\"Cyan\"\n        cyan,\n        //% block=\"Magenta\"\n        magenta,\n        //% block=\"Yellow\"\n        yellow,\n        //% block=\"White\"\n        white\n    }\n\n    ///////////////////////////////////blocks/////////////////////////////\n\n    //% blockId=\"readwaterLevel\" block=\"Water level sensor %Rjpin value(0~100)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function waterLevel(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let voltage = 0, waterlevel = 0;\n        voltage = pins.map(\n            pins.analogReadPin(pin),\n            50,\n            600,\n            0,\n            100\n        );\n        if (voltage < 0) {\n            voltage = 0\n        }\n        waterlevel = voltage;\n        return Math.round(waterlevel)\n    }\n\n    let distance_last = 0\n\n    //% blockId=sonarbit block=\"Ultrasonic sensor pinT %tPin pinE %ePin distance %distance_unit\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% distance_unit.fieldEditor=\"gridpicker\"\n    //% distance_unit.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function ultrasoundSensor(tPin: DigitalPin, ePin: DigitalPin, distance_unit: Distance_Unit_List): number {\n        let pinT = tPin\n        let pinE = ePin\n        pins.setPull(pinT, PinPullMode.PullNone)\n        pins.digitalWritePin(pinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(pinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(pinT, 0)\n\n        // read pulse\n        let d = pins.pulseIn(pinE, PulseValue.High, 25000)\n        let version = control.hardwareVersion()\n        let distance = d * 34 / 2 / 1000\n        if (version == \"1\") {\n            distance = distance * 3 / 2\n        }\n\n        if (distance > 430) {\n            distance = 0\n        }\n\n        if (distance == 0) {\n            distance = distance_last\n            distance_last = 0\n        }\n        else {\n            distance_last = distance\n        }\n\n        switch (distance_unit) {\n            case Distance_Unit_List.Distance_Unit_cm:\n                return Math.floor(distance)  //cm\n                break\n            case Distance_Unit_List.Distance_Unit_foot:\n                return Math.floor(distance / 30.48)   //foot\n                break\n            default:\n                return 0\n        }\n    }\n\n    export class PAJ7620 {\n        private paj7620WriteReg(addr: number, cmd: number) {\n            let buf: Buffer = pins.createBuffer(2);\n            buf[0] = addr;\n            buf[1] = cmd;\n            pins.i2cWriteBuffer(0x73, buf, false);\n        }\n        private paj7620ReadReg(addr: number): number {\n            let buf: Buffer = pins.createBuffer(1);\n            buf[0] = addr;\n            pins.i2cWriteBuffer(0x73, buf, false);\n            buf = pins.i2cReadBuffer(0x73, 1, false);\n            return buf[0];\n        }\n        private paj7620SelectBank(bank: number) {\n            if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n        }\n        private paj7620Init() {\n            let temp = 0;\n            this.paj7620SelectBank(0);\n            temp = this.paj7620ReadReg(0);\n            if (temp == 0x20) {\n                for (let i = 0; i < 438; i += 2) {\n                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n                }\n            }\n            this.paj7620SelectBank(0);\n        }\n        init() {\n            this.paj7620Init();\n            basic.pause(200);\n        }\n        read(): number {\n            let data = 0, result = 0;\n            data = this.paj7620ReadReg(0x43);\n            switch (data) {\n                case 0x01:\n                    result = GestureType.Right;\n                    break;\n                case 0x02:\n                    result = GestureType.Left;\n                    break;\n                case 0x04:\n                    result = GestureType.Up;\n                    break;\n                case 0x08:\n                    result = GestureType.Down;\n                    break;\n                case 0x10:\n                    result = GestureType.Forward;\n                    break;\n                case 0x20:\n                    result = GestureType.Backward;\n                    break;\n                case 0x40:\n                    result = GestureType.Clockwise;\n                    break;\n                case 0x80:\n                    result = GestureType.Anticlockwise;\n                    break;\n                default:\n                    data = this.paj7620ReadReg(0x44);\n                    if (data == 0x01)\n                        result = GestureType.Wave;\n                    break;\n            }\n            return result;\n        }\n    }\n    const gestureEventId = 3100;\n    let lastGesture = GestureType.None;\n    let paj7620 = new PAJ7620();\n    //% blockId= gesture_create_event block=\"Gesture sensor IIC port is %gesture\"\n    //% gesture.fieldEditor=\"gridpicker\" gesture.fieldOptions.columns=3\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function onGesture(gesture: GestureType, handler: () => void) {\n        control.onEvent(gestureEventId, gesture, handler);\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        control.inBackground(() => {\n            while (true) {\n                const gesture = paj7620.read();\n                if (gesture != lastGesture) {\n                    lastGesture = gesture;\n                    control.raiseEvent(gestureEventId, lastGesture);\n                }\n                basic.pause(200);\n            }\n        })\n    }\n\n    //% blockId= gesture_get_event block=\"Gesture sensor IIC port detects\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function getGesture(): number {\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        const gesture = paj7620.read();\n        return gesture\n    }\n\n\n\n\n    //% blockId=apds9960_readcolor block=\"Color sensor IIC port color HUE(0~360)\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readColor(): number {\n        if (color_first_init == false) {\n            initModule()\n            colorMode()\n        }\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        while (!tmp) {\n            basic.pause(5);\n            tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        }\n        let c = i2cread_color(APDS9960_ADDR, APDS9960_CDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_CDATAH) * 256;\n        let r = i2cread_color(APDS9960_ADDR, APDS9960_RDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_RDATAH) * 256;\n        let g = i2cread_color(APDS9960_ADDR, APDS9960_GDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_GDATAH) * 256;\n        let b = i2cread_color(APDS9960_ADDR, APDS9960_BDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_BDATAH) * 256;\n        // map to rgb based on clear channel\n        let avg = c / 3;\n        r = r * 255 / avg;\n        g = g * 255 / avg;\n        b = b * 255 / avg;\n        //let hue = rgb2hue(r, g, b);\n        let hue = rgb2hsl(r, g, b)\n        return hue\n    }\n    //% block=\"Color sensor IIC port detects %color\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% color.fieldEditor=\"gridpicker\" color.fieldOptions.columns=3\n    export function checkColor(color: ColorList): boolean {\n        let hue = readColor()\n        switch (color) {\n            case ColorList.red:\n                if (hue > 330 || hue < 20) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.green:\n                if (hue > 120 && 180 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.blue:\n                if (hue > 210 && 270 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.cyan:\n                if (hue > 190 && 210 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.magenta:\n                if (hue > 260 && 330 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.yellow:\n                if (hue > 30 && 120 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.white:\n                if (hue >= 180 && 190 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n        }\n    }\n\n    //% blockId=\"potentiometer\" block=\"Trimpot %Rjpin analog value\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Input color=#E2C438 group=\"Analog\"\n    export function trimpot(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        return pins.analogReadPin(pin)\n    }\n    //% blockId=buttonab block=\"Button %Rjpin %button is pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonCD(Rjpin: DigitalRJPin, button: ButtonStateList): boolean {\n        let pinC = DigitalPin.P1\n        let pinD = DigitalPin.P2\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pinC = DigitalPin.P1\n                pinD = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pinC = DigitalPin.P2\n                pinD = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pinC = DigitalPin.P13\n                pinD = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pinC = DigitalPin.P15\n                pinD = DigitalPin.P16\n                break;\n            case DigitalRJPin.P3:\n                pinC = DigitalPin.P3\n                pinD = DigitalPin.P4\n                break;\n        }\n        pins.setPull(pinC, PinPullMode.PullUp)\n        pins.setPull(pinD, PinPullMode.PullUp)\n        if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 0 && button == ButtonStateList.CD) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinC) == 0 && pins.digitalReadPin(pinD) == 1 && button == ButtonStateList.C) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 1 && button == ButtonStateList.D) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    export enum ButtonState {\n        //% block=\"on\"\n        on = 1,\n        //% block=\"off\"\n        off = 2\n    }\n\n    const buttonEventSource = 5000\n    const buttonEventValue = {\n        CD_pressed: ButtonState.on,\n        CD_unpressed: ButtonState.off\n    }\n\n    //% block=\"on button %Rjpin %button pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=4\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonEvent(Rjpin: DigitalRJPin, button: ButtonStateList, handler: () => void) {\n        let ButtonPin_C = DigitalPin.P1\n        let ButtonPin_D = DigitalPin.P2\n        let pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P0\n        let pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                ButtonPin_C = DigitalPin.P1\n                ButtonPin_D = DigitalPin.P8\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P1\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P8\n                break;\n            case DigitalRJPin.J2:\n                ButtonPin_C = DigitalPin.P2\n                ButtonPin_D = DigitalPin.P12\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P2\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P12\n                break;\n            case DigitalRJPin.J3:\n                ButtonPin_C = DigitalPin.P13\n                ButtonPin_D = DigitalPin.P14\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P13\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P14\n                break;\n            case DigitalRJPin.J4:\n                ButtonPin_C = DigitalPin.P15\n                ButtonPin_D = DigitalPin.P16\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P15\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P16\n                break;\n            case DigitalRJPin.P3:\n                ButtonPin_C = DigitalPin.P3\n                ButtonPin_D = DigitalPin.P4\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P3\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P4\n                break;\n        }\n        if (button == ButtonStateList.C) {\n            pins.setPull(ButtonPin_C, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_C, PinEventType.Edge)\n            control.onEvent(pinEventSource_C, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.D) {\n            pins.setPull(ButtonPin_D, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_D, PinEventType.Edge)\n            control.onEvent(pinEventSource_D, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.CD) {\n            loops.everyInterval(50, function () {\n                if (pins.digitalReadPin(ButtonPin_C) == 0 && pins.digitalReadPin(ButtonPin_D) == 0) {\n                    control.raiseEvent(buttonEventSource, buttonEventValue.CD_pressed)\n                }\n            })\n            control.onEvent(buttonEventSource, buttonEventValue.CD_pressed, handler)\n        }\n    }\n\n    //% blockId=fans block=\"Motor fan %Rjpin toggle to $fanstate || speed %speed \\\\%\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% fanstate.shadow=\"toggleOnOff\"\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    //% speed.min=0 speed.max=100\n    //% expandableArgumentMode=\"toggle\"\n    export function motorFan(Rjpin: DigitalRJPin, fanstate: boolean, speed: number = 100): void {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.J3:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.J4:\n                pin = AnalogPin.P15\n                break;\n        }\n        if (fanstate) {\n            pins.analogSetPeriod(pin, 100)\n            pins.analogWritePin(pin, Math.map(speed, 0, 100, 0, 1023))\n        }\n        else {\n            pins.analogWritePin(pin, 0)\n            speed = 0\n        }\n    }\n\n\n    //% blockId=\"setLoopFolder\" block=\"loop play all the MP3s in the folder:$folderNum\"\n    //% folderNum.defl=\"01\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setLoopFolder(folderNum: string): void {\n        CMD = 0x17\n        para1 = 0\n        para2 = parseInt(folderNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    //% blockId=\"folderPlay\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum || repeatList: $myAns\"\n    //% folderNum.defl=\"01\" fileNum.defl=\"001\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function folderPlay(folderNum: string, fileNum: string, myAns: boolean = false): void {\n        CMD = 0x0F\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        if (myAns)\n            execute(0x19)\n    }\n\n    //% blockId=\"playFolderFilePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFilePort(folderNum: string, fileNum: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFolderFileVolumePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum with volume:$theVolume usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" theVolume.defl=\"10\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFileVolumePort(folderNum: string, fileNum: string, theVolume: string, Rjpin: DigitalRJPin): void {\n        \n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        \n        let volume = parseInt(theVolume)\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(200)\n\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"volumePort\" \n    //% block=\"set MP3 volume:$theVolume usingPin:$Rjpin\"\n    //% theVolume.defl=\"10\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function volumePort(theVolume: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        let volume = parseInt(theVolume)\n        if (volume > 30) {\n            volume = 30\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(300)\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n\n\n    //% blockId=\"setTracking\" \n    //% block=\"play the mp3 in order of:%tracking || repeatList: $myAns\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% tracking.defl=1\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setTracking(tracking: number, myAns: boolean = false): void {\n        CMD = 0x03\n        para1 = 0x00\n        para2 = tracking\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        execute(0x0D)\n        if (myAns)\n            execute(0x19)\n    }\n    //% blockId=MP3execute block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=\"setVolume\" block=\"Set volume(0~25):%volume\"\n    //% volume.min=0 volume.max=25\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setVolume(volume: number): void {\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 0x06\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=MP3setPort block=\"Set the MP3 port to %Rjpin\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function MP3SetPort(Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        setVolume(25)\n    }\n}","notlegos.ts":"// NotLegos Blocks\n\n//% block=\"Not LEGOs\" color=#0031AF weight=1000 icon=\"\\uf3a5\"\n//% groups=['MP3\",'Display', 'Laser', 'others']\nnamespace notLegos {\n\n    // Variables for MP3 and Volume Pot\n    let isPot = false\n    let potPin = AnalogPin.P0\n    let mp3bits = 0\n    let mp3Apin = SerialPin.P0\n    let mp3Bpin = SerialPin.P0\n    let mp3Cpin = SerialPin.P0\n    let mp3Avolume = 1\n    let mp3Bvolume = 1\n    let mp3Cvolume = 1\n    let relativeCvolume = 1\n    let lastMP3bit = \"\"\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    let mp3musicPin:SerialPin\n    let mp3music = false\n    let mp3player = false\n    let mp3sfxPin = null\n    let mp3sfx = false\n    let mp3musicVol = 0\n    let mp3playerPin = null\n    let mp3playerVol = 0\n    let mp3sfxVol = 0\n\n    // String Arrays for Full Player Sound Sets and Shuffled Playlists Thereof\n    let PlayerAwaitingMusic: string[] = []\n    let PlayerFailure: string[] = []\n    let PlayerHurry: string[] = []\n    let PlayerIntro: string[] = []\n    let PlayerIntroMusic: string[] = []\n    let PlayerLevelMusic: string[] = []\n    let PlayerLost: string[] = []\n    let PlayerLostMusic: string[] = []\n    let PlayerName: string[] = []\n    let PlayerNay: string[] = []\n    let PlayerOuch: string[] = []\n    let PlayerReady: string[] = []\n    let PlayerSuccess: string[] = []\n    let PlayerTutorialMusic: string[] = []\n    let PlayerWon: string[] = []\n    let PlayerWonMusic: string[] = []\n    let PlayerYay: string[] = []\n    let PlaylistAwaitingMusic: string[] = []\n    let PlaylistCorrect: string[] = []\n    let PlaylistExplosion: string[] = []\n    let PlaylistFailure: string[] = []\n    let PlaylistFire: string[] = []\n    let PlaylistGhost: string[] = []\n    let PlaylistHurry: string[] = []\n    let PlaylistIncorrect: string[] = []\n    let PlaylistIntro: string[] = []\n    let PlaylistLost: string[] = []\n    let PlaylistName: string[] = []\n    let PlaylistNay: string[] = []\n    let PlaylistOuch: string[] = []\n    let PlaylistReady: string[] = []\n    let PlaylistSlash: string[] = []\n    let PlaylistSpark: string[] = []\n    let PlaylistSplash: string[] = []\n    let PlaylistSuccess: string[] = []\n    let PlaylistWon: string[] = []\n    let PlaylistYay: string[] = []\n\n    // Sound Strings - Global\n    let VoiceTracks = \"10_1_90_1.75|10_2_90_3.65|10_3_50_11.5|10_4_90_0|10_5_90_0|10_6_90_4.65|10_7_90_7.15|10_8_90_4.8|10_9_90_3.75|10_10_90_5.05|10_11_90_0|10_12_90_0|10_13_90_3|10_14_90_3|10_15_90_3|10_16_90_4|10_17_90_0|10_18_90_3|10_19_90_3|10_20_90_4|10_21_90_2|10_22_90_0|10_23_90_2|10_24_90_2|10_25_90_6|10_26_90_6|10_27_90_6|10_28_90_6|10_29_90_6|10_30_90_6|10_31_90_6|10_32_90_6|10_33_90_8|10_34_90_9|10_35_90_6|10_36_90_6|10_37_90_6|10_38_90_6|10_39_90_6|10_40_90_6\".split(\"|\")\n    let CorrectSFX = \"7_1_100_4|7_2_100_8|7_3_100_8|7_4_100_6|7_5_100_10|7_6_100_8|7_7_100_6|7_8_100_4|7_9_100_17|7_10_100_9|7_11_100_4|7_12_100_8|7_13_100_12|7_14_100_7|7_15_100_10|7_16_100_9|7_17_100_10|7_18_100_9|7_19_100_8|7_20_100_4|7_21_100_7|7_22_100_26|7_23_100_5|7_24_100_4|7_25_100_10|7_26_100_7|7_27_100_7|7_28_100_6|7_29_100_7|7_30_100_7|7_31_100_12|7_32_100_4|7_33_100_6|7_34_100_6|7_35_100_6|7_36_100_6|7_37_100_5|7_38_100_3|7_39_100_6|7_40_100_6|7_41_100_6|7_42_100_8|7_43_100_6|7_44_100_8|7_45_100_6|7_46_100_5|7_47_100_5|7_48_100_12|7_49_100_3|7_50_100_7|7_51_100_8|7_52_100_11|7_53_100_6|7_54_100_2|7_55_100_5|7_56_100_7|7_57_100_8|7_58_100_7|7_59_100_6|7_60_100_7|7_61_100_6|7_62_100_8|7_63_100_5|7_64_100_5|7_65_100_7|7_66_100_9|7_67_100_6|7_68_100_6|7_69_100_7|7_70_100_10|7_71_100_7|7_72_100_5|7_73_100_6|7_74_100_8|7_75_100_3|7_76_100_3|7_77_100_6|7_78_100_7|7_79_100_4|7_80_100_6|7_81_100_2|7_82_100_3|7_83_100_3|7_84_100_1|7_85_100_3|7_86_100_6|7_87_100_7|7_88_100_5|7_89_100_3|7_90_100_5|7_91_100_3|7_92_100_3|7_93_100_2|7_94_100_3|7_95_100_3|7_96_100_1|7_99_100_1|7_100_100_1|7_101_100_1|7_102_100_1|7_103_100_1|7_104_100_3|7_105_100_1|7_106_100_1|7_107_100_4|7_108_100_4|7_109_100_1|7_110_100_1|7_111_100_1|7_112_100_1|7_113_100_1|7_114_100_2|7_115_100_1|7_116_100_1|7_117_100_1|7_118_100_1\".split(\"|\")\n    let IncorrectSFX = \"8_1_100_6|8_2_100_5|8_3_100_3|8_4_100_5|8_5_100_7|8_6_100_6|8_7_100_4|8_8_100_1|8_9_100_3|8_10_100_4|8_11_100_3|8_12_100_3|8_13_100_6|8_14_100_3|8_15_100_1|8_16_100_1|8_17_100_1|8_18_100_1|8_19_100_0|8_20_100_0|8_21_100_5|8_22_100_4|8_23_100_3|8_24_100_7\".split(\"|\")\n    let AllSFX = \"9_1_100_4.754|9_2_100_4.336|9_3_100_5.172|9_4_100_4.806|9_5_100_4.754|9_6_100_1.536|9_7_100_2.136|9_8_100_1.896|9_9_100_2.592|9_10_100_0.936|9_11_100_1.008|9_12_100_0.312|9_13_100_1.44|9_14_100_1.8|9_15_100_1.992|9_16_100_1.104|9_17_100_1.08|9_18_100_0.912|9_19_100_0.528|9_20_100_0.72|9_21_100_0.672|9_22_100_0.696|9_23_100_0.6|9_24_100_0.576|9_25_100_1.44|9_26_100_1.8|9_27_100_1.464|9_28_100_0.432|9_29_100_0.312|9_30_100_2.112|9_31_100_0.648|9_32_100_0.384|9_33_100_2.352|9_34_100_1.8|9_35_100_1.608|9_36_100_0.648|9_37_100_0.768|9_38_100_0.552|9_39_100_0.48|9_40_100_1.032|9_41_100_0.456|9_42_100_0.384|9_43_100_0.552|9_44_100_0.432|9_45_100_0.216|9_46_100_0.624|9_47_100_1.248|9_48_100_1.104|9_49_100_1.248|9_50_100_0.648|9_51_100_0.456|9_53_100_5.256|9_54_100_2.328|9_55_100_4.992|9_56_100_1.776|9_57_100_2.28|9_58_100_0.504|9_59_100_0.984|9_60_100_0.984|9_61_100_0.504|9_62_100_1.632|9_63_100_0.288|9_64_100_0.192|9_65_100_0.168|9_66_100_0.288|9_67_100_0.288|9_68_100_0.312|9_69_100_0.72|9_70_100_0.672|9_71_100_0.648|9_72_100_0.648|9_73_100_1.632|9_74_100_1.416|9_75_100_1.248|9_76_100_0.48|9_77_100_0.36|9_78_100_0.216|9_79_100_0.576|9_80_100_0.731|9_81_100_1.128|9_82_100_2.184|9_83_100_0.744|9_84_100_0.6|9_85_100_1.152|9_86_100_1.68|9_87_100_1.32|9_88_100_0.528|9_89_100_0.36|9_90_100_0.792|9_91_100_2.496|9_92_100_1.8|9_93_100_1.8|9_94_100_0.744|9_95_100_1.776|9_96_100_5.544|9_97_100_0.432|9_98_100_2.064|9_99_100_0.744|9_100_100_0.696|9_101_100_1.776|9_102_100_0.12|9_103_100_0.168|9_104_100_0.96|9_105_100_0.96|9_106_100_2.04|9_107_100_3.984|9_108_100_1.608|9_109_100_3.528|9_110_100_0.456|9_111_100_0.696|9_112_100_1.632|9_113_100_2.232\".split(\"|\")\n    let GhostSFX = \"9_1_100_4.754|9_2_100_4.336|9_3_100_5.172|9_4_100_4.806\".split(\"|\")\n    let FireSFX = \"9_6_100_1.536|9_15_100_1.992|9_53_100_5.256|9_106_100_2.04\".split(\"|\")\n    let ExplosionSFX = \"9_77_100_0.36|9_101_100_1.776|9_109_100_3.528\".split(\"|\")\n    let SplashSFX = \"9_33_100_2.352|9_34_100_1.8\".split(\"|\")\n    let SparkSFX = \"9_5_100_4.754|9_51_100_0.456|9_85_100_1.152|9_86_100_1.68|9_111_100_0.696|9_112_100_1.632\".split(\"|\")\n    let SlashSFX = \"9_10_100_0.936|9_25_100_1.44|9_28_100_0.432|9_32_100_0.384|9_50_100_0.648|9_59_100_0.984|9_63_100_0.288|9_64_100_0.192|9_65_100_0.168|9_66_100_0.288|9_67_100_0.288|9_68_100_0.312|9_69_100_0.72|9_75_100_1.248|9_76_100_0.48|9_77_100_0.36|9_78_100_0.216|9_89_100_0.36\".split(\"|\")\n    \n    // Music Strings - Super Mario Brothers\n    let SMBIntroMusic = \"1_1_75_2.808|1_2_75_3.912|1_3_75_7.81|1_4_75_4.992|1_5_75_3.918|1_6_75_12.382|1_7_75_3.204|1_8_75_6.648|1_9_75_6.168|1_10_75_7.464|1_11_75_9.36|1_12_75_9.038|1_13_75_10.605|1_14_75_3.492|1_15_75_9.613|1_16_75_3.48|1_17_75_5.58|1_18_75_5.041|1_19_75_6.336|1_20_75_5.424|1_21_75_7.2|1_22_75_5.424|1_23_75_3.317|1_24_75_7.262|1_25_75_5.59|1_26_75_5.52|1_27_75_10.776|1_28_75_4.944|1_29_75_5.496|1_30_75_4.032|1_31_75_6.264|1_32_75_3.918|1_33_75_4.44|1_34_75_10.152|1_35_75_8.097|1_36_75_7.706|1_37_75_3.317|1_38_75_6.87|1_39_75_4.466|1_40_75_5.877|1_41_75_3.432|1_42_75_7.392|1_43_75_6.768|1_44_75_2.616|1_45_75_6.269|1_46_75_1.188|1_47_75_2.088|1_48_75_2.124|1_49_75_8.228|1_50_75_15.647|1_51_75_9.064|1_52_75_10.152|1_53_75_13.008|1_54_75_14.16|1_55_75_14.236|1_56_75_15.792|1_57_75_7.392|1_58_75_4.368|1_59_75_9.384|1_60_75_7.653|1_61_75_8.76|1_62_75_8.952|1_63_75_12.024|1_64_75_4.284|1_65_75_6.048|1_66_75_9.072|1_67_75_4.68|1_68_75_6.138|1_69_75_5.208|1_70_75_9.576|1_71_75_8.045|1_72_75_8.045|1_73_75_5.407|1_74_75_3.186\".split(\"|\")\n    let SMBTutorialMusic = \"2_1_65_36|2_2_65_40|2_3_65_41|2_4_65_46|2_5_65_50|2_6_65_51|2_7_65_59|2_8_65_63|2_9_65_64|2_10_65_65|2_11_65_66|2_12_65_67|2_13_65_68|2_14_65_69|2_15_65_76|2_16_65_80|2_17_65_84|2_18_65_90|2_19_65_92|2_20_65_100|2_21_65_103|2_22_65_105|2_23_65_112|2_24_65_113|2_25_65_123|2_26_65_138|2_27_65_142|2_28_65_144|2_29_65_156|2_30_65_158|2_31_65_120|2_32_65_120|2_33_65_120|2_34_65_120|2_35_65_120|2_36_65_120\".split(\"|\")\n    let SMBAwaitingMusic = \"3_1_100_64|3_2_100_211|3_3_100_185|3_4_100_185|3_5_100_182|3_6_100_114|3_7_100_181|3_8_100_103|3_9_100_303|3_10_100_21|3_11_100_235|3_12_100_121|3_13_100_203|3_14_100_119|3_15_100_206|3_16_100_146|3_17_100_237|3_18_100_210|3_19_100_160\".split(\"|\")\n    let SMBLevelMusic = \"4_1_100_128|4_3_100_142|4_5_100_111|4_6_100_141|4_9_100_126|4_11_100_132|4_15_100_119|4_16_100_146|4_18_100_120|4_20_100_143|4_22_100_142|4_23_100_112|4_24_100_138|4_25_100_139|4_26_100_111|4_27_100_116|4_28_100_129|4_31_100_98|4_32_100_146|4_33_100_177|4_34_100_82|4_36_100_160|4_38_100_180|4_39_100_211|4_41_100_134|4_42_100_183|4_43_100_124|4_44_100_261|4_45_100_91|4_46_100_138|4_49_100_207|4_50_100_41|4_51_100_180|4_52_100_202|4_53_100_194|4_56_100_209|4_57_100_195|4_58_100_180|4_60_100_198|4_61_100_180|4_63_100_78|4_66_100_139|4_67_100_224|4_68_100_180|4_73_100_180|4_76_100_180|4_77_100_196|4_78_100_113|4_82_100_180|4_83_100_123|4_84_100_180|4_86_100_126|4_93_100_121|4_97_100_59|4_98_100_180|4_99_100_180|4_100_100_118|4_101_100_156|4_102_100_180|4_103_100_70|4_104_100_216|4_105_100_140|4_106_100_180|4_107_100_147|4_108_100_147|4_109_100_180|4_110_100_158|4_111_100_180|4_112_100_80|4_113_100_152|4_114_100_127|4_116_100_122|4_118_100_106|4_123_100_143|4_124_100_36|4_125_100_164|4_127_100_282|4_128_100_311|4_129_100_123|4_130_100_187|4_131_100_62|4_132_100_180|4_133_100_130|4_134_100_112|4_135_100_105|4_139_100_126|4_141_100_176|4_142_100_135|4_143_100_126|4_144_100_144|4_145_100_140|4_146_100_133|4_149_100_167|4_150_100_120|4_151_100_180|4_155_100_226|4_157_100_164|4_158_100_144|4_159_100_104|4_161_100_180|4_162_100_87|4_163_100_126|4_164_100_118|4_165_100_194|4_166_100_135|4_167_100_50|4_168_100_109|4_169_100_180|4_170_100_133|4_171_100_180|4_172_100_91|4_173_100_138|4_176_100_120|4_177_100_81|4_178_100_150|4_179_100_153|4_180_100_104|4_181_100_112\".split(\"|\")\n    let SMBWonMusic = \"5_1_100_4|5_2_100_17|5_3_100_29|5_4_100_172|5_5_100_13|5_6_100_248|5_7_100_11|5_8_100_445|5_9_100_241|5_10_100_244|5_11_100_20|5_12_100_7|5_13_100_28|5_14_100_74|5_15_100_15|5_16_100_74|5_17_100_17|5_18_100_17|5_19_100_15|5_20_100_38|5_21_100_42|5_22_100_67|5_23_100_8|5_24_100_8|5_25_100_13|5_26_100_17|5_27_100_5|5_28_100_122|5_29_100_226|5_30_100_79\".split(\"|\")\n    let SMBLostMusic = \"6_1_100_87|6_2_100_31|6_3_100_196|6_4_100_65|6_5_100_4|6_6_100_23|6_7_100_65|6_8_100_62|6_9_100_78|6_10_100_6|6_11_100_162\".split(\"|\")\n    \n    // Player Strings - Mario\n    let MarioSoundString = \"A_21_1_100_1.5|A_21_2_100_1|I_21_3_100_3.3|A_21_4_100_1.9|A_21_5_100_2.1|I_21_6_100_1.8|I_21_7_100_1.8|R_21_8_100_0.6|R_21_9_100_1.3|R_21_10_100_1.1|R_21_11_100_0.6|R_21_12_100_0.8|R_21_13_100_1.6|R_21_14_100_1.3|R_21_15_100_1.2|R_21_16_100_1.1|R_21_17_100_1.3|R_21_18_100_1|Y_21_19_100_0.2|Y_21_20_100_0.2|Y_21_21_100_0.3|Y_21_22_100_0.5|Y_21_23_100_0.6|Y_21_24_100_0.6|Y_21_25_100_0.6|Y_21_26_100_0.6|Y_21_27_100_0.6|Y_21_28_100_0.6|Y_21_29_100_0.7|Y_21_30_100_0.7|Y_21_31_100_0.7|Y_21_32_100_0.7|Y_21_33_100_0.7|Y_21_34_100_0.8|Y_21_35_100_0.8|Y_21_36_100_0.8|Y_21_37_100_0.8|Y_21_38_100_0.8|Y_21_39_100_0.8|Y_21_40_100_0.9|Y_21_41_100_0.9|Y_21_42_100_0.9|Y_21_43_100_0.9|Y_21_44_100_0.9|Y_21_45_100_0.9|Y_21_46_100_0.9|Y_21_47_100_1|Y_21_48_100_1|Y_21_49_100_1|Y_21_50_100_1|Y_21_51_100_1.1|Y_21_52_100_1.1|Y_21_53_100_1.1|Y_21_54_100_1.2|Y_21_55_100_1.2|Y_21_56_100_1.2|Y_21_57_100_1.2|Y_21_58_100_1.3|Y_21_59_100_1.3|Y_21_60_100_1.3|Y_21_61_100_1.4|Y_21_62_100_1.4|S_21_63_100_1|S_21_64_100_1.6|S_21_65_100_1.7|S_21_66_100_1.7|S_21_67_100_1.9|S_21_68_100_2.1|S_21_69_100_2.2|S_21_70_100_2.4|S_21_71_100_2.4|S_21_72_100_2.5|W_21_73_100_1.8|W_21_74_100_2|W_21_75_100_2.2|W_21_76_100_2.6|W_21_77_100_2.9|O_21_78_100_0.6|O_21_79_100_0.4|O_21_80_100_0.4|O_21_81_100_1.1|O_21_82_100_1.5|O_21_83_100_0.8|O_21_84_100_0.7|O_21_85_100_0.8|O_21_86_100_0.9|O_21_87_100_1.3|O_21_88_100_0.5|O_21_89_100_1|O_21_90_100_1|O_21_91_100_0.4|O_21_92_100_0.5|O_21_93_100_0.9|O_21_94_100_0.4|O_21_95_100_0.4|N_21_96_100_1|N_21_97_100_1.1|N_21_98_100_1|N_21_99_100_0.6|N_21_100_100_0.9|N_21_101_100_1.4|N_21_102_100_1.7|N_21_103_100_1.3|N_21_104_100_0.6|N_21_105_100_1.4|N_21_106_100_0.8|N_21_107_100_1.1|N_21_108_100_1.1|N_21_109_100_0.8|N_21_110_100_1.7|N_21_111_100_2.4|I_21_112_100_0.8|I_21_113_100_0.9|F_21_114_100_1.1|F_21_115_100_2.5|F_21_116_100_2.5|F_21_117_100_1.4|L_21_118_100_3.4|L_21_119_100_3.5|L_21_120_100_4.4|L_21_121_100_1.5|H_21_122_100_44.4\"\n\n    // BLOCK - Set the Player's Sounds\n    //% blockId=nl_player_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% weight=101\n    //% block=\"Set player to $player\"\n    export function setSounds(player: string): void {\n        let theSound = \"\"\n        let thisLetter = \"\"\n        let series = \"\"\n        let soundStrings: string[] = []\n        if (player == \"Mario\") {\n            soundStrings = MarioSoundString.split(\"|\")\n            series = \"SMB\"\n        }\n        if (series == \"SMB\") {\n            PlayerIntroMusic = SMBIntroMusic\n            PlayerTutorialMusic = SMBTutorialMusic\n            PlayerAwaitingMusic = SMBAwaitingMusic\n            PlayerLevelMusic = SMBLevelMusic\n            PlayerWonMusic = SMBWonMusic\n            PlayerLostMusic = SMBLostMusic\n        }\n        for (let sString of soundStrings) {\n            thisLetter = sString.charAt(0)\n            theSound = sString.substr(2, sString.length - 2)\n            if (thisLetter == \"A\") {\n                PlayerName.push(theSound)\n            } else if (thisLetter == \"R\") {\n                PlayerReady.push(theSound)\n            } else if (thisLetter == \"Y\") {\n                PlayerYay.push(theSound)\n            } else if (thisLetter == \"I\") {\n                PlayerIntro.push(theSound)\n            } else if (thisLetter == \"N\") {\n                PlayerNay.push(theSound)\n            } else if (thisLetter == \"O\") {\n                PlayerOuch.push(theSound)\n            } else if (thisLetter == \"S\") {\n                PlayerSuccess.push(theSound)\n            } else if (thisLetter == \"F\") {\n                PlayerFailure.push(theSound)\n            } else if (thisLetter == \"W\") {\n                PlayerWon.push(theSound)\n            } else if (thisLetter == \"L\") {\n                PlayerLost.push(theSound)\n            } else if (thisLetter == \"H\") {\n                PlayerHurry.push(theSound)\n            }\n        }\n    }    \n    \n    // Internal Function - Take a Sound from a Playlist After Filling it from a Soundbank if it's Empty\n    function takeReplenish(Playlist: any[], Soundbank: any[]) {\n        let returnSound = \"\"\n        returnSound = \"\"\n        if (Playlist.length == 0) {\n            for (let index = 0; index <= Soundbank.length - 1; index++) {\n                if (index == 0) {\n                    Playlist.push(Soundbank[index])\n                } else if (index >= 1) {\n                    Playlist.insertAt(randint(0, index), Soundbank[index])\n                }\n            }\n        }\n        returnSound = Playlist.shift()\n        return returnSound\n    }\n\n    // BLOCK - Fetch a Sound of a Type from a Category\n    //% blockId=nl_get_soundstring\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% weight=101\n    //% block=\"Get $Category sound $Type\"\n    export function getSoundString(Category: string, Type: string): string {\n        let returnString = \"\"\n        if (Category == \"Voice\") {\n            returnString = VoiceTracks[parseFloat(Type)]\n        } else if (Category == \"Player\") {\n            if (Type == \"Name\") {\n                returnString = takeReplenish(PlaylistName, PlayerName)\n            } else if (Type == \"Intro\") {\n                returnString = takeReplenish(PlaylistIntro, PlayerIntro)\n            } else if (Type == \"Ready\") {\n                returnString = takeReplenish(PlaylistReady, PlayerReady)\n            } else if (Type == \"Yay\") {\n                returnString = takeReplenish(PlaylistYay, PlayerYay)\n            } else if (Type == \"Success\") {\n                returnString = takeReplenish(PlaylistSuccess, PlayerSuccess)\n            } else if (Type == \"Nay\") {\n                returnString = takeReplenish(PlaylistNay, PlayerNay)\n            } else if (Type == \"Failure\") {\n                returnString = takeReplenish(PlaylistFailure, PlayerFailure)\n            } else if (Type == \"Won\") {\n                returnString = takeReplenish(PlaylistWon, PlayerWon)\n            } else if (Type == \"Lost\") {\n                returnString = takeReplenish(PlaylistLost, PlayerLost)\n            } else if (Type == \"Hurry\") {\n                returnString = takeReplenish(PlaylistHurry, PlayerHurry)\n            }\n        } else if (Category == \"SFX\") {\n            if (Type == \"Correct\") {\n                returnString = takeReplenish(PlaylistCorrect, CorrectSFX)\n            } else if (Type == \"Incorrect\") {\n                returnString = takeReplenish(PlaylistIncorrect, IncorrectSFX)\n            } else if (Type == \"Ghost\") {\n                returnString = takeReplenish(PlaylistGhost, GhostSFX)\n            } else if (Type == \"Fire\") {\n                returnString = takeReplenish(PlaylistFire, FireSFX)\n            } else if (Type == \"Explosion\") {\n                returnString = takeReplenish(PlaylistExplosion, ExplosionSFX)\n            } else if (Type == \"Splash\") {\n                returnString = takeReplenish(PlaylistSplash, SplashSFX)\n            } else if (Type == \"Spark\") {\n                returnString = takeReplenish(PlaylistSpark, SparkSFX)\n            } else if (Type == \"Slash\") {\n                returnString = takeReplenish(PlaylistSlash, SlashSFX)\n            }\n        } else if (Category == \"Music\") {\n            if (Type == \"Intro\") {\n                let PlaylistIntroMusic: number[] = []\n                returnString = takeReplenish(PlaylistIntroMusic, PlayerIntroMusic)\n            } else if (Type == \"Tutorial\") {\n                let PlaylistTutorialMusic: number[] = []\n                returnString = takeReplenish(PlaylistTutorialMusic, PlayerTutorialMusic)\n            } else if (Type == \"Awaiting\") {\n                returnString = takeReplenish(PlaylistAwaitingMusic, PlayerAwaitingMusic)\n            } else if (Type == \"Level\") {\n                let PlaylistLevelMusic: number[] = []\n                returnString = takeReplenish(PlaylistLevelMusic, PlayerLevelMusic)\n            } else if (Type == \"Won\") {\n                let PlaylistWonMusic: number[] = []\n                returnString = takeReplenish(PlaylistWonMusic, PlayerWonMusic)\n            } else if (Type == \"Lost\") {\n                let PlaylistLostMusic: number[] = []\n                returnString = takeReplenish(PlaylistLostMusic, PlayerLostMusic)\n            }\n        }\n        return returnString\n    }\n\n\n    ///////////////////////////////////////////////////////MP3\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(20) // Was 100; problematic at 10\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n    function sendMP3volume(sPin: SerialPin): void {\n        let theVolume = 5\n        if (sPin == mp3Apin) {\n            theVolume = Math.round(potRead() * mp3Avolume)\n        } else if (sPin == mp3Bpin) {\n            theVolume = Math.round(potRead() * mp3Bvolume)\n        } else if (sPin == mp3Cpin) {\n            theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    function sendMP3volumeFast(sPin: SerialPin): void {\n        let theVolume = 5\n        if (sPin == mp3Apin) {\n            theVolume = Math.round(potRead() * mp3Avolume)\n        } else if (sPin == mp3Bpin) {\n            theVolume = Math.round(potRead() * mp3Bvolume)\n        } else if (sPin == mp3Cpin) {\n            theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    function sendMP3play(folderNum: string, fileNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    //% blockId=\"playFileNl\" \n    //% block=\"Play length of file:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n\n    export function playFile(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P16\n        stringParts = soundString.split(\"_\")\n        let theFile = stringParts[0]\n        let theVolume = stringParts[1]\n        let theLength = stringParts[2]\n        //sendMP3file(theFile, theVolume, sPin)\n        return parseFloat(theLength) * 1000\n    }\n\n\n\n    //% blockId=\"playFileNl2\" \n    //% block=\"Play2 length of file:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n\n    export function playFile2(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P16\n        stringParts = soundString.split(\"_\")\n        let theFile = stringParts[0]\n        let theVolume = stringParts[1]\n        let theLength = stringParts[2]\n        sendMP3file2(theFile, theVolume, sPin)\n        return parseFloat(theLength) * 1000\n    }\n    function sendMP3file2(fileNum: string, volumeNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 15\n        para1 = parseInt(fileNum)\n        para2 = parseInt(volumeNum)\n        para1 = parseInt(\"1\")\n        para2 = parseInt(\"1\")\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=nl_backgroundVolume\n    //% block=\"Set background volume to:%relativeVolume\"\n    //% subcategory=\"MP3\" group=\"MP3\"\n    export function sendBackgroundVolume(relativeVolume: number): void {\n        relativeCvolume = relativeVolume/100\n\n        let sPin = mp3Cpin\n        let theVolume = Math.round(potRead() * mp3Cvolume * relativeVolume / 100)\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=MP3execute2 block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n  \n    //% blockId=notlegos_pot_read\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Trimpot analog value\"\n    export function potRead() {\n        if(isPot){\n            return Math.round(pins.map(pins.analogReadPin(potPin), 0, 1023, 0, 30))\n        } else{\n            return 5\n        }\n    }\n\n    //% blockId=notlegos_relCread\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return background volume\"\n    export function getBackgroundVolume() {\n\n            return relativeCvolume\n\n    }\n    //% blockId=notlegos_mp3Avolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3A volume\"\n    export function getMP3AVolume() {\n        return potRead() * mp3Avolume\n    }\n    //% blockId=notlegos_mp3Bvolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3B volume\"\n    export function getMP3BVolume() {\n        return potRead() * mp3Bvolume\n    }\n      //% blockId=notlegos_mp3Cvolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3C volume\"\n    export function getMP3CVolume() {\n        return potRead() * mp3Cvolume * relativeCvolume\n    }\n\n    //% blockId=notlegos_pot_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Connect Volume Control Pot at pin %aPin\"\n    //% aPin.fieldEditor=\"gridpicker\"\n    export function potSet(aPin: AnalogPin): void{\n        potPin = aPin\n        isPot = true\n    }\n\n//////////////////////////////////////////////////////////\n\n    //% blockId=nl_mp3_init\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Ready MP3bit for %type at %sPin\"\n    //% dPin.fieldEditor=\"gridpicker\"\n    export function mp3setPorts(type:mp3type, sPin: SerialPin): void {\n        if (type == mp3type.music){\n            mp3musicPin = sPin\n            mp3music = true\n            mp3musicVol = 60\n        } else if (type == mp3type.player){\n            mp3playerPin = sPin\n            mp3player = true\n            mp3playerVol = 100\n        } else if (type == mp3type.sfxvoice){\n            mp3sfxPin = sPin\n            mp3sfx = true\n            mp3sfxVol = 80\n        }\n        sendMP3volumeQuick(type)\n    }\n\n    function sendMP3volumeQuick(bit:mp3type): void {\n        if (bit == mp3type.music){\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        }\n\n        let theVolume = 10\n        // if (sPin == mp3Apin) {\n        //     theVolume = Math.round(potRead() * mp3Avolume)\n        // } else if (sPin == mp3Bpin) {\n        //     theVolume = Math.round(potRead() * mp3Bvolume)\n        // } else if (sPin == mp3Cpin) {\n        //     theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        // }\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=\"nl_testfast\" \n    //% block=\"Execute track %track on %bit\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3testFast(track: number, bit:mp3type): void {\n        if (bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        }\n        CMD = 3\n        dataArr[3] = CMD\n        dataArr[5] = 0\n        dataArr[6] = track\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n\n    \n    //% blockId=nl_mp3_music\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %genre music\"\n    export function mp3musicPlay(genre:musicGenre): void{\n        serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 3\n        para1 = parseInt(\"0\")\n        para2 = parseInt(\"1\")\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n\n\n    \n\n    //% blockId=nl_mp3_say\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %saying as player\"\n    export function mp3sayPlay(saying: playerSaying): void {\n\n    }\n\n\n    //% blockId=nl_mp3_voice\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %voice as voice\"\n    export function mp3voicePlay(voice: voiceSaying): void {\n\n    }\n\n    //% blockId=nl_mp3_voice\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Magician says on the %side difficulty %difficulty\"\n    export function mp3magician(side:magicianSaysSide, difficulty:magicianDifficulty): void {\n\n    }\n\n    //% blockId=nl_mp3_voice\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %sfx sound effect\"\n    export function mp3sfxPlay(sfx: sfxType): void {\n\n    }\n\n\n    //% blockId=\"playFolderFile\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playFolderFile(folderNum: string, fileNum: string): void {\n    \n        if (mp3bits > 0) {\n            sendMP3volume(mp3Apin)\n        }\n        if (mp3bits > 1) {\n           // sendMP3volume(mp3Bpin)\n        }\n        if (mp3bits >0) {\n            sendMP3play(folderNum, fileNum, mp3Apin)\n        }\n        if (mp3bits > 1) {\n          //  sendMP3play(folderNum, fileNum, mp3Bpin)\n        }\n    }\n\n    //% blockId=\"playsFor\" \n    //% block=\"Play length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsFor(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        if (mp3bits == 1) {\n            sPin = mp3Apin\n            mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        } else {\n            if (lastMP3bit == \"A\") {\n                    sPin = mp3Bpin\n                    mp3Bvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n                    lastMP3bit = \"B\"\n            } else {\n                sPin = mp3Apin\n                mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n            lastMP3bit = \"A\"\n            }\n        }\n        let theLength = stringParts[3]\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n        return parseFloat(theLength) * 1000 + 20\n    }\n\n    //% blockId=nl_volume_refresh\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume\"\n    export function updateVolume(): void {\n        if (mp3bits > 0) {\n            sendMP3volumeFast(mp3Apin)\n        }\n        if (mp3bits > 1) {\n            sendMP3volumeFast(mp3Bpin)\n        }\n        if (mp3bits > 2) {\n            sendMP3volumeFast(mp3Cpin)\n        }\n    }\n\n\n    //% blockId=\"nl_playsForTwo\" \n    //% block=\"Dual play length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsForTwo(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n\n        mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        mp3Bvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n\n        sendMP3volumeFast(mp3Apin)\n        sendMP3volumeFast(mp3Bpin)\n        \n        basic.pause(20)\n\n        sendMP3play(theFolder, theFile, mp3Apin)\n        sendMP3play(theFolder, theFile, mp3Bpin)\n        \n        return parseFloat(theLength) * 1000 + 20\n    }\n\n\n    //% blockId=\"nl_playsForBackground\" \n    //% block=\"Play in background length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsForBackground(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n        mp3Cvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        sPin = mp3Cpin\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n        return parseFloat(theLength) * 1000 + 20\n    }\n\n\n    //% blockId=\"nl_playBackground\" \n    //% block=\"Play in background:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playBackground(soundString: string): void {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n        mp3Cvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        sPin = mp3Cpin\n        sendMP3volume(sPin)\n        sendMP3play(theFolder, theFile, sPin)\n    }\n\n\n    //% blockId=\"nl_backgroundStop\" \n    //% block=\"Stop background sound\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function stopBackgroundSound(): void {\n        serial.redirect(mp3Cpin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 0x16\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    // Nezha - Functions for Pins and Ports\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_Serial(Rjpin: DigitalRJPin): any {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = SerialPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = SerialPin.P2\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.P12:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = SerialPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = SerialPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n\n\n    export enum mp3type {\n        music,\n        player,\n        sfxvoice\n    }\n\n    export enum musicGenre {\n        intro,\n        tutorial,\n        awaiting,\n        level,\n        won,\n        lost\n    }\n\n    export enum playerSaying {\n        ready,\n        yay,\n        intro,\n        nay,\n        ouch,\n        success,\n        failure,\n        won,\n        lost,\n        hurry\n    }\n\n    export enum sfxType {\n        correct,\n        incorrect,\n        ghost,\n        fire,\n        explosion,\n        splash,\n        spark,\n        slash\n    }\n\n    export enum voiceSaying {\n        name,\n        begin,\n        retry,\n        next,\n        complete,\n        gameover,\n        welcome,\n        intro,\n        howto1,\n        howto2,\n        howto3,\n        howto4,\n        howto5,\n        howto6,\n        howto7,\n        howto8,\n        howto9\n    }\n\n    export enum magicianSaysSide {\n        left,\n        right\n    }\n\n    export enum magicianDifficulty {\n        easy,\n        medium,\n        hard\n    }\n\n    export enum spotName {\n        A,\n        B,\n        C,\n        D,\n        E,\n        F,\n        G,\n        H,\n        I\n    }\n\n    export enum playerChar {\n        mario,\n        luigi,\n        peach,\n        daisy,\n        toad,\n        wario\n    }\n\n\n\n\n\n    // Enum - To Support MP3\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n\n    // Enum - Nezha and Pins\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum mbPin {\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1 (Analog J1)\"\n        P1,\n        //% block=\"P2 (Analog J2)\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8 (J1)\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12 (J2)\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14 (J3)\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16 (J4)\"\n        P16,\n    }\n}\n","pxt.json":"{\n    \"name\": \"NotLegosExt\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"displaySendBuffer.asm\",\n        \"display.ts\",\n        \"planetxbasic.ts\",\n        \"notlegos.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"7.0.42\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n","test.ts":""}},{"timestamp":1726880861827,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"gX}3[UJe6C9wl9p+Uoj=\">digits</variable><variable id=\"vSl89nNM7#y}HO_i4w8g\">sockLights</variable><variable id=\"kx-+|q2cYu;$^R?pYwdZ\">wheelLights</variable><variable id=\"zVo^^v6=8Jgq7FyFiNOV\">scoreCircle</variable></variables><block type=\"device_button_event\" x=\"749\" y=\"-246\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl2\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">1_1_25_100</field></shadow></value></block></value></block></statement></block><block type=\"device_button_event\" x=\"1290\" y=\"-246\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">2_1_1</field></shadow></value></block></value></block></statement></block><block type=\"every_interval\" x=\"1773\" y=\"-246\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value><statement name=\"HANDLER\"><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P2</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P3</field></shadow></value></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation><field name=\"SLIDER\">2</field></shadow></value><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">hue </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"apds9960_readcolor\"></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation><field name=\"SLIDER\">3</field></shadow></value><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">distance </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"sonarbit\"><field name=\"tPin\">DigitalPin.P8</field><field name=\"ePin\">DigitalPin.P9</field><field name=\"distance_unit\">Connected.Distance_Unit_List.Distance_Unit_cm</field></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation><field name=\"SLIDER\">4</field></shadow></value><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">gesture </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"Connected_getGesture\"></block></value></block></value></block></next></block></next></block></next></block></statement></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"Connected_oledClear\"><next><block type=\"pin_set_audio_pin_enabled\"><value name=\"enabled\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow></value><next><block type=\"device_led_enable\"><value name=\"on\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"gX}3[UJe6C9wl9p+Uoj=\">digits</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"grove_tm1637_create\"><field name=\"cPin\">DigitalPin.P7</field><field name=\"dPin\">DigitalPin.P6</field></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"vSl89nNM7#y}HO_i4w8g\">sockLights</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P11</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"vSl89nNM7#y}HO_i4w8g\">sockLights</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"vSl89nNM7#y}HO_i4w8g\">sockLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"kx-+|q2cYu;$^R?pYwdZ\">wheelLights</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P12</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">18</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"kx-+|q2cYu;$^R?pYwdZ\">wheelLights</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"kx-+|q2cYu;$^R?pYwdZ\">wheelLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"zVo^^v6=8Jgq7FyFiNOV\">scoreCircle</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P13</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"zVo^^v6=8Jgq7FyFiNOV\">scoreCircle</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"zVo^^v6=8Jgq7FyFiNOV\">scoreCircle</field></block></value><next><block type=\"nl_mp3_init\"><field name=\"type\">notLegos.mp3type.music</field><field name=\"sPin\">SerialPin.P15</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"nl_testfast\"><field name=\"bit\">notLegos.mp3type.music</field><value name=\"track\"><block type=\"math_number\"><field name=\"NUM\">4</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"787\" y=\"602\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow><block type=\"playFileNl2\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"soundString\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">1_1_25_100</field></shadow></value></block></value></block><block type=\"MP3setPort\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1351\" y=\"768\"><field name=\"Rjpin\">Connected.DigitalRJPin.P16</field><next><block type=\"setTracking\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"tracking\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value><value name=\"myAns\"><shadow type=\"toggleYesNo\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"yes\">false</field></shadow></value></block></next></block><block type=\"MP3execute\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"542\" y=\"842\"><field name=\"myType\">Connected.playType.Play</field></block><block type=\"nl_mp3_music\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"102\" y=\"1029\"><field name=\"genre\">notLegos.musicGenre.intro</field></block><block type=\"function_definition\" x=\"371\" y=\"1273\"><mutation name=\"isNearly\" functionid=\"F!?G,}0W~mK0q6yxa@)+\"><arg name=\"reference\" id=\"askt0gw7ps42l4j5s8lq\" type=\"number\"></arg><arg name=\"reading\" id=\"pvzp6d6plvrvf0vwcgka\" type=\"number\"></arg><arg name=\"tolerance\" id=\"ai8znl3rpzvjckud4rk3\" type=\"number\"></arg></mutation><field name=\"function_name\">isNearly</field><value name=\"askt0gw7ps42l4j5s8lq\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reference</field></block></value><value name=\"pvzp6d6plvrvf0vwcgka\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reading</field></block></value><value name=\"ai8znl3rpzvjckud4rk3\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">tolerance</field></block></value><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_operation\"><field name=\"OP\">AND</field><value name=\"A\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value></block></value><statement name=\"DO0\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></block></value></block></statement><statement name=\"ELSE\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></block></value></block></statement></block></statement></block></xml>","main.ts":"function isNearly (reference: number, reading: number, tolerance: number) {\n    if (reading >= reference - tolerance && reading <= reference + tolerance) {\n        return true\n    } else {\n        return false\n    }\n}\ninput.onButtonPressed(Button.A, function () {\n    basic.pause(notLegos.playFile2(\"1_1_25_100\"))\n})\ninput.onButtonPressed(Button.B, function () {\n    basic.pause(notLegos.playFile(\"2_1_1\"))\n})\nConnected.oledClear()\npins.setAudioPinEnabled(true)\nled.enable(false)\nbasic.pause(100)\nlet digits = Connected.tm1637Create(\nDigitalPin.P7,\nDigitalPin.P6\n)\nbasic.pause(1000)\nlet sockLights = Connected.create(Connected.DigitalRJPin.P11, 8, Connected.NeoPixelMode.RGB)\nsockLights.showColor(Connected.colors(Connected.NeoPixelColors.Blue))\nsockLights.show()\nlet wheelLights = Connected.create(Connected.DigitalRJPin.P12, 18, Connected.NeoPixelMode.RGB)\nwheelLights.showColor(Connected.colors(Connected.NeoPixelColors.Blue))\nwheelLights.show()\nlet scoreCircle = Connected.create(Connected.DigitalRJPin.P13, 8, Connected.NeoPixelMode.RGB)\nscoreCircle.showColor(Connected.colors(Connected.NeoPixelColors.Blue))\nscoreCircle.show()\nnotLegos.mp3setPorts(notLegos.mp3type.music, SerialPin.P15)\nbasic.pause(100)\nnotLegos.sendMP3testFast(4, notLegos.mp3type.music)\nloops.everyInterval(500, function () {\n    Connected.showUserText(1, \"R\" + pins.analogReadPin(AnalogReadWritePin.P1) + \" C\" + pins.analogReadPin(AnalogReadWritePin.P2) + \" L\" + pins.analogReadPin(AnalogReadWritePin.P3))\n    Connected.showUserText(2, \"hue \" + Connected.readColor())\n    Connected.showUserText(3, \"distance \" + Connected.ultrasoundSensor(DigitalPin.P8, DigitalPin.P9, Connected.Distance_Unit_List.Distance_Unit_cm))\n    Connected.showUserText(4, \"gesture \" + Connected.getGesture())\n})\n","README.md":"\n> Open this page at [https://notlegos.github.io/castleresay/](https://notlegos.github.io/castleresay/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/castleresay** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/castleresay** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/soundbank/](https://notlegos.github.io/soundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/soundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/soundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/resoundbank/](https://notlegos.github.io/resoundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/resoundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/resoundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosext/](https://notlegos.github.io/notlegosext/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosext** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosext** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","displaySendBuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n","display.ts":"\n/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#EA5532 icon=\"\\uf110\" block=\"Connected\" blockId=\"PlanetX_Connected\" \n//% groups='[\"LED\", \"Digital\", \"Analog\", \"IIC Port\", \"OLED\", \"7-Seg 4-Dig LED Nixietube\"]'\nnamespace Connected {\n    ////////////////////////////////TM 1637/////////////////\n    let TM1637_CMD1 = 0x40;\n    let TM1637_CMD2 = 0xC0;\n    let TM1637_CMD3 = 0x80;\n    let _SEGMENTS = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];\n    /////////////////////OLED///////////////////////////////\n    let firstoledinit = true\n    const basicFont: string[] = [\n        \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", // \" \"\n        \"\\x00\\x00\\x5F\\x00\\x00\\x00\\x00\\x00\", // \"!\"\n        \"\\x00\\x00\\x07\\x00\\x07\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x14\\x7F\\x14\\x7F\\x14\\x00\\x00\", // \"#\"\n        \"\\x00\\x24\\x2A\\x7F\\x2A\\x12\\x00\\x00\", // \"$\"\n        \"\\x00\\x23\\x13\\x08\\x64\\x62\\x00\\x00\", // \"%\"\n        \"\\x00\\x36\\x49\\x55\\x22\\x50\\x00\\x00\", // \"&\"\n        \"\\x00\\x00\\x05\\x03\\x00\\x00\\x00\\x00\", // \"'\"\n        \"\\x00\\x1C\\x22\\x41\\x00\\x00\\x00\\x00\", // \"(\"\n        \"\\x00\\x41\\x22\\x1C\\x00\\x00\\x00\\x00\", // \")\"\n        \"\\x00\\x08\\x2A\\x1C\\x2A\\x08\\x00\\x00\", // \"*\"\n        \"\\x00\\x08\\x08\\x3E\\x08\\x08\\x00\\x00\", // \"+\"\n        \"\\x00\\xA0\\x60\\x00\\x00\\x00\\x00\\x00\", // \",\"\n        \"\\x00\\x08\\x08\\x08\\x08\\x08\\x00\\x00\", // \"-\"\n        \"\\x00\\x60\\x60\\x00\\x00\\x00\\x00\\x00\", // \".\"\n        \"\\x00\\x20\\x10\\x08\\x04\\x02\\x00\\x00\", // \"/\"\n        \"\\x00\\x3E\\x51\\x49\\x45\\x3E\\x00\\x00\", // \"0\"\n        \"\\x00\\x00\\x42\\x7F\\x40\\x00\\x00\\x00\", // \"1\"\n        \"\\x00\\x62\\x51\\x49\\x49\\x46\\x00\\x00\", // \"2\"\n        \"\\x00\\x22\\x41\\x49\\x49\\x36\\x00\\x00\", // \"3\"\n        \"\\x00\\x18\\x14\\x12\\x7F\\x10\\x00\\x00\", // \"4\"\n        \"\\x00\\x27\\x45\\x45\\x45\\x39\\x00\\x00\", // \"5\"\n        \"\\x00\\x3C\\x4A\\x49\\x49\\x30\\x00\\x00\", // \"6\"\n        \"\\x00\\x01\\x71\\x09\\x05\\x03\\x00\\x00\", // \"7\"\n        \"\\x00\\x36\\x49\\x49\\x49\\x36\\x00\\x00\", // \"8\"\n        \"\\x00\\x06\\x49\\x49\\x29\\x1E\\x00\\x00\", // \"9\"\n        \"\\x00\\x00\\x36\\x36\\x00\\x00\\x00\\x00\", // \":\"\n        \"\\x00\\x00\\xAC\\x6C\\x00\\x00\\x00\\x00\", // \";\"\n        \"\\x00\\x08\\x14\\x22\\x41\\x00\\x00\\x00\", // \"<\"\n        \"\\x00\\x14\\x14\\x14\\x14\\x14\\x00\\x00\", // \"=\"\n        \"\\x00\\x41\\x22\\x14\\x08\\x00\\x00\\x00\", // \">\"\n        \"\\x00\\x02\\x01\\x51\\x09\\x06\\x00\\x00\", // \"?\"\n        \"\\x00\\x32\\x49\\x79\\x41\\x3E\\x00\\x00\", // \"@\"\n        \"\\x00\\x7E\\x09\\x09\\x09\\x7E\\x00\\x00\", // \"A\"\n        \"\\x00\\x7F\\x49\\x49\\x49\\x36\\x00\\x00\", // \"B\"\n        \"\\x00\\x3E\\x41\\x41\\x41\\x22\\x00\\x00\", // \"C\"\n        \"\\x00\\x7F\\x41\\x41\\x22\\x1C\\x00\\x00\", // \"D\"\n        \"\\x00\\x7F\\x49\\x49\\x49\\x41\\x00\\x00\", // \"E\"\n        \"\\x00\\x7F\\x09\\x09\\x09\\x01\\x00\\x00\", // \"F\"\n        \"\\x00\\x3E\\x41\\x41\\x51\\x72\\x00\\x00\", // \"G\"\n        \"\\x00\\x7F\\x08\\x08\\x08\\x7F\\x00\\x00\", // \"H\"\n        \"\\x00\\x41\\x7F\\x41\\x00\\x00\\x00\\x00\", // \"I\"\n        \"\\x00\\x20\\x40\\x41\\x3F\\x01\\x00\\x00\", // \"J\"\n        \"\\x00\\x7F\\x08\\x14\\x22\\x41\\x00\\x00\", // \"K\"\n        \"\\x00\\x7F\\x40\\x40\\x40\\x40\\x00\\x00\", // \"L\"\n        \"\\x00\\x7F\\x02\\x0C\\x02\\x7F\\x00\\x00\", // \"M\"\n        \"\\x00\\x7F\\x04\\x08\\x10\\x7F\\x00\\x00\", // \"N\"\n        \"\\x00\\x3E\\x41\\x41\\x41\\x3E\\x00\\x00\", // \"O\"\n        \"\\x00\\x7F\\x09\\x09\\x09\\x06\\x00\\x00\", // \"P\"\n        \"\\x00\\x3E\\x41\\x51\\x21\\x5E\\x00\\x00\", // \"Q\"\n        \"\\x00\\x7F\\x09\\x19\\x29\\x46\\x00\\x00\", // \"R\"\n        \"\\x00\\x26\\x49\\x49\\x49\\x32\\x00\\x00\", // \"S\"\n        \"\\x00\\x01\\x01\\x7F\\x01\\x01\\x00\\x00\", // \"T\"\n        \"\\x00\\x3F\\x40\\x40\\x40\\x3F\\x00\\x00\", // \"U\"\n        \"\\x00\\x1F\\x20\\x40\\x20\\x1F\\x00\\x00\", // \"V\"\n        \"\\x00\\x3F\\x40\\x38\\x40\\x3F\\x00\\x00\", // \"W\"\n        \"\\x00\\x63\\x14\\x08\\x14\\x63\\x00\\x00\", // \"X\"\n        \"\\x00\\x03\\x04\\x78\\x04\\x03\\x00\\x00\", // \"Y\"\n        \"\\x00\\x61\\x51\\x49\\x45\\x43\\x00\\x00\", // \"Z\"\n        \"\\x00\\x7F\\x41\\x41\\x00\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x02\\x04\\x08\\x10\\x20\\x00\\x00\", // \"\\\"\n        \"\\x00\\x41\\x41\\x7F\\x00\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x04\\x02\\x01\\x02\\x04\\x00\\x00\", // \"^\"\n        \"\\x00\\x80\\x80\\x80\\x80\\x80\\x00\\x00\", // \"_\"\n        \"\\x00\\x01\\x02\\x04\\x00\\x00\\x00\\x00\", // \"`\"\n        \"\\x00\\x20\\x54\\x54\\x54\\x78\\x00\\x00\", // \"a\"\n        \"\\x00\\x7F\\x48\\x44\\x44\\x38\\x00\\x00\", // \"b\"\n        \"\\x00\\x38\\x44\\x44\\x28\\x00\\x00\\x00\", // \"c\"\n        \"\\x00\\x38\\x44\\x44\\x48\\x7F\\x00\\x00\", // \"d\"\n        \"\\x00\\x38\\x54\\x54\\x54\\x18\\x00\\x00\", // \"e\"\n        \"\\x00\\x08\\x7E\\x09\\x02\\x00\\x00\\x00\", // \"f\"\n        \"\\x00\\x18\\xA4\\xA4\\xA4\\x7C\\x00\\x00\", // \"g\"\n        \"\\x00\\x7F\\x08\\x04\\x04\\x78\\x00\\x00\", // \"h\"\n        \"\\x00\\x00\\x7D\\x00\\x00\\x00\\x00\\x00\", // \"i\"\n        \"\\x00\\x80\\x84\\x7D\\x00\\x00\\x00\\x00\", // \"j\"\n        \"\\x00\\x7F\\x10\\x28\\x44\\x00\\x00\\x00\", // \"k\"\n        \"\\x00\\x41\\x7F\\x40\\x00\\x00\\x00\\x00\", // \"l\"\n        \"\\x00\\x7C\\x04\\x18\\x04\\x78\\x00\\x00\", // \"m\"\n        \"\\x00\\x7C\\x08\\x04\\x7C\\x00\\x00\\x00\", // \"n\"\n        \"\\x00\\x38\\x44\\x44\\x38\\x00\\x00\\x00\", // \"o\"\n        \"\\x00\\xFC\\x24\\x24\\x18\\x00\\x00\\x00\", // \"p\"\n        \"\\x00\\x18\\x24\\x24\\xFC\\x00\\x00\\x00\", // \"q\"\n        \"\\x00\\x00\\x7C\\x08\\x04\\x00\\x00\\x00\", // \"r\"\n        \"\\x00\\x48\\x54\\x54\\x24\\x00\\x00\\x00\", // \"s\"\n        \"\\x00\\x04\\x7F\\x44\\x00\\x00\\x00\\x00\", // \"t\"\n        \"\\x00\\x3C\\x40\\x40\\x7C\\x00\\x00\\x00\", // \"u\"\n        \"\\x00\\x1C\\x20\\x40\\x20\\x1C\\x00\\x00\", // \"v\"\n        \"\\x00\\x3C\\x40\\x30\\x40\\x3C\\x00\\x00\", // \"w\"\n        \"\\x00\\x44\\x28\\x10\\x28\\x44\\x00\\x00\", // \"x\"\n        \"\\x00\\x1C\\xA0\\xA0\\x7C\\x00\\x00\\x00\", // \"y\"\n        \"\\x00\\x44\\x64\\x54\\x4C\\x44\\x00\\x00\", // \"z\"\n        \"\\x00\\x08\\x36\\x41\\x00\\x00\\x00\\x00\", // \"{\"\n        \"\\x00\\x00\\x7F\\x00\\x00\\x00\\x00\\x00\", // \"|\"\n        \"\\x00\\x41\\x36\\x08\\x00\\x00\\x00\\x00\", // \"}\"\n        \"\\x00\\x02\\x01\\x01\\x02\\x01\\x00\\x00\"  // \"~\"\n    ];\n    function oledcmd(c: number) {\n        pins.i2cWriteNumber(0x3c, c, NumberFormat.UInt16BE);\n    }\n    function writeData(n: number) {\n        let b = n;\n        if (n < 0) { n = 0 }\n        if (n > 255) { n = 255 }\n        pins.i2cWriteNumber(0x3c, 0x4000 + b, NumberFormat.UInt16BE);\n    }\n    function writeCustomChar(c: string) {\n        for (let i = 0; i < 8; i++) {\n            writeData(c.charCodeAt(i));\n        }\n    }\n    function setText(row: number, column: number) {\n        let r = row;\n        let c = column;\n        if (row < 0) { r = 0 }\n        if (column < 0) { c = 0 }\n        if (row > 7) { r = 7 }\n        if (column > 15) { c = 15 }\n        oledcmd(0xB0 + r);            //set page address\n        oledcmd(0x00 + (8 * c & 0x0F));  //set column lower address\n        oledcmd(0x10 + ((8 * c >> 4) & 0x0F));   //set column higher address\n    }\n    function putChar(c: string) {\n        let c1 = c.charCodeAt(0);\n        writeCustomChar(basicFont[c1 - 32]);\n    }\n    function oledinit(): void {\n        oledcmd(0xAE);  // Set display OFF\n        oledcmd(0xD5);  // Set Display Clock Divide Ratio / OSC Frequency 0xD4\n        oledcmd(0x80);  // Display Clock Divide Ratio / OSC Frequency \n        oledcmd(0xA8);  // Set Multiplex Ratio\n        oledcmd(0x3F);  // Multiplex Ratio for 128x64 (64-1)\n        oledcmd(0xD3);  // Set Display Offset\n        oledcmd(0x00);  // Display Offset\n        oledcmd(0x40);  // Set Display Start Line\n        oledcmd(0x8D);  // Set Charge Pump\n        oledcmd(0x14);  // Charge Pump (0x10 External, 0x14 Internal DC/DC)\n        oledcmd(0xA1);  // Set Segment Re-Map\n        oledcmd(0xC8);  // Set Com Output Scan Direction\n        oledcmd(0xDA);  // Set COM Hardware Configuration\n        oledcmd(0x12);  // COM Hardware Configuration\n        oledcmd(0x81);  // Set Contrast\n        oledcmd(0xCF);  // Contrast\n        oledcmd(0xD9);  // Set Pre-Charge Period\n        oledcmd(0xF1);  // Set Pre-Charge Period (0x22 External, 0xF1 Internal)\n        oledcmd(0xDB);  // Set VCOMH Deselect Level\n        oledcmd(0x40);  // VCOMH Deselect Level\n        oledcmd(0xA4);  // Set all pixels OFF\n        oledcmd(0xA6);  // Set display not inverted\n        oledcmd(0xAF);  // Set display On\n        oledClear();\n    }\n\n    ///////////////////////////////enum\n\n\n    export enum NeoPixelColors {\n        //% block=red\n        Red = 0xFF0000,\n        //% block=orange\n        Orange = 0xFFA500,\n        //% block=yellow\n        Yellow = 0xFFFF00,\n        //% block=green\n        Green = 0x00FF00,\n        //% block=blue\n        Blue = 0x0000FF,\n        //% block=indigo\n        Indigo = 0x4b0082,\n        //% block=violet\n        Violet = 0x8a2be2,\n        //% block=purple\n        Purple = 0xFF00FF,\n        //% block=white\n        White = 0xFFFFFF,\n        //% block=black\n        Black = 0x000000\n    }\n\n    /**\n     * Different modes for RGB or RGB+W NeoPixel strips\n     */\n    export enum NeoPixelMode {\n        //% block=\"RGB (GRB format)\"\n        RGB = 0,\n        //% block=\"RGB+W\"\n        RGBW = 1,\n        //% block=\"RGB (RGB format)\"\n        RGB_RGB = 2\n    }\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n    /////////////////////////////User_function//////////////////\n\n    //% line.min=1 line.max=8 line.defl=1\n    //% text.defl=\"Hello,ELECFREAKS\"\n    //% block=\"OLED show line %line|text %text\"\n    //% subcategory=Display group=\"OLED\" color=#00B1ED\n    export function showUserText(line: number, text: string) {\n        if (firstoledinit) {\n            oledinit()\n            firstoledinit = false\n        }\n        if (text.length > 16) {\n            text = text.substr(0, 16)\n        }\n        line = line - 1\n        setText(line, 0);\n        for (let c of text) {\n            putChar(c);\n        }\n\n        for (let i = text.length; i < 16; i++) {\n            setText(line, i);\n            putChar(\" \");\n        }\n    }\n    //% line.min=1 line.max=8 line.defl=2 \n    //% n.defl=20200508\n    //% block=\"OLED show line %line|number %n\"\n    //% subcategory=Display group=\"OLED\" color=#00B1ED\n    export function showUserNumber(line: number, n: number) {\n        if (firstoledinit) {\n            oledinit()\n            firstoledinit = false\n        }\n        showUserText(line, \"\" + n)\n    }\n    //% block=\"clear display\" color=#00B1ED\n    //% subcategory=Display group=\"OLED\"\n    export function oledClear() {\n        //oledcmd(DISPLAY_OFF);   //display off\n        for (let j = 0; j < 8; j++) {\n            setText(j, 0);\n            {\n                for (let i = 0; i < 16; i++)  //clear all columns\n                {\n                    putChar(' ');\n                }\n            }\n        }\n        //oledcmd(DISPLAY_ON);    //display on\n        setText(0, 0);\n    }\n    /**\n   * Create a new driver Grove - 4-Digit Display\n   * @param clkPin value of clk pin number\n   * @param dataPin value of data pin number\n   */\n    //% blockId=grove_tm1637_create block=\"connect 4-Digit cPin %cPin dPin %dPin\"\n    //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" blockSetVariable=display color=#EA5532\n    export function tm1637Create(cPin: DigitalPin, dPin: DigitalPin, intensity: number = 7, count: number = 4): TM1637LEDs {\n        let display = new TM1637LEDs();\n        display.clk = cPin\n        display.dio = dPin\n        if ((count < 1) || (count > 5)) count = 4;\n        display.count = count;\n        display.brightness = intensity;\n        display.init();\n        return display;\n    }\n    export class TM1637LEDs {\n        buf: Buffer;\n        clk: DigitalPin;\n        dio: DigitalPin;\n        _ON: number;\n        brightness: number;\n        count: number;  // number of LEDs\n        /**\n         * initial TM1637\n         */\n        init(): void {\n            pins.digitalWritePin(this.clk, 0);\n            pins.digitalWritePin(this.dio, 0);\n            this._ON = 8;\n            this.buf = pins.createBuffer(this.count);\n            this.clear();\n        }\n        /**\n         * Start \n         */\n        _start() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        /**\n         * Stop\n         */\n        _stop() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.dio, 1);\n        }\n        /**\n         * send command1\n         */\n        _write_data_cmd() {\n            this._start();\n            this._write_byte(TM1637_CMD1);\n            this._stop();\n        }\n        /**\n         * send command3\n         */\n        _write_dsp_ctrl() {\n            this._start();\n            this._write_byte(TM1637_CMD3 | this._ON | this.brightness);\n            this._stop();\n        }\n        /**\n         * send a byte to 2-wire interface\n         */\n        _write_byte(b: number) {\n            for (let i = 0; i < 8; i++) {\n                pins.digitalWritePin(this.dio, (b >> i) & 1);\n                pins.digitalWritePin(this.clk, 1);\n                pins.digitalWritePin(this.clk, 0);\n            }\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _intensity(val: number = 7) {\n            this._ON = 8;\n            this.brightness = val - 1;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n        /**\n         * set data to TM1637, with given bit\n         */\n        _dat(bit: number, dat: number) {\n            this._write_data_cmd();\n            this._start();\n            this._write_byte(TM1637_CMD2 | (bit % this.count))\n            this._write_byte(dat);\n            this._stop();\n            this._write_dsp_ctrl();\n        }\n        /**\n         * Show a single number from 0 to 9 at a specified digit of Grove - 4-Digit Display\n         * @param dispData value of number\n         * @param bitAddr value of bit number\n         */\n        //% blockId=grove_tm1637_display_bit block=\"%display|show single number|%num|at digit|%bit\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        //% bit.defl=1 bit.min=0 bit.max=9\n        showbit(num: number = 5, bit: number = 0) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            this.buf[bit % this.count] = _SEGMENTS[num % 16]\n            this._dat(bit, _SEGMENTS[num % 16])\n        }\n        /**\n         * Show a 4 digits number on display\n         * @param dispData value of number\n         */\n        //% blockId=grove_tm1637_display_number block=\"%display|show number|%num\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        showNumber(num: number) {\n            if (num < 0) {\n                num = -num\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n                this._dat(0, 0x40) // '-'\n            }\n            else {\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n            }\n        }\n        /**\n         * show or hide dot point. \n         * @param bit is the position, eg: 1\n         * @param show is show/hide dp, eg: true\n         */\n        //% blockId=\"TM1637_showDP\" block=\"%display|DotPoint at %bit|show $show\"\n        //% show.shadow=\"toggleOnOff\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        showDP(bit: number = 1, show: boolean = true) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            bit = bit % this.count\n            if (show) this._dat(bit, this.buf[bit] | 0x80)\n            else this._dat(bit, this.buf[bit] & 0x7F)\n        }\n        /**\n         * clear LED. \n         */\n        //% blockId=\"TM1637_clear\" block=\"clear display %display\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        clear() {\n            for (let i = 0; i < this.count; i++) {\n                this._dat(i, 0)\n                this.buf[i] = 0\n            }\n        }\n    }\n    //% shim=sendBufferAsm\n    function sendBuffer(buf: Buffer, pin: DigitalPin) {\n    }\n    export class Strip {\n        buf: Buffer;\n        pin: DigitalPin;\n        // TODO: encode as bytes instead of 32bit\n        brightness: number;\n        start: number; // start offset in LED strip\n        _length: number; // number of LEDs\n        _mode: NeoPixelMode;\n        _matrixWidth: number; // number of leds in a matrix - if any\n\n        /**\n         * Shows all LEDs to a given color (range 0-255 for r, g, b).\n         * @param rgb RGB color of the LED\n         */\n        //% blockId=\"neopixel_set_strip_color\" block=\"%strip|show color %rgb=neopixel_colors\"\n        //% weight=85 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        showColor(rgb: number) {\n            rgb = rgb >> 0;\n            this.setAllRGB(rgb);\n            this.show();\n        }\n\n        /**\n         * Shows a rainbow pattern on all LEDs.\n         * @param startHue the start hue value for the rainbow, eg: 1\n         * @param endHue the end hue value for the rainbow, eg: 360\n         */\n        //% blockId=\"neopixel_set_strip_rainbow\" block=\"%strip|show rainbow from %startHue|to %endHue\"\n        //% weight=85 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        showRainbow(startHue: number = 1, endHue: number = 360) {\n            if (this._length <= 0) return;\n\n            startHue = startHue >> 0;\n            endHue = endHue >> 0;\n            const saturation = 100;\n            const luminance = 50;\n            const steps = this._length;\n            const direction = HueInterpolationDirection.Clockwise;\n\n            //hue\n            const h1 = startHue;\n            const h2 = endHue;\n            const hDistCW = ((h2 + 360) - h1) % 360;\n            const hStepCW = Math.idiv((hDistCW * 100), steps);\n            const hDistCCW = ((h1 + 360) - h2) % 360;\n            const hStepCCW = Math.idiv(-(hDistCCW * 100), steps);\n            let hStep: number;\n            if (direction === HueInterpolationDirection.Clockwise) {\n                hStep = hStepCW;\n            } else if (direction === HueInterpolationDirection.CounterClockwise) {\n                hStep = hStepCCW;\n            } else {\n                hStep = hDistCW < hDistCCW ? hStepCW : hStepCCW;\n            }\n            const h1_100 = h1 * 100; //we multiply by 100 so we keep more accurate results while doing interpolation\n\n            //sat\n            const s1 = saturation;\n            const s2 = saturation;\n            const sDist = s2 - s1;\n            const sStep = Math.idiv(sDist, steps);\n            const s1_100 = s1 * 100;\n\n            //lum\n            const l1 = luminance;\n            const l2 = luminance;\n            const lDist = l2 - l1;\n            const lStep = Math.idiv(lDist, steps);\n            const l1_100 = l1 * 100\n\n            //interpolate\n            if (steps === 1) {\n                this.setPixelColor(0, hsl(h1 + hStep, s1 + sStep, l1 + lStep))\n            } else {\n                this.setPixelColor(0, hsl(startHue, saturation, luminance));\n                for (let i = 1; i < steps - 1; i++) {\n                    const h = Math.idiv((h1_100 + i * hStep), 100) + 360;\n                    const s = Math.idiv((s1_100 + i * sStep), 100);\n                    const l = Math.idiv((l1_100 + i * lStep), 100);\n                    this.setPixelColor(i, hsl(h, s, l));\n                }\n                this.setPixelColor(steps - 1, hsl(endHue, saturation, luminance));\n            }\n            this.show();\n        }\n\n        /**\n         * Set LED to a given color (range 0-255 for r, g, b).\n         * You need to call ``show`` to make the changes visible.\n         * @param pixeloffset position of the NeoPixel in the strip\n         * @param rgb RGB color of the LED\n         */\n        //% blockId=\"neopixel_set_pixel_color\" block=\"%strip|set pixel color at %pixeloffset|to %rgb=neopixel_colors\"\n        //% weight=80 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setPixelColor(pixeloffset: number, rgb: number): void {\n            this.setPixelRGB(pixeloffset >> 0, rgb >> 0);\n        }\n\n        /**\n         * Send all the changes to the strip.\n         */\n        //% blockId=\"neopixel_show\" block=\"%strip|show\" \n        //% weight=79\n        //% parts=\"neopixel\" subcategory=Neopixel\n        show() {\n            sendBuffer(this.buf, this.pin);\n        }\n\n        /**\n         * Turn off all LEDs.\n         * You need to call ``show`` to make the changes visible.\n         */\n        //% blockId=\"neopixel_clear\" block=\"%strip|clear\"\n        //% weight=76 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        clear(): void {\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.fill(0, this.start * stride, this._length * stride);\n        }\n\n        /**\n         * Set the brightness of the strip. This flag only applies to future operation.\n         * @param brightness a measure of LED brightness in 0-255. eg: 255\n         */\n        //% blockId=\"neopixel_set_brightness\" block=\"%strip|set brightness %brightness\" \n        //% weight=59 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setBrightness(brightness: number): void {\n            this.brightness = brightness & 0xff;\n        }\n        /**\n         * Gets the number of pixels declared on the strip\n         */\n        //% blockId=\"neopixel_length\" block=\"%strip|length\" blockGap=8\n        //% subcategory=\"Neopixel\"\n        //% weight=60 advanced=true\n        length() {\n            return this._length;\n        }\n        /**\n         * Create a range of LEDs.\n         * @param start offset in the LED strip to start the range\n         * @param length number of LEDs in the range. eg: 4\n         */\n        //% weight=89 color=#EA5532\n        //% blockId=\"neopixel_range\" block=\"%strip|range from %start|with %length|leds\"\n        //% parts=\"neopixel\"\n        //% blockSetVariable=range subcategory=Neopixel\n        range(start: number, length: number): Strip {\n            start = start >> 0;\n            length = length >> 0;\n            let strip = new Strip();\n            strip.buf = this.buf;\n            strip.pin = this.pin;\n            strip.brightness = this.brightness;\n            strip.start = this.start + Math.clamp(0, this._length - 1, start);\n            strip._length = Math.clamp(0, this._length - (strip.start - this.start), length);\n            strip._matrixWidth = 0;\n            strip._mode = this._mode;\n            return strip;\n        }\n\n        /**\n         * Shift LEDs forward and clear with zeros.\n         * You need to call ``show`` to make the changes visible.\n         * @param offset number of pixels to shift forward, eg: 1\n         */\n        //% blockId=\"neopixel_shift\" block=\"%strip|shift pixels by %offset\" \n        //% weight=40 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        shift(offset: number = 1): void {\n            offset = offset >> 0;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.shift(-offset * stride, this.start * stride, this._length * stride)\n        }\n\n        /**\n         * Rotate LEDs forward.\n         * You need to call ``show`` to make the changes visible.\n         * @param offset number of pixels to rotate forward, eg: 1\n         */\n        //% blockId=\"neopixel_rotate\" block=\"%strip|rotate pixels by %offset\" \n        //% weight=39 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        rotate(offset: number = 1): void {\n            offset = offset >> 0;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.rotate(-offset * stride, this.start * stride, this._length * stride)\n        }\n\n        /**\n         * Set the pin where the neopixel is connected, defaults to P0.\n         */\n        //% weight=10 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setPin(pin: DigitalPin): void {\n            this.pin = pin;\n            pins.digitalWritePin(this.pin, 0);\n            // don't yield to avoid races on initialization\n        }\n\n        private setBufferRGB(offset: number, red: number, green: number, blue: number): void {\n            if (this._mode === NeoPixelMode.RGB_RGB) {\n                this.buf[offset + 0] = red;\n                this.buf[offset + 1] = green;\n            } else {\n                this.buf[offset + 0] = green;\n                this.buf[offset + 1] = red;\n            }\n            this.buf[offset + 2] = blue;\n        }\n\n        private setAllRGB(rgb: number) {\n            let red = unpackR(rgb);\n            let green = unpackG(rgb);\n            let blue = unpackB(rgb);\n\n            const br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            const end = this.start + this._length;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            for (let i = this.start; i < end; ++i) {\n                this.setBufferRGB(i * stride, red, green, blue)\n            }\n        }\n        private setPixelRGB(pixeloffset: number, rgb: number): void {\n            if (pixeloffset < 0\n                || pixeloffset >= this._length)\n                return;\n\n            let stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            pixeloffset = (pixeloffset + this.start) * stride;\n\n            let red = unpackR(rgb);\n            let green = unpackG(rgb);\n            let blue = unpackB(rgb);\n\n            let br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            this.setBufferRGB(pixeloffset, red, green, blue)\n        }\n\n    }\n\n    /**\n     * Create a new NeoPixel driver for `numleds` LEDs.\n     * @param pin the pin where the neopixel is connected.\n     * @param numleds number of leds in the strip, eg: 24,30,60,64\n     */\n    //% blockId=\"neopixel_create\" block=\"NeoPixel at pin %Rjpin|with %numleds|leds as %mode\"\n    //% weight=90 color=#EA5532\n    //% parts=\"neopixel\"\n    //% trackArgs=0,2\n    //% blockSetVariable=strip subcategory=Neopixel\n    export function create(Rjpin: DigitalRJPin, numleds: number, mode: NeoPixelMode): Strip {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        let strip = new Strip();\n        let stride = mode === NeoPixelMode.RGBW ? 4 : 3;\n        strip.buf = pins.createBuffer(numleds * stride);\n        strip.start = 0;\n        strip._length = numleds;\n        strip._mode = mode;\n        strip._matrixWidth = 0;\n        strip.setBrightness(50)\n        strip.setPin(pin)\n        return strip;\n    }\n\n    /**\n     * Converts red, green, blue channels into a RGB color\n     * @param red value of the red channel between 0 and 255. eg: 255\n     * @param green value of the green channel between 0 and 255. eg: 255\n     * @param blue value of the blue channel between 0 and 255. eg: 255\n     */\n    //% weight=1 subcategory=Neopixel color=#EA5532\n    //% blockId=\"neopixel_rgb\" block=\"red %red|green %green|blue %blue\"\n    export function rgb(red: number, green: number, blue: number): number {\n        return packRGB(red, green, blue);\n    }\n\n    /**\n     * Gets the RGB value of a known color\n    */\n    //% weight=2 subcategory=Neopixel color=#EA5532\n    //% blockId=\"neopixel_colors\" block=\"%color\"\n    export function colors(color: NeoPixelColors): number {\n        return color;\n    }\n\n    function packRGB(a: number, b: number, c: number): number {\n        return ((a & 0xFF) << 16) | ((b & 0xFF) << 8) | (c & 0xFF);\n    }\n    function unpackR(rgb: number): number {\n        let r = (rgb >> 16) & 0xFF;\n        return r;\n    }\n    function unpackG(rgb: number): number {\n        let g = (rgb >> 8) & 0xFF;\n        return g;\n    }\n    function unpackB(rgb: number): number {\n        let b = (rgb) & 0xFF;\n        return b;\n    }\n\n    /**\n     * Converts a hue saturation luminosity value into a RGB color\n     * @param h hue from 0 to 360\n     * @param s saturation from 0 to 99\n     * @param l luminosity from 0 to 99\n     */\n    //% blockId=neopixelHSL block=\"hue %h|saturation %s|luminosity %l\" subcategory=Neopixel color=#EA5532\n    export function hsl(h: number, s: number, l: number): number {\n        h = Math.round(h);\n        s = Math.round(s);\n        l = Math.round(l);\n\n        h = h % 360;\n        s = Math.clamp(0, 99, s);\n        l = Math.clamp(0, 99, l);\n        let c = Math.idiv((((100 - Math.abs(2 * l - 100)) * s) << 8), 10000); //chroma, [0,255]\n        let h1 = Math.idiv(h, 60);//[0,6]\n        let h2 = Math.idiv((h - h1 * 60) * 256, 60);//[0,255]\n        let temp = Math.abs((((h1 % 2) << 8) + h2) - 256);\n        let x = (c * (256 - (temp))) >> 8;//[0,255], second largest component of this color\n        let r$:\n            number;\n        let g$:\n            number;\n        let b$:\n            number;\n        if (h1 == 0) {\n            r$ = c;\n            g$ = x;\n            b$ = 0;\n        }\n        else if (h1 == 1) {\n            r$ = x;\n            g$ = c;\n            b$ = 0;\n        }\n        else if (h1 == 2) {\n            r$ = 0;\n            g$ = c;\n            b$ = x;\n        }\n        else if (h1 == 3) {\n            r$ = 0;\n            g$ = x;\n            b$ = c;\n        }\n        else if (h1 == 4) {\n            r$ = x;\n            g$ = 0;\n            b$ = c;\n        }\n        else if (h1 == 5) {\n            r$ = c;\n            g$ = 0;\n            b$ = x;\n        }\n        let m = Math.idiv((Math.idiv((l * 2 << 8), 100) - c), 2);\n        let r = r$ + m;\n        let g = g$ + m;\n        let b = b$ + m;\n        return packRGB(r, g, b);\n    }\n\n    export enum HueInterpolationDirection {\n        Clockwise,\n        CounterClockwise,\n        Shortest\n    }\n}\n","planetxbasic.ts":"/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#00B1ED  icon=\"\\uf005\" block=\"Connected\" blockId=\"PlanetX_Connected\"\n//% groups='[\"Digital\", \"Analog\", \"IIC Port\"]'\nnamespace Connected {\n    \n    ////////////////////////paj7620//////////////////////\n    let gesture_first_init = true\n    const initRegisterArray: number[] = [\n        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17,\n        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F,\n        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14,\n        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27,\n        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01,\n        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00,\n        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20,\n        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37,\n        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A,\n        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F,\n        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30,\n        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19,\n        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04,\n        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00,\n        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00,\n        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F,\n        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07,\n        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01,\n        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F,\n        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01,\n        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40,\n        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E,\n        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00,\n        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08,\n        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00,\n        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01,\n        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01,\n        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01\n    ];\n    \n    /////////////////////////color/////////////////////////\n    const APDS9960_ADDR = 0x39\n    const APDS9960_ENABLE = 0x80\n    const APDS9960_ATIME = 0x81\n    const APDS9960_CONTROL = 0x8F\n    const APDS9960_STATUS = 0x93\n    const APDS9960_CDATAL = 0x94\n    const APDS9960_CDATAH = 0x95\n    const APDS9960_RDATAL = 0x96\n    const APDS9960_RDATAH = 0x97\n    const APDS9960_GDATAL = 0x98\n    const APDS9960_GDATAH = 0x99\n    const APDS9960_BDATAL = 0x9A\n    const APDS9960_BDATAH = 0x9B\n    const APDS9960_GCONF4 = 0xAB\n    const APDS9960_AICLEAR = 0xE7\n    let color_first_init = false\n\n    function i2cwrite_color(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n    function i2cread_color(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n    function rgb2hsl(color_r: number, color_g: number, color_b: number): number {\n        let Hue = 0\n        let R = color_r * 100 / 255;\n        let G = color_g * 100 / 255;\n        let B = color_b * 100 / 255;\n        let maxVal = Math.max(R, Math.max(G, B))\n        let minVal = Math.min(R, Math.min(G, B))\n        let Delta = maxVal - minVal;\n\n        if (Delta < 0) {\n            Hue = 0;\n        }\n        else if (maxVal == R && G >= B) {\n            Hue = (60 * ((G - B) * 100 / Delta)) / 100;\n        }\n        else if (maxVal == R && G < B) {\n            Hue = (60 * ((G - B) * 100 / Delta) + 360 * 100) / 100;\n        }\n        else if (maxVal == G) {\n            Hue = (60 * ((B - R) * 100 / Delta) + 120 * 100) / 100;\n        }\n        else if (maxVal == B) {\n            Hue = (60 * ((R - G) * 100 / Delta) + 240 * 100) / 100;\n        }\n        return Hue\n    }\n    function initModule(): void {\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ATIME, 252)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_CONTROL, 0x03)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_GCONF4, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_AICLEAR, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x01)\n        color_first_init = true\n    }\n    function colorMode(): void {\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_ENABLE) | 0x2;\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, tmp);\n    }\n\n    ///////////////////////////////////////////////////////MP3\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    /*\n    * Play status selection button list\n    */\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(100)\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,        \n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum Distance_Unit_List {\n        //% block=\"cm\" \n        Distance_Unit_cm,\n\n        //% block=\"foot\"\n        Distance_Unit_foot,\n    }\n    export enum ButtonStateList {\n        //% block=\"C\"\n        C,\n        //% block=\"D\"\n        D,\n        //% block=\"C+D\"\n        CD\n    }\n    export enum GestureType {\n        //% block=\"None\"\n        None = 0,\n        //% block=\"Right\"\n        Right = 1,\n        //% block=\"Left\"\n        Left = 2,\n        //% block=\"Up\"\n        Up = 3,\n        //% block=\"Down\"\n        Down = 4,\n        //% block=\"Forward\"\n        Forward = 5,\n        //% block=\"Backward\"\n        Backward = 6,\n        //% block=\"Clockwise\"\n        Clockwise = 7,\n        //% block=\"Anticlockwise\"\n        Anticlockwise = 8,\n        //% block=\"Wave\"\n        Wave = 9\n    }\n    export enum ColorList {\n        //% block=\"Red\"\n        red,\n        //% block=\"Green\"\n        green,\n        //% block=\"Blue\"\n        blue,\n        //% block=\"Cyan\"\n        cyan,\n        //% block=\"Magenta\"\n        magenta,\n        //% block=\"Yellow\"\n        yellow,\n        //% block=\"White\"\n        white\n    }\n\n    ///////////////////////////////////blocks/////////////////////////////\n\n    //% blockId=\"readwaterLevel\" block=\"Water level sensor %Rjpin value(0~100)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function waterLevel(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let voltage = 0, waterlevel = 0;\n        voltage = pins.map(\n            pins.analogReadPin(pin),\n            50,\n            600,\n            0,\n            100\n        );\n        if (voltage < 0) {\n            voltage = 0\n        }\n        waterlevel = voltage;\n        return Math.round(waterlevel)\n    }\n\n    let distance_last = 0\n\n    //% blockId=sonarbit block=\"Ultrasonic sensor pinT %tPin pinE %ePin distance %distance_unit\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% distance_unit.fieldEditor=\"gridpicker\"\n    //% distance_unit.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function ultrasoundSensor(tPin: DigitalPin, ePin: DigitalPin, distance_unit: Distance_Unit_List): number {\n        let pinT = tPin\n        let pinE = ePin\n        pins.setPull(pinT, PinPullMode.PullNone)\n        pins.digitalWritePin(pinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(pinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(pinT, 0)\n\n        // read pulse\n        let d = pins.pulseIn(pinE, PulseValue.High, 25000)\n        let version = control.hardwareVersion()\n        let distance = d * 34 / 2 / 1000\n        if (version == \"1\") {\n            distance = distance * 3 / 2\n        }\n\n        if (distance > 430) {\n            distance = 0\n        }\n\n        if (distance == 0) {\n            distance = distance_last\n            distance_last = 0\n        }\n        else {\n            distance_last = distance\n        }\n\n        switch (distance_unit) {\n            case Distance_Unit_List.Distance_Unit_cm:\n                return Math.floor(distance)  //cm\n                break\n            case Distance_Unit_List.Distance_Unit_foot:\n                return Math.floor(distance / 30.48)   //foot\n                break\n            default:\n                return 0\n        }\n    }\n\n    export class PAJ7620 {\n        private paj7620WriteReg(addr: number, cmd: number) {\n            let buf: Buffer = pins.createBuffer(2);\n            buf[0] = addr;\n            buf[1] = cmd;\n            pins.i2cWriteBuffer(0x73, buf, false);\n        }\n        private paj7620ReadReg(addr: number): number {\n            let buf: Buffer = pins.createBuffer(1);\n            buf[0] = addr;\n            pins.i2cWriteBuffer(0x73, buf, false);\n            buf = pins.i2cReadBuffer(0x73, 1, false);\n            return buf[0];\n        }\n        private paj7620SelectBank(bank: number) {\n            if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n        }\n        private paj7620Init() {\n            let temp = 0;\n            this.paj7620SelectBank(0);\n            temp = this.paj7620ReadReg(0);\n            if (temp == 0x20) {\n                for (let i = 0; i < 438; i += 2) {\n                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n                }\n            }\n            this.paj7620SelectBank(0);\n        }\n        init() {\n            this.paj7620Init();\n            basic.pause(200);\n        }\n        read(): number {\n            let data = 0, result = 0;\n            data = this.paj7620ReadReg(0x43);\n            switch (data) {\n                case 0x01:\n                    result = GestureType.Right;\n                    break;\n                case 0x02:\n                    result = GestureType.Left;\n                    break;\n                case 0x04:\n                    result = GestureType.Up;\n                    break;\n                case 0x08:\n                    result = GestureType.Down;\n                    break;\n                case 0x10:\n                    result = GestureType.Forward;\n                    break;\n                case 0x20:\n                    result = GestureType.Backward;\n                    break;\n                case 0x40:\n                    result = GestureType.Clockwise;\n                    break;\n                case 0x80:\n                    result = GestureType.Anticlockwise;\n                    break;\n                default:\n                    data = this.paj7620ReadReg(0x44);\n                    if (data == 0x01)\n                        result = GestureType.Wave;\n                    break;\n            }\n            return result;\n        }\n    }\n    const gestureEventId = 3100;\n    let lastGesture = GestureType.None;\n    let paj7620 = new PAJ7620();\n    //% blockId= gesture_create_event block=\"Gesture sensor IIC port is %gesture\"\n    //% gesture.fieldEditor=\"gridpicker\" gesture.fieldOptions.columns=3\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function onGesture(gesture: GestureType, handler: () => void) {\n        control.onEvent(gestureEventId, gesture, handler);\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        control.inBackground(() => {\n            while (true) {\n                const gesture = paj7620.read();\n                if (gesture != lastGesture) {\n                    lastGesture = gesture;\n                    control.raiseEvent(gestureEventId, lastGesture);\n                }\n                basic.pause(200);\n            }\n        })\n    }\n\n    //% blockId= gesture_get_event block=\"Gesture sensor IIC port detects\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function getGesture(): number {\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        const gesture = paj7620.read();\n        return gesture\n    }\n\n\n\n\n    //% blockId=apds9960_readcolor block=\"Color sensor IIC port color HUE(0~360)\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readColor(): number {\n        if (color_first_init == false) {\n            initModule()\n            colorMode()\n        }\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        while (!tmp) {\n            basic.pause(5);\n            tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        }\n        let c = i2cread_color(APDS9960_ADDR, APDS9960_CDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_CDATAH) * 256;\n        let r = i2cread_color(APDS9960_ADDR, APDS9960_RDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_RDATAH) * 256;\n        let g = i2cread_color(APDS9960_ADDR, APDS9960_GDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_GDATAH) * 256;\n        let b = i2cread_color(APDS9960_ADDR, APDS9960_BDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_BDATAH) * 256;\n        // map to rgb based on clear channel\n        let avg = c / 3;\n        r = r * 255 / avg;\n        g = g * 255 / avg;\n        b = b * 255 / avg;\n        //let hue = rgb2hue(r, g, b);\n        let hue = rgb2hsl(r, g, b)\n        return hue\n    }\n    //% block=\"Color sensor IIC port detects %color\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% color.fieldEditor=\"gridpicker\" color.fieldOptions.columns=3\n    export function checkColor(color: ColorList): boolean {\n        let hue = readColor()\n        switch (color) {\n            case ColorList.red:\n                if (hue > 330 || hue < 20) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.green:\n                if (hue > 120 && 180 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.blue:\n                if (hue > 210 && 270 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.cyan:\n                if (hue > 190 && 210 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.magenta:\n                if (hue > 260 && 330 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.yellow:\n                if (hue > 30 && 120 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.white:\n                if (hue >= 180 && 190 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n        }\n    }\n\n    //% blockId=\"potentiometer\" block=\"Trimpot %Rjpin analog value\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Input color=#E2C438 group=\"Analog\"\n    export function trimpot(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        return pins.analogReadPin(pin)\n    }\n    //% blockId=buttonab block=\"Button %Rjpin %button is pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonCD(Rjpin: DigitalRJPin, button: ButtonStateList): boolean {\n        let pinC = DigitalPin.P1\n        let pinD = DigitalPin.P2\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pinC = DigitalPin.P1\n                pinD = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pinC = DigitalPin.P2\n                pinD = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pinC = DigitalPin.P13\n                pinD = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pinC = DigitalPin.P15\n                pinD = DigitalPin.P16\n                break;\n            case DigitalRJPin.P3:\n                pinC = DigitalPin.P3\n                pinD = DigitalPin.P4\n                break;\n        }\n        pins.setPull(pinC, PinPullMode.PullUp)\n        pins.setPull(pinD, PinPullMode.PullUp)\n        if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 0 && button == ButtonStateList.CD) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinC) == 0 && pins.digitalReadPin(pinD) == 1 && button == ButtonStateList.C) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 1 && button == ButtonStateList.D) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    export enum ButtonState {\n        //% block=\"on\"\n        on = 1,\n        //% block=\"off\"\n        off = 2\n    }\n\n    const buttonEventSource = 5000\n    const buttonEventValue = {\n        CD_pressed: ButtonState.on,\n        CD_unpressed: ButtonState.off\n    }\n\n    //% block=\"on button %Rjpin %button pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=4\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonEvent(Rjpin: DigitalRJPin, button: ButtonStateList, handler: () => void) {\n        let ButtonPin_C = DigitalPin.P1\n        let ButtonPin_D = DigitalPin.P2\n        let pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P0\n        let pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                ButtonPin_C = DigitalPin.P1\n                ButtonPin_D = DigitalPin.P8\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P1\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P8\n                break;\n            case DigitalRJPin.J2:\n                ButtonPin_C = DigitalPin.P2\n                ButtonPin_D = DigitalPin.P12\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P2\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P12\n                break;\n            case DigitalRJPin.J3:\n                ButtonPin_C = DigitalPin.P13\n                ButtonPin_D = DigitalPin.P14\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P13\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P14\n                break;\n            case DigitalRJPin.J4:\n                ButtonPin_C = DigitalPin.P15\n                ButtonPin_D = DigitalPin.P16\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P15\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P16\n                break;\n            case DigitalRJPin.P3:\n                ButtonPin_C = DigitalPin.P3\n                ButtonPin_D = DigitalPin.P4\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P3\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P4\n                break;\n        }\n        if (button == ButtonStateList.C) {\n            pins.setPull(ButtonPin_C, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_C, PinEventType.Edge)\n            control.onEvent(pinEventSource_C, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.D) {\n            pins.setPull(ButtonPin_D, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_D, PinEventType.Edge)\n            control.onEvent(pinEventSource_D, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.CD) {\n            loops.everyInterval(50, function () {\n                if (pins.digitalReadPin(ButtonPin_C) == 0 && pins.digitalReadPin(ButtonPin_D) == 0) {\n                    control.raiseEvent(buttonEventSource, buttonEventValue.CD_pressed)\n                }\n            })\n            control.onEvent(buttonEventSource, buttonEventValue.CD_pressed, handler)\n        }\n    }\n\n    //% blockId=fans block=\"Motor fan %Rjpin toggle to $fanstate || speed %speed \\\\%\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% fanstate.shadow=\"toggleOnOff\"\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    //% speed.min=0 speed.max=100\n    //% expandableArgumentMode=\"toggle\"\n    export function motorFan(Rjpin: DigitalRJPin, fanstate: boolean, speed: number = 100): void {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.J3:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.J4:\n                pin = AnalogPin.P15\n                break;\n        }\n        if (fanstate) {\n            pins.analogSetPeriod(pin, 100)\n            pins.analogWritePin(pin, Math.map(speed, 0, 100, 0, 1023))\n        }\n        else {\n            pins.analogWritePin(pin, 0)\n            speed = 0\n        }\n    }\n\n\n    //% blockId=\"setLoopFolder\" block=\"loop play all the MP3s in the folder:$folderNum\"\n    //% folderNum.defl=\"01\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setLoopFolder(folderNum: string): void {\n        CMD = 0x17\n        para1 = 0\n        para2 = parseInt(folderNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    //% blockId=\"folderPlay\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum || repeatList: $myAns\"\n    //% folderNum.defl=\"01\" fileNum.defl=\"001\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function folderPlay(folderNum: string, fileNum: string, myAns: boolean = false): void {\n        CMD = 0x0F\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        if (myAns)\n            execute(0x19)\n    }\n\n    //% blockId=\"playFolderFilePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFilePort(folderNum: string, fileNum: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFolderFileVolumePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum with volume:$theVolume usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" theVolume.defl=\"10\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFileVolumePort(folderNum: string, fileNum: string, theVolume: string, Rjpin: DigitalRJPin): void {\n        \n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        \n        let volume = parseInt(theVolume)\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(200)\n\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"volumePort\" \n    //% block=\"set MP3 volume:$theVolume usingPin:$Rjpin\"\n    //% theVolume.defl=\"10\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function volumePort(theVolume: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        let volume = parseInt(theVolume)\n        if (volume > 30) {\n            volume = 30\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(300)\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n\n\n    //% blockId=\"setTracking\" \n    //% block=\"play the mp3 in order of:%tracking || repeatList: $myAns\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% tracking.defl=1\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setTracking(tracking: number, myAns: boolean = false): void {\n        CMD = 0x03\n        para1 = 0x00\n        para2 = tracking\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        execute(0x0D)\n        if (myAns)\n            execute(0x19)\n    }\n    //% blockId=MP3execute block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=\"setVolume\" block=\"Set volume(0~25):%volume\"\n    //% volume.min=0 volume.max=25\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setVolume(volume: number): void {\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 0x06\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=MP3setPort block=\"Set the MP3 port to %Rjpin\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function MP3SetPort(Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        setVolume(25)\n    }\n}","notlegos.ts":"// NotLegos Blocks\n\n//% block=\"Not LEGOs\" color=#0031AF weight=1000 icon=\"\\uf3a5\"\n//% groups=['MP3\",'Display', 'Laser', 'others']\nnamespace notLegos {\n\n    // Variables for MP3 and Volume Pot\n    let isPot = false\n    let potPin = AnalogPin.P0\n    let mp3bits = 0\n    let mp3Apin = SerialPin.P0\n    let mp3Bpin = SerialPin.P0\n    let mp3Cpin = SerialPin.P0\n    let mp3Avolume = 1\n    let mp3Bvolume = 1\n    let mp3Cvolume = 1\n    let relativeCvolume = 1\n    let lastMP3bit = \"\"\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    let mp3musicPin:SerialPin\n    let mp3music = false\n    let mp3player = false\n    let mp3sfxPin = null\n    let mp3sfx = false\n    let mp3musicVol = 0\n    let mp3playerPin = null\n    let mp3playerVol = 0\n    let mp3sfxVol = 0\n\n    // String Arrays for Full Player Sound Sets and Shuffled Playlists Thereof\n    let PlayerAwaitingMusic: string[] = []\n    let PlayerFailure: string[] = []\n    let PlayerHurry: string[] = []\n    let PlayerIntro: string[] = []\n    let PlayerIntroMusic: string[] = []\n    let PlayerLevelMusic: string[] = []\n    let PlayerLost: string[] = []\n    let PlayerLostMusic: string[] = []\n    let PlayerName: string[] = []\n    let PlayerNay: string[] = []\n    let PlayerOuch: string[] = []\n    let PlayerReady: string[] = []\n    let PlayerSuccess: string[] = []\n    let PlayerTutorialMusic: string[] = []\n    let PlayerWon: string[] = []\n    let PlayerWonMusic: string[] = []\n    let PlayerYay: string[] = []\n    let PlaylistAwaitingMusic: string[] = []\n    let PlaylistCorrect: string[] = []\n    let PlaylistExplosion: string[] = []\n    let PlaylistFailure: string[] = []\n    let PlaylistFire: string[] = []\n    let PlaylistGhost: string[] = []\n    let PlaylistHurry: string[] = []\n    let PlaylistIncorrect: string[] = []\n    let PlaylistIntro: string[] = []\n    let PlaylistLost: string[] = []\n    let PlaylistName: string[] = []\n    let PlaylistNay: string[] = []\n    let PlaylistOuch: string[] = []\n    let PlaylistReady: string[] = []\n    let PlaylistSlash: string[] = []\n    let PlaylistSpark: string[] = []\n    let PlaylistSplash: string[] = []\n    let PlaylistSuccess: string[] = []\n    let PlaylistWon: string[] = []\n    let PlaylistYay: string[] = []\n\n    // Sound Strings - Global\n    let VoiceTracks = \"10_1_90_1.75|10_2_90_3.65|10_3_50_11.5|10_4_90_0|10_5_90_0|10_6_90_4.65|10_7_90_7.15|10_8_90_4.8|10_9_90_3.75|10_10_90_5.05|10_11_90_0|10_12_90_0|10_13_90_3|10_14_90_3|10_15_90_3|10_16_90_4|10_17_90_0|10_18_90_3|10_19_90_3|10_20_90_4|10_21_90_2|10_22_90_0|10_23_90_2|10_24_90_2|10_25_90_6|10_26_90_6|10_27_90_6|10_28_90_6|10_29_90_6|10_30_90_6|10_31_90_6|10_32_90_6|10_33_90_8|10_34_90_9|10_35_90_6|10_36_90_6|10_37_90_6|10_38_90_6|10_39_90_6|10_40_90_6\".split(\"|\")\n    let CorrectSFX = \"7_1_100_4|7_2_100_8|7_3_100_8|7_4_100_6|7_5_100_10|7_6_100_8|7_7_100_6|7_8_100_4|7_9_100_17|7_10_100_9|7_11_100_4|7_12_100_8|7_13_100_12|7_14_100_7|7_15_100_10|7_16_100_9|7_17_100_10|7_18_100_9|7_19_100_8|7_20_100_4|7_21_100_7|7_22_100_26|7_23_100_5|7_24_100_4|7_25_100_10|7_26_100_7|7_27_100_7|7_28_100_6|7_29_100_7|7_30_100_7|7_31_100_12|7_32_100_4|7_33_100_6|7_34_100_6|7_35_100_6|7_36_100_6|7_37_100_5|7_38_100_3|7_39_100_6|7_40_100_6|7_41_100_6|7_42_100_8|7_43_100_6|7_44_100_8|7_45_100_6|7_46_100_5|7_47_100_5|7_48_100_12|7_49_100_3|7_50_100_7|7_51_100_8|7_52_100_11|7_53_100_6|7_54_100_2|7_55_100_5|7_56_100_7|7_57_100_8|7_58_100_7|7_59_100_6|7_60_100_7|7_61_100_6|7_62_100_8|7_63_100_5|7_64_100_5|7_65_100_7|7_66_100_9|7_67_100_6|7_68_100_6|7_69_100_7|7_70_100_10|7_71_100_7|7_72_100_5|7_73_100_6|7_74_100_8|7_75_100_3|7_76_100_3|7_77_100_6|7_78_100_7|7_79_100_4|7_80_100_6|7_81_100_2|7_82_100_3|7_83_100_3|7_84_100_1|7_85_100_3|7_86_100_6|7_87_100_7|7_88_100_5|7_89_100_3|7_90_100_5|7_91_100_3|7_92_100_3|7_93_100_2|7_94_100_3|7_95_100_3|7_96_100_1|7_99_100_1|7_100_100_1|7_101_100_1|7_102_100_1|7_103_100_1|7_104_100_3|7_105_100_1|7_106_100_1|7_107_100_4|7_108_100_4|7_109_100_1|7_110_100_1|7_111_100_1|7_112_100_1|7_113_100_1|7_114_100_2|7_115_100_1|7_116_100_1|7_117_100_1|7_118_100_1\".split(\"|\")\n    let IncorrectSFX = \"8_1_100_6|8_2_100_5|8_3_100_3|8_4_100_5|8_5_100_7|8_6_100_6|8_7_100_4|8_8_100_1|8_9_100_3|8_10_100_4|8_11_100_3|8_12_100_3|8_13_100_6|8_14_100_3|8_15_100_1|8_16_100_1|8_17_100_1|8_18_100_1|8_19_100_0|8_20_100_0|8_21_100_5|8_22_100_4|8_23_100_3|8_24_100_7\".split(\"|\")\n    let AllSFX = \"9_1_100_4.754|9_2_100_4.336|9_3_100_5.172|9_4_100_4.806|9_5_100_4.754|9_6_100_1.536|9_7_100_2.136|9_8_100_1.896|9_9_100_2.592|9_10_100_0.936|9_11_100_1.008|9_12_100_0.312|9_13_100_1.44|9_14_100_1.8|9_15_100_1.992|9_16_100_1.104|9_17_100_1.08|9_18_100_0.912|9_19_100_0.528|9_20_100_0.72|9_21_100_0.672|9_22_100_0.696|9_23_100_0.6|9_24_100_0.576|9_25_100_1.44|9_26_100_1.8|9_27_100_1.464|9_28_100_0.432|9_29_100_0.312|9_30_100_2.112|9_31_100_0.648|9_32_100_0.384|9_33_100_2.352|9_34_100_1.8|9_35_100_1.608|9_36_100_0.648|9_37_100_0.768|9_38_100_0.552|9_39_100_0.48|9_40_100_1.032|9_41_100_0.456|9_42_100_0.384|9_43_100_0.552|9_44_100_0.432|9_45_100_0.216|9_46_100_0.624|9_47_100_1.248|9_48_100_1.104|9_49_100_1.248|9_50_100_0.648|9_51_100_0.456|9_53_100_5.256|9_54_100_2.328|9_55_100_4.992|9_56_100_1.776|9_57_100_2.28|9_58_100_0.504|9_59_100_0.984|9_60_100_0.984|9_61_100_0.504|9_62_100_1.632|9_63_100_0.288|9_64_100_0.192|9_65_100_0.168|9_66_100_0.288|9_67_100_0.288|9_68_100_0.312|9_69_100_0.72|9_70_100_0.672|9_71_100_0.648|9_72_100_0.648|9_73_100_1.632|9_74_100_1.416|9_75_100_1.248|9_76_100_0.48|9_77_100_0.36|9_78_100_0.216|9_79_100_0.576|9_80_100_0.731|9_81_100_1.128|9_82_100_2.184|9_83_100_0.744|9_84_100_0.6|9_85_100_1.152|9_86_100_1.68|9_87_100_1.32|9_88_100_0.528|9_89_100_0.36|9_90_100_0.792|9_91_100_2.496|9_92_100_1.8|9_93_100_1.8|9_94_100_0.744|9_95_100_1.776|9_96_100_5.544|9_97_100_0.432|9_98_100_2.064|9_99_100_0.744|9_100_100_0.696|9_101_100_1.776|9_102_100_0.12|9_103_100_0.168|9_104_100_0.96|9_105_100_0.96|9_106_100_2.04|9_107_100_3.984|9_108_100_1.608|9_109_100_3.528|9_110_100_0.456|9_111_100_0.696|9_112_100_1.632|9_113_100_2.232\".split(\"|\")\n    let GhostSFX = \"9_1_100_4.754|9_2_100_4.336|9_3_100_5.172|9_4_100_4.806\".split(\"|\")\n    let FireSFX = \"9_6_100_1.536|9_15_100_1.992|9_53_100_5.256|9_106_100_2.04\".split(\"|\")\n    let ExplosionSFX = \"9_77_100_0.36|9_101_100_1.776|9_109_100_3.528\".split(\"|\")\n    let SplashSFX = \"9_33_100_2.352|9_34_100_1.8\".split(\"|\")\n    let SparkSFX = \"9_5_100_4.754|9_51_100_0.456|9_85_100_1.152|9_86_100_1.68|9_111_100_0.696|9_112_100_1.632\".split(\"|\")\n    let SlashSFX = \"9_10_100_0.936|9_25_100_1.44|9_28_100_0.432|9_32_100_0.384|9_50_100_0.648|9_59_100_0.984|9_63_100_0.288|9_64_100_0.192|9_65_100_0.168|9_66_100_0.288|9_67_100_0.288|9_68_100_0.312|9_69_100_0.72|9_75_100_1.248|9_76_100_0.48|9_77_100_0.36|9_78_100_0.216|9_89_100_0.36\".split(\"|\")\n    \n    // Music Strings - Super Mario Brothers\n    let SMBIntroMusic = \"1_1_75_2.808|1_2_75_3.912|1_3_75_7.81|1_4_75_4.992|1_5_75_3.918|1_6_75_12.382|1_7_75_3.204|1_8_75_6.648|1_9_75_6.168|1_10_75_7.464|1_11_75_9.36|1_12_75_9.038|1_13_75_10.605|1_14_75_3.492|1_15_75_9.613|1_16_75_3.48|1_17_75_5.58|1_18_75_5.041|1_19_75_6.336|1_20_75_5.424|1_21_75_7.2|1_22_75_5.424|1_23_75_3.317|1_24_75_7.262|1_25_75_5.59|1_26_75_5.52|1_27_75_10.776|1_28_75_4.944|1_29_75_5.496|1_30_75_4.032|1_31_75_6.264|1_32_75_3.918|1_33_75_4.44|1_34_75_10.152|1_35_75_8.097|1_36_75_7.706|1_37_75_3.317|1_38_75_6.87|1_39_75_4.466|1_40_75_5.877|1_41_75_3.432|1_42_75_7.392|1_43_75_6.768|1_44_75_2.616|1_45_75_6.269|1_46_75_1.188|1_47_75_2.088|1_48_75_2.124|1_49_75_8.228|1_50_75_15.647|1_51_75_9.064|1_52_75_10.152|1_53_75_13.008|1_54_75_14.16|1_55_75_14.236|1_56_75_15.792|1_57_75_7.392|1_58_75_4.368|1_59_75_9.384|1_60_75_7.653|1_61_75_8.76|1_62_75_8.952|1_63_75_12.024|1_64_75_4.284|1_65_75_6.048|1_66_75_9.072|1_67_75_4.68|1_68_75_6.138|1_69_75_5.208|1_70_75_9.576|1_71_75_8.045|1_72_75_8.045|1_73_75_5.407|1_74_75_3.186\".split(\"|\")\n    let SMBTutorialMusic = \"2_1_65_36|2_2_65_40|2_3_65_41|2_4_65_46|2_5_65_50|2_6_65_51|2_7_65_59|2_8_65_63|2_9_65_64|2_10_65_65|2_11_65_66|2_12_65_67|2_13_65_68|2_14_65_69|2_15_65_76|2_16_65_80|2_17_65_84|2_18_65_90|2_19_65_92|2_20_65_100|2_21_65_103|2_22_65_105|2_23_65_112|2_24_65_113|2_25_65_123|2_26_65_138|2_27_65_142|2_28_65_144|2_29_65_156|2_30_65_158|2_31_65_120|2_32_65_120|2_33_65_120|2_34_65_120|2_35_65_120|2_36_65_120\".split(\"|\")\n    let SMBAwaitingMusic = \"3_1_100_64|3_2_100_211|3_3_100_185|3_4_100_185|3_5_100_182|3_6_100_114|3_7_100_181|3_8_100_103|3_9_100_303|3_10_100_21|3_11_100_235|3_12_100_121|3_13_100_203|3_14_100_119|3_15_100_206|3_16_100_146|3_17_100_237|3_18_100_210|3_19_100_160\".split(\"|\")\n    let SMBLevelMusic = \"4_1_100_128|4_3_100_142|4_5_100_111|4_6_100_141|4_9_100_126|4_11_100_132|4_15_100_119|4_16_100_146|4_18_100_120|4_20_100_143|4_22_100_142|4_23_100_112|4_24_100_138|4_25_100_139|4_26_100_111|4_27_100_116|4_28_100_129|4_31_100_98|4_32_100_146|4_33_100_177|4_34_100_82|4_36_100_160|4_38_100_180|4_39_100_211|4_41_100_134|4_42_100_183|4_43_100_124|4_44_100_261|4_45_100_91|4_46_100_138|4_49_100_207|4_50_100_41|4_51_100_180|4_52_100_202|4_53_100_194|4_56_100_209|4_57_100_195|4_58_100_180|4_60_100_198|4_61_100_180|4_63_100_78|4_66_100_139|4_67_100_224|4_68_100_180|4_73_100_180|4_76_100_180|4_77_100_196|4_78_100_113|4_82_100_180|4_83_100_123|4_84_100_180|4_86_100_126|4_93_100_121|4_97_100_59|4_98_100_180|4_99_100_180|4_100_100_118|4_101_100_156|4_102_100_180|4_103_100_70|4_104_100_216|4_105_100_140|4_106_100_180|4_107_100_147|4_108_100_147|4_109_100_180|4_110_100_158|4_111_100_180|4_112_100_80|4_113_100_152|4_114_100_127|4_116_100_122|4_118_100_106|4_123_100_143|4_124_100_36|4_125_100_164|4_127_100_282|4_128_100_311|4_129_100_123|4_130_100_187|4_131_100_62|4_132_100_180|4_133_100_130|4_134_100_112|4_135_100_105|4_139_100_126|4_141_100_176|4_142_100_135|4_143_100_126|4_144_100_144|4_145_100_140|4_146_100_133|4_149_100_167|4_150_100_120|4_151_100_180|4_155_100_226|4_157_100_164|4_158_100_144|4_159_100_104|4_161_100_180|4_162_100_87|4_163_100_126|4_164_100_118|4_165_100_194|4_166_100_135|4_167_100_50|4_168_100_109|4_169_100_180|4_170_100_133|4_171_100_180|4_172_100_91|4_173_100_138|4_176_100_120|4_177_100_81|4_178_100_150|4_179_100_153|4_180_100_104|4_181_100_112\".split(\"|\")\n    let SMBWonMusic = \"5_1_100_4|5_2_100_17|5_3_100_29|5_4_100_172|5_5_100_13|5_6_100_248|5_7_100_11|5_8_100_445|5_9_100_241|5_10_100_244|5_11_100_20|5_12_100_7|5_13_100_28|5_14_100_74|5_15_100_15|5_16_100_74|5_17_100_17|5_18_100_17|5_19_100_15|5_20_100_38|5_21_100_42|5_22_100_67|5_23_100_8|5_24_100_8|5_25_100_13|5_26_100_17|5_27_100_5|5_28_100_122|5_29_100_226|5_30_100_79\".split(\"|\")\n    let SMBLostMusic = \"6_1_100_87|6_2_100_31|6_3_100_196|6_4_100_65|6_5_100_4|6_6_100_23|6_7_100_65|6_8_100_62|6_9_100_78|6_10_100_6|6_11_100_162\".split(\"|\")\n    \n    // Player Strings - Mario\n    let MarioSoundString = \"A_21_1_100_1.5|A_21_2_100_1|I_21_3_100_3.3|A_21_4_100_1.9|A_21_5_100_2.1|I_21_6_100_1.8|I_21_7_100_1.8|R_21_8_100_0.6|R_21_9_100_1.3|R_21_10_100_1.1|R_21_11_100_0.6|R_21_12_100_0.8|R_21_13_100_1.6|R_21_14_100_1.3|R_21_15_100_1.2|R_21_16_100_1.1|R_21_17_100_1.3|R_21_18_100_1|Y_21_19_100_0.2|Y_21_20_100_0.2|Y_21_21_100_0.3|Y_21_22_100_0.5|Y_21_23_100_0.6|Y_21_24_100_0.6|Y_21_25_100_0.6|Y_21_26_100_0.6|Y_21_27_100_0.6|Y_21_28_100_0.6|Y_21_29_100_0.7|Y_21_30_100_0.7|Y_21_31_100_0.7|Y_21_32_100_0.7|Y_21_33_100_0.7|Y_21_34_100_0.8|Y_21_35_100_0.8|Y_21_36_100_0.8|Y_21_37_100_0.8|Y_21_38_100_0.8|Y_21_39_100_0.8|Y_21_40_100_0.9|Y_21_41_100_0.9|Y_21_42_100_0.9|Y_21_43_100_0.9|Y_21_44_100_0.9|Y_21_45_100_0.9|Y_21_46_100_0.9|Y_21_47_100_1|Y_21_48_100_1|Y_21_49_100_1|Y_21_50_100_1|Y_21_51_100_1.1|Y_21_52_100_1.1|Y_21_53_100_1.1|Y_21_54_100_1.2|Y_21_55_100_1.2|Y_21_56_100_1.2|Y_21_57_100_1.2|Y_21_58_100_1.3|Y_21_59_100_1.3|Y_21_60_100_1.3|Y_21_61_100_1.4|Y_21_62_100_1.4|S_21_63_100_1|S_21_64_100_1.6|S_21_65_100_1.7|S_21_66_100_1.7|S_21_67_100_1.9|S_21_68_100_2.1|S_21_69_100_2.2|S_21_70_100_2.4|S_21_71_100_2.4|S_21_72_100_2.5|W_21_73_100_1.8|W_21_74_100_2|W_21_75_100_2.2|W_21_76_100_2.6|W_21_77_100_2.9|O_21_78_100_0.6|O_21_79_100_0.4|O_21_80_100_0.4|O_21_81_100_1.1|O_21_82_100_1.5|O_21_83_100_0.8|O_21_84_100_0.7|O_21_85_100_0.8|O_21_86_100_0.9|O_21_87_100_1.3|O_21_88_100_0.5|O_21_89_100_1|O_21_90_100_1|O_21_91_100_0.4|O_21_92_100_0.5|O_21_93_100_0.9|O_21_94_100_0.4|O_21_95_100_0.4|N_21_96_100_1|N_21_97_100_1.1|N_21_98_100_1|N_21_99_100_0.6|N_21_100_100_0.9|N_21_101_100_1.4|N_21_102_100_1.7|N_21_103_100_1.3|N_21_104_100_0.6|N_21_105_100_1.4|N_21_106_100_0.8|N_21_107_100_1.1|N_21_108_100_1.1|N_21_109_100_0.8|N_21_110_100_1.7|N_21_111_100_2.4|I_21_112_100_0.8|I_21_113_100_0.9|F_21_114_100_1.1|F_21_115_100_2.5|F_21_116_100_2.5|F_21_117_100_1.4|L_21_118_100_3.4|L_21_119_100_3.5|L_21_120_100_4.4|L_21_121_100_1.5|H_21_122_100_44.4\"\n\n    // BLOCK - Set the Player's Sounds\n    //% blockId=nl_player_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% weight=101\n    //% block=\"Set player to $player\"\n    export function setSounds(player: string): void {\n        let theSound = \"\"\n        let thisLetter = \"\"\n        let series = \"\"\n        let soundStrings: string[] = []\n        if (player == \"Mario\") {\n            soundStrings = MarioSoundString.split(\"|\")\n            series = \"SMB\"\n        }\n        if (series == \"SMB\") {\n            PlayerIntroMusic = SMBIntroMusic\n            PlayerTutorialMusic = SMBTutorialMusic\n            PlayerAwaitingMusic = SMBAwaitingMusic\n            PlayerLevelMusic = SMBLevelMusic\n            PlayerWonMusic = SMBWonMusic\n            PlayerLostMusic = SMBLostMusic\n        }\n        for (let sString of soundStrings) {\n            thisLetter = sString.charAt(0)\n            theSound = sString.substr(2, sString.length - 2)\n            if (thisLetter == \"A\") {\n                PlayerName.push(theSound)\n            } else if (thisLetter == \"R\") {\n                PlayerReady.push(theSound)\n            } else if (thisLetter == \"Y\") {\n                PlayerYay.push(theSound)\n            } else if (thisLetter == \"I\") {\n                PlayerIntro.push(theSound)\n            } else if (thisLetter == \"N\") {\n                PlayerNay.push(theSound)\n            } else if (thisLetter == \"O\") {\n                PlayerOuch.push(theSound)\n            } else if (thisLetter == \"S\") {\n                PlayerSuccess.push(theSound)\n            } else if (thisLetter == \"F\") {\n                PlayerFailure.push(theSound)\n            } else if (thisLetter == \"W\") {\n                PlayerWon.push(theSound)\n            } else if (thisLetter == \"L\") {\n                PlayerLost.push(theSound)\n            } else if (thisLetter == \"H\") {\n                PlayerHurry.push(theSound)\n            }\n        }\n    }    \n    \n    // Internal Function - Take a Sound from a Playlist After Filling it from a Soundbank if it's Empty\n    function takeReplenish(Playlist: any[], Soundbank: any[]) {\n        let returnSound = \"\"\n        returnSound = \"\"\n        if (Playlist.length == 0) {\n            for (let index = 0; index <= Soundbank.length - 1; index++) {\n                if (index == 0) {\n                    Playlist.push(Soundbank[index])\n                } else if (index >= 1) {\n                    Playlist.insertAt(randint(0, index), Soundbank[index])\n                }\n            }\n        }\n        returnSound = Playlist.shift()\n        return returnSound\n    }\n\n    // BLOCK - Fetch a Sound of a Type from a Category\n    //% blockId=nl_get_soundstring\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% weight=101\n    //% block=\"Get $Category sound $Type\"\n    export function getSoundString(Category: string, Type: string): string {\n        let returnString = \"\"\n        if (Category == \"Voice\") {\n            returnString = VoiceTracks[parseFloat(Type)]\n        } else if (Category == \"Player\") {\n            if (Type == \"Name\") {\n                returnString = takeReplenish(PlaylistName, PlayerName)\n            } else if (Type == \"Intro\") {\n                returnString = takeReplenish(PlaylistIntro, PlayerIntro)\n            } else if (Type == \"Ready\") {\n                returnString = takeReplenish(PlaylistReady, PlayerReady)\n            } else if (Type == \"Yay\") {\n                returnString = takeReplenish(PlaylistYay, PlayerYay)\n            } else if (Type == \"Success\") {\n                returnString = takeReplenish(PlaylistSuccess, PlayerSuccess)\n            } else if (Type == \"Nay\") {\n                returnString = takeReplenish(PlaylistNay, PlayerNay)\n            } else if (Type == \"Failure\") {\n                returnString = takeReplenish(PlaylistFailure, PlayerFailure)\n            } else if (Type == \"Won\") {\n                returnString = takeReplenish(PlaylistWon, PlayerWon)\n            } else if (Type == \"Lost\") {\n                returnString = takeReplenish(PlaylistLost, PlayerLost)\n            } else if (Type == \"Hurry\") {\n                returnString = takeReplenish(PlaylistHurry, PlayerHurry)\n            }\n        } else if (Category == \"SFX\") {\n            if (Type == \"Correct\") {\n                returnString = takeReplenish(PlaylistCorrect, CorrectSFX)\n            } else if (Type == \"Incorrect\") {\n                returnString = takeReplenish(PlaylistIncorrect, IncorrectSFX)\n            } else if (Type == \"Ghost\") {\n                returnString = takeReplenish(PlaylistGhost, GhostSFX)\n            } else if (Type == \"Fire\") {\n                returnString = takeReplenish(PlaylistFire, FireSFX)\n            } else if (Type == \"Explosion\") {\n                returnString = takeReplenish(PlaylistExplosion, ExplosionSFX)\n            } else if (Type == \"Splash\") {\n                returnString = takeReplenish(PlaylistSplash, SplashSFX)\n            } else if (Type == \"Spark\") {\n                returnString = takeReplenish(PlaylistSpark, SparkSFX)\n            } else if (Type == \"Slash\") {\n                returnString = takeReplenish(PlaylistSlash, SlashSFX)\n            }\n        } else if (Category == \"Music\") {\n            if (Type == \"Intro\") {\n                let PlaylistIntroMusic: number[] = []\n                returnString = takeReplenish(PlaylistIntroMusic, PlayerIntroMusic)\n            } else if (Type == \"Tutorial\") {\n                let PlaylistTutorialMusic: number[] = []\n                returnString = takeReplenish(PlaylistTutorialMusic, PlayerTutorialMusic)\n            } else if (Type == \"Awaiting\") {\n                returnString = takeReplenish(PlaylistAwaitingMusic, PlayerAwaitingMusic)\n            } else if (Type == \"Level\") {\n                let PlaylistLevelMusic: number[] = []\n                returnString = takeReplenish(PlaylistLevelMusic, PlayerLevelMusic)\n            } else if (Type == \"Won\") {\n                let PlaylistWonMusic: number[] = []\n                returnString = takeReplenish(PlaylistWonMusic, PlayerWonMusic)\n            } else if (Type == \"Lost\") {\n                let PlaylistLostMusic: number[] = []\n                returnString = takeReplenish(PlaylistLostMusic, PlayerLostMusic)\n            }\n        }\n        return returnString\n    }\n\n\n    ///////////////////////////////////////////////////////MP3\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(20) // Was 100; problematic at 10\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n    function sendMP3volume(sPin: SerialPin): void {\n        let theVolume = 5\n        if (sPin == mp3Apin) {\n            theVolume = Math.round(potRead() * mp3Avolume)\n        } else if (sPin == mp3Bpin) {\n            theVolume = Math.round(potRead() * mp3Bvolume)\n        } else if (sPin == mp3Cpin) {\n            theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    function sendMP3volumeFast(sPin: SerialPin): void {\n        let theVolume = 5\n        if (sPin == mp3Apin) {\n            theVolume = Math.round(potRead() * mp3Avolume)\n        } else if (sPin == mp3Bpin) {\n            theVolume = Math.round(potRead() * mp3Bvolume)\n        } else if (sPin == mp3Cpin) {\n            theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    //% blockId=\"playFileFolderNl\" \n    //% block=\"Play folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n    function sendMP3playFolder(folderNum: string, fileNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    //% blockId=\"playFileNl\" \n    //% block=\"Play length of file:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n\n    export function playFile(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P16\n        stringParts = soundString.split(\"_\")\n        let theFile = stringParts[0]\n        let theVolume = stringParts[1]\n        let theLength = stringParts[2]\n        //sendMP3file(theFile, theVolume, sPin)\n        return parseFloat(theLength) * 1000\n    }\n\n\n\n    //% blockId=\"playFileNl2\" \n    //% block=\"Play2 length of file:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n\n    export function playFile2(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P16\n        stringParts = soundString.split(\"_\")\n        let theFile = stringParts[0]\n        let theVolume = stringParts[1]\n        let theLength = stringParts[2]\n        sendMP3file2(theFile, theVolume, sPin)\n        return parseFloat(theLength) * 1000\n    }\n    function sendMP3file2(fileNum: string, volumeNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 15\n        para1 = parseInt(fileNum)\n        para2 = parseInt(volumeNum)\n        para1 = parseInt(\"1\")\n        para2 = parseInt(\"1\")\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=nl_backgroundVolume\n    //% block=\"Set background volume to:%relativeVolume\"\n    //% subcategory=\"MP3\" group=\"MP3\"\n    export function sendBackgroundVolume(relativeVolume: number): void {\n        relativeCvolume = relativeVolume/100\n\n        let sPin = mp3Cpin\n        let theVolume = Math.round(potRead() * mp3Cvolume * relativeVolume / 100)\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=MP3execute2 block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n  \n    //% blockId=notlegos_pot_read\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Trimpot analog value\"\n    export function potRead() {\n        if(isPot){\n            return Math.round(pins.map(pins.analogReadPin(potPin), 0, 1023, 0, 30))\n        } else{\n            return 5\n        }\n    }\n\n    //% blockId=notlegos_relCread\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return background volume\"\n    export function getBackgroundVolume() {\n\n            return relativeCvolume\n\n    }\n    //% blockId=notlegos_mp3Avolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3A volume\"\n    export function getMP3AVolume() {\n        return potRead() * mp3Avolume\n    }\n    //% blockId=notlegos_mp3Bvolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3B volume\"\n    export function getMP3BVolume() {\n        return potRead() * mp3Bvolume\n    }\n      //% blockId=notlegos_mp3Cvolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3C volume\"\n    export function getMP3CVolume() {\n        return potRead() * mp3Cvolume * relativeCvolume\n    }\n\n    //% blockId=notlegos_pot_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Connect Volume Control Pot at pin %aPin\"\n    //% aPin.fieldEditor=\"gridpicker\"\n    export function potSet(aPin: AnalogPin): void{\n        potPin = aPin\n        isPot = true\n    }\n\n//////////////////////////////////////////////////////////\n\n    //% blockId=nl_mp3_init\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Ready MP3bit for %type at %sPin\"\n    //% dPin.fieldEditor=\"gridpicker\"\n    export function mp3setPorts(type:mp3type, sPin: SerialPin): void {\n        if (type == mp3type.music){\n            mp3musicPin = sPin\n            mp3music = true\n            mp3musicVol = 60\n        } else if (type == mp3type.player){\n            mp3playerPin = sPin\n            mp3player = true\n            mp3playerVol = 100\n        } else if (type == mp3type.sfxvoice){\n            mp3sfxPin = sPin\n            mp3sfx = true\n            mp3sfxVol = 80\n        }\n        sendMP3volumeQuick(type)\n    }\n\n    function sendMP3volumeQuick(bit:mp3type): void {\n        if (bit == mp3type.music){\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        }\n\n        let theVolume = 10\n        // if (sPin == mp3Apin) {\n        //     theVolume = Math.round(potRead() * mp3Avolume)\n        // } else if (sPin == mp3Bpin) {\n        //     theVolume = Math.round(potRead() * mp3Bvolume)\n        // } else if (sPin == mp3Cpin) {\n        //     theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        // }\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=\"nl_testfast\" \n    //% block=\"Execute track %track on %bit\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3testFast(track: number, bit:mp3type): void {\n        if (bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        }\n        CMD = 3\n        dataArr[3] = CMD\n        dataArr[5] = 0\n        dataArr[6] = track\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n\n    \n    //% blockId=nl_mp3_music\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %genre music\"\n    export function mp3musicPlay(genre:musicGenre): void{\n        serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 3\n        para1 = parseInt(\"0\")\n        para2 = parseInt(\"1\")\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n\n\n    \n\n    //% blockId=nl_mp3_say\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %saying as player\"\n    export function mp3sayPlay(saying: playerSaying): void {\n\n    }\n\n\n    //% blockId=nl_mp3_voice\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %voice as voice\"\n    export function mp3voicePlay(voice: voiceSaying): void {\n\n    }\n\n    //% blockId=nl_mp3_voice\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Magician says on the %side difficulty %difficulty\"\n    export function mp3magician(side:magicianSaysSide, difficulty:magicianDifficulty): void {\n\n    }\n\n    //% blockId=nl_mp3_voice\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %sfx sound effect\"\n    export function mp3sfxPlay(sfx: sfxType): void {\n\n    }\n\n\n    //% blockId=\"playFolderFile\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playFolderFile(folderNum: string, fileNum: string): void {\n    \n        if (mp3bits > 0) {\n            sendMP3volume(mp3Apin)\n        }\n        if (mp3bits > 1) {\n           // sendMP3volume(mp3Bpin)\n        }\n        if (mp3bits >0) {\n            //sendMP3play(folderNum, fileNum, mp3Apin)\n        }\n        if (mp3bits > 1) {\n          //  sendMP3play(folderNum, fileNum, mp3Bpin)\n        }\n    }\n\n    //% blockId=\"playsFor\" \n    //% block=\"Play length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsFor(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        if (mp3bits == 1) {\n            sPin = mp3Apin\n            mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        } else {\n            if (lastMP3bit == \"A\") {\n                    sPin = mp3Bpin\n                    mp3Bvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n                    lastMP3bit = \"B\"\n            } else {\n                sPin = mp3Apin\n                mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n            lastMP3bit = \"A\"\n            }\n        }\n        let theLength = stringParts[3]\n        sendMP3volume(sPin)\n        //sendMP3play(theFolder, theFile, sPin)\n        return parseFloat(theLength) * 1000 + 20\n    }\n\n    //% blockId=nl_volume_refresh\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume\"\n    export function updateVolume(): void {\n        if (mp3bits > 0) {\n            sendMP3volumeFast(mp3Apin)\n        }\n        if (mp3bits > 1) {\n            sendMP3volumeFast(mp3Bpin)\n        }\n        if (mp3bits > 2) {\n            sendMP3volumeFast(mp3Cpin)\n        }\n    }\n\n\n    //% blockId=\"nl_playsForTwo\" \n    //% block=\"Dual play length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsForTwo(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n\n        mp3Avolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        mp3Bvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n\n        sendMP3volumeFast(mp3Apin)\n        sendMP3volumeFast(mp3Bpin)\n        \n        basic.pause(20)\n\n        //sendMP3play(theFolder, theFile, mp3Apin)\n        //sendMP3play(theFolder, theFile, mp3Bpin)\n        \n        return parseFloat(theLength) * 1000 + 20\n    }\n\n\n    //% blockId=\"nl_playsForBackground\" \n    //% block=\"Play in background length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsForBackground(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n        mp3Cvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        sPin = mp3Cpin\n        sendMP3volume(sPin)\n        //sendMP3play(theFolder, theFile, sPin)\n        return parseFloat(theLength) * 1000 + 20\n    }\n\n\n    //% blockId=\"nl_playBackground\" \n    //% block=\"Play in background:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playBackground(soundString: string): void {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n        mp3Cvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        sPin = mp3Cpin\n        sendMP3volume(sPin)\n        //sendMP3play(theFolder, theFile, sPin)\n    }\n\n\n    //% blockId=\"nl_backgroundStop\" \n    //% block=\"Stop background sound\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function stopBackgroundSound(): void {\n        serial.redirect(mp3Cpin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 0x16\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    // Nezha - Functions for Pins and Ports\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_Serial(Rjpin: DigitalRJPin): any {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = SerialPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = SerialPin.P2\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.P12:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = SerialPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = SerialPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n\n\n    export enum mp3type {\n        music,\n        player,\n        sfxvoice\n    }\n\n    export enum musicGenre {\n        intro,\n        tutorial,\n        awaiting,\n        level,\n        won,\n        lost\n    }\n\n    export enum playerSaying {\n        ready,\n        yay,\n        intro,\n        nay,\n        ouch,\n        success,\n        failure,\n        won,\n        lost,\n        hurry\n    }\n\n    export enum sfxType {\n        correct,\n        incorrect,\n        ghost,\n        fire,\n        explosion,\n        splash,\n        spark,\n        slash\n    }\n\n    export enum voiceSaying {\n        name,\n        begin,\n        retry,\n        next,\n        complete,\n        gameover,\n        welcome,\n        intro,\n        howto1,\n        howto2,\n        howto3,\n        howto4,\n        howto5,\n        howto6,\n        howto7,\n        howto8,\n        howto9\n    }\n\n    export enum magicianSaysSide {\n        left,\n        right\n    }\n\n    export enum magicianDifficulty {\n        easy,\n        medium,\n        hard\n    }\n\n    export enum spotName {\n        A,\n        B,\n        C,\n        D,\n        E,\n        F,\n        G,\n        H,\n        I\n    }\n\n    export enum playerChar {\n        mario,\n        luigi,\n        peach,\n        daisy,\n        toad,\n        wario\n    }\n\n\n\n\n\n    // Enum - To Support MP3\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n\n    // Enum - Nezha and Pins\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum mbPin {\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1 (Analog J1)\"\n        P1,\n        //% block=\"P2 (Analog J2)\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8 (J1)\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12 (J2)\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14 (J3)\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16 (J4)\"\n        P16,\n    }\n}\n","pxt.json":"{\n    \"name\": \"NotLegosExt\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"displaySendBuffer.asm\",\n        \"display.ts\",\n        \"planetxbasic.ts\",\n        \"notlegos.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"7.0.42\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","test.ts":""}},{"timestamp":1726951966107,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"gX}3[UJe6C9wl9p+Uoj=\">digits</variable><variable id=\"vSl89nNM7#y}HO_i4w8g\">sockLights</variable><variable id=\"kx-+|q2cYu;$^R?pYwdZ\">wheelLights</variable><variable id=\"zVo^^v6=8Jgq7FyFiNOV\">scoreCircle</variable></variables><block type=\"device_button_event\" x=\"749\" y=\"-246\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl2\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">1_1_25_100</field></shadow></value></block></value></block></statement></block><block type=\"device_button_event\" x=\"1290\" y=\"-246\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"playFileNl\"><value name=\"soundString\"><shadow type=\"text\"><field name=\"TEXT\">2_1_1</field></shadow></value></block></value></block></statement></block><block type=\"every_interval\" x=\"1773\" y=\"-246\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value><statement name=\"HANDLER\"><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P2</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\"><field name=\"pin\">AnalogReadWritePin.P3</field></shadow></value></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation><field name=\"SLIDER\">2</field></shadow></value><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">hue </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"apds9960_readcolor\"></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation><field name=\"SLIDER\">3</field></shadow></value><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">distance </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"sonarbit\"><field name=\"tPin\">DigitalPin.P8</field><field name=\"ePin\">DigitalPin.P9</field><field name=\"distance_unit\">Connected.Distance_Unit_List.Distance_Unit_cm</field></block></value></block></value><next><block type=\"Connected_showUserText\"><value name=\"line\"><shadow type=\"math_number_minmax\"><mutation min=\"1\" max=\"8\" precision=\"0\"></mutation><field name=\"SLIDER\">4</field></shadow></value><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">gesture </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"Connected_getGesture\"></block></value></block></value></block></next></block></next></block></next></block></statement></block><block type=\"pxt-on-start\" x=\"38\" y=\"56\"><statement name=\"HANDLER\"><block type=\"Connected_oledClear\"><next><block type=\"pin_set_audio_pin_enabled\"><value name=\"enabled\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow></value><next><block type=\"device_led_enable\"><value name=\"on\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"gX}3[UJe6C9wl9p+Uoj=\">digits</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"grove_tm1637_create\"><field name=\"cPin\">DigitalPin.P7</field><field name=\"dPin\">DigitalPin.P6</field></block></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"vSl89nNM7#y}HO_i4w8g\">sockLights</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P11</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"vSl89nNM7#y}HO_i4w8g\">sockLights</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"vSl89nNM7#y}HO_i4w8g\">sockLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"kx-+|q2cYu;$^R?pYwdZ\">wheelLights</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P12</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">18</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"kx-+|q2cYu;$^R?pYwdZ\">wheelLights</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"kx-+|q2cYu;$^R?pYwdZ\">wheelLights</field></block></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"zVo^^v6=8Jgq7FyFiNOV\">scoreCircle</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"neopixel_create\"><field name=\"Rjpin\">Connected.DigitalRJPin.P13</field><field name=\"mode\">Connected.NeoPixelMode.RGB</field><value name=\"numleds\"><shadow type=\"math_number\"><field name=\"NUM\">8</field></shadow></value></block></value><next><block type=\"neopixel_set_strip_color\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"zVo^^v6=8Jgq7FyFiNOV\">scoreCircle</field></block></value><value name=\"rgb\"><shadow type=\"neopixel_colors\"><field name=\"color\">Connected.NeoPixelColors.Blue</field></shadow></value><next><block type=\"neopixel_show\"><value name=\"strip\"><block type=\"variables_get\"><field name=\"VAR\" id=\"zVo^^v6=8Jgq7FyFiNOV\">scoreCircle</field></block></value><next><block type=\"nl_mp3_init\"><field name=\"type\">notLegos.mp3type.music</field><field name=\"sPin\">SerialPin.P15</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow></value><next><block type=\"nl_playfilefolder\"><field name=\"sPin\">SerialPin.P15</field><value name=\"folderNum\"><shadow type=\"text\"><field name=\"TEXT\">001</field></shadow></value><value name=\"fileNum\"><shadow type=\"text\"><field name=\"TEXT\">005</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"device_pause\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"787\" y=\"602\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">100</field></shadow><block type=\"playFileNl2\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"soundString\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">1_1_25_100</field></shadow></value></block></value></block><block type=\"MP3setPort\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1351\" y=\"768\"><field name=\"Rjpin\">Connected.DigitalRJPin.P16</field><next><block type=\"setTracking\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"tracking\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value><value name=\"myAns\"><shadow type=\"toggleYesNo\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"yes\">false</field></shadow></value></block></next></block><block type=\"MP3execute\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"542\" y=\"842\"><field name=\"myType\">Connected.playType.Play</field></block><block type=\"nl_testfast\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"879\" y=\"987\"><field name=\"bit\">notLegos.mp3type.music</field><value name=\"track\"><block type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">4</field></block></value></block><block type=\"nl_mp3_music\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"634\" y=\"1118\"><field name=\"genre\">notLegos.musicGenre.intro</field></block><block type=\"function_definition\" x=\"424\" y=\"1220\"><mutation name=\"isNearly\" functionid=\"F!?G,}0W~mK0q6yxa@)+\"><arg name=\"reference\" id=\"askt0gw7ps42l4j5s8lq\" type=\"number\"></arg><arg name=\"reading\" id=\"pvzp6d6plvrvf0vwcgka\" type=\"number\"></arg><arg name=\"tolerance\" id=\"ai8znl3rpzvjckud4rk3\" type=\"number\"></arg></mutation><field name=\"function_name\">isNearly</field><value name=\"askt0gw7ps42l4j5s8lq\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reference</field></block></value><value name=\"pvzp6d6plvrvf0vwcgka\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">reading</field></block></value><value name=\"ai8znl3rpzvjckud4rk3\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">tolerance</field></block></value><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_operation\"><field name=\"OP\">AND</field><value name=\"A\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">GTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">LTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reading</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">ADD</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">reference</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">tolerance</field></block></value></block></value></block></value></block></value><statement name=\"DO0\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></block></value></block></statement><statement name=\"ELSE\"><block type=\"function_return\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></block></value></block></statement></block></statement></block></xml>","main.ts":"","README.md":"\n> Open this page at [https://notlegos.github.io/castleresay/](https://notlegos.github.io/castleresay/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/castleresay** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/castleresay** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/soundbank/](https://notlegos.github.io/soundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/soundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/soundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/resoundbank/](https://notlegos.github.io/resoundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/resoundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/resoundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosext/](https://notlegos.github.io/notlegosext/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosext** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosext** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","displaySendBuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n","display.ts":"\n/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#EA5532 icon=\"\\uf110\" block=\"Connected\" blockId=\"PlanetX_Connected\" \n//% groups='[\"LED\", \"Digital\", \"Analog\", \"IIC Port\", \"OLED\", \"7-Seg 4-Dig LED Nixietube\"]'\nnamespace Connected {\n    ////////////////////////////////TM 1637/////////////////\n    let TM1637_CMD1 = 0x40;\n    let TM1637_CMD2 = 0xC0;\n    let TM1637_CMD3 = 0x80;\n    let _SEGMENTS = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];\n    /////////////////////OLED///////////////////////////////\n    let firstoledinit = true\n    const basicFont: string[] = [\n        \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\", // \" \"\n        \"\\x00\\x00\\x5F\\x00\\x00\\x00\\x00\\x00\", // \"!\"\n        \"\\x00\\x00\\x07\\x00\\x07\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x14\\x7F\\x14\\x7F\\x14\\x00\\x00\", // \"#\"\n        \"\\x00\\x24\\x2A\\x7F\\x2A\\x12\\x00\\x00\", // \"$\"\n        \"\\x00\\x23\\x13\\x08\\x64\\x62\\x00\\x00\", // \"%\"\n        \"\\x00\\x36\\x49\\x55\\x22\\x50\\x00\\x00\", // \"&\"\n        \"\\x00\\x00\\x05\\x03\\x00\\x00\\x00\\x00\", // \"'\"\n        \"\\x00\\x1C\\x22\\x41\\x00\\x00\\x00\\x00\", // \"(\"\n        \"\\x00\\x41\\x22\\x1C\\x00\\x00\\x00\\x00\", // \")\"\n        \"\\x00\\x08\\x2A\\x1C\\x2A\\x08\\x00\\x00\", // \"*\"\n        \"\\x00\\x08\\x08\\x3E\\x08\\x08\\x00\\x00\", // \"+\"\n        \"\\x00\\xA0\\x60\\x00\\x00\\x00\\x00\\x00\", // \",\"\n        \"\\x00\\x08\\x08\\x08\\x08\\x08\\x00\\x00\", // \"-\"\n        \"\\x00\\x60\\x60\\x00\\x00\\x00\\x00\\x00\", // \".\"\n        \"\\x00\\x20\\x10\\x08\\x04\\x02\\x00\\x00\", // \"/\"\n        \"\\x00\\x3E\\x51\\x49\\x45\\x3E\\x00\\x00\", // \"0\"\n        \"\\x00\\x00\\x42\\x7F\\x40\\x00\\x00\\x00\", // \"1\"\n        \"\\x00\\x62\\x51\\x49\\x49\\x46\\x00\\x00\", // \"2\"\n        \"\\x00\\x22\\x41\\x49\\x49\\x36\\x00\\x00\", // \"3\"\n        \"\\x00\\x18\\x14\\x12\\x7F\\x10\\x00\\x00\", // \"4\"\n        \"\\x00\\x27\\x45\\x45\\x45\\x39\\x00\\x00\", // \"5\"\n        \"\\x00\\x3C\\x4A\\x49\\x49\\x30\\x00\\x00\", // \"6\"\n        \"\\x00\\x01\\x71\\x09\\x05\\x03\\x00\\x00\", // \"7\"\n        \"\\x00\\x36\\x49\\x49\\x49\\x36\\x00\\x00\", // \"8\"\n        \"\\x00\\x06\\x49\\x49\\x29\\x1E\\x00\\x00\", // \"9\"\n        \"\\x00\\x00\\x36\\x36\\x00\\x00\\x00\\x00\", // \":\"\n        \"\\x00\\x00\\xAC\\x6C\\x00\\x00\\x00\\x00\", // \";\"\n        \"\\x00\\x08\\x14\\x22\\x41\\x00\\x00\\x00\", // \"<\"\n        \"\\x00\\x14\\x14\\x14\\x14\\x14\\x00\\x00\", // \"=\"\n        \"\\x00\\x41\\x22\\x14\\x08\\x00\\x00\\x00\", // \">\"\n        \"\\x00\\x02\\x01\\x51\\x09\\x06\\x00\\x00\", // \"?\"\n        \"\\x00\\x32\\x49\\x79\\x41\\x3E\\x00\\x00\", // \"@\"\n        \"\\x00\\x7E\\x09\\x09\\x09\\x7E\\x00\\x00\", // \"A\"\n        \"\\x00\\x7F\\x49\\x49\\x49\\x36\\x00\\x00\", // \"B\"\n        \"\\x00\\x3E\\x41\\x41\\x41\\x22\\x00\\x00\", // \"C\"\n        \"\\x00\\x7F\\x41\\x41\\x22\\x1C\\x00\\x00\", // \"D\"\n        \"\\x00\\x7F\\x49\\x49\\x49\\x41\\x00\\x00\", // \"E\"\n        \"\\x00\\x7F\\x09\\x09\\x09\\x01\\x00\\x00\", // \"F\"\n        \"\\x00\\x3E\\x41\\x41\\x51\\x72\\x00\\x00\", // \"G\"\n        \"\\x00\\x7F\\x08\\x08\\x08\\x7F\\x00\\x00\", // \"H\"\n        \"\\x00\\x41\\x7F\\x41\\x00\\x00\\x00\\x00\", // \"I\"\n        \"\\x00\\x20\\x40\\x41\\x3F\\x01\\x00\\x00\", // \"J\"\n        \"\\x00\\x7F\\x08\\x14\\x22\\x41\\x00\\x00\", // \"K\"\n        \"\\x00\\x7F\\x40\\x40\\x40\\x40\\x00\\x00\", // \"L\"\n        \"\\x00\\x7F\\x02\\x0C\\x02\\x7F\\x00\\x00\", // \"M\"\n        \"\\x00\\x7F\\x04\\x08\\x10\\x7F\\x00\\x00\", // \"N\"\n        \"\\x00\\x3E\\x41\\x41\\x41\\x3E\\x00\\x00\", // \"O\"\n        \"\\x00\\x7F\\x09\\x09\\x09\\x06\\x00\\x00\", // \"P\"\n        \"\\x00\\x3E\\x41\\x51\\x21\\x5E\\x00\\x00\", // \"Q\"\n        \"\\x00\\x7F\\x09\\x19\\x29\\x46\\x00\\x00\", // \"R\"\n        \"\\x00\\x26\\x49\\x49\\x49\\x32\\x00\\x00\", // \"S\"\n        \"\\x00\\x01\\x01\\x7F\\x01\\x01\\x00\\x00\", // \"T\"\n        \"\\x00\\x3F\\x40\\x40\\x40\\x3F\\x00\\x00\", // \"U\"\n        \"\\x00\\x1F\\x20\\x40\\x20\\x1F\\x00\\x00\", // \"V\"\n        \"\\x00\\x3F\\x40\\x38\\x40\\x3F\\x00\\x00\", // \"W\"\n        \"\\x00\\x63\\x14\\x08\\x14\\x63\\x00\\x00\", // \"X\"\n        \"\\x00\\x03\\x04\\x78\\x04\\x03\\x00\\x00\", // \"Y\"\n        \"\\x00\\x61\\x51\\x49\\x45\\x43\\x00\\x00\", // \"Z\"\n        \"\\x00\\x7F\\x41\\x41\\x00\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x02\\x04\\x08\\x10\\x20\\x00\\x00\", // \"\\\"\n        \"\\x00\\x41\\x41\\x7F\\x00\\x00\\x00\\x00\", // \"\"\"\n        \"\\x00\\x04\\x02\\x01\\x02\\x04\\x00\\x00\", // \"^\"\n        \"\\x00\\x80\\x80\\x80\\x80\\x80\\x00\\x00\", // \"_\"\n        \"\\x00\\x01\\x02\\x04\\x00\\x00\\x00\\x00\", // \"`\"\n        \"\\x00\\x20\\x54\\x54\\x54\\x78\\x00\\x00\", // \"a\"\n        \"\\x00\\x7F\\x48\\x44\\x44\\x38\\x00\\x00\", // \"b\"\n        \"\\x00\\x38\\x44\\x44\\x28\\x00\\x00\\x00\", // \"c\"\n        \"\\x00\\x38\\x44\\x44\\x48\\x7F\\x00\\x00\", // \"d\"\n        \"\\x00\\x38\\x54\\x54\\x54\\x18\\x00\\x00\", // \"e\"\n        \"\\x00\\x08\\x7E\\x09\\x02\\x00\\x00\\x00\", // \"f\"\n        \"\\x00\\x18\\xA4\\xA4\\xA4\\x7C\\x00\\x00\", // \"g\"\n        \"\\x00\\x7F\\x08\\x04\\x04\\x78\\x00\\x00\", // \"h\"\n        \"\\x00\\x00\\x7D\\x00\\x00\\x00\\x00\\x00\", // \"i\"\n        \"\\x00\\x80\\x84\\x7D\\x00\\x00\\x00\\x00\", // \"j\"\n        \"\\x00\\x7F\\x10\\x28\\x44\\x00\\x00\\x00\", // \"k\"\n        \"\\x00\\x41\\x7F\\x40\\x00\\x00\\x00\\x00\", // \"l\"\n        \"\\x00\\x7C\\x04\\x18\\x04\\x78\\x00\\x00\", // \"m\"\n        \"\\x00\\x7C\\x08\\x04\\x7C\\x00\\x00\\x00\", // \"n\"\n        \"\\x00\\x38\\x44\\x44\\x38\\x00\\x00\\x00\", // \"o\"\n        \"\\x00\\xFC\\x24\\x24\\x18\\x00\\x00\\x00\", // \"p\"\n        \"\\x00\\x18\\x24\\x24\\xFC\\x00\\x00\\x00\", // \"q\"\n        \"\\x00\\x00\\x7C\\x08\\x04\\x00\\x00\\x00\", // \"r\"\n        \"\\x00\\x48\\x54\\x54\\x24\\x00\\x00\\x00\", // \"s\"\n        \"\\x00\\x04\\x7F\\x44\\x00\\x00\\x00\\x00\", // \"t\"\n        \"\\x00\\x3C\\x40\\x40\\x7C\\x00\\x00\\x00\", // \"u\"\n        \"\\x00\\x1C\\x20\\x40\\x20\\x1C\\x00\\x00\", // \"v\"\n        \"\\x00\\x3C\\x40\\x30\\x40\\x3C\\x00\\x00\", // \"w\"\n        \"\\x00\\x44\\x28\\x10\\x28\\x44\\x00\\x00\", // \"x\"\n        \"\\x00\\x1C\\xA0\\xA0\\x7C\\x00\\x00\\x00\", // \"y\"\n        \"\\x00\\x44\\x64\\x54\\x4C\\x44\\x00\\x00\", // \"z\"\n        \"\\x00\\x08\\x36\\x41\\x00\\x00\\x00\\x00\", // \"{\"\n        \"\\x00\\x00\\x7F\\x00\\x00\\x00\\x00\\x00\", // \"|\"\n        \"\\x00\\x41\\x36\\x08\\x00\\x00\\x00\\x00\", // \"}\"\n        \"\\x00\\x02\\x01\\x01\\x02\\x01\\x00\\x00\"  // \"~\"\n    ];\n    function oledcmd(c: number) {\n        pins.i2cWriteNumber(0x3c, c, NumberFormat.UInt16BE);\n    }\n    function writeData(n: number) {\n        let b = n;\n        if (n < 0) { n = 0 }\n        if (n > 255) { n = 255 }\n        pins.i2cWriteNumber(0x3c, 0x4000 + b, NumberFormat.UInt16BE);\n    }\n    function writeCustomChar(c: string) {\n        for (let i = 0; i < 8; i++) {\n            writeData(c.charCodeAt(i));\n        }\n    }\n    function setText(row: number, column: number) {\n        let r = row;\n        let c = column;\n        if (row < 0) { r = 0 }\n        if (column < 0) { c = 0 }\n        if (row > 7) { r = 7 }\n        if (column > 15) { c = 15 }\n        oledcmd(0xB0 + r);            //set page address\n        oledcmd(0x00 + (8 * c & 0x0F));  //set column lower address\n        oledcmd(0x10 + ((8 * c >> 4) & 0x0F));   //set column higher address\n    }\n    function putChar(c: string) {\n        let c1 = c.charCodeAt(0);\n        writeCustomChar(basicFont[c1 - 32]);\n    }\n    function oledinit(): void {\n        oledcmd(0xAE);  // Set display OFF\n        oledcmd(0xD5);  // Set Display Clock Divide Ratio / OSC Frequency 0xD4\n        oledcmd(0x80);  // Display Clock Divide Ratio / OSC Frequency \n        oledcmd(0xA8);  // Set Multiplex Ratio\n        oledcmd(0x3F);  // Multiplex Ratio for 128x64 (64-1)\n        oledcmd(0xD3);  // Set Display Offset\n        oledcmd(0x00);  // Display Offset\n        oledcmd(0x40);  // Set Display Start Line\n        oledcmd(0x8D);  // Set Charge Pump\n        oledcmd(0x14);  // Charge Pump (0x10 External, 0x14 Internal DC/DC)\n        oledcmd(0xA1);  // Set Segment Re-Map\n        oledcmd(0xC8);  // Set Com Output Scan Direction\n        oledcmd(0xDA);  // Set COM Hardware Configuration\n        oledcmd(0x12);  // COM Hardware Configuration\n        oledcmd(0x81);  // Set Contrast\n        oledcmd(0xCF);  // Contrast\n        oledcmd(0xD9);  // Set Pre-Charge Period\n        oledcmd(0xF1);  // Set Pre-Charge Period (0x22 External, 0xF1 Internal)\n        oledcmd(0xDB);  // Set VCOMH Deselect Level\n        oledcmd(0x40);  // VCOMH Deselect Level\n        oledcmd(0xA4);  // Set all pixels OFF\n        oledcmd(0xA6);  // Set display not inverted\n        oledcmd(0xAF);  // Set display On\n        oledClear();\n    }\n\n    ///////////////////////////////enum\n\n\n    export enum NeoPixelColors {\n        //% block=red\n        Red = 0xFF0000,\n        //% block=orange\n        Orange = 0xFFA500,\n        //% block=yellow\n        Yellow = 0xFFFF00,\n        //% block=green\n        Green = 0x00FF00,\n        //% block=blue\n        Blue = 0x0000FF,\n        //% block=indigo\n        Indigo = 0x4b0082,\n        //% block=violet\n        Violet = 0x8a2be2,\n        //% block=purple\n        Purple = 0xFF00FF,\n        //% block=white\n        White = 0xFFFFFF,\n        //% block=black\n        Black = 0x000000\n    }\n\n    /**\n     * Different modes for RGB or RGB+W NeoPixel strips\n     */\n    export enum NeoPixelMode {\n        //% block=\"RGB (GRB format)\"\n        RGB = 0,\n        //% block=\"RGB+W\"\n        RGBW = 1,\n        //% block=\"RGB (RGB format)\"\n        RGB_RGB = 2\n    }\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n    /////////////////////////////User_function//////////////////\n\n    //% line.min=1 line.max=8 line.defl=1\n    //% text.defl=\"Hello,ELECFREAKS\"\n    //% block=\"OLED show line %line|text %text\"\n    //% subcategory=Display group=\"OLED\" color=#00B1ED\n    export function showUserText(line: number, text: string) {\n        if (firstoledinit) {\n            oledinit()\n            firstoledinit = false\n        }\n        if (text.length > 16) {\n            text = text.substr(0, 16)\n        }\n        line = line - 1\n        setText(line, 0);\n        for (let c of text) {\n            putChar(c);\n        }\n\n        for (let i = text.length; i < 16; i++) {\n            setText(line, i);\n            putChar(\" \");\n        }\n    }\n    //% line.min=1 line.max=8 line.defl=2 \n    //% n.defl=20200508\n    //% block=\"OLED show line %line|number %n\"\n    //% subcategory=Display group=\"OLED\" color=#00B1ED\n    export function showUserNumber(line: number, n: number) {\n        if (firstoledinit) {\n            oledinit()\n            firstoledinit = false\n        }\n        showUserText(line, \"\" + n)\n    }\n    //% block=\"clear display\" color=#00B1ED\n    //% subcategory=Display group=\"OLED\"\n    export function oledClear() {\n        //oledcmd(DISPLAY_OFF);   //display off\n        for (let j = 0; j < 8; j++) {\n            setText(j, 0);\n            {\n                for (let i = 0; i < 16; i++)  //clear all columns\n                {\n                    putChar(' ');\n                }\n            }\n        }\n        //oledcmd(DISPLAY_ON);    //display on\n        setText(0, 0);\n    }\n    /**\n   * Create a new driver Grove - 4-Digit Display\n   * @param clkPin value of clk pin number\n   * @param dataPin value of data pin number\n   */\n    //% blockId=grove_tm1637_create block=\"connect 4-Digit cPin %cPin dPin %dPin\"\n    //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" blockSetVariable=display color=#EA5532\n    export function tm1637Create(cPin: DigitalPin, dPin: DigitalPin, intensity: number = 7, count: number = 4): TM1637LEDs {\n        let display = new TM1637LEDs();\n        display.clk = cPin\n        display.dio = dPin\n        if ((count < 1) || (count > 5)) count = 4;\n        display.count = count;\n        display.brightness = intensity;\n        display.init();\n        return display;\n    }\n    export class TM1637LEDs {\n        buf: Buffer;\n        clk: DigitalPin;\n        dio: DigitalPin;\n        _ON: number;\n        brightness: number;\n        count: number;  // number of LEDs\n        /**\n         * initial TM1637\n         */\n        init(): void {\n            pins.digitalWritePin(this.clk, 0);\n            pins.digitalWritePin(this.dio, 0);\n            this._ON = 8;\n            this.buf = pins.createBuffer(this.count);\n            this.clear();\n        }\n        /**\n         * Start \n         */\n        _start() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        /**\n         * Stop\n         */\n        _stop() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.dio, 1);\n        }\n        /**\n         * send command1\n         */\n        _write_data_cmd() {\n            this._start();\n            this._write_byte(TM1637_CMD1);\n            this._stop();\n        }\n        /**\n         * send command3\n         */\n        _write_dsp_ctrl() {\n            this._start();\n            this._write_byte(TM1637_CMD3 | this._ON | this.brightness);\n            this._stop();\n        }\n        /**\n         * send a byte to 2-wire interface\n         */\n        _write_byte(b: number) {\n            for (let i = 0; i < 8; i++) {\n                pins.digitalWritePin(this.dio, (b >> i) & 1);\n                pins.digitalWritePin(this.clk, 1);\n                pins.digitalWritePin(this.clk, 0);\n            }\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _intensity(val: number = 7) {\n            this._ON = 8;\n            this.brightness = val - 1;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n        /**\n         * set data to TM1637, with given bit\n         */\n        _dat(bit: number, dat: number) {\n            this._write_data_cmd();\n            this._start();\n            this._write_byte(TM1637_CMD2 | (bit % this.count))\n            this._write_byte(dat);\n            this._stop();\n            this._write_dsp_ctrl();\n        }\n        /**\n         * Show a single number from 0 to 9 at a specified digit of Grove - 4-Digit Display\n         * @param dispData value of number\n         * @param bitAddr value of bit number\n         */\n        //% blockId=grove_tm1637_display_bit block=\"%display|show single number|%num|at digit|%bit\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        //% bit.defl=1 bit.min=0 bit.max=9\n        showbit(num: number = 5, bit: number = 0) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            this.buf[bit % this.count] = _SEGMENTS[num % 16]\n            this._dat(bit, _SEGMENTS[num % 16])\n        }\n        /**\n         * Show a 4 digits number on display\n         * @param dispData value of number\n         */\n        //% blockId=grove_tm1637_display_number block=\"%display|show number|%num\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        showNumber(num: number) {\n            if (num < 0) {\n                num = -num\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n                this._dat(0, 0x40) // '-'\n            }\n            else {\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n            }\n        }\n        /**\n         * show or hide dot point. \n         * @param bit is the position, eg: 1\n         * @param show is show/hide dp, eg: true\n         */\n        //% blockId=\"TM1637_showDP\" block=\"%display|DotPoint at %bit|show $show\"\n        //% show.shadow=\"toggleOnOff\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        showDP(bit: number = 1, show: boolean = true) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            bit = bit % this.count\n            if (show) this._dat(bit, this.buf[bit] | 0x80)\n            else this._dat(bit, this.buf[bit] & 0x7F)\n        }\n        /**\n         * clear LED. \n         */\n        //% blockId=\"TM1637_clear\" block=\"clear display %display\"\n        //% subcategory=Display group=\"7-Seg 4-Dig LED Nixietube\" color=#EA5532\n        clear() {\n            for (let i = 0; i < this.count; i++) {\n                this._dat(i, 0)\n                this.buf[i] = 0\n            }\n        }\n    }\n    //% shim=sendBufferAsm\n    function sendBuffer(buf: Buffer, pin: DigitalPin) {\n    }\n    export class Strip {\n        buf: Buffer;\n        pin: DigitalPin;\n        // TODO: encode as bytes instead of 32bit\n        brightness: number;\n        start: number; // start offset in LED strip\n        _length: number; // number of LEDs\n        _mode: NeoPixelMode;\n        _matrixWidth: number; // number of leds in a matrix - if any\n\n        /**\n         * Shows all LEDs to a given color (range 0-255 for r, g, b).\n         * @param rgb RGB color of the LED\n         */\n        //% blockId=\"neopixel_set_strip_color\" block=\"%strip|show color %rgb=neopixel_colors\"\n        //% weight=85 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        showColor(rgb: number) {\n            rgb = rgb >> 0;\n            this.setAllRGB(rgb);\n            this.show();\n        }\n\n        /**\n         * Shows a rainbow pattern on all LEDs.\n         * @param startHue the start hue value for the rainbow, eg: 1\n         * @param endHue the end hue value for the rainbow, eg: 360\n         */\n        //% blockId=\"neopixel_set_strip_rainbow\" block=\"%strip|show rainbow from %startHue|to %endHue\"\n        //% weight=85 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        showRainbow(startHue: number = 1, endHue: number = 360) {\n            if (this._length <= 0) return;\n\n            startHue = startHue >> 0;\n            endHue = endHue >> 0;\n            const saturation = 100;\n            const luminance = 50;\n            const steps = this._length;\n            const direction = HueInterpolationDirection.Clockwise;\n\n            //hue\n            const h1 = startHue;\n            const h2 = endHue;\n            const hDistCW = ((h2 + 360) - h1) % 360;\n            const hStepCW = Math.idiv((hDistCW * 100), steps);\n            const hDistCCW = ((h1 + 360) - h2) % 360;\n            const hStepCCW = Math.idiv(-(hDistCCW * 100), steps);\n            let hStep: number;\n            if (direction === HueInterpolationDirection.Clockwise) {\n                hStep = hStepCW;\n            } else if (direction === HueInterpolationDirection.CounterClockwise) {\n                hStep = hStepCCW;\n            } else {\n                hStep = hDistCW < hDistCCW ? hStepCW : hStepCCW;\n            }\n            const h1_100 = h1 * 100; //we multiply by 100 so we keep more accurate results while doing interpolation\n\n            //sat\n            const s1 = saturation;\n            const s2 = saturation;\n            const sDist = s2 - s1;\n            const sStep = Math.idiv(sDist, steps);\n            const s1_100 = s1 * 100;\n\n            //lum\n            const l1 = luminance;\n            const l2 = luminance;\n            const lDist = l2 - l1;\n            const lStep = Math.idiv(lDist, steps);\n            const l1_100 = l1 * 100\n\n            //interpolate\n            if (steps === 1) {\n                this.setPixelColor(0, hsl(h1 + hStep, s1 + sStep, l1 + lStep))\n            } else {\n                this.setPixelColor(0, hsl(startHue, saturation, luminance));\n                for (let i = 1; i < steps - 1; i++) {\n                    const h = Math.idiv((h1_100 + i * hStep), 100) + 360;\n                    const s = Math.idiv((s1_100 + i * sStep), 100);\n                    const l = Math.idiv((l1_100 + i * lStep), 100);\n                    this.setPixelColor(i, hsl(h, s, l));\n                }\n                this.setPixelColor(steps - 1, hsl(endHue, saturation, luminance));\n            }\n            this.show();\n        }\n\n        /**\n         * Set LED to a given color (range 0-255 for r, g, b).\n         * You need to call ``show`` to make the changes visible.\n         * @param pixeloffset position of the NeoPixel in the strip\n         * @param rgb RGB color of the LED\n         */\n        //% blockId=\"neopixel_set_pixel_color\" block=\"%strip|set pixel color at %pixeloffset|to %rgb=neopixel_colors\"\n        //% weight=80 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setPixelColor(pixeloffset: number, rgb: number): void {\n            this.setPixelRGB(pixeloffset >> 0, rgb >> 0);\n        }\n\n        /**\n         * Send all the changes to the strip.\n         */\n        //% blockId=\"neopixel_show\" block=\"%strip|show\" \n        //% weight=79\n        //% parts=\"neopixel\" subcategory=Neopixel\n        show() {\n            sendBuffer(this.buf, this.pin);\n        }\n\n        /**\n         * Turn off all LEDs.\n         * You need to call ``show`` to make the changes visible.\n         */\n        //% blockId=\"neopixel_clear\" block=\"%strip|clear\"\n        //% weight=76 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        clear(): void {\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.fill(0, this.start * stride, this._length * stride);\n        }\n\n        /**\n         * Set the brightness of the strip. This flag only applies to future operation.\n         * @param brightness a measure of LED brightness in 0-255. eg: 255\n         */\n        //% blockId=\"neopixel_set_brightness\" block=\"%strip|set brightness %brightness\" \n        //% weight=59 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setBrightness(brightness: number): void {\n            this.brightness = brightness & 0xff;\n        }\n        /**\n         * Gets the number of pixels declared on the strip\n         */\n        //% blockId=\"neopixel_length\" block=\"%strip|length\" blockGap=8\n        //% subcategory=\"Neopixel\"\n        //% weight=60 advanced=true\n        length() {\n            return this._length;\n        }\n        /**\n         * Create a range of LEDs.\n         * @param start offset in the LED strip to start the range\n         * @param length number of LEDs in the range. eg: 4\n         */\n        //% weight=89 color=#EA5532\n        //% blockId=\"neopixel_range\" block=\"%strip|range from %start|with %length|leds\"\n        //% parts=\"neopixel\"\n        //% blockSetVariable=range subcategory=Neopixel\n        range(start: number, length: number): Strip {\n            start = start >> 0;\n            length = length >> 0;\n            let strip = new Strip();\n            strip.buf = this.buf;\n            strip.pin = this.pin;\n            strip.brightness = this.brightness;\n            strip.start = this.start + Math.clamp(0, this._length - 1, start);\n            strip._length = Math.clamp(0, this._length - (strip.start - this.start), length);\n            strip._matrixWidth = 0;\n            strip._mode = this._mode;\n            return strip;\n        }\n\n        /**\n         * Shift LEDs forward and clear with zeros.\n         * You need to call ``show`` to make the changes visible.\n         * @param offset number of pixels to shift forward, eg: 1\n         */\n        //% blockId=\"neopixel_shift\" block=\"%strip|shift pixels by %offset\" \n        //% weight=40 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        shift(offset: number = 1): void {\n            offset = offset >> 0;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.shift(-offset * stride, this.start * stride, this._length * stride)\n        }\n\n        /**\n         * Rotate LEDs forward.\n         * You need to call ``show`` to make the changes visible.\n         * @param offset number of pixels to rotate forward, eg: 1\n         */\n        //% blockId=\"neopixel_rotate\" block=\"%strip|rotate pixels by %offset\" \n        //% weight=39 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        rotate(offset: number = 1): void {\n            offset = offset >> 0;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            this.buf.rotate(-offset * stride, this.start * stride, this._length * stride)\n        }\n\n        /**\n         * Set the pin where the neopixel is connected, defaults to P0.\n         */\n        //% weight=10 color=#EA5532\n        //% parts=\"neopixel\" subcategory=Neopixel\n        setPin(pin: DigitalPin): void {\n            this.pin = pin;\n            pins.digitalWritePin(this.pin, 0);\n            // don't yield to avoid races on initialization\n        }\n\n        private setBufferRGB(offset: number, red: number, green: number, blue: number): void {\n            if (this._mode === NeoPixelMode.RGB_RGB) {\n                this.buf[offset + 0] = red;\n                this.buf[offset + 1] = green;\n            } else {\n                this.buf[offset + 0] = green;\n                this.buf[offset + 1] = red;\n            }\n            this.buf[offset + 2] = blue;\n        }\n\n        private setAllRGB(rgb: number) {\n            let red = unpackR(rgb);\n            let green = unpackG(rgb);\n            let blue = unpackB(rgb);\n\n            const br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            const end = this.start + this._length;\n            const stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            for (let i = this.start; i < end; ++i) {\n                this.setBufferRGB(i * stride, red, green, blue)\n            }\n        }\n        private setPixelRGB(pixeloffset: number, rgb: number): void {\n            if (pixeloffset < 0\n                || pixeloffset >= this._length)\n                return;\n\n            let stride = this._mode === NeoPixelMode.RGBW ? 4 : 3;\n            pixeloffset = (pixeloffset + this.start) * stride;\n\n            let red = unpackR(rgb);\n            let green = unpackG(rgb);\n            let blue = unpackB(rgb);\n\n            let br = this.brightness;\n            if (br < 255) {\n                red = (red * br) >> 8;\n                green = (green * br) >> 8;\n                blue = (blue * br) >> 8;\n            }\n            this.setBufferRGB(pixeloffset, red, green, blue)\n        }\n\n    }\n\n    /**\n     * Create a new NeoPixel driver for `numleds` LEDs.\n     * @param pin the pin where the neopixel is connected.\n     * @param numleds number of leds in the strip, eg: 24,30,60,64\n     */\n    //% blockId=\"neopixel_create\" block=\"NeoPixel at pin %Rjpin|with %numleds|leds as %mode\"\n    //% weight=90 color=#EA5532\n    //% parts=\"neopixel\"\n    //% trackArgs=0,2\n    //% blockSetVariable=strip subcategory=Neopixel\n    export function create(Rjpin: DigitalRJPin, numleds: number, mode: NeoPixelMode): Strip {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        let strip = new Strip();\n        let stride = mode === NeoPixelMode.RGBW ? 4 : 3;\n        strip.buf = pins.createBuffer(numleds * stride);\n        strip.start = 0;\n        strip._length = numleds;\n        strip._mode = mode;\n        strip._matrixWidth = 0;\n        strip.setBrightness(50)\n        strip.setPin(pin)\n        return strip;\n    }\n\n    /**\n     * Converts red, green, blue channels into a RGB color\n     * @param red value of the red channel between 0 and 255. eg: 255\n     * @param green value of the green channel between 0 and 255. eg: 255\n     * @param blue value of the blue channel between 0 and 255. eg: 255\n     */\n    //% weight=1 subcategory=Neopixel color=#EA5532\n    //% blockId=\"neopixel_rgb\" block=\"red %red|green %green|blue %blue\"\n    export function rgb(red: number, green: number, blue: number): number {\n        return packRGB(red, green, blue);\n    }\n\n    /**\n     * Gets the RGB value of a known color\n    */\n    //% weight=2 subcategory=Neopixel color=#EA5532\n    //% blockId=\"neopixel_colors\" block=\"%color\"\n    export function colors(color: NeoPixelColors): number {\n        return color;\n    }\n\n    function packRGB(a: number, b: number, c: number): number {\n        return ((a & 0xFF) << 16) | ((b & 0xFF) << 8) | (c & 0xFF);\n    }\n    function unpackR(rgb: number): number {\n        let r = (rgb >> 16) & 0xFF;\n        return r;\n    }\n    function unpackG(rgb: number): number {\n        let g = (rgb >> 8) & 0xFF;\n        return g;\n    }\n    function unpackB(rgb: number): number {\n        let b = (rgb) & 0xFF;\n        return b;\n    }\n\n    /**\n     * Converts a hue saturation luminosity value into a RGB color\n     * @param h hue from 0 to 360\n     * @param s saturation from 0 to 99\n     * @param l luminosity from 0 to 99\n     */\n    //% blockId=neopixelHSL block=\"hue %h|saturation %s|luminosity %l\" subcategory=Neopixel color=#EA5532\n    export function hsl(h: number, s: number, l: number): number {\n        h = Math.round(h);\n        s = Math.round(s);\n        l = Math.round(l);\n\n        h = h % 360;\n        s = Math.clamp(0, 99, s);\n        l = Math.clamp(0, 99, l);\n        let c = Math.idiv((((100 - Math.abs(2 * l - 100)) * s) << 8), 10000); //chroma, [0,255]\n        let h1 = Math.idiv(h, 60);//[0,6]\n        let h2 = Math.idiv((h - h1 * 60) * 256, 60);//[0,255]\n        let temp = Math.abs((((h1 % 2) << 8) + h2) - 256);\n        let x = (c * (256 - (temp))) >> 8;//[0,255], second largest component of this color\n        let r$:\n            number;\n        let g$:\n            number;\n        let b$:\n            number;\n        if (h1 == 0) {\n            r$ = c;\n            g$ = x;\n            b$ = 0;\n        }\n        else if (h1 == 1) {\n            r$ = x;\n            g$ = c;\n            b$ = 0;\n        }\n        else if (h1 == 2) {\n            r$ = 0;\n            g$ = c;\n            b$ = x;\n        }\n        else if (h1 == 3) {\n            r$ = 0;\n            g$ = x;\n            b$ = c;\n        }\n        else if (h1 == 4) {\n            r$ = x;\n            g$ = 0;\n            b$ = c;\n        }\n        else if (h1 == 5) {\n            r$ = c;\n            g$ = 0;\n            b$ = x;\n        }\n        let m = Math.idiv((Math.idiv((l * 2 << 8), 100) - c), 2);\n        let r = r$ + m;\n        let g = g$ + m;\n        let b = b$ + m;\n        return packRGB(r, g, b);\n    }\n\n    export enum HueInterpolationDirection {\n        Clockwise,\n        CounterClockwise,\n        Shortest\n    }\n}\n","planetxbasic.ts":"/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#00B1ED  icon=\"\\uf005\" block=\"Connected\" blockId=\"PlanetX_Connected\"\n//% groups='[\"Digital\", \"Analog\", \"IIC Port\"]'\nnamespace Connected {\n    \n    ////////////////////////paj7620//////////////////////\n    let gesture_first_init = true\n    const initRegisterArray: number[] = [\n        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17,\n        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F,\n        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14,\n        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27,\n        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01,\n        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00,\n        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20,\n        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37,\n        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A,\n        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F,\n        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30,\n        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19,\n        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04,\n        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00,\n        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00,\n        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F,\n        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07,\n        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01,\n        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F,\n        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01,\n        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40,\n        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E,\n        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00,\n        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08,\n        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00,\n        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01,\n        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01,\n        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01\n    ];\n    \n    /////////////////////////color/////////////////////////\n    const APDS9960_ADDR = 0x39\n    const APDS9960_ENABLE = 0x80\n    const APDS9960_ATIME = 0x81\n    const APDS9960_CONTROL = 0x8F\n    const APDS9960_STATUS = 0x93\n    const APDS9960_CDATAL = 0x94\n    const APDS9960_CDATAH = 0x95\n    const APDS9960_RDATAL = 0x96\n    const APDS9960_RDATAH = 0x97\n    const APDS9960_GDATAL = 0x98\n    const APDS9960_GDATAH = 0x99\n    const APDS9960_BDATAL = 0x9A\n    const APDS9960_BDATAH = 0x9B\n    const APDS9960_GCONF4 = 0xAB\n    const APDS9960_AICLEAR = 0xE7\n    let color_first_init = false\n\n    function i2cwrite_color(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n    function i2cread_color(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n    function rgb2hsl(color_r: number, color_g: number, color_b: number): number {\n        let Hue = 0\n        let R = color_r * 100 / 255;\n        let G = color_g * 100 / 255;\n        let B = color_b * 100 / 255;\n        let maxVal = Math.max(R, Math.max(G, B))\n        let minVal = Math.min(R, Math.min(G, B))\n        let Delta = maxVal - minVal;\n\n        if (Delta < 0) {\n            Hue = 0;\n        }\n        else if (maxVal == R && G >= B) {\n            Hue = (60 * ((G - B) * 100 / Delta)) / 100;\n        }\n        else if (maxVal == R && G < B) {\n            Hue = (60 * ((G - B) * 100 / Delta) + 360 * 100) / 100;\n        }\n        else if (maxVal == G) {\n            Hue = (60 * ((B - R) * 100 / Delta) + 120 * 100) / 100;\n        }\n        else if (maxVal == B) {\n            Hue = (60 * ((R - G) * 100 / Delta) + 240 * 100) / 100;\n        }\n        return Hue\n    }\n    function initModule(): void {\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ATIME, 252)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_CONTROL, 0x03)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_GCONF4, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_AICLEAR, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x01)\n        color_first_init = true\n    }\n    function colorMode(): void {\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_ENABLE) | 0x2;\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, tmp);\n    }\n\n    ///////////////////////////////////////////////////////MP3\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    /*\n    * Play status selection button list\n    */\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(100)\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,        \n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum Distance_Unit_List {\n        //% block=\"cm\" \n        Distance_Unit_cm,\n\n        //% block=\"foot\"\n        Distance_Unit_foot,\n    }\n    export enum ButtonStateList {\n        //% block=\"C\"\n        C,\n        //% block=\"D\"\n        D,\n        //% block=\"C+D\"\n        CD\n    }\n    export enum GestureType {\n        //% block=\"None\"\n        None = 0,\n        //% block=\"Right\"\n        Right = 1,\n        //% block=\"Left\"\n        Left = 2,\n        //% block=\"Up\"\n        Up = 3,\n        //% block=\"Down\"\n        Down = 4,\n        //% block=\"Forward\"\n        Forward = 5,\n        //% block=\"Backward\"\n        Backward = 6,\n        //% block=\"Clockwise\"\n        Clockwise = 7,\n        //% block=\"Anticlockwise\"\n        Anticlockwise = 8,\n        //% block=\"Wave\"\n        Wave = 9\n    }\n    export enum ColorList {\n        //% block=\"Red\"\n        red,\n        //% block=\"Green\"\n        green,\n        //% block=\"Blue\"\n        blue,\n        //% block=\"Cyan\"\n        cyan,\n        //% block=\"Magenta\"\n        magenta,\n        //% block=\"Yellow\"\n        yellow,\n        //% block=\"White\"\n        white\n    }\n\n    ///////////////////////////////////blocks/////////////////////////////\n\n    //% blockId=\"readwaterLevel\" block=\"Water level sensor %Rjpin value(0~100)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function waterLevel(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let voltage = 0, waterlevel = 0;\n        voltage = pins.map(\n            pins.analogReadPin(pin),\n            50,\n            600,\n            0,\n            100\n        );\n        if (voltage < 0) {\n            voltage = 0\n        }\n        waterlevel = voltage;\n        return Math.round(waterlevel)\n    }\n\n    let distance_last = 0\n\n    //% blockId=sonarbit block=\"Ultrasonic sensor pinT %tPin pinE %ePin distance %distance_unit\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% distance_unit.fieldEditor=\"gridpicker\"\n    //% distance_unit.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function ultrasoundSensor(tPin: DigitalPin, ePin: DigitalPin, distance_unit: Distance_Unit_List): number {\n        let pinT = tPin\n        let pinE = ePin\n        pins.setPull(pinT, PinPullMode.PullNone)\n        pins.digitalWritePin(pinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(pinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(pinT, 0)\n\n        // read pulse\n        let d = pins.pulseIn(pinE, PulseValue.High, 25000)\n        let version = control.hardwareVersion()\n        let distance = d * 34 / 2 / 1000\n        if (version == \"1\") {\n            distance = distance * 3 / 2\n        }\n\n        if (distance > 430) {\n            distance = 0\n        }\n\n        if (distance == 0) {\n            distance = distance_last\n            distance_last = 0\n        }\n        else {\n            distance_last = distance\n        }\n\n        switch (distance_unit) {\n            case Distance_Unit_List.Distance_Unit_cm:\n                return Math.floor(distance)  //cm\n                break\n            case Distance_Unit_List.Distance_Unit_foot:\n                return Math.floor(distance / 30.48)   //foot\n                break\n            default:\n                return 0\n        }\n    }\n\n    export class PAJ7620 {\n        private paj7620WriteReg(addr: number, cmd: number) {\n            let buf: Buffer = pins.createBuffer(2);\n            buf[0] = addr;\n            buf[1] = cmd;\n            pins.i2cWriteBuffer(0x73, buf, false);\n        }\n        private paj7620ReadReg(addr: number): number {\n            let buf: Buffer = pins.createBuffer(1);\n            buf[0] = addr;\n            pins.i2cWriteBuffer(0x73, buf, false);\n            buf = pins.i2cReadBuffer(0x73, 1, false);\n            return buf[0];\n        }\n        private paj7620SelectBank(bank: number) {\n            if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n        }\n        private paj7620Init() {\n            let temp = 0;\n            this.paj7620SelectBank(0);\n            temp = this.paj7620ReadReg(0);\n            if (temp == 0x20) {\n                for (let i = 0; i < 438; i += 2) {\n                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n                }\n            }\n            this.paj7620SelectBank(0);\n        }\n        init() {\n            this.paj7620Init();\n            basic.pause(200);\n        }\n        read(): number {\n            let data = 0, result = 0;\n            data = this.paj7620ReadReg(0x43);\n            switch (data) {\n                case 0x01:\n                    result = GestureType.Right;\n                    break;\n                case 0x02:\n                    result = GestureType.Left;\n                    break;\n                case 0x04:\n                    result = GestureType.Up;\n                    break;\n                case 0x08:\n                    result = GestureType.Down;\n                    break;\n                case 0x10:\n                    result = GestureType.Forward;\n                    break;\n                case 0x20:\n                    result = GestureType.Backward;\n                    break;\n                case 0x40:\n                    result = GestureType.Clockwise;\n                    break;\n                case 0x80:\n                    result = GestureType.Anticlockwise;\n                    break;\n                default:\n                    data = this.paj7620ReadReg(0x44);\n                    if (data == 0x01)\n                        result = GestureType.Wave;\n                    break;\n            }\n            return result;\n        }\n    }\n    const gestureEventId = 3100;\n    let lastGesture = GestureType.None;\n    let paj7620 = new PAJ7620();\n    //% blockId= gesture_create_event block=\"Gesture sensor IIC port is %gesture\"\n    //% gesture.fieldEditor=\"gridpicker\" gesture.fieldOptions.columns=3\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function onGesture(gesture: GestureType, handler: () => void) {\n        control.onEvent(gestureEventId, gesture, handler);\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        control.inBackground(() => {\n            while (true) {\n                const gesture = paj7620.read();\n                if (gesture != lastGesture) {\n                    lastGesture = gesture;\n                    control.raiseEvent(gestureEventId, lastGesture);\n                }\n                basic.pause(200);\n            }\n        })\n    }\n\n    //% blockId= gesture_get_event block=\"Gesture sensor IIC port detects\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function getGesture(): number {\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        const gesture = paj7620.read();\n        return gesture\n    }\n\n\n\n\n    //% blockId=apds9960_readcolor block=\"Color sensor IIC port color HUE(0~360)\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readColor(): number {\n        if (color_first_init == false) {\n            initModule()\n            colorMode()\n        }\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        while (!tmp) {\n            basic.pause(5);\n            tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        }\n        let c = i2cread_color(APDS9960_ADDR, APDS9960_CDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_CDATAH) * 256;\n        let r = i2cread_color(APDS9960_ADDR, APDS9960_RDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_RDATAH) * 256;\n        let g = i2cread_color(APDS9960_ADDR, APDS9960_GDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_GDATAH) * 256;\n        let b = i2cread_color(APDS9960_ADDR, APDS9960_BDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_BDATAH) * 256;\n        // map to rgb based on clear channel\n        let avg = c / 3;\n        r = r * 255 / avg;\n        g = g * 255 / avg;\n        b = b * 255 / avg;\n        //let hue = rgb2hue(r, g, b);\n        let hue = rgb2hsl(r, g, b)\n        return hue\n    }\n    //% block=\"Color sensor IIC port detects %color\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% color.fieldEditor=\"gridpicker\" color.fieldOptions.columns=3\n    export function checkColor(color: ColorList): boolean {\n        let hue = readColor()\n        switch (color) {\n            case ColorList.red:\n                if (hue > 330 || hue < 20) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.green:\n                if (hue > 120 && 180 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.blue:\n                if (hue > 210 && 270 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.cyan:\n                if (hue > 190 && 210 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.magenta:\n                if (hue > 260 && 330 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.yellow:\n                if (hue > 30 && 120 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.white:\n                if (hue >= 180 && 190 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n        }\n    }\n\n    //% blockId=\"potentiometer\" block=\"Trimpot %Rjpin analog value\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Input color=#E2C438 group=\"Analog\"\n    export function trimpot(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        return pins.analogReadPin(pin)\n    }\n    //% blockId=buttonab block=\"Button %Rjpin %button is pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonCD(Rjpin: DigitalRJPin, button: ButtonStateList): boolean {\n        let pinC = DigitalPin.P1\n        let pinD = DigitalPin.P2\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pinC = DigitalPin.P1\n                pinD = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pinC = DigitalPin.P2\n                pinD = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pinC = DigitalPin.P13\n                pinD = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pinC = DigitalPin.P15\n                pinD = DigitalPin.P16\n                break;\n            case DigitalRJPin.P3:\n                pinC = DigitalPin.P3\n                pinD = DigitalPin.P4\n                break;\n        }\n        pins.setPull(pinC, PinPullMode.PullUp)\n        pins.setPull(pinD, PinPullMode.PullUp)\n        if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 0 && button == ButtonStateList.CD) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinC) == 0 && pins.digitalReadPin(pinD) == 1 && button == ButtonStateList.C) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 1 && button == ButtonStateList.D) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    export enum ButtonState {\n        //% block=\"on\"\n        on = 1,\n        //% block=\"off\"\n        off = 2\n    }\n\n    const buttonEventSource = 5000\n    const buttonEventValue = {\n        CD_pressed: ButtonState.on,\n        CD_unpressed: ButtonState.off\n    }\n\n    //% block=\"on button %Rjpin %button pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=4\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonEvent(Rjpin: DigitalRJPin, button: ButtonStateList, handler: () => void) {\n        let ButtonPin_C = DigitalPin.P1\n        let ButtonPin_D = DigitalPin.P2\n        let pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P0\n        let pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                ButtonPin_C = DigitalPin.P1\n                ButtonPin_D = DigitalPin.P8\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P1\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P8\n                break;\n            case DigitalRJPin.J2:\n                ButtonPin_C = DigitalPin.P2\n                ButtonPin_D = DigitalPin.P12\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P2\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P12\n                break;\n            case DigitalRJPin.J3:\n                ButtonPin_C = DigitalPin.P13\n                ButtonPin_D = DigitalPin.P14\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P13\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P14\n                break;\n            case DigitalRJPin.J4:\n                ButtonPin_C = DigitalPin.P15\n                ButtonPin_D = DigitalPin.P16\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P15\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P16\n                break;\n            case DigitalRJPin.P3:\n                ButtonPin_C = DigitalPin.P3\n                ButtonPin_D = DigitalPin.P4\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P3\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P4\n                break;\n        }\n        if (button == ButtonStateList.C) {\n            pins.setPull(ButtonPin_C, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_C, PinEventType.Edge)\n            control.onEvent(pinEventSource_C, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.D) {\n            pins.setPull(ButtonPin_D, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_D, PinEventType.Edge)\n            control.onEvent(pinEventSource_D, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.CD) {\n            loops.everyInterval(50, function () {\n                if (pins.digitalReadPin(ButtonPin_C) == 0 && pins.digitalReadPin(ButtonPin_D) == 0) {\n                    control.raiseEvent(buttonEventSource, buttonEventValue.CD_pressed)\n                }\n            })\n            control.onEvent(buttonEventSource, buttonEventValue.CD_pressed, handler)\n        }\n    }\n\n    //% blockId=fans block=\"Motor fan %Rjpin toggle to $fanstate || speed %speed \\\\%\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% fanstate.shadow=\"toggleOnOff\"\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    //% speed.min=0 speed.max=100\n    //% expandableArgumentMode=\"toggle\"\n    export function motorFan(Rjpin: DigitalRJPin, fanstate: boolean, speed: number = 100): void {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.J3:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.J4:\n                pin = AnalogPin.P15\n                break;\n        }\n        if (fanstate) {\n            pins.analogSetPeriod(pin, 100)\n            pins.analogWritePin(pin, Math.map(speed, 0, 100, 0, 1023))\n        }\n        else {\n            pins.analogWritePin(pin, 0)\n            speed = 0\n        }\n    }\n\n\n    //% blockId=\"setLoopFolder\" block=\"loop play all the MP3s in the folder:$folderNum\"\n    //% folderNum.defl=\"01\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setLoopFolder(folderNum: string): void {\n        CMD = 0x17\n        para1 = 0\n        para2 = parseInt(folderNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    //% blockId=\"folderPlay\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum || repeatList: $myAns\"\n    //% folderNum.defl=\"01\" fileNum.defl=\"001\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function folderPlay(folderNum: string, fileNum: string, myAns: boolean = false): void {\n        CMD = 0x0F\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        if (myAns)\n            execute(0x19)\n    }\n\n    //% blockId=\"playFolderFilePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFilePort(folderNum: string, fileNum: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFolderFileVolumePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum with volume:$theVolume usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" theVolume.defl=\"10\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFileVolumePort(folderNum: string, fileNum: string, theVolume: string, Rjpin: DigitalRJPin): void {\n        \n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        \n        let volume = parseInt(theVolume)\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(200)\n\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"volumePort\" \n    //% block=\"set MP3 volume:$theVolume usingPin:$Rjpin\"\n    //% theVolume.defl=\"10\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function volumePort(theVolume: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        let volume = parseInt(theVolume)\n        if (volume > 30) {\n            volume = 30\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(300)\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n\n\n    //% blockId=\"setTracking\" \n    //% block=\"play the mp3 in order of:%tracking || repeatList: $myAns\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% tracking.defl=1\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setTracking(tracking: number, myAns: boolean = false): void {\n        CMD = 0x03\n        para1 = 0x00\n        para2 = tracking\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        execute(0x0D)\n        if (myAns)\n            execute(0x19)\n    }\n    //% blockId=MP3execute block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=\"setVolume\" block=\"Set volume(0~25):%volume\"\n    //% volume.min=0 volume.max=25\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setVolume(volume: number): void {\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 0x06\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=MP3setPort block=\"Set the MP3 port to %Rjpin\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function MP3SetPort(Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        setVolume(25)\n    }\n}","notlegos.ts":"// NotLegos Blocks\n\n//% block=\"Not LEGOs\" color=#0031AF weight=1000 icon=\"\\uf3a5\"\n//% groups=['MP3\",'Display', 'Laser', 'others']\nnamespace notLegos {\n\n    // Variables for MP3 and Volume Pot\n    let isPot = false\n    let potPin = AnalogPin.P0\n    let mp3bits = 0\n    let mp3Apin = SerialPin.P0\n    let mp3Bpin = SerialPin.P0\n    let mp3Cpin = SerialPin.P0\n    let mp3Avolume = 1\n    let mp3Bvolume = 1\n    let mp3Cvolume = 1\n    let relativeCvolume = 1\n    let lastMP3bit = \"\"\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    let mp3musicPin:SerialPin\n    let mp3music = false\n    let mp3player = false\n    let mp3sfxPin = null\n    let mp3sfx = false\n    let mp3musicVol = 0\n    let mp3playerPin = null\n    let mp3playerVol = 0\n    let mp3sfxVol = 0\n\n    // String Arrays for Full Player Sound Sets and Shuffled Playlists Thereof\n    let PlayerAwaitingMusic: string[] = []\n    let PlayerFailure: string[] = []\n    let PlayerHurry: string[] = []\n    let PlayerIntro: string[] = []\n    let PlayerIntroMusic: string[] = []\n    let PlayerLevelMusic: string[] = []\n    let PlayerLost: string[] = []\n    let PlayerLostMusic: string[] = []\n    let PlayerName: string[] = []\n    let PlayerNay: string[] = []\n    let PlayerOuch: string[] = []\n    let PlayerReady: string[] = []\n    let PlayerSuccess: string[] = []\n    let PlayerTutorialMusic: string[] = []\n    let PlayerWon: string[] = []\n    let PlayerWonMusic: string[] = []\n    let PlayerYay: string[] = []\n    let PlaylistAwaitingMusic: string[] = []\n    let PlaylistCorrect: string[] = []\n    let PlaylistExplosion: string[] = []\n    let PlaylistFailure: string[] = []\n    let PlaylistFire: string[] = []\n    let PlaylistGhost: string[] = []\n    let PlaylistHurry: string[] = []\n    let PlaylistIncorrect: string[] = []\n    let PlaylistIntro: string[] = []\n    let PlaylistLost: string[] = []\n    let PlaylistName: string[] = []\n    let PlaylistNay: string[] = []\n    let PlaylistOuch: string[] = []\n    let PlaylistReady: string[] = []\n    let PlaylistSlash: string[] = []\n    let PlaylistSpark: string[] = []\n    let PlaylistSplash: string[] = []\n    let PlaylistSuccess: string[] = []\n    let PlaylistWon: string[] = []\n    let PlaylistYay: string[] = []\n\n    // Sound Strings - Global\n    let VoiceTracks = \"10_1_90_1.75|10_2_90_3.65|10_3_50_11.5|10_4_90_0|10_5_90_0|10_6_90_4.65|10_7_90_7.15|10_8_90_4.8|10_9_90_3.75|10_10_90_5.05|10_11_90_0|10_12_90_0|10_13_90_3|10_14_90_3|10_15_90_3|10_16_90_4|10_17_90_0|10_18_90_3|10_19_90_3|10_20_90_4|10_21_90_2|10_22_90_0|10_23_90_2|10_24_90_2|10_25_90_6|10_26_90_6|10_27_90_6|10_28_90_6|10_29_90_6|10_30_90_6|10_31_90_6|10_32_90_6|10_33_90_8|10_34_90_9|10_35_90_6|10_36_90_6|10_37_90_6|10_38_90_6|10_39_90_6|10_40_90_6\".split(\"|\")\n    let CorrectSFX = \"7_1_100_4|7_2_100_8|7_3_100_8|7_4_100_6|7_5_100_10|7_6_100_8|7_7_100_6|7_8_100_4|7_9_100_17|7_10_100_9|7_11_100_4|7_12_100_8|7_13_100_12|7_14_100_7|7_15_100_10|7_16_100_9|7_17_100_10|7_18_100_9|7_19_100_8|7_20_100_4|7_21_100_7|7_22_100_26|7_23_100_5|7_24_100_4|7_25_100_10|7_26_100_7|7_27_100_7|7_28_100_6|7_29_100_7|7_30_100_7|7_31_100_12|7_32_100_4|7_33_100_6|7_34_100_6|7_35_100_6|7_36_100_6|7_37_100_5|7_38_100_3|7_39_100_6|7_40_100_6|7_41_100_6|7_42_100_8|7_43_100_6|7_44_100_8|7_45_100_6|7_46_100_5|7_47_100_5|7_48_100_12|7_49_100_3|7_50_100_7|7_51_100_8|7_52_100_11|7_53_100_6|7_54_100_2|7_55_100_5|7_56_100_7|7_57_100_8|7_58_100_7|7_59_100_6|7_60_100_7|7_61_100_6|7_62_100_8|7_63_100_5|7_64_100_5|7_65_100_7|7_66_100_9|7_67_100_6|7_68_100_6|7_69_100_7|7_70_100_10|7_71_100_7|7_72_100_5|7_73_100_6|7_74_100_8|7_75_100_3|7_76_100_3|7_77_100_6|7_78_100_7|7_79_100_4|7_80_100_6|7_81_100_2|7_82_100_3|7_83_100_3|7_84_100_1|7_85_100_3|7_86_100_6|7_87_100_7|7_88_100_5|7_89_100_3|7_90_100_5|7_91_100_3|7_92_100_3|7_93_100_2|7_94_100_3|7_95_100_3|7_96_100_1|7_99_100_1|7_100_100_1|7_101_100_1|7_102_100_1|7_103_100_1|7_104_100_3|7_105_100_1|7_106_100_1|7_107_100_4|7_108_100_4|7_109_100_1|7_110_100_1|7_111_100_1|7_112_100_1|7_113_100_1|7_114_100_2|7_115_100_1|7_116_100_1|7_117_100_1|7_118_100_1\".split(\"|\")\n    let IncorrectSFX = \"8_1_100_6|8_2_100_5|8_3_100_3|8_4_100_5|8_5_100_7|8_6_100_6|8_7_100_4|8_8_100_1|8_9_100_3|8_10_100_4|8_11_100_3|8_12_100_3|8_13_100_6|8_14_100_3|8_15_100_1|8_16_100_1|8_17_100_1|8_18_100_1|8_19_100_0|8_20_100_0|8_21_100_5|8_22_100_4|8_23_100_3|8_24_100_7\".split(\"|\")\n    let AllSFX = \"9_1_100_4.754|9_2_100_4.336|9_3_100_5.172|9_4_100_4.806|9_5_100_4.754|9_6_100_1.536|9_7_100_2.136|9_8_100_1.896|9_9_100_2.592|9_10_100_0.936|9_11_100_1.008|9_12_100_0.312|9_13_100_1.44|9_14_100_1.8|9_15_100_1.992|9_16_100_1.104|9_17_100_1.08|9_18_100_0.912|9_19_100_0.528|9_20_100_0.72|9_21_100_0.672|9_22_100_0.696|9_23_100_0.6|9_24_100_0.576|9_25_100_1.44|9_26_100_1.8|9_27_100_1.464|9_28_100_0.432|9_29_100_0.312|9_30_100_2.112|9_31_100_0.648|9_32_100_0.384|9_33_100_2.352|9_34_100_1.8|9_35_100_1.608|9_36_100_0.648|9_37_100_0.768|9_38_100_0.552|9_39_100_0.48|9_40_100_1.032|9_41_100_0.456|9_42_100_0.384|9_43_100_0.552|9_44_100_0.432|9_45_100_0.216|9_46_100_0.624|9_47_100_1.248|9_48_100_1.104|9_49_100_1.248|9_50_100_0.648|9_51_100_0.456|9_53_100_5.256|9_54_100_2.328|9_55_100_4.992|9_56_100_1.776|9_57_100_2.28|9_58_100_0.504|9_59_100_0.984|9_60_100_0.984|9_61_100_0.504|9_62_100_1.632|9_63_100_0.288|9_64_100_0.192|9_65_100_0.168|9_66_100_0.288|9_67_100_0.288|9_68_100_0.312|9_69_100_0.72|9_70_100_0.672|9_71_100_0.648|9_72_100_0.648|9_73_100_1.632|9_74_100_1.416|9_75_100_1.248|9_76_100_0.48|9_77_100_0.36|9_78_100_0.216|9_79_100_0.576|9_80_100_0.731|9_81_100_1.128|9_82_100_2.184|9_83_100_0.744|9_84_100_0.6|9_85_100_1.152|9_86_100_1.68|9_87_100_1.32|9_88_100_0.528|9_89_100_0.36|9_90_100_0.792|9_91_100_2.496|9_92_100_1.8|9_93_100_1.8|9_94_100_0.744|9_95_100_1.776|9_96_100_5.544|9_97_100_0.432|9_98_100_2.064|9_99_100_0.744|9_100_100_0.696|9_101_100_1.776|9_102_100_0.12|9_103_100_0.168|9_104_100_0.96|9_105_100_0.96|9_106_100_2.04|9_107_100_3.984|9_108_100_1.608|9_109_100_3.528|9_110_100_0.456|9_111_100_0.696|9_112_100_1.632|9_113_100_2.232\".split(\"|\")\n    let GhostSFX = \"9_1_100_4.754|9_2_100_4.336|9_3_100_5.172|9_4_100_4.806\".split(\"|\")\n    let FireSFX = \"9_6_100_1.536|9_15_100_1.992|9_53_100_5.256|9_106_100_2.04\".split(\"|\")\n    let ExplosionSFX = \"9_77_100_0.36|9_101_100_1.776|9_109_100_3.528\".split(\"|\")\n    let SplashSFX = \"9_33_100_2.352|9_34_100_1.8\".split(\"|\")\n    let SparkSFX = \"9_5_100_4.754|9_51_100_0.456|9_85_100_1.152|9_86_100_1.68|9_111_100_0.696|9_112_100_1.632\".split(\"|\")\n    let SlashSFX = \"9_10_100_0.936|9_25_100_1.44|9_28_100_0.432|9_32_100_0.384|9_50_100_0.648|9_59_100_0.984|9_63_100_0.288|9_64_100_0.192|9_65_100_0.168|9_66_100_0.288|9_67_100_0.288|9_68_100_0.312|9_69_100_0.72|9_75_100_1.248|9_76_100_0.48|9_77_100_0.36|9_78_100_0.216|9_89_100_0.36\".split(\"|\")\n    \n    // Music Strings - Super Mario Brothers\n    let SMBIntroMusic = \"1_1_75_2.808|1_2_75_3.912|1_3_75_7.81|1_4_75_4.992|1_5_75_3.918|1_6_75_12.382|1_7_75_3.204|1_8_75_6.648|1_9_75_6.168|1_10_75_7.464|1_11_75_9.36|1_12_75_9.038|1_13_75_10.605|1_14_75_3.492|1_15_75_9.613|1_16_75_3.48|1_17_75_5.58|1_18_75_5.041|1_19_75_6.336|1_20_75_5.424|1_21_75_7.2|1_22_75_5.424|1_23_75_3.317|1_24_75_7.262|1_25_75_5.59|1_26_75_5.52|1_27_75_10.776|1_28_75_4.944|1_29_75_5.496|1_30_75_4.032|1_31_75_6.264|1_32_75_3.918|1_33_75_4.44|1_34_75_10.152|1_35_75_8.097|1_36_75_7.706|1_37_75_3.317|1_38_75_6.87|1_39_75_4.466|1_40_75_5.877|1_41_75_3.432|1_42_75_7.392|1_43_75_6.768|1_44_75_2.616|1_45_75_6.269|1_46_75_1.188|1_47_75_2.088|1_48_75_2.124|1_49_75_8.228|1_50_75_15.647|1_51_75_9.064|1_52_75_10.152|1_53_75_13.008|1_54_75_14.16|1_55_75_14.236|1_56_75_15.792|1_57_75_7.392|1_58_75_4.368|1_59_75_9.384|1_60_75_7.653|1_61_75_8.76|1_62_75_8.952|1_63_75_12.024|1_64_75_4.284|1_65_75_6.048|1_66_75_9.072|1_67_75_4.68|1_68_75_6.138|1_69_75_5.208|1_70_75_9.576|1_71_75_8.045|1_72_75_8.045|1_73_75_5.407|1_74_75_3.186\".split(\"|\")\n    let SMBTutorialMusic = \"2_1_65_36|2_2_65_40|2_3_65_41|2_4_65_46|2_5_65_50|2_6_65_51|2_7_65_59|2_8_65_63|2_9_65_64|2_10_65_65|2_11_65_66|2_12_65_67|2_13_65_68|2_14_65_69|2_15_65_76|2_16_65_80|2_17_65_84|2_18_65_90|2_19_65_92|2_20_65_100|2_21_65_103|2_22_65_105|2_23_65_112|2_24_65_113|2_25_65_123|2_26_65_138|2_27_65_142|2_28_65_144|2_29_65_156|2_30_65_158|2_31_65_120|2_32_65_120|2_33_65_120|2_34_65_120|2_35_65_120|2_36_65_120\".split(\"|\")\n    let SMBAwaitingMusic = \"3_1_100_64|3_2_100_211|3_3_100_185|3_4_100_185|3_5_100_182|3_6_100_114|3_7_100_181|3_8_100_103|3_9_100_303|3_10_100_21|3_11_100_235|3_12_100_121|3_13_100_203|3_14_100_119|3_15_100_206|3_16_100_146|3_17_100_237|3_18_100_210|3_19_100_160\".split(\"|\")\n    let SMBLevelMusic = \"4_1_100_128|4_3_100_142|4_5_100_111|4_6_100_141|4_9_100_126|4_11_100_132|4_15_100_119|4_16_100_146|4_18_100_120|4_20_100_143|4_22_100_142|4_23_100_112|4_24_100_138|4_25_100_139|4_26_100_111|4_27_100_116|4_28_100_129|4_31_100_98|4_32_100_146|4_33_100_177|4_34_100_82|4_36_100_160|4_38_100_180|4_39_100_211|4_41_100_134|4_42_100_183|4_43_100_124|4_44_100_261|4_45_100_91|4_46_100_138|4_49_100_207|4_50_100_41|4_51_100_180|4_52_100_202|4_53_100_194|4_56_100_209|4_57_100_195|4_58_100_180|4_60_100_198|4_61_100_180|4_63_100_78|4_66_100_139|4_67_100_224|4_68_100_180|4_73_100_180|4_76_100_180|4_77_100_196|4_78_100_113|4_82_100_180|4_83_100_123|4_84_100_180|4_86_100_126|4_93_100_121|4_97_100_59|4_98_100_180|4_99_100_180|4_100_100_118|4_101_100_156|4_102_100_180|4_103_100_70|4_104_100_216|4_105_100_140|4_106_100_180|4_107_100_147|4_108_100_147|4_109_100_180|4_110_100_158|4_111_100_180|4_112_100_80|4_113_100_152|4_114_100_127|4_116_100_122|4_118_100_106|4_123_100_143|4_124_100_36|4_125_100_164|4_127_100_282|4_128_100_311|4_129_100_123|4_130_100_187|4_131_100_62|4_132_100_180|4_133_100_130|4_134_100_112|4_135_100_105|4_139_100_126|4_141_100_176|4_142_100_135|4_143_100_126|4_144_100_144|4_145_100_140|4_146_100_133|4_149_100_167|4_150_100_120|4_151_100_180|4_155_100_226|4_157_100_164|4_158_100_144|4_159_100_104|4_161_100_180|4_162_100_87|4_163_100_126|4_164_100_118|4_165_100_194|4_166_100_135|4_167_100_50|4_168_100_109|4_169_100_180|4_170_100_133|4_171_100_180|4_172_100_91|4_173_100_138|4_176_100_120|4_177_100_81|4_178_100_150|4_179_100_153|4_180_100_104|4_181_100_112\".split(\"|\")\n    let SMBWonMusic = \"5_1_100_4|5_2_100_17|5_3_100_29|5_4_100_172|5_5_100_13|5_6_100_248|5_7_100_11|5_8_100_445|5_9_100_241|5_10_100_244|5_11_100_20|5_12_100_7|5_13_100_28|5_14_100_74|5_15_100_15|5_16_100_74|5_17_100_17|5_18_100_17|5_19_100_15|5_20_100_38|5_21_100_42|5_22_100_67|5_23_100_8|5_24_100_8|5_25_100_13|5_26_100_17|5_27_100_5|5_28_100_122|5_29_100_226|5_30_100_79\".split(\"|\")\n    let SMBLostMusic = \"6_1_100_87|6_2_100_31|6_3_100_196|6_4_100_65|6_5_100_4|6_6_100_23|6_7_100_65|6_8_100_62|6_9_100_78|6_10_100_6|6_11_100_162\".split(\"|\")\n    \n    // Player Strings - Mario\n    let MarioSoundString = \"A_21_1_100_1.5|A_21_2_100_1|I_21_3_100_3.3|A_21_4_100_1.9|A_21_5_100_2.1|I_21_6_100_1.8|I_21_7_100_1.8|R_21_8_100_0.6|R_21_9_100_1.3|R_21_10_100_1.1|R_21_11_100_0.6|R_21_12_100_0.8|R_21_13_100_1.6|R_21_14_100_1.3|R_21_15_100_1.2|R_21_16_100_1.1|R_21_17_100_1.3|R_21_18_100_1|Y_21_19_100_0.2|Y_21_20_100_0.2|Y_21_21_100_0.3|Y_21_22_100_0.5|Y_21_23_100_0.6|Y_21_24_100_0.6|Y_21_25_100_0.6|Y_21_26_100_0.6|Y_21_27_100_0.6|Y_21_28_100_0.6|Y_21_29_100_0.7|Y_21_30_100_0.7|Y_21_31_100_0.7|Y_21_32_100_0.7|Y_21_33_100_0.7|Y_21_34_100_0.8|Y_21_35_100_0.8|Y_21_36_100_0.8|Y_21_37_100_0.8|Y_21_38_100_0.8|Y_21_39_100_0.8|Y_21_40_100_0.9|Y_21_41_100_0.9|Y_21_42_100_0.9|Y_21_43_100_0.9|Y_21_44_100_0.9|Y_21_45_100_0.9|Y_21_46_100_0.9|Y_21_47_100_1|Y_21_48_100_1|Y_21_49_100_1|Y_21_50_100_1|Y_21_51_100_1.1|Y_21_52_100_1.1|Y_21_53_100_1.1|Y_21_54_100_1.2|Y_21_55_100_1.2|Y_21_56_100_1.2|Y_21_57_100_1.2|Y_21_58_100_1.3|Y_21_59_100_1.3|Y_21_60_100_1.3|Y_21_61_100_1.4|Y_21_62_100_1.4|S_21_63_100_1|S_21_64_100_1.6|S_21_65_100_1.7|S_21_66_100_1.7|S_21_67_100_1.9|S_21_68_100_2.1|S_21_69_100_2.2|S_21_70_100_2.4|S_21_71_100_2.4|S_21_72_100_2.5|W_21_73_100_1.8|W_21_74_100_2|W_21_75_100_2.2|W_21_76_100_2.6|W_21_77_100_2.9|O_21_78_100_0.6|O_21_79_100_0.4|O_21_80_100_0.4|O_21_81_100_1.1|O_21_82_100_1.5|O_21_83_100_0.8|O_21_84_100_0.7|O_21_85_100_0.8|O_21_86_100_0.9|O_21_87_100_1.3|O_21_88_100_0.5|O_21_89_100_1|O_21_90_100_1|O_21_91_100_0.4|O_21_92_100_0.5|O_21_93_100_0.9|O_21_94_100_0.4|O_21_95_100_0.4|N_21_96_100_1|N_21_97_100_1.1|N_21_98_100_1|N_21_99_100_0.6|N_21_100_100_0.9|N_21_101_100_1.4|N_21_102_100_1.7|N_21_103_100_1.3|N_21_104_100_0.6|N_21_105_100_1.4|N_21_106_100_0.8|N_21_107_100_1.1|N_21_108_100_1.1|N_21_109_100_0.8|N_21_110_100_1.7|N_21_111_100_2.4|I_21_112_100_0.8|I_21_113_100_0.9|F_21_114_100_1.1|F_21_115_100_2.5|F_21_116_100_2.5|F_21_117_100_1.4|L_21_118_100_3.4|L_21_119_100_3.5|L_21_120_100_4.4|L_21_121_100_1.5|H_21_122_100_44.4\"\n\n    // BLOCK - Set the Player's Sounds\n    //% blockId=nl_player_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% weight=101\n    //% block=\"Set player to $player\"\n    export function setSounds(player: string): void {\n        let theSound = \"\"\n        let thisLetter = \"\"\n        let series = \"\"\n        let soundStrings: string[] = []\n        if (player == \"Mario\") {\n            soundStrings = MarioSoundString.split(\"|\")\n            series = \"SMB\"\n        }\n        if (series == \"SMB\") {\n            PlayerIntroMusic = SMBIntroMusic\n            PlayerTutorialMusic = SMBTutorialMusic\n            PlayerAwaitingMusic = SMBAwaitingMusic\n            PlayerLevelMusic = SMBLevelMusic\n            PlayerWonMusic = SMBWonMusic\n            PlayerLostMusic = SMBLostMusic\n        }\n        for (let sString of soundStrings) {\n            thisLetter = sString.charAt(0)\n            theSound = sString.substr(2, sString.length - 2)\n            if (thisLetter == \"A\") {\n                PlayerName.push(theSound)\n            } else if (thisLetter == \"R\") {\n                PlayerReady.push(theSound)\n            } else if (thisLetter == \"Y\") {\n                PlayerYay.push(theSound)\n            } else if (thisLetter == \"I\") {\n                PlayerIntro.push(theSound)\n            } else if (thisLetter == \"N\") {\n                PlayerNay.push(theSound)\n            } else if (thisLetter == \"O\") {\n                PlayerOuch.push(theSound)\n            } else if (thisLetter == \"S\") {\n                PlayerSuccess.push(theSound)\n            } else if (thisLetter == \"F\") {\n                PlayerFailure.push(theSound)\n            } else if (thisLetter == \"W\") {\n                PlayerWon.push(theSound)\n            } else if (thisLetter == \"L\") {\n                PlayerLost.push(theSound)\n            } else if (thisLetter == \"H\") {\n                PlayerHurry.push(theSound)\n            }\n        }\n    }    \n    \n    // Internal Function - Take a Sound from a Playlist After Filling it from a Soundbank if it's Empty\n    function takeReplenish(Playlist: any[], Soundbank: any[]) {\n        let returnSound = \"\"\n        returnSound = \"\"\n        if (Playlist.length == 0) {\n            for (let index = 0; index <= Soundbank.length - 1; index++) {\n                if (index == 0) {\n                    Playlist.push(Soundbank[index])\n                } else if (index >= 1) {\n                    Playlist.insertAt(randint(0, index), Soundbank[index])\n                }\n            }\n        }\n        returnSound = Playlist.shift()\n        return returnSound\n    }\n\n    // BLOCK - Fetch a Sound of a Type from a Category\n    //% blockId=nl_get_soundstring\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% weight=101\n    //% block=\"Get $Category sound $Type\"\n    export function getSoundString(Category: string, Type: string): string {\n        let returnString = \"\"\n        if (Category == \"Voice\") {\n            returnString = VoiceTracks[parseFloat(Type)]\n        } else if (Category == \"Player\") {\n            if (Type == \"Name\") {\n                returnString = takeReplenish(PlaylistName, PlayerName)\n            } else if (Type == \"Intro\") {\n                returnString = takeReplenish(PlaylistIntro, PlayerIntro)\n            } else if (Type == \"Ready\") {\n                returnString = takeReplenish(PlaylistReady, PlayerReady)\n            } else if (Type == \"Yay\") {\n                returnString = takeReplenish(PlaylistYay, PlayerYay)\n            } else if (Type == \"Success\") {\n                returnString = takeReplenish(PlaylistSuccess, PlayerSuccess)\n            } else if (Type == \"Nay\") {\n                returnString = takeReplenish(PlaylistNay, PlayerNay)\n            } else if (Type == \"Failure\") {\n                returnString = takeReplenish(PlaylistFailure, PlayerFailure)\n            } else if (Type == \"Won\") {\n                returnString = takeReplenish(PlaylistWon, PlayerWon)\n            } else if (Type == \"Lost\") {\n                returnString = takeReplenish(PlaylistLost, PlayerLost)\n            } else if (Type == \"Hurry\") {\n                returnString = takeReplenish(PlaylistHurry, PlayerHurry)\n            }\n        } else if (Category == \"SFX\") {\n            if (Type == \"Correct\") {\n                returnString = takeReplenish(PlaylistCorrect, CorrectSFX)\n            } else if (Type == \"Incorrect\") {\n                returnString = takeReplenish(PlaylistIncorrect, IncorrectSFX)\n            } else if (Type == \"Ghost\") {\n                returnString = takeReplenish(PlaylistGhost, GhostSFX)\n            } else if (Type == \"Fire\") {\n                returnString = takeReplenish(PlaylistFire, FireSFX)\n            } else if (Type == \"Explosion\") {\n                returnString = takeReplenish(PlaylistExplosion, ExplosionSFX)\n            } else if (Type == \"Splash\") {\n                returnString = takeReplenish(PlaylistSplash, SplashSFX)\n            } else if (Type == \"Spark\") {\n                returnString = takeReplenish(PlaylistSpark, SparkSFX)\n            } else if (Type == \"Slash\") {\n                returnString = takeReplenish(PlaylistSlash, SlashSFX)\n            }\n        } else if (Category == \"Music\") {\n            if (Type == \"Intro\") {\n                let PlaylistIntroMusic: number[] = []\n                returnString = takeReplenish(PlaylistIntroMusic, PlayerIntroMusic)\n            } else if (Type == \"Tutorial\") {\n                let PlaylistTutorialMusic: number[] = []\n                returnString = takeReplenish(PlaylistTutorialMusic, PlayerTutorialMusic)\n            } else if (Type == \"Awaiting\") {\n                returnString = takeReplenish(PlaylistAwaitingMusic, PlayerAwaitingMusic)\n            } else if (Type == \"Level\") {\n                let PlaylistLevelMusic: number[] = []\n                returnString = takeReplenish(PlaylistLevelMusic, PlayerLevelMusic)\n            } else if (Type == \"Won\") {\n                let PlaylistWonMusic: number[] = []\n                returnString = takeReplenish(PlaylistWonMusic, PlayerWonMusic)\n            } else if (Type == \"Lost\") {\n                let PlaylistLostMusic: number[] = []\n                returnString = takeReplenish(PlaylistLostMusic, PlayerLostMusic)\n            }\n        }\n        return returnString\n    }\n\n\n    ///////////////////////////////////////////////////////MP3\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(20) // Was 100; problematic at 10\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n    function sendMP3volume(sPin: SerialPin): void {\n        let theVolume = 5\n        if (sPin == mp3Apin) {\n            theVolume = Math.round(potRead() * mp3Avolume)\n        } else if (sPin == mp3Bpin) {\n            theVolume = Math.round(potRead() * mp3Bvolume)\n        } else if (sPin == mp3Cpin) {\n            theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    function sendMP3volumeFast(sPin: SerialPin): void {\n        let theVolume = 5\n        if (sPin == mp3Apin) {\n            theVolume = Math.round(potRead() * mp3Avolume)\n        } else if (sPin == mp3Bpin) {\n            theVolume = Math.round(potRead() * mp3Bvolume)\n        } else if (sPin == mp3Cpin) {\n            theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        }\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    //% blockId=\"nl_playfilefolder\" \n    //% block=\"Play folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3fileFolder(folderNum: string, fileNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n    //% blockId=\"playFileNl\" \n    //% block=\"Play length of file:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n\n    export function playFile(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P16\n        stringParts = soundString.split(\"_\")\n        let theFile = stringParts[0]\n        let theVolume = stringParts[1]\n        let theLength = stringParts[2]\n        //sendMP3file(theFile, theVolume, sPin)\n        return parseFloat(theLength) * 1000\n    }\n\n\n\n    //% blockId=\"playFileNl2\" \n    //% block=\"Play2 length of file:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n\n    export function playFile2(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P16\n        stringParts = soundString.split(\"_\")\n        let theFile = stringParts[0]\n        let theVolume = stringParts[1]\n        let theLength = stringParts[2]\n        sendMP3file2(theFile, theVolume, sPin)\n        return parseFloat(theLength) * 1000\n    }\n    function sendMP3file2(fileNum: string, volumeNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 15\n        para1 = parseInt(fileNum)\n        para2 = parseInt(volumeNum)\n        para1 = parseInt(\"1\")\n        para2 = parseInt(\"1\")\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=nl_backgroundVolume\n    //% block=\"Set background volume to:%relativeVolume\"\n    //% subcategory=\"MP3\" group=\"MP3\"\n    export function sendBackgroundVolume(relativeVolume: number): void {\n        relativeCvolume = relativeVolume/100\n\n        let sPin = mp3Cpin\n        let theVolume = Math.round(potRead() * mp3Cvolume * relativeVolume / 100)\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n  \n    //% blockId=notlegos_pot_read\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Trimpot analog value\"\n    export function potRead() {\n        if(isPot){\n            return Math.round(pins.map(pins.analogReadPin(potPin), 0, 1023, 0, 30))\n        } else{\n            return 5\n        }\n    }\n\n    //% blockId=notlegos_relCread\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return background volume\"\n    export function getBackgroundVolume() {\n\n            return relativeCvolume\n\n    }\n    //% blockId=notlegos_mp3Avolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3A volume\"\n    export function getMP3AVolume() {\n        return potRead() * mp3Avolume\n    }\n    //% blockId=notlegos_mp3Bvolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3B volume\"\n    export function getMP3BVolume() {\n        return potRead() * mp3Bvolume\n    }\n      //% blockId=notlegos_mp3Cvolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Return MP3C volume\"\n    export function getMP3CVolume() {\n        return potRead() * mp3Cvolume * relativeCvolume\n    }\n\n    //% blockId=notlegos_pot_set\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Connect Volume Control Pot at pin %aPin\"\n    //% aPin.fieldEditor=\"gridpicker\"\n    export function potSet(aPin: AnalogPin): void{\n        potPin = aPin\n        isPot = true\n    }\n\n//////////////////////////////////////////////////////////\n\n    //% blockId=nl_mp3_init\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Ready MP3bit for %type at %sPin\"\n    //% dPin.fieldEditor=\"gridpicker\"\n    export function mp3setPorts(type:mp3type, sPin: SerialPin): void {\n        if (type == mp3type.music){\n            mp3musicPin = sPin\n            mp3music = true\n            mp3musicVol = 60\n        } else if (type == mp3type.player){\n            mp3playerPin = sPin\n            mp3player = true\n            mp3playerVol = 100\n        } else if (type == mp3type.sfxvoice){\n            mp3sfxPin = sPin\n            mp3sfx = true\n            mp3sfxVol = 80\n        }\n        sendMP3volumeQuick(type)\n    }\n\n    function sendMP3volumeQuick(bit:mp3type): void {\n        if (bit == mp3type.music){\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        }\n\n        let theVolume = 10\n        // if (sPin == mp3Apin) {\n        //     theVolume = Math.round(potRead() * mp3Avolume)\n        // } else if (sPin == mp3Bpin) {\n        //     theVolume = Math.round(potRead() * mp3Bvolume)\n        // } else if (sPin == mp3Cpin) {\n        //     theVolume = Math.round(potRead() * mp3Cvolume * relativeCvolume)\n        // }\n        CMD = 6\n        para1 = 0\n        para2 = theVolume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=\"nl_testfast\" \n    //% block=\"Execute track %track on %bit\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3testFast(track: number, bit:mp3type): void {\n        if (bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        }\n        CMD = 3\n        dataArr[3] = CMD\n        dataArr[5] = 0\n        dataArr[6] = track\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n\n    \n    //% blockId=nl_mp3_music\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %genre music\"\n    export function mp3musicPlay(genre:musicGenre): void{\n        serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 3\n        para1 = parseInt(\"0\")\n        para2 = parseInt(\"1\")\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n\n\n    \n\n    //% blockId=nl_mp3_say\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %saying as player\"\n    export function mp3sayPlay(saying: playerSaying): void {\n\n    }\n\n\n    //% blockId=nl_mp3_voice\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %voice as voice\"\n    export function mp3voicePlay(voice: voiceSaying): void {\n\n    }\n\n    //% blockId=nl_mp3_magician\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Magician says on the %side difficulty %difficulty\"\n    export function mp3magician(side:magicianSaysSide, difficulty:magicianDifficulty): void {\n\n    }\n\n    //% blockId=nl_mp3_sfx\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %sfx sound effect\"\n    export function mp3sfxPlay(sfx: sfxType): void {\n\n    }\n\n\n    //% blockId=nl_volume_refresh\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume\"\n    export function updateVolume(): void {\n        if (mp3bits > 0) {\n            sendMP3volumeFast(mp3Apin)\n        }\n        if (mp3bits > 1) {\n            sendMP3volumeFast(mp3Bpin)\n        }\n        if (mp3bits > 2) {\n            sendMP3volumeFast(mp3Cpin)\n        }\n    }\n\n\n    //% blockId=\"nl_playsForBackground\" \n    //% block=\"Play in background length:$soundString\"\n    //% soundString.defl=\"1_1_25_100\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function playsForBackground(soundString: string): number {\n        let stringParts: string[] = []\n        let sPin = SerialPin.P0\n        stringParts = soundString.split(\"_\")\n        let theFolder = stringParts[0]\n        let theFile = stringParts[1]\n        let theLength = stringParts[3]\n        mp3Cvolume = pins.map(parseInt(stringParts[2]), 0, 100, 0, 1)\n        sPin = mp3Cpin\n        sendMP3volume(sPin)\n        //sendMP3play(theFolder, theFile, sPin)\n        return parseFloat(theLength) * 1000 + 20\n    }\n\n\n    //% blockId=\"nl_backgroundStop\" \n    //% block=\"Stop background sound\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function stopBackgroundSound(): void {\n        serial.redirect(mp3Cpin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        CMD = 0x16\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    // Nezha - Functions for Pins and Ports\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_Serial(Rjpin: DigitalRJPin): any {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = SerialPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = SerialPin.P2\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.P12:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = SerialPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = SerialPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n\n\n    export enum mp3type {\n        music,\n        player,\n        sfxvoice\n    }\n\n    export enum musicGenre {\n        intro,\n        tutorial,\n        awaiting,\n        level,\n        won,\n        lost\n    }\n\n    export enum playerSaying {\n        ready,\n        yay,\n        intro,\n        nay,\n        ouch,\n        success,\n        failure,\n        won,\n        lost,\n        hurry\n    }\n\n    export enum sfxType {\n        correct,\n        incorrect,\n        ghost,\n        fire,\n        explosion,\n        splash,\n        spark,\n        slash\n    }\n\n    export enum voiceSaying {\n        name,\n        begin,\n        retry,\n        next,\n        complete,\n        gameover,\n        welcome,\n        intro,\n        howto1,\n        howto2,\n        howto3,\n        howto4,\n        howto5,\n        howto6,\n        howto7,\n        howto8,\n        howto9\n    }\n\n    export enum magicianSaysSide {\n        left,\n        right\n    }\n\n    export enum magicianDifficulty {\n        easy,\n        medium,\n        hard\n    }\n\n    export enum spotName {\n        A,\n        B,\n        C,\n        D,\n        E,\n        F,\n        G,\n        H,\n        I\n    }\n\n    export enum playerChar {\n        mario,\n        luigi,\n        peach,\n        daisy,\n        toad,\n        wario\n    }\n\n\n\n\n\n    // Enum - To Support MP3\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n\n    // Enum - Nezha and Pins\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum mbPin {\n        //% block=\"P0\"\n        P0,\n        //% block=\"P1 (Analog J1)\"\n        P1,\n        //% block=\"P2 (Analog J2)\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8 (J1)\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12 (J2)\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14 (J3)\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16 (J4)\"\n        P16,\n    }\n}\n","pxt.json":"{\n    \"name\": \"NotLegosExt\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"displaySendBuffer.asm\",\n        \"display.ts\",\n        \"planetxbasic.ts\",\n        \"notlegos.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"7.0.42\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n","test.ts":""}}],"shares":[],"lastSaveTime":1726951992916}